// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AccessIndexorABI is the input ABI used to generate the binding from.
const AccessIndexorABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"others\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indexType\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setEntityRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"}]"

// AccessIndexorFuncSigs maps the 4-byte function signature to its string representation.
var AccessIndexorFuncSigs = map[string]string{
	"18689733": "ACCESS_CONFIRMED()",
	"8232f3f1": "ACCESS_NONE()",
	"479a0c51": "ACCESS_TENTATIVE()",
	"091600e6": "CATEGORY_CONTENT_OBJECT()",
	"68a0469a": "CATEGORY_CONTENT_TYPE()",
	"6373a411": "CATEGORY_CONTRACT()",
	"12915a30": "CATEGORY_GROUP()",
	"16aed232": "CATEGORY_LIBRARY()",
	"d1aeb651": "TYPE_ACCESS()",
	"5d97b6c2": "TYPE_EDIT()",
	"96eba03d": "TYPE_SEE()",
	"30e66949": "accessGroups()",
	"15c0bac1": "checkAccessGroupRights(address,uint8)",
	"5faecb76": "checkContentObjectRights(address,uint8)",
	"fe538c5a": "checkContentTypeRights(address,uint8)",
	"a864dfa5": "checkContractRights(address,uint8)",
	"a00b38c4": "checkDirectRights(uint8,address,uint8)",
	"6813b6d1": "checkLibraryRights(address,uint8)",
	"7fb52f1a": "checkRights(uint8,address,uint8)",
	"d30f8cd0": "cleanUpAccessGroups()",
	"2fa5c842": "cleanUpAll()",
	"048bd529": "cleanUpContentObjects()",
	"85e0a200": "cleanUpContentTypes()",
	"92297d7b": "cleanUpLibraries()",
	"a980892d": "contentObjects()",
	"af570c04": "contentSpace()",
	"9f46133e": "contentTypes()",
	"7709bc78": "contractExists(address)",
	"6c0f79b6": "contracts()",
	"02d05d3f": "creator()",
	"2d474cbd": "getAccessGroup(uint256)",
	"304f4a7b": "getAccessGroupRights(address)",
	"0dc10d3f": "getAccessGroupsLength()",
	"cf8a7503": "getContentObject(uint256)",
	"69881c0c": "getContentObjectRights(address)",
	"ebe9314e": "getContentObjectsLength()",
	"aa3f6952": "getContentType(uint256)",
	"a4081d62": "getContentTypeRights(address)",
	"5c1d3059": "getContentTypesLength()",
	"6ebc8c86": "getContract(uint256)",
	"08d865d7": "getContractRights(address)",
	"fccc134f": "getContractsLength()",
	"cb86806d": "getLibrariesLength()",
	"d15d62a7": "getLibrary(uint256)",
	"fb52222c": "getLibraryRights(address)",
	"42e7ba7b": "hasManagerAccess(address)",
	"41c0e1b5": "kill()",
	"c4b1978d": "libraries()",
	"51a7fc87": "others()",
	"8da5cb5b": "owner()",
	"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
	"b8ff1dba": "setAccessRights()",
	"3def5140": "setContentObjectRights(address,uint8,uint8)",
	"055af48f": "setContentSpace(address)",
	"8635adb5": "setContentTypeRights(address,uint8,uint8)",
	"224dcba0": "setContractRights(address,uint8,uint8)",
	"5d7cf830": "setEntityRights(uint8,address,uint8,uint8)",
	"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// AccessIndexorBin is the compiled bytecode used for deploying new contracts.
var AccessIndexorBin = ""

// DeployAccessIndexor deploys a new Ethereum contract, binding an instance of AccessIndexor to it.
func DeployAccessIndexor(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccessIndexor, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessIndexorABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AccessIndexorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessIndexor{AccessIndexorCaller: AccessIndexorCaller{contract: contract}, AccessIndexorTransactor: AccessIndexorTransactor{contract: contract}, AccessIndexorFilterer: AccessIndexorFilterer{contract: contract}}, nil
}

// AccessIndexor is an auto generated Go binding around an Ethereum contract.
type AccessIndexor struct {
	AccessIndexorCaller     // Read-only binding to the contract
	AccessIndexorTransactor // Write-only binding to the contract
	AccessIndexorFilterer   // Log filterer for contract events
}

// AccessIndexorCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessIndexorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessIndexorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessIndexorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessIndexorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessIndexorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessIndexorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessIndexorSession struct {
	Contract     *AccessIndexor    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccessIndexorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessIndexorCallerSession struct {
	Contract *AccessIndexorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// AccessIndexorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessIndexorTransactorSession struct {
	Contract     *AccessIndexorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// AccessIndexorRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessIndexorRaw struct {
	Contract *AccessIndexor // Generic contract binding to access the raw methods on
}

// AccessIndexorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessIndexorCallerRaw struct {
	Contract *AccessIndexorCaller // Generic read-only contract binding to access the raw methods on
}

// AccessIndexorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessIndexorTransactorRaw struct {
	Contract *AccessIndexorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessIndexor creates a new instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexor(address common.Address, backend bind.ContractBackend) (*AccessIndexor, error) {
	contract, err := bindAccessIndexor(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessIndexor{AccessIndexorCaller: AccessIndexorCaller{contract: contract}, AccessIndexorTransactor: AccessIndexorTransactor{contract: contract}, AccessIndexorFilterer: AccessIndexorFilterer{contract: contract}}, nil
}

// NewAccessIndexorCaller creates a new read-only instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorCaller(address common.Address, caller bind.ContractCaller) (*AccessIndexorCaller, error) {
	contract, err := bindAccessIndexor(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorCaller{contract: contract}, nil
}

// NewAccessIndexorTransactor creates a new write-only instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessIndexorTransactor, error) {
	contract, err := bindAccessIndexor(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorTransactor{contract: contract}, nil
}

// NewAccessIndexorFilterer creates a new log filterer instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessIndexorFilterer, error) {
	contract, err := bindAccessIndexor(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorFilterer{contract: contract}, nil
}

// bindAccessIndexor binds a generic wrapper to an already deployed contract.
func bindAccessIndexor(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessIndexorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessIndexor *AccessIndexorRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AccessIndexor.Contract.AccessIndexorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessIndexor *AccessIndexorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.Contract.AccessIndexorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessIndexor *AccessIndexorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessIndexor.Contract.AccessIndexorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessIndexor *AccessIndexorCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AccessIndexor.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessIndexor *AccessIndexorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessIndexor *AccessIndexorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessIndexor.Contract.contract.Transact(opts, method, params...)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "ACCESS_CONFIRMED")
	return *ret0, err
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) ACCESSCONFIRMED() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSCONFIRMED(&_AccessIndexor.CallOpts)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) ACCESSCONFIRMED() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSCONFIRMED(&_AccessIndexor.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "ACCESS_NONE")
	return *ret0, err
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) ACCESSNONE() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSNONE(&_AccessIndexor.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) ACCESSNONE() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSNONE(&_AccessIndexor.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "ACCESS_TENTATIVE")
	return *ret0, err
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) ACCESSTENTATIVE() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSTENTATIVE(&_AccessIndexor.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) ACCESSTENTATIVE() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSTENTATIVE(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_CONTENT_OBJECT")
	return *ret0, err
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTENTOBJECT(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTENTOBJECT(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_CONTENT_TYPE")
	return *ret0, err
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTENTTYPE(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTENTTYPE(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_CONTRACT")
	return *ret0, err
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYCONTRACT() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTRACT(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYCONTRACT() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTRACT(&_AccessIndexor.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_GROUP")
	return *ret0, err
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYGROUP() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYGROUP(&_AccessIndexor.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYGROUP() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYGROUP(&_AccessIndexor.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_LIBRARY")
	return *ret0, err
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYLIBRARY() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYLIBRARY(&_AccessIndexor.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYLIBRARY() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYLIBRARY(&_AccessIndexor.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "TYPE_ACCESS")
	return *ret0, err
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) TYPEACCESS() (uint8, error) {
	return _AccessIndexor.Contract.TYPEACCESS(&_AccessIndexor.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) TYPEACCESS() (uint8, error) {
	return _AccessIndexor.Contract.TYPEACCESS(&_AccessIndexor.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "TYPE_EDIT")
	return *ret0, err
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) TYPEEDIT() (uint8, error) {
	return _AccessIndexor.Contract.TYPEEDIT(&_AccessIndexor.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) TYPEEDIT() (uint8, error) {
	return _AccessIndexor.Contract.TYPEEDIT(&_AccessIndexor.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "TYPE_SEE")
	return *ret0, err
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) TYPESEE() (uint8, error) {
	return _AccessIndexor.Contract.TYPESEE(&_AccessIndexor.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) TYPESEE() (uint8, error) {
	return _AccessIndexor.Contract.TYPESEE(&_AccessIndexor.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "accessGroups")
	return *ret, err
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.AccessGroups(&_AccessIndexor.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.AccessGroups(&_AccessIndexor.CallOpts)
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckAccessGroupRights(opts *bind.CallOpts, group common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkAccessGroupRights", group, access_type)
	return *ret0, err
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckAccessGroupRights(group common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckAccessGroupRights(&_AccessIndexor.CallOpts, group, access_type)
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckAccessGroupRights(group common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckAccessGroupRights(&_AccessIndexor.CallOpts, group, access_type)
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckContentObjectRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkContentObjectRights", obj, access_type)
	return *ret0, err
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckContentObjectRights(obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckContentObjectRights(&_AccessIndexor.CallOpts, obj, access_type)
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckContentObjectRights(obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckContentObjectRights(&_AccessIndexor.CallOpts, obj, access_type)
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckContentTypeRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkContentTypeRights", obj, access_type)
	return *ret0, err
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckContentTypeRights(obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckContentTypeRights(&_AccessIndexor.CallOpts, obj, access_type)
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckContentTypeRights(obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckContentTypeRights(&_AccessIndexor.CallOpts, obj, access_type)
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckContractRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkContractRights", obj, access_type)
	return *ret0, err
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckContractRights(obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckContractRights(&_AccessIndexor.CallOpts, obj, access_type)
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckContractRights(obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckContractRights(&_AccessIndexor.CallOpts, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkDirectRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckDirectRights(&_AccessIndexor.CallOpts, index_type, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckDirectRights(&_AccessIndexor.CallOpts, index_type, obj, access_type)
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckLibraryRights(opts *bind.CallOpts, lib common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkLibraryRights", lib, access_type)
	return *ret0, err
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckLibraryRights(lib common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckLibraryRights(&_AccessIndexor.CallOpts, lib, access_type)
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckLibraryRights(lib common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckLibraryRights(&_AccessIndexor.CallOpts, lib, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckRights(&_AccessIndexor.CallOpts, index_type, obj, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckRights(&_AccessIndexor.CallOpts, index_type, obj, access_type)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "contentObjects")
	return *ret, err
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.ContentObjects(&_AccessIndexor.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.ContentObjects(&_AccessIndexor.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_AccessIndexor *AccessIndexorSession) ContentSpace() (common.Address, error) {
	return _AccessIndexor.Contract.ContentSpace(&_AccessIndexor.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) ContentSpace() (common.Address, error) {
	return _AccessIndexor.Contract.ContentSpace(&_AccessIndexor.CallOpts)
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) ContentTypes(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "contentTypes")
	return *ret, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) ContentTypes() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.ContentTypes(&_AccessIndexor.CallOpts)
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) ContentTypes() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.ContentTypes(&_AccessIndexor.CallOpts)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "contractExists", addr)
	return *ret0, err
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) ContractExists(addr common.Address) (bool, error) {
	return _AccessIndexor.Contract.ContractExists(&_AccessIndexor.CallOpts, addr)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) ContractExists(addr common.Address) (bool, error) {
	return _AccessIndexor.Contract.ContractExists(&_AccessIndexor.CallOpts, addr)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "contracts")
	return *ret, err
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Contracts(&_AccessIndexor.CallOpts)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Contracts(&_AccessIndexor.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_AccessIndexor *AccessIndexorSession) Creator() (common.Address, error) {
	return _AccessIndexor.Contract.Creator(&_AccessIndexor.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) Creator() (common.Address, error) {
	return _AccessIndexor.Contract.Creator(&_AccessIndexor.CallOpts)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getAccessGroup", position)
	return *ret0, err
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetAccessGroup(&_AccessIndexor.CallOpts, position)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetAccessGroup(&_AccessIndexor.CallOpts, position)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getAccessGroupRights", group)
	return *ret0, err
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetAccessGroupRights(&_AccessIndexor.CallOpts, group)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetAccessGroupRights(&_AccessIndexor.CallOpts, group)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getAccessGroupsLength")
	return *ret0, err
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetAccessGroupsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetAccessGroupsLength(&_AccessIndexor.CallOpts)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetAccessGroupsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetAccessGroupsLength(&_AccessIndexor.CallOpts)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentObject", position)
	return *ret0, err
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContentObject(&_AccessIndexor.CallOpts, position)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContentObject(&_AccessIndexor.CallOpts, position)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentObjectRights", obj)
	return *ret0, err
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContentObjectRights(&_AccessIndexor.CallOpts, obj)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContentObjectRights(&_AccessIndexor.CallOpts, obj)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentObjectsLength")
	return *ret0, err
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetContentObjectsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContentObjectsLength(&_AccessIndexor.CallOpts)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentObjectsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContentObjectsLength(&_AccessIndexor.CallOpts)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentType", position)
	return *ret0, err
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetContentType(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContentType(&_AccessIndexor.CallOpts, position)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentType(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContentType(&_AccessIndexor.CallOpts, position)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentTypeRights", obj)
	return *ret0, err
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContentTypeRights(&_AccessIndexor.CallOpts, obj)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContentTypeRights(&_AccessIndexor.CallOpts, obj)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentTypesLength")
	return *ret0, err
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetContentTypesLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContentTypesLength(&_AccessIndexor.CallOpts)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentTypesLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContentTypesLength(&_AccessIndexor.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContract", position)
	return *ret0, err
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetContract(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContract(&_AccessIndexor.CallOpts, position)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetContract(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContract(&_AccessIndexor.CallOpts, position)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContractRights", obj)
	return *ret0, err
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetContractRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContractRights(&_AccessIndexor.CallOpts, obj)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetContractRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContractRights(&_AccessIndexor.CallOpts, obj)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContractsLength")
	return *ret0, err
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetContractsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContractsLength(&_AccessIndexor.CallOpts)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetContractsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContractsLength(&_AccessIndexor.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getLibrariesLength")
	return *ret0, err
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetLibrariesLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetLibrariesLength(&_AccessIndexor.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetLibrariesLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetLibrariesLength(&_AccessIndexor.CallOpts)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getLibrary", position)
	return *ret0, err
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetLibrary(&_AccessIndexor.CallOpts, position)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetLibrary(&_AccessIndexor.CallOpts, position)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getLibraryRights", lib)
	return *ret0, err
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetLibraryRights(&_AccessIndexor.CallOpts, lib)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetLibraryRights(&_AccessIndexor.CallOpts, lib)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) HasManagerAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "hasManagerAccess", candidate)
	return *ret0, err
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) HasManagerAccess(candidate common.Address) (bool, error) {
	return _AccessIndexor.Contract.HasManagerAccess(&_AccessIndexor.CallOpts, candidate)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) HasManagerAccess(candidate common.Address) (bool, error) {
	return _AccessIndexor.Contract.HasManagerAccess(&_AccessIndexor.CallOpts, candidate)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "libraries")
	return *ret, err
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Libraries(&_AccessIndexor.CallOpts)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Libraries(&_AccessIndexor.CallOpts)
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) Others(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "others")
	return *ret, err
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) Others() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Others(&_AccessIndexor.CallOpts)
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) Others() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Others(&_AccessIndexor.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AccessIndexor *AccessIndexorSession) Owner() (common.Address, error) {
	return _AccessIndexor.Contract.Owner(&_AccessIndexor.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) Owner() (common.Address, error) {
	return _AccessIndexor.Contract.Owner(&_AccessIndexor.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorSession) Version() ([32]byte, error) {
	return _AccessIndexor.Contract.Version(&_AccessIndexor.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorCallerSession) Version() ([32]byte, error) {
	return _AccessIndexor.Contract.Version(&_AccessIndexor.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorSession) VersionAPI() ([32]byte, error) {
	return _AccessIndexor.Contract.VersionAPI(&_AccessIndexor.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorCallerSession) VersionAPI() ([32]byte, error) {
	return _AccessIndexor.Contract.VersionAPI(&_AccessIndexor.CallOpts)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpAccessGroups(&_AccessIndexor.TransactOpts)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpAccessGroups(&_AccessIndexor.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpAll")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpAll() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpAll(&_AccessIndexor.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpAll() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpAll(&_AccessIndexor.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpContentObjects(&_AccessIndexor.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpContentObjects(&_AccessIndexor.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpContentTypes(&_AccessIndexor.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpContentTypes(&_AccessIndexor.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpLibraries")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpLibraries() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpLibraries(&_AccessIndexor.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpLibraries() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpLibraries(&_AccessIndexor.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_AccessIndexor *AccessIndexorTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_AccessIndexor *AccessIndexorSession) Kill() (*types.Transaction, error) {
	return _AccessIndexor.Contract.Kill(&_AccessIndexor.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_AccessIndexor *AccessIndexorTransactorSession) Kill() (*types.Transaction, error) {
	return _AccessIndexor.Contract.Kill(&_AccessIndexor.TransactOpts)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetAccessGroupRights(&_AccessIndexor.TransactOpts, group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetAccessGroupRights(&_AccessIndexor.TransactOpts, group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_AccessIndexor *AccessIndexorTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setAccessRights")
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_AccessIndexor *AccessIndexorSession) SetAccessRights() (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetAccessRights(&_AccessIndexor.TransactOpts)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetAccessRights() (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetAccessRights(&_AccessIndexor.TransactOpts)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentObjectRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentObjectRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_AccessIndexor *AccessIndexorSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentSpace(&_AccessIndexor.TransactOpts, content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentSpace(&_AccessIndexor.TransactOpts, content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentTypeRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentTypeRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContractRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContractRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetEntityRights(opts *bind.TransactOpts, indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setEntityRights", indexType, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetEntityRights(indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetEntityRights(&_AccessIndexor.TransactOpts, indexType, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetEntityRights(indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetEntityRights(&_AccessIndexor.TransactOpts, indexType, obj, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetLibraryRights(&_AccessIndexor.TransactOpts, lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetLibraryRights(&_AccessIndexor.TransactOpts, lib, access_type, access)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_AccessIndexor *AccessIndexorTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_AccessIndexor *AccessIndexorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.TransferCreatorship(&_AccessIndexor.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.TransferCreatorship(&_AccessIndexor.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AccessIndexor *AccessIndexorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AccessIndexor *AccessIndexorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.TransferOwnership(&_AccessIndexor.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.TransferOwnership(&_AccessIndexor.TransactOpts, newOwner)
}

// AccessIndexorRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the AccessIndexor contract.
type AccessIndexorRightsChangedIterator struct {
	Event *AccessIndexorRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessIndexorRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessIndexorRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessIndexorRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessIndexorRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessIndexorRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessIndexorRightsChanged represents a RightsChanged event raised by the AccessIndexor contract.
type AccessIndexorRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*AccessIndexorRightsChangedIterator, error) {

	logs, sub, err := _AccessIndexor.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &AccessIndexorRightsChangedIterator{contract: _AccessIndexor.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *AccessIndexorRightsChanged) (event.Subscription, error) {

	logs, sub, err := _AccessIndexor.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessIndexorRightsChanged)
				if err := _AccessIndexor.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) ParseRightsChanged(log types.Log) (*AccessIndexorRightsChanged, error) {
	event := new(AccessIndexorRightsChanged)
	if err := _AccessIndexor.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccessibleABI is the input ABI used to generate the binding from.
const AccessibleABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"}]"

// AccessibleFuncSigs maps the 4-byte function signature to its string representation.
var AccessibleFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"95a078e8": "hasAccess(address)",
	"6380501f": "indexCategory()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"aa024e8b": "setVisibility(uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"29adec14": "visibility()",
}

// AccessibleBin is the compiled bytecode used for deploying new contracts.
var AccessibleBin = "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006005556006805461ff001960ff1990911690921791909116905560028054600160a060020a031990811632179091556003805490911633179055610863806100b86000396000f3fe608060405260043610610110576000357c0100000000000000000000000000000000000000000000000000000000900480636d2e4b1b116100a7578063aa024e8b11610076578063aa024e8b146103b4578063af570c04146103e1578063ef1d7dc2146103f6578063f2fde38b1461040b57610110565b80636d2e4b1b146103245780638da5cb5b1461035757806395a078e81461036c57806397ac4fd21461039f57610110565b806341c0e1b5116100e357806341c0e1b5146102be57806354fd4d50146102d35780635f4fcae1146102fa5780636380501f1461030f57610110565b806302d05d3f14610112578063100508a2146101435780631bf7a9121461016e57806329adec14146102a9575b005b34801561011e57600080fd5b5061012761043e565b60408051600160a060020a039092168252519081900360200190f35b34801561014f57600080fd5b5061015861044d565b6040805160ff9092168252519081900360200190f35b6102956004803603604081101561018457600080fd5b81019060208101813564010000000081111561019f57600080fd5b8201836020820111156101b157600080fd5b803590602001918460208302840111640100000000831117156101d357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561022357600080fd5b82018360208201111561023557600080fd5b8035906020019184602083028401116401000000008311171561025757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610452945050505050565b604080519115158252519081900360200190f35b3480156102b557600080fd5b506101586104fb565b3480156102ca57600080fd5b50610110610504565b3480156102df57600080fd5b506102e8610529565b60408051918252519081900360200190f35b34801561030657600080fd5b506102e861052f565b34801561031b57600080fd5b50610158610535565b34801561033057600080fd5b506101106004803603602081101561034757600080fd5b5035600160a060020a0316610543565b34801561036357600080fd5b5061012761059e565b34801561037857600080fd5b506102956004803603602081101561038f57600080fd5b5035600160a060020a03166105ad565b3480156103ab57600080fd5b50610158610745565b3480156103c057600080fd5b50610110600480360360208110156103d757600080fd5b503560ff1661074a565b3480156103ed57600080fd5b506101276107c8565b34801561040257600080fd5b506101586107d7565b34801561041757600080fd5b506101106004803603602081101561042e57600080fd5b5035600160a060020a03166107dc565b600254600160a060020a031681565b600181565b600061045d336105ad565b151561046857600080fd5b604080516c01000000000000000000000000300260208083019190915242603480840182905284518085039091018152605484018086528151919093012090915260006074830181905260948301523360b48301526103e80260d482015290517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360f40190a150600192915050565b60065460ff1681565b600354600160a060020a0316331461051b57600080fd5b600354600160a060020a0316ff5b60055481565b60015481565b600654610100900460ff1681565b600254600160a060020a0316331461055a57600080fd5b600160a060020a038116151561056f57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600354600090600160a060020a03838116911614806105d45750600654600a60ff90911610155b156105e157506001610740565b600654600061010090910460ff16111561073c5760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b15801561066157600080fd5b505afa158015610675573d6000803e3d6000fd5b505050506040513d602081101561068b57600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561070757600080fd5b505afa15801561071b573d6000803e3d6000fd5b505050506040513d602081101561073157600080fd5b505191506107409050565b5060005b919050565b600a81565b600354600160a060020a0316331461076157600080fd5b6006805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b600454600160a060020a031681565b606481565b600354600160a060020a031633146107f357600080fd5b600160a060020a038116151561080857600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a7230582090e73d8829aa4a29094ebcf44ee1c17a2c5533f3d4bd6eaabd58b2c945cf0f910029"

// DeployAccessible deploys a new Ethereum contract, binding an instance of Accessible to it.
func DeployAccessible(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Accessible, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessibleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AccessibleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Accessible{AccessibleCaller: AccessibleCaller{contract: contract}, AccessibleTransactor: AccessibleTransactor{contract: contract}, AccessibleFilterer: AccessibleFilterer{contract: contract}}, nil
}

// Accessible is an auto generated Go binding around an Ethereum contract.
type Accessible struct {
	AccessibleCaller     // Read-only binding to the contract
	AccessibleTransactor // Write-only binding to the contract
	AccessibleFilterer   // Log filterer for contract events
}

// AccessibleCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessibleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessibleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessibleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessibleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessibleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessibleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessibleSession struct {
	Contract     *Accessible       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccessibleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessibleCallerSession struct {
	Contract *AccessibleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// AccessibleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessibleTransactorSession struct {
	Contract     *AccessibleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AccessibleRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessibleRaw struct {
	Contract *Accessible // Generic contract binding to access the raw methods on
}

// AccessibleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessibleCallerRaw struct {
	Contract *AccessibleCaller // Generic read-only contract binding to access the raw methods on
}

// AccessibleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessibleTransactorRaw struct {
	Contract *AccessibleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessible creates a new instance of Accessible, bound to a specific deployed contract.
func NewAccessible(address common.Address, backend bind.ContractBackend) (*Accessible, error) {
	contract, err := bindAccessible(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Accessible{AccessibleCaller: AccessibleCaller{contract: contract}, AccessibleTransactor: AccessibleTransactor{contract: contract}, AccessibleFilterer: AccessibleFilterer{contract: contract}}, nil
}

// NewAccessibleCaller creates a new read-only instance of Accessible, bound to a specific deployed contract.
func NewAccessibleCaller(address common.Address, caller bind.ContractCaller) (*AccessibleCaller, error) {
	contract, err := bindAccessible(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessibleCaller{contract: contract}, nil
}

// NewAccessibleTransactor creates a new write-only instance of Accessible, bound to a specific deployed contract.
func NewAccessibleTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessibleTransactor, error) {
	contract, err := bindAccessible(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessibleTransactor{contract: contract}, nil
}

// NewAccessibleFilterer creates a new log filterer instance of Accessible, bound to a specific deployed contract.
func NewAccessibleFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessibleFilterer, error) {
	contract, err := bindAccessible(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessibleFilterer{contract: contract}, nil
}

// bindAccessible binds a generic wrapper to an already deployed contract.
func bindAccessible(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessibleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accessible *AccessibleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Accessible.Contract.AccessibleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accessible *AccessibleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accessible.Contract.AccessibleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accessible *AccessibleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accessible.Contract.AccessibleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accessible *AccessibleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Accessible.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accessible *AccessibleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accessible.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accessible *AccessibleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accessible.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Accessible *AccessibleCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Accessible *AccessibleSession) CANACCESS() (uint8, error) {
	return _Accessible.Contract.CANACCESS(&_Accessible.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Accessible *AccessibleCallerSession) CANACCESS() (uint8, error) {
	return _Accessible.Contract.CANACCESS(&_Accessible.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Accessible *AccessibleCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Accessible *AccessibleSession) CANEDIT() (uint8, error) {
	return _Accessible.Contract.CANEDIT(&_Accessible.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Accessible *AccessibleCallerSession) CANEDIT() (uint8, error) {
	return _Accessible.Contract.CANEDIT(&_Accessible.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Accessible *AccessibleCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Accessible *AccessibleSession) CANSEE() (uint8, error) {
	return _Accessible.Contract.CANSEE(&_Accessible.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Accessible *AccessibleCallerSession) CANSEE() (uint8, error) {
	return _Accessible.Contract.CANSEE(&_Accessible.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Accessible *AccessibleCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Accessible *AccessibleSession) ContentSpace() (common.Address, error) {
	return _Accessible.Contract.ContentSpace(&_Accessible.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Accessible *AccessibleCallerSession) ContentSpace() (common.Address, error) {
	return _Accessible.Contract.ContentSpace(&_Accessible.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Accessible *AccessibleCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Accessible *AccessibleSession) Creator() (common.Address, error) {
	return _Accessible.Contract.Creator(&_Accessible.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Accessible *AccessibleCallerSession) Creator() (common.Address, error) {
	return _Accessible.Contract.Creator(&_Accessible.CallOpts)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Accessible *AccessibleCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Accessible *AccessibleSession) HasAccess(candidate common.Address) (bool, error) {
	return _Accessible.Contract.HasAccess(&_Accessible.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Accessible *AccessibleCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _Accessible.Contract.HasAccess(&_Accessible.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Accessible *AccessibleCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Accessible *AccessibleSession) IndexCategory() (uint8, error) {
	return _Accessible.Contract.IndexCategory(&_Accessible.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Accessible *AccessibleCallerSession) IndexCategory() (uint8, error) {
	return _Accessible.Contract.IndexCategory(&_Accessible.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Accessible *AccessibleCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Accessible *AccessibleSession) Owner() (common.Address, error) {
	return _Accessible.Contract.Owner(&_Accessible.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Accessible *AccessibleCallerSession) Owner() (common.Address, error) {
	return _Accessible.Contract.Owner(&_Accessible.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Accessible *AccessibleCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Accessible *AccessibleSession) Version() ([32]byte, error) {
	return _Accessible.Contract.Version(&_Accessible.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Accessible *AccessibleCallerSession) Version() ([32]byte, error) {
	return _Accessible.Contract.Version(&_Accessible.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Accessible *AccessibleCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Accessible *AccessibleSession) VersionAPI() ([32]byte, error) {
	return _Accessible.Contract.VersionAPI(&_Accessible.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Accessible *AccessibleCallerSession) VersionAPI() ([32]byte, error) {
	return _Accessible.Contract.VersionAPI(&_Accessible.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Accessible *AccessibleCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Accessible *AccessibleSession) Visibility() (uint8, error) {
	return _Accessible.Contract.Visibility(&_Accessible.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Accessible *AccessibleCallerSession) Visibility() (uint8, error) {
	return _Accessible.Contract.Visibility(&_Accessible.CallOpts)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_Accessible *AccessibleTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_Accessible *AccessibleSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _Accessible.Contract.AccessRequestV3(&_Accessible.TransactOpts, arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_Accessible *AccessibleTransactorSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _Accessible.Contract.AccessRequestV3(&_Accessible.TransactOpts, arg0, arg1)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Accessible *AccessibleTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Accessible *AccessibleSession) Kill() (*types.Transaction, error) {
	return _Accessible.Contract.Kill(&_Accessible.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Accessible *AccessibleTransactorSession) Kill() (*types.Transaction, error) {
	return _Accessible.Contract.Kill(&_Accessible.TransactOpts)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Accessible *AccessibleTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Accessible *AccessibleSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _Accessible.Contract.SetVisibility(&_Accessible.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Accessible *AccessibleTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _Accessible.Contract.SetVisibility(&_Accessible.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Accessible *AccessibleTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Accessible *AccessibleSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Accessible.Contract.TransferCreatorship(&_Accessible.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Accessible *AccessibleTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Accessible.Contract.TransferCreatorship(&_Accessible.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Accessible *AccessibleTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Accessible *AccessibleSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Accessible.Contract.TransferOwnership(&_Accessible.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Accessible *AccessibleTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Accessible.Contract.TransferOwnership(&_Accessible.TransactOpts, newOwner)
}

// AccessibleAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the Accessible contract.
type AccessibleAccessRequestV3Iterator struct {
	Event *AccessibleAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessibleAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessibleAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessibleAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessibleAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessibleAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessibleAccessRequestV3 represents a AccessRequestV3 event raised by the Accessible contract.
type AccessibleAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Accessible *AccessibleFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*AccessibleAccessRequestV3Iterator, error) {

	logs, sub, err := _Accessible.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &AccessibleAccessRequestV3Iterator{contract: _Accessible.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Accessible *AccessibleFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *AccessibleAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _Accessible.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessibleAccessRequestV3)
				if err := _Accessible.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Accessible *AccessibleFilterer) ParseAccessRequestV3(log types.Log) (*AccessibleAccessRequestV3, error) {
	event := new(AccessibleAccessRequestV3)
	if err := _Accessible.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccessibleVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the Accessible contract.
type AccessibleVisibilityChangedIterator struct {
	Event *AccessibleVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessibleVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessibleVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessibleVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessibleVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessibleVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessibleVisibilityChanged represents a VisibilityChanged event raised by the Accessible contract.
type AccessibleVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Accessible *AccessibleFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*AccessibleVisibilityChangedIterator, error) {

	logs, sub, err := _Accessible.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &AccessibleVisibilityChangedIterator{contract: _Accessible.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Accessible *AccessibleFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *AccessibleVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _Accessible.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessibleVisibilityChanged)
				if err := _Accessible.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Accessible *AccessibleFilterer) ParseVisibilityChanged(log types.Log) (*AccessibleVisibilityChanged, error) {
	event := new(AccessibleVisibilityChanged)
	if err := _Accessible.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AdminableABI is the input ABI used to generate the binding from.
const AdminableABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// AdminableFuncSigs maps the 4-byte function signature to its string representation.
var AdminableFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// AdminableBin is the compiled bytecode used for deploying new contracts.
var AdminableBin = "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060015560028054600160a060020a0319908116321790915560038054909116331790556103688061007b6000396000f3fe6080604052600436106100a3576000357c0100000000000000000000000000000000000000000000000000000000900480635f4fcae1116100765780635f4fcae1146101595780636d2e4b1b1461016e5780638da5cb5b146101a1578063af570c04146101b6578063f2fde38b146101cb576100a3565b806302d05d3f146100a557806324d7806c146100d657806341c0e1b51461011d57806354fd4d5014610132575b005b3480156100b157600080fd5b506100ba6101fe565b60408051600160a060020a039092168252519081900360200190f35b3480156100e257600080fd5b50610109600480360360208110156100f957600080fd5b5035600160a060020a031661020d565b604080519115158252519081900360200190f35b34801561012957600080fd5b506100a3610237565b34801561013e57600080fd5b5061014761025c565b60408051918252519081900360200190f35b34801561016557600080fd5b50610147610262565b34801561017a57600080fd5b506100a36004803603602081101561019157600080fd5b5035600160a060020a0316610268565b3480156101ad57600080fd5b506100ba6102c3565b3480156101c257600080fd5b506100ba6102d2565b3480156101d757600080fd5b506100a3600480360360208110156101ee57600080fd5b5035600160a060020a03166102e1565b600254600160a060020a031681565b600354600090600160a060020a038381169116141561022e57506001610232565b5060005b919050565b600354600160a060020a0316331461024e57600080fd5b600354600160a060020a0316ff5b60005481565b60015481565b600254600160a060020a0316331461027f57600080fd5b600160a060020a038116151561029457600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a031633146102f857600080fd5b600160a060020a038116151561030d57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a723058200e617460a4175b65e5232eafef27948cb97917eca622f6195d8582f4b4e76bae0029"

// DeployAdminable deploys a new Ethereum contract, binding an instance of Adminable to it.
func DeployAdminable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Adminable, error) {
	parsed, err := abi.JSON(strings.NewReader(AdminableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AdminableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Adminable{AdminableCaller: AdminableCaller{contract: contract}, AdminableTransactor: AdminableTransactor{contract: contract}, AdminableFilterer: AdminableFilterer{contract: contract}}, nil
}

// Adminable is an auto generated Go binding around an Ethereum contract.
type Adminable struct {
	AdminableCaller     // Read-only binding to the contract
	AdminableTransactor // Write-only binding to the contract
	AdminableFilterer   // Log filterer for contract events
}

// AdminableCaller is an auto generated read-only Go binding around an Ethereum contract.
type AdminableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AdminableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AdminableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AdminableSession struct {
	Contract     *Adminable        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AdminableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AdminableCallerSession struct {
	Contract *AdminableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// AdminableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AdminableTransactorSession struct {
	Contract     *AdminableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// AdminableRaw is an auto generated low-level Go binding around an Ethereum contract.
type AdminableRaw struct {
	Contract *Adminable // Generic contract binding to access the raw methods on
}

// AdminableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AdminableCallerRaw struct {
	Contract *AdminableCaller // Generic read-only contract binding to access the raw methods on
}

// AdminableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AdminableTransactorRaw struct {
	Contract *AdminableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAdminable creates a new instance of Adminable, bound to a specific deployed contract.
func NewAdminable(address common.Address, backend bind.ContractBackend) (*Adminable, error) {
	contract, err := bindAdminable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Adminable{AdminableCaller: AdminableCaller{contract: contract}, AdminableTransactor: AdminableTransactor{contract: contract}, AdminableFilterer: AdminableFilterer{contract: contract}}, nil
}

// NewAdminableCaller creates a new read-only instance of Adminable, bound to a specific deployed contract.
func NewAdminableCaller(address common.Address, caller bind.ContractCaller) (*AdminableCaller, error) {
	contract, err := bindAdminable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AdminableCaller{contract: contract}, nil
}

// NewAdminableTransactor creates a new write-only instance of Adminable, bound to a specific deployed contract.
func NewAdminableTransactor(address common.Address, transactor bind.ContractTransactor) (*AdminableTransactor, error) {
	contract, err := bindAdminable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AdminableTransactor{contract: contract}, nil
}

// NewAdminableFilterer creates a new log filterer instance of Adminable, bound to a specific deployed contract.
func NewAdminableFilterer(address common.Address, filterer bind.ContractFilterer) (*AdminableFilterer, error) {
	contract, err := bindAdminable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AdminableFilterer{contract: contract}, nil
}

// bindAdminable binds a generic wrapper to an already deployed contract.
func bindAdminable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AdminableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Adminable *AdminableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Adminable.Contract.AdminableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Adminable *AdminableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Adminable.Contract.AdminableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Adminable *AdminableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Adminable.Contract.AdminableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Adminable *AdminableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Adminable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Adminable *AdminableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Adminable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Adminable *AdminableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Adminable.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Adminable *AdminableCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Adminable.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Adminable *AdminableSession) ContentSpace() (common.Address, error) {
	return _Adminable.Contract.ContentSpace(&_Adminable.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Adminable *AdminableCallerSession) ContentSpace() (common.Address, error) {
	return _Adminable.Contract.ContentSpace(&_Adminable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Adminable *AdminableCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Adminable.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Adminable *AdminableSession) Creator() (common.Address, error) {
	return _Adminable.Contract.Creator(&_Adminable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Adminable *AdminableCallerSession) Creator() (common.Address, error) {
	return _Adminable.Contract.Creator(&_Adminable.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_Adminable *AdminableCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Adminable.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_Adminable *AdminableSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _Adminable.Contract.IsAdmin(&_Adminable.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_Adminable *AdminableCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _Adminable.Contract.IsAdmin(&_Adminable.CallOpts, _candidate)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Adminable *AdminableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Adminable.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Adminable *AdminableSession) Owner() (common.Address, error) {
	return _Adminable.Contract.Owner(&_Adminable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Adminable *AdminableCallerSession) Owner() (common.Address, error) {
	return _Adminable.Contract.Owner(&_Adminable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Adminable *AdminableCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Adminable.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Adminable *AdminableSession) Version() ([32]byte, error) {
	return _Adminable.Contract.Version(&_Adminable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Adminable *AdminableCallerSession) Version() ([32]byte, error) {
	return _Adminable.Contract.Version(&_Adminable.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Adminable *AdminableCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Adminable.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Adminable *AdminableSession) VersionAPI() ([32]byte, error) {
	return _Adminable.Contract.VersionAPI(&_Adminable.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Adminable *AdminableCallerSession) VersionAPI() ([32]byte, error) {
	return _Adminable.Contract.VersionAPI(&_Adminable.CallOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Adminable *AdminableTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Adminable.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Adminable *AdminableSession) Kill() (*types.Transaction, error) {
	return _Adminable.Contract.Kill(&_Adminable.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Adminable *AdminableTransactorSession) Kill() (*types.Transaction, error) {
	return _Adminable.Contract.Kill(&_Adminable.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Adminable *AdminableTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Adminable.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Adminable *AdminableSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Adminable.Contract.TransferCreatorship(&_Adminable.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Adminable *AdminableTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Adminable.Contract.TransferCreatorship(&_Adminable.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Adminable *AdminableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Adminable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Adminable *AdminableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Adminable.Contract.TransferOwnership(&_Adminable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Adminable *AdminableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Adminable.Contract.TransferOwnership(&_Adminable.TransactOpts, newOwner)
}

// BaseAccessControlGroupABI is the input ABI used to generate the binding from.
const BaseAccessControlGroupABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oauthEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tenantAddr\",\"type\":\"address\"}],\"name\":\"setTenant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"others\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"membersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indexType\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setEntityRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"grantManagerAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managersMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"membersMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidates\",\"type\":\"address[]\"}],\"name\":\"grantAccessMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setIsConsumerGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tenant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"revokeManagerAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"},{\"name\":\"mgr\",\"type\":\"bool\"}],\"name\":\"hasAccessRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isConsumerGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setOAuthEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contentSpace\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"ManagerAccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"MemberRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"ManagerAccessRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operationCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"UnauthorizedOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"OAuthStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint32\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ord\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"prev\",\"type\":\"bool\"}],\"name\":\"BitSetAndGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"}],\"name\":\"WordGroupDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// BaseAccessControlGroupFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessControlGroupFuncSigs = map[string]string{
	"18689733": "ACCESS_CONFIRMED()",
	"8232f3f1": "ACCESS_NONE()",
	"479a0c51": "ACCESS_TENTATIVE()",
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"091600e6": "CATEGORY_CONTENT_OBJECT()",
	"68a0469a": "CATEGORY_CONTENT_TYPE()",
	"6373a411": "CATEGORY_CONTRACT()",
	"12915a30": "CATEGORY_GROUP()",
	"16aed232": "CATEGORY_LIBRARY()",
	"d1aeb651": "TYPE_ACCESS()",
	"5d97b6c2": "TYPE_EDIT()",
	"96eba03d": "TYPE_SEE()",
	"30e66949": "accessGroups()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"81beeb64": "canEdit()",
	"15c0bac1": "checkAccessGroupRights(address,uint8)",
	"5faecb76": "checkContentObjectRights(address,uint8)",
	"fe538c5a": "checkContentTypeRights(address,uint8)",
	"a864dfa5": "checkContractRights(address,uint8)",
	"a00b38c4": "checkDirectRights(uint8,address,uint8)",
	"6813b6d1": "checkLibraryRights(address,uint8)",
	"7fb52f1a": "checkRights(uint8,address,uint8)",
	"d30f8cd0": "cleanUpAccessGroups()",
	"2fa5c842": "cleanUpAll()",
	"048bd529": "cleanUpContentObjects()",
	"85e0a200": "cleanUpContentTypes()",
	"92297d7b": "cleanUpLibraries()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"a980892d": "contentObjects()",
	"af570c04": "contentSpace()",
	"9f46133e": "contentTypes()",
	"7709bc78": "contractExists(address)",
	"6c0f79b6": "contracts()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e57097c9": "deleteGroup(bytes32)",
	"e1a70717": "deleteVersion(string)",
	"2d474cbd": "getAccessGroup(uint256)",
	"304f4a7b": "getAccessGroupRights(address)",
	"0dc10d3f": "getAccessGroupsLength()",
	"30f846a2": "getBit(bytes32,uint8)",
	"cf8a7503": "getContentObject(uint256)",
	"69881c0c": "getContentObjectRights(address)",
	"ebe9314e": "getContentObjectsLength()",
	"aa3f6952": "getContentType(uint256)",
	"a4081d62": "getContentTypeRights(address)",
	"5c1d3059": "getContentTypesLength()",
	"6ebc8c86": "getContract(uint256)",
	"08d865d7": "getContractRights(address)",
	"fccc134f": "getContractsLength()",
	"e1954b61": "getCounter(bytes32,uint8)",
	"cb86806d": "getLibrariesLength()",
	"d15d62a7": "getLibrary(uint256)",
	"fb52222c": "getLibraryRights(address)",
	"ac55c906": "getMeta(bytes)",
	"0ae5e739": "grantAccess(address)",
	"9602a0b3": "grantAccessMany(address[])",
	"75861a95": "grantManagerAccess(address)",
	"95a078e8": "hasAccess(address)",
	"d8961c8d": "hasAccessRight(address,bool)",
	"67e5c3bf": "hasEditorRight(address)",
	"42e7ba7b": "hasManagerAccess(address)",
	"7558cbf0": "incrementCounter(bytes32,uint8)",
	"6380501f": "indexCategory()",
	"24d7806c": "isAdmin(address)",
	"dde12828": "isConsumerGroup()",
	"41c0e1b5": "kill()",
	"c4b1978d": "libraries()",
	"793f3f71": "managersMap(address)",
	"638d0290": "managersNum()",
	"872ea68a": "membersMap(address)",
	"55277a5b": "membersNum()",
	"12b39dd0": "oauthEnabled()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"51a7fc87": "others()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"e542b7cb": "putMeta(bytes,bytes)",
	"85e68531": "revokeAccess(address)",
	"cdb849b7": "revokeManagerAccess(address)",
	"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
	"b8ff1dba": "setAccessRights()",
	"24d7c18d": "setAndGetBit(bytes32,uint8)",
	"3def5140": "setContentObjectRights(address,uint8,uint8)",
	"055af48f": "setContentSpace(address)",
	"8635adb5": "setContentTypeRights(address,uint8,uint8)",
	"224dcba0": "setContractRights(address,uint8,uint8)",
	"5d7cf830": "setEntityRights(uint8,address,uint8,uint8)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"a3125255": "setIsConsumerGroup(bool)",
	"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
	"fba3779a": "setOAuthEnabled(bool)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"2e74a4de": "setTenant(address)",
	"aa024e8b": "setVisibility(uint8)",
	"adf07791": "tenant()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
}

// BaseAccessControlGroupBin is the compiled bytecode used for deploying new contracts.
var BaseAccessControlGroupBin = "0x7f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060019081557f416363657373496e6465786f723230323030393238313130303030504f0000006008556009805460ff1916821761ff0019166102001762ff00001916620300001763ff000000191663040000001764ff00000000191664050000000017905560e06040526080908152600a60a0819052606460c052620000cc9160036200026f565b507f41636365737369626c653230323030363236313231363030504f0000000000006024556025805461ff001960ff199091166001171690557f4564697461626c653230323030393238313130303030504f00000000000000006026557f42734163636573734374726c4772703230323130383039313530303030504f00602d553480156200015a57600080fd5b506040516020806200506e833981018060405260208110156200017c57600080fd5b505160028054600160a060020a03199081163217918290556003805482163317905560098054600b805460ff1990811660ff620100008504811691909117909255601380548216610100808604851691909117909155600f80548316848616179055601780548316630100000086048516179055601b8054831664010000000090950484169490941790935560048054600160a060020a039889169616959095179094556000602f819055949095168452603060205260409093208054831660019081179091556031556032805490921690915554602580549183900490931690910261ff00199091161790556200032d565b600183019183908215620002f75791602002820160005b83821115620002c657835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000286565b8015620002f55782816101000a81549060ff0219169055600101602081600001049283019260010302620002c6565b505b506200030592915062000309565b5090565b6200032a91905b808211156200030557805460ff1916815560010162000310565b90565b614d31806200033d6000396000f3fe6080604052600436106106e15760003560e060020a900480636ebc8c8611610389578063aa024e8b116101e0578063d8961c8d11610111578063ebe9314e116100af578063fb52222c1161007e578063fb52222c14611b7a578063fba3779a14611bad578063fccc134f14611bd9578063fe538c5a14611bee576106e1565b8063ebe9314e14611ad9578063ef1d7dc214611aee578063f17bda9114611b03578063f2fde38b14611b47576106e1565b8063e1954b61116100eb578063e1954b6114611876578063e1a70717146118c2578063e542b7cb14611975578063e57097c914611aaf576106e1565b8063d8961c8d14611811578063dde128281461184c578063e02dd9c214611861576106e1565b8063c4b1978d1161017e578063cf8a750311610158578063cf8a7503146117a8578063d15d62a7146117d2578063d1aeb6511461086d578063d30f8cd0146117fc576106e1565b8063c4b1978d1461174b578063cb86806d14611760578063cdb849b714611775576106e1565b8063adf07791116101ba578063adf07791146116f7578063af570c041461170c578063b8ff1dba14611721578063c287e0ed14611736576106e1565b8063aa024e8b146115ed578063aa3f69521461161a578063ac55c90614611644576106e1565b8063872ea68a116102ba5780639867db7411610258578063a312525511610232578063a31252551461153d578063a4081d6214611569578063a864dfa51461159c578063a980892d146115d8576106e1565b80639867db741461142f5780639f46133e146114e2578063a00b38c4146114f7576106e1565b806395a078e81161029457806395a078e8146113375780639602a0b31461136a57806396eba03d1461123957806397ac4fd21461141a576106e1565b8063872ea68a146112da5780638da5cb5b1461130d57806392297d7b14611322576106e1565b80637cbb7bf2116103275780638232f3f1116103015780638232f3f11461123957806385e0a2001461124e57806385e68531146112635780638635adb514611296576106e1565b80637cbb7bf21461119a5780637fb52f1a146111de57806381beeb6414611224576106e1565b80637709bc78116103635780637709bc78146110e05780637886f74714611113578063793f3f711461113d5780637ca8f61814611170576106e1565b80636ebc8c86146110505780637558cbf01461107a57806375861a95146110ad576106e1565b8063331b86c01161053d5780635f4fcae11161046e57806367e5c3bf1161040c57806369881c0c116103e657806369881c0c14610fc05780636c0f79b614610ff35780636d2e4b1b146110085780636e3754271461103b576106e1565b806367e5c3bf14610f3c5780636813b6d114610f6f57806368a0469a14610fab576106e1565b8063628449fd11610448578063628449fd14610e735780636373a41114610efd5780636380501f14610f12578063638d029014610f27576106e1565b80635f4fcae114610e0d5780635f6a130114610e225780635faecb7614610e37576106e1565b8063479a0c51116104db57806355277a5b116104b557806355277a5b14610d975780635c1d305914610dac5780635d7cf83014610dc15780635d97b6c214610926576106e1565b8063479a0c511461086d57806351a7fc8714610d6d57806354fd4d5014610d82576106e1565b806340b87a261161051757806340b87a2614610d0857806341c0e1b514610d1d57806342e7ba7b14610d32578063446e882614610d65576106e1565b8063331b86c014610c9a578063375a6e7c14610caf5780633def514014610cc4576106e1565b806316aed2321161061757806329adec14116105b55780632fa5c8421161058f5780632fa5c84214610bc2578063304f4a7b14610c0257806330e6694914610c3557806330f846a214610c67576106e1565b806329adec1414610b505780632d474cbd14610b655780632e74a4de14610b8f576106e1565b8063224dcba0116105f1578063224dcba014610a6257806322e564eb14610aa657806324d7806c14610aea57806324d7c18d14610b1d576106e1565b806316aed2321461091157806318689733146109265780631bf7a9121461093b576106e1565b80630dc10d3f1161068457806312915a301161065e57806312915a301461088257806312b39dd01461089757806314cfabb3146108c057806315c0bac1146108d5576106e1565b80630dc10d3f146108145780630fe1b5a214610829578063100508a21461086d576106e1565b8063055af48f116106c0578063055af48f1461075057806308d865d714610783578063091600e6146107cc5780630ae5e739146107e1576106e1565b8062821de3146106e357806302d05d3f14610714578063048bd52914610729575b005b3480156106ef57600080fd5b506106f8611c2a565b60408051600160a060020a039092168252519081900360200190f35b34801561072057600080fd5b506106f8611c3a565b34801561073557600080fd5b5061073e611c49565b60408051918252519081900360200190f35b34801561075c57600080fd5b506106e16004803603602081101561077357600080fd5b5035600160a060020a0316611c5a565b34801561078f57600080fd5b506107b6600480360360208110156107a657600080fd5b5035600160a060020a0316611c93565b6040805160ff9092168252519081900360200190f35b3480156107d857600080fd5b506107b6611cb5565b3480156107ed57600080fd5b506106e16004803603602081101561080457600080fd5b5035600160a060020a0316611cbe565b34801561082057600080fd5b5061073e611d94565b34801561083557600080fd5b506106e16004803603606081101561084c57600080fd5b50600160a060020a038135169060ff60208201358116916040013516611d9a565b34801561087957600080fd5b506107b6611e7c565b34801561088e57600080fd5b506107b6611e81565b3480156108a357600080fd5b506108ac611e8f565b604080519115158252519081900360200190f35b3480156108cc57600080fd5b506108ac611e98565b3480156108e157600080fd5b506108ac600480360360408110156108f857600080fd5b508035600160a060020a0316906020013560ff16611f35565b34801561091d57600080fd5b506107b6611f57565b34801561093257600080fd5b506107b6611f66565b6108ac6004803603604081101561095157600080fd5b81019060208101813564010000000081111561096c57600080fd5b82018360208201111561097e57600080fd5b803590602001918460208302840111640100000000831117156109a057600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156109f057600080fd5b820183602082011115610a0257600080fd5b80359060200191846020830284011164010000000083111715610a2457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611f6b945050505050565b348015610a6e57600080fd5b506106e160048036036060811015610a8557600080fd5b50600160a060020a038135169060ff60208201358116916040013516612014565b348015610ab257600080fd5b506106e160048036036060811015610ac957600080fd5b50600160a060020a038135169060ff60208201358116916040013516612026565b348015610af657600080fd5b506108ac60048036036020811015610b0d57600080fd5b5035600160a060020a03166124f9565b348015610b2957600080fd5b506108ac60048036036040811015610b4057600080fd5b508035906020013560ff16612539565b348015610b5c57600080fd5b506107b6612559565b348015610b7157600080fd5b506106f860048036036020811015610b8857600080fd5b5035612562565b348015610b9b57600080fd5b506106e160048036036020811015610bb257600080fd5b5035600160a060020a031661258f565b348015610bce57600080fd5b50610bd76125da565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b348015610c0e57600080fd5b506107b660048036036020811015610c2557600080fd5b5035600160a060020a0316612625565b348015610c4157600080fd5b50610c4a612643565b6040805160ff909316835260208301919091528051918290030190f35b348015610c7357600080fd5b506108ac60048036036040811015610c8a57600080fd5b508035906020013560ff16612652565b348015610ca657600080fd5b5061073e6126c0565b348015610cbb57600080fd5b506108ac6126c6565b348015610cd057600080fd5b506106e160048036036060811015610ce757600080fd5b50600160a060020a038135169060ff602082013581169160400135166126cf565b348015610d1457600080fd5b5061073e6126dc565b348015610d2957600080fd5b506106e16126e2565b348015610d3e57600080fd5b506108ac60048036036020811015610d5557600080fd5b5035600160a060020a0316612707565b6108ac612730565b348015610d7957600080fd5b50610c4a612934565b348015610d8e57600080fd5b5061073e612943565b348015610da357600080fd5b5061073e612949565b348015610db857600080fd5b5061073e61294f565b348015610dcd57600080fd5b506106e160048036036080811015610de457600080fd5b5060ff8135811691600160a060020a036020820135169160408201358116916060013516612955565b348015610e1957600080fd5b5061073e612972565b348015610e2e57600080fd5b506106e1612978565b348015610e4357600080fd5b506108ac60048036036040811015610e5a57600080fd5b508035600160a060020a0316906020013560ff166129b6565b348015610e7f57600080fd5b50610e886129ca565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610ec2578181015183820152602001610eaa565b50505050905090810190601f168015610eef5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610f0957600080fd5b506107b6612a58565b348015610f1e57600080fd5b506107b6612a69565b348015610f3357600080fd5b5061073e612a77565b348015610f4857600080fd5b506108ac60048036036020811015610f5f57600080fd5b5035600160a060020a0316612a7d565b348015610f7b57600080fd5b506108ac60048036036040811015610f9257600080fd5b508035600160a060020a0316906020013560ff16612aad565b348015610fb757600080fd5b506107b6612ac7565b348015610fcc57600080fd5b506107b660048036036020811015610fe357600080fd5b5035600160a060020a0316612ad7565b348015610fff57600080fd5b50610c4a612af5565b34801561101457600080fd5b506106e16004803603602081101561102b57600080fd5b5035600160a060020a0316612b04565b34801561104757600080fd5b506108ac612b52565b34801561105c57600080fd5b506106f86004803603602081101561107357600080fd5b5035612b63565b34801561108657600080fd5b506106e16004803603604081101561109d57600080fd5b508035906020013560ff16612b75565b3480156110b957600080fd5b506106e1600480360360208110156110d057600080fd5b5035600160a060020a0316612c76565b3480156110ec57600080fd5b506108ac6004803603602081101561110357600080fd5b5035600160a060020a0316612d2c565b34801561111f57600080fd5b5061073e6004803603602081101561113657600080fd5b5035612d34565b34801561114957600080fd5b506108ac6004803603602081101561116057600080fd5b5035600160a060020a0316612d53565b34801561117c57600080fd5b50610e886004803603602081101561119357600080fd5b5035612d68565b3480156111a657600080fd5b506106e1600480360360608110156111bd57600080fd5b50600160a060020a038135169060ff60208201358116916040013516612ddc565b3480156111ea57600080fd5b506108ac6004803603606081101561120157600080fd5b5060ff8135811691600160a060020a036020820135169160409091013516612de9565b34801561123057600080fd5b506108ac612e00565b34801561124557600080fd5b506107b6612e0b565b34801561125a57600080fd5b5061073e612e10565b34801561126f57600080fd5b506106e16004803603602081101561128657600080fd5b5035600160a060020a0316612e1c565b3480156112a257600080fd5b506106e1600480360360608110156112b957600080fd5b50600160a060020a038135169060ff60208201358116916040013516612edd565b3480156112e657600080fd5b506108ac600480360360208110156112fd57600080fd5b5035600160a060020a0316612ef7565b34801561131957600080fd5b506106f8612f0c565b34801561132e57600080fd5b5061073e612f1b565b34801561134357600080fd5b506108ac6004803603602081101561135a57600080fd5b5035600160a060020a0316612f27565b34801561137657600080fd5b506106e16004803603602081101561138d57600080fd5b8101906020810181356401000000008111156113a857600080fd5b8201836020820111156113ba57600080fd5b803590602001918460208302840111640100000000831117156113dc57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506130be945050505050565b34801561142657600080fd5b506107b66130f2565b34801561143b57600080fd5b506106e16004803603602081101561145257600080fd5b81019060208101813564010000000081111561146d57600080fd5b82018360208201111561147f57600080fd5b803590602001918460018302840111640100000000831117156114a157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506130f7945050505050565b3480156114ee57600080fd5b50610c4a613224565b34801561150357600080fd5b506108ac6004803603606081101561151a57600080fd5b5060ff8135811691600160a060020a036020820135169160409091013516613233565b34801561154957600080fd5b506106e16004803603602081101561156057600080fd5b50351515613262565b34801561157557600080fd5b506107b66004803603602081101561158c57600080fd5b5035600160a060020a0316613293565b3480156115a857600080fd5b506108ac600480360360408110156115bf57600080fd5b508035600160a060020a0316906020013560ff166132b1565b3480156115e457600080fd5b50610c4a6132cd565b3480156115f957600080fd5b506106e16004803603602081101561161057600080fd5b503560ff166132dc565b34801561162657600080fd5b506106f86004803603602081101561163d57600080fd5b5035613356565b34801561165057600080fd5b50610e886004803603602081101561166757600080fd5b81019060208101813564010000000081111561168257600080fd5b82018360208201111561169457600080fd5b803590602001918460018302840111640100000000831117156116b657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613368945050505050565b34801561170357600080fd5b506106f8613511565b34801561171857600080fd5b506106f8613526565b34801561172d57600080fd5b506106e1613535565b34801561174257600080fd5b506106e161362a565b34801561175757600080fd5b50610c4a6136ec565b34801561176c57600080fd5b5061073e6136fb565b34801561178157600080fd5b506106e16004803603602081101561179857600080fd5b5035600160a060020a0316613701565b3480156117b457600080fd5b506106f8600480360360208110156117cb57600080fd5b50356137c2565b3480156117de57600080fd5b506106f8600480360360208110156117f557600080fd5b50356137d4565b34801561180857600080fd5b5061073e6137e6565b34801561181d57600080fd5b506108ac6004803603604081101561183457600080fd5b50600160a060020a03813516906020013515156137f2565b34801561185857600080fd5b506108ac613818565b34801561186d57600080fd5b50610e88613826565b34801561188257600080fd5b506118a96004803603604081101561189957600080fd5b508035906020013560ff16613881565b6040805163ffffffff9092168252519081900360200190f35b3480156118ce57600080fd5b5061073e600480360360208110156118e557600080fd5b81019060208101813564010000000081111561190057600080fd5b82018360208201111561191257600080fd5b8035906020019184600183028401116401000000008311171561193457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506138d3945050505050565b34801561198157600080fd5b506106e16004803603604081101561199857600080fd5b8101906020810181356401000000008111156119b357600080fd5b8201836020820111156119c557600080fd5b803590602001918460018302840111640100000000831117156119e757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050640100000000811115611a3a57600080fd5b820183602082011115611a4c57600080fd5b80359060200191846001830284011164010000000083111715611a6e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613d44945050505050565b348015611abb57600080fd5b506106e160048036036020811015611ad257600080fd5b5035613f3b565b348015611ae557600080fd5b5061073e613fa0565b348015611afa57600080fd5b506107b6613fa6565b348015611b0f57600080fd5b506106e160048036036060811015611b2657600080fd5b50600160a060020a038135169060ff60208201358116916040013516613fab565b348015611b5357600080fd5b506106e160048036036020811015611b6a57600080fd5b5035600160a060020a0316613fb8565b348015611b8657600080fd5b506107b660048036036020811015611b9d57600080fd5b5035600160a060020a0316614006565b348015611bb957600080fd5b506106e160048036036020811015611bd057600080fd5b50351515614024565b348015611be557600080fd5b5061073e614082565b348015611bfa57600080fd5b506108ac60048036036040811015611c1157600080fd5b508035600160a060020a0316906020013560ff16614088565b600454600160a060020a03165b90565b600254600160a060020a031681565b6000611c55600f6140a3565b905090565b600354600160a060020a03163314611c7157600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a0381166000908152601c602052604090205460ff165b919050565b60095460ff1681565b611cc733612707565b80611cec5750603254610100900460ff168015611cec575033600160a060020a038216145b1515611cf757600080fd5b600160a060020a0381166000908152602e602052604090205460ff161515611d4957600160a060020a0381166000908152602e60205260409020805460ff19166001908117909155602f805490910190555b60408051600160a060020a038316815290517fb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd9149181900360200190a1611d9181600180611d9a565b50565b60165490565b611da2612e00565b1515611dad57600080fd5b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd91602480820192602092909190829003018186803b158015611e1c57600080fd5b505afa158015611e30573d6000803e3d6000fd5b505050506040513d6020811015611e4657600080fd5b50519050600160a060020a0381161515611e6a57611e65858585612026565b611e75565b611e75818585612026565b5050505050565b600181565b600954610100900460ff1681565b60325460ff1681565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e1491602480820192602092909190829003018186803b158015611f0357600080fd5b505afa158015611f17573d6000803e3d6000fd5b505050506040513d6020811015611f2d57600080fd5b505191505090565b600954600090611f4e90610100900460ff168484612de9565b90505b92915050565b60095462010000900460ff1681565b600281565b6000611f7633612f27565b1515611f8157600080fd5b604080516c01000000000000000000000000300260208083019190915242603480840182905284518085039091018152605484018086528151919093012090915260006074830181905260948301523360b48301526103e80260d482015290517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360f40190a150600192915050565b612021601b8484846141e8565b505050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561206757600080fd5b505afa15801561207b573d6000803e3d6000fd5b505050506040513d602081101561209157600080fd5b5051602554610100900460ff9081169116141561213657604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b15801561211957600080fd5b505af115801561212d573d6000803e3d6000fd5b505050506124f3565b80600160a060020a03166312915a306040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561217257600080fd5b505afa158015612186573d6000803e3d6000fd5b505050506040513d602081101561219c57600080fd5b5051602554610100900460ff9081169116141561222457604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b15801561211957600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561226057600080fd5b505afa158015612274573d6000803e3d6000fd5b505050506040513d602081101561228a57600080fd5b5051602554610100900460ff9081169116141561231257604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b15801561211957600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561234e57600080fd5b505afa158015612362573d6000803e3d6000fd5b505050506040513d602081101561237857600080fd5b5051602554610100900460ff9081169116141561240057604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b15801561211957600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561243c57600080fd5b505afa158015612450573d6000803e3d6000fd5b505050506040513d602081101561246657600080fd5b5051602554610100900460ff908116911614156124ee57604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b15801561211957600080fd5b600080fd5b50505050565b600354600090600160a060020a038381169116141561251a57506001611cb0565b50600160a060020a031660009081526030602052604090205460ff1690565b6000612544336124f9565b151561254f57600080fd5b611f4e83836144ff565b60255460ff1681565b60158054600091908390811061257457fe5b600091825260209091200154600160a060020a031692915050565b612598336124f9565b15156125a357600080fd5b60328054600160a060020a03909216620100000275ffffffffffffffffffffffffffffffffffffffff000019909216919091179055565b60008060008060006125ec600b6140a3565b6125f660136140a3565b612600600f6140a3565b61260a60176140a3565b612614601b6140a3565b945094509450945094509091929394565b600160a060020a031660009081526014602052604090205460ff1690565b60135460165460ff9091169082565b6000828152600760209081526040822060ff8481169290920490911690601f841690600282900a908190846008811061268757fe5b600881049091015460046007909216919091026101000a90041663ffffffff16156126b35760016126b6565b60005b9695505050505050565b60295490565b602c5460ff1681565b612021600f8484846141e8565b60285481565b600354600160a060020a031633146126f957600080fd5b600354600160a060020a0316ff5b603254600090600160a060020a0383811662010000909204161480611f515750611f5182612a7d565b600061273a611e98565b151561274557600080fd5b602c5460ff16151561275657600080fd5b60006027805460018160011615610100020316600290049050111561280557602980546001818101808455600093909352602780546127cc937fcb7c14ce178f56e2e8d86ab33ebc0ae081ba8556a00cd122038841867181caac0192600261010091831615919091026000190190911604614b27565b5050602854602a80546001810182556000919091527fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d201555b602b80546128289160279160026000196101006001841615020190911604614b27565b504260285560408051602081019182905260009081905261284b91602b91614bac565b50602c805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a031661288c611c2a565b60408051600160a060020a03808516825283166020820152606091810182815260278054600260001961010060018416150201909116049383018490529260808301908490801561291e5780601f106128f35761010080835404028352916020019161291e565b820191906000526020600020905b81548152906001019060200180831161290157829003601f168201915b505094505050505060405180910390a150600190565b601f5460225460ff9091169082565b602d5481565b602f5481565b601a5490565b60ff8416156124f3576124f361296a8561460b565b8484846141e8565b60015481565b612980612b52565b151561298b57600080fd5b6040805160208101918290526000908190526129a991602b91614bac565b50602c805460ff19169055565b600954600090611f4e9060ff168484612de9565b602b805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015612a505780601f10612a2557610100808354040283529160200191612a50565b820191906000526020600020905b815481529060010190602001808311612a3357829003601f168201915b505050505081565b600954640100000000900460ff1681565b602554610100900460ff1681565b60315481565b603254600090600160a060020a0383811662010000909204161415612aa457506001611cb0565b611f51826146a8565b600954600090611f4e9062010000900460ff168484612de9565b6009546301000000900460ff1681565b600160a060020a031660009081526010602052604090205460ff1690565b601b54601e5460ff9091169082565b600254600160a060020a03163314612b1b57600080fd5b600160a060020a0381161515612b3057600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a0316331490565b601d8054600091908390811061257457fe5b612b7e336124f9565b1515612b8957600080fd5b600860ff821610612b9957600080fd5b600082815260076020526040812060ff831660088110612bb557fe5b600891828204019190066004029054906101000a900463ffffffff169050600760008481526020019081526020016000206000018260ff16600881101515612bf957fe5b600881049091018054600163ffffffff60046007909516949094026101000a80830485169190910184168102908402199091161790556040805185815260ff8516602082015291831682820152517f77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f9181900360600190a1505050565b600354600160a060020a03163314612c8d57600080fd5b600160a060020a03811660009081526030602052604081205460ff161515612cdf57600160a060020a0382166000908152603060205260409020805460ff191660019081179091556031805490910190555b60408051600160a060020a038416815290517f93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d611179181900360200190a1612d288260026001611d9a565b5050565b6000903b1190565b602a805482908110612d4257fe5b600091825260209091200154905081565b60306020526000908152604090205460ff1681565b6029805482908110612d7657fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815293509091830182828015612a505780601f10612a2557610100808354040283529160200191612a50565b612021600b8484846141e8565b6000612df6848484613233565b90505b9392505050565b6000611c5533612a7d565b600081565b6000611c5560176140a3565b612e2533612707565b151560011480612e3d575033600160a060020a038216145b1515612e4857600080fd5b600160a060020a0381166000908152602e602052604090205460ff1615612e9457600160a060020a0381166000908152602e60205260409020805460ff19169055602f80546000190190555b60408051600160a060020a038316815290517f745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c9181900360200190a1611d918160016000611d9a565b6009546120219061296a906301000000900460ff1661460b565b602e6020526000908152604090205460ff1681565b600354600160a060020a031681565b6000611c55600b6140a3565b600354600090600160a060020a0383811691161480612f4e5750602554600a60ff90911610155b15612f5b57506001611cb0565b602554600061010090910460ff1611156130b65760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b158015612fdb57600080fd5b505afa158015612fef573d6000803e3d6000fd5b505050506040513d602081101561300557600080fd5b5051602554604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561308157600080fd5b505afa158015613095573d6000803e3d6000fd5b505050506040513d60208110156130ab57600080fd5b50519150611cb09050565b506000611cb0565b60005b8151811015612d28576130ea82828151811015156130db57fe5b90602001906020020151611cbe565b6001016130c1565b600a81565b6130ff612b52565b151561310a57600080fd5b602c5460ff161561311a57600080fd5b805160801161312857600080fd5b805161313b90602b906020840190614bac565b50602c805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a031661317f611c2a565b60408051600160a060020a038085168252831660208201526060918101828152602b805460026000196101006001841615020190911604938301849052926080830190849080156132115780601f106131e657610100808354040283529160200191613211565b820191906000526020600020905b8154815290600101906020018083116131f457829003601f168201915b505094505050505060405180910390a150565b601754601a5460ff9091169082565b600060ff8416156132585761325161324a8561460b565b8484614802565b9050612df9565b5060009392505050565b600354600160a060020a0316331461327957600080fd5b603280549115156101000261ff0019909216919091179055565b600160a060020a031660009081526018602052604090205460ff1690565b600954600090611f4e90640100000000900460ff168484612de9565b600f5460125460ff9091169082565b6132e4612e00565b15156132ef57600080fd5b6025805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b60198054600091908390811061257457fe5b60606020825111151561341f5781518083015160008181526005602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845293949390918301828280156134115780601f106133e657610100808354040283529160200191613411565b820191906000526020600020905b8154815290600101906020018083116133f457829003601f168201915b505050505092505050611cb0565b6006826040518082805190602001908083835b602083106134515780518252601f199092019160209182019101613432565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156135055780601f106134da57610100808354040283529160200191613505565b820191906000526020600020905b8154815290600101906020018083116134e857829003601f168201915b50505050509050919050565b603254620100009004600160a060020a031681565b600454600160a060020a031681565b3360008181526010602052604090205460ff16613550614c1a565b600a60ff83811682810682168085526064909106819003821685038190038216604080860182905293546101009004831660020283166020808701829052600160a060020a03891660009081526010909152949094208054949092010191821660ff199093168317905590158015906135ca575060ff8316155b156135da576135da600f85614856565b60408051308152600160a060020a038616602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a150505050565b613632612e00565b151561363d57600080fd5b60408051602080825260278054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156136dc5780601f106136b1576101008083540402835291602001916136dc565b820191906000526020600020905b8154815290600101906020018083116136bf57829003601f168201915b50509250505060405180910390a1565b600b54600e5460ff9091169082565b600e5490565b600354600160a060020a0316331480613722575033600160a060020a038216145b151561372d57600080fd5b600160a060020a03811660009081526030602052604090205460ff161561377957600160a060020a0381166000908152603060205260409020805460ff19169055603180546000190190555b60408051600160a060020a038316815290517f2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b959181900360200190a1611d918160026000611d9a565b60118054600091908390811061257457fe5b600d8054600091908390811061257457fe5b6000611c5560136140a3565b60006001821515141561380f5761380883612a7d565b9050611f51565b61380883612f27565b603254610100900460ff1681565b6027805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015612a505780601f10612a2557610100808354040283529160200191612a50565b6000600860ff83161061389357600080fd5b600083815260076020526040902060ff8316600881106138af57fe5b600891828204019190066004029054906101000a900463ffffffff16905092915050565b60006138dd612b52565b15156138e857600080fd5b6000826040516020018082805190602001908083835b6020831061391d5780518252601f1990920191602091820191016138fe565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090506000602760405160200180828054600181600116156101000203166002900480156139bc5780601f1061399a5761010080835404028352918201916139bc565b820191906000526020600020905b8154815290600101906020018083116139a8575b505091505060405160208183030381529060405280519060200120905080821415613b93576029541515613a1357604080516020810191829052600090819052613a0891602791614bac565b506000602855613ab7565b600080805b602954811015613a6b5781602a82815481101515613a3257fe5b90600052602060002001541115613a6357809250602a81815481101515613a5557fe5b906000526020600020015491505b600101613a18565b506029805483908110613a7a57fe5b9060005260206000200160279080546001816001161561010002031660029004613aa5929190614b27565b506028819055613ab4826148ed565b50505b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168560006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613b4c578181015183820152602001613b34565b50505050905090810190601f168015613b795780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600092505050611cb0565b60001960005b602954811015613c5c576000602982815481101515613bb457fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015613c1c5780601f10613bfa576101008083540402835291820191613c1c565b820191906000526020600020905b815481529060010190602001808311613c08575b505091505060405160208183030381529060405280519060200120905080851415613c5357613c4a826148ed565b81925050613c5c565b50600101613b99565b50600019811415613c6c57600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031686836040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613d00578181015183820152602001613ce8565b50505050905090810190601f168015613d2d5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1949350505050565b613d4d336124f9565b1515613d5857600080fd5b8151602010613db3578151808301516000818152600560205260408120919291613d8191614c39565b600083511115613dac5760008281526005602090815260409091208451613daa92860190614bac565b505b5050613e9e565b6006826040518082805190602001908083835b60208310613de55780518252601f199092019160209182019101613dc6565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220613e1e925090506000614c39565b600081511115613e9e57806006836040518082805190602001908083835b60208310613e5b5780518252601f199092019160209182019101613e3c565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381019093208451613e9c9591949190910192509050614bac565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c826040518080602001828103825283818151815260200191508051906020019080838360005b83811015613efd578181015183820152602001613ee5565b50505050905090810190601f168015613f2a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050565b613f44336124f9565b1515613f4f57600080fd5b600081815260076020526040812090613f688282614c7d565b50506040805182815290517f87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f9181900360200190a150565b60125490565b606481565b61202160138484846141e8565b600354600160a060020a03163314613fcf57600080fd5b600160a060020a0381161515613fe457600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a03166000908152600c602052604090205460ff1690565b600354600160a060020a0316331461403b57600080fd5b6032805482151560ff19909116811790915560408051918252517f04c71e53d136838eea703132a77007b0526b9a7691cdb7a6017a93673f865cbb9181900360200190a150565b601e5490565b600954600090611f4e906301000000900460ff168484612de9565b600080805b83600301548110156141e1576140e284600201828154811015156140c857fe5b600091825260209091200154600160a060020a0316612d2c565b15156141d857600284018054829081106140f857fe5b60009182526020909120018054600160a060020a03191690556003840154600192909201916000190181146141c75783600201600185600301540381548110151561413f57fe5b600091825260209091200154600285018054600160a060020a03909216918390811061416757fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055508360020160018560030154038154811015156141ad57fe5b60009182526020909120018054600160a060020a03191690555b6003840180546000190190556141dc565b6001015b6140a8565b5092915050565b6000600133600160a060020a0386161461429d57604080517f67e5c3bf00000000000000000000000000000000000000000000000000000000815233600482015290518691600160a060020a038316916367e5c3bf91602480820192602092909190829003018186803b15801561425e57600080fd5b505afa158015614272573d6000803e3d6000fd5b505050506040513d602081101561428857600080fd5b5051915061429533612707565b9250506142a9565b6142a632612707565b91505b600160a060020a038516600090815260018701602052604090205460ff166142cf614c1a565b600a60ff838116918206811680845260649092068290038116602084018190528403919091038116604083015260009086908116158015614314575085806143145750845b1561431e57600191505b60ff87161580159061432d5750855b801561434f575060018360ff8a166003811061434557fe5b602002015160ff16145b1561435c57506001905060025b60ff87161580159061436b5750845b801561438e575060028360ff8a166003811061438357fe5b602002015160ff1614155b1561439a575060019050805b60ff8716158015906143a95750855b80156143b25750845b156143bf57506001905060025b8115156143cb57600080fd5b600a60ff8916600381106143db57fe5b602081049091015460ff601f9092166101000a9004811682029084908a166003811061440357fe5b60ff9092166020929092020152600083600260200201518460016020020151856000602002015101019050808b60010160008c600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508060ff16600014158015614483575060ff8516155b15614492576144928b8b614856565b60ff811615156144a8576144a68b8b6149ec565b505b60408051308152600160a060020a038c16602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a15050505050505050505050565b6000828152600760209081526040822060ff8481169290920490911690601f841690600282900a9084908290856008811061453657fe5b600881049091015460046007909216919091026101000a90041663ffffffff1615614562576001614565565b60005b90508015156145be5760008781526007602052604090208290856008811061458957fe5b60088104909101805463ffffffff60046007909416939093026101000a80820484169094178316840292909302199092161790555b6040805188815260ff881660208201528215158183015290517f4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d9181900360600190a19695505050505050565b60095460009060ff838116911614156146265750600f611cb0565b60095460ff83811661010090920416141561464357506013611cb0565b60095460ff838116620100009092041614156146615750600b611cb0565b60095460ff8381166401000000009092041614156146815750601b611cb0565b60095460ff83811663010000009092041614156146a057506017611cb0565b50601f919050565b600354600090600160a060020a03838116911614806146cf5750602554606460ff90911610155b156146dc57506001611cb0565b602554600061010090910460ff1611156130b65760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b15801561475c57600080fd5b505afa158015614770573d6000803e3d6000fd5b505050506040513d602081101561478657600080fd5b5051602554604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561308157600080fd5b600160a060020a038216600090815260018401602052604081205460ff90811690600a9084166003811061483257fe5b602081049091015460ff601f9092166101000a900481169116101590509392505050565b6002820154600383015410156148af578082600201836003015481548110151561487c57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055506148e0565b60028201805460018101825560009182526020909120018054600160a060020a031916600160a060020a0383161790555b5060030180546001019055565b60298054829081106148fb57fe5b9060005260206000200160006149119190614c39565b602a80548290811061491f57fe5b60009182526020822001556029546000190181146149c55760298054600019810190811061494957fe5b9060005260206000200160298281548110151561496257fe5b90600052602060002001908054600181600116156101000203166002900461498b929190614b27565b50602a8054600019810190811061499e57fe5b9060005260206000200154602a828154811015156149b857fe5b6000918252602090912001555b60298054906149d8906000198301614c84565b50602a805490612d28906000198301614ca8565b6000805b83600301548110156132585782600160a060020a03168460020182815481101515614a1757fe5b600091825260209091200154600160a060020a03161415614b1f5760028401805482908110614a4257fe5b60009182526020909120018054600160a060020a03191690556003840154600019018114614b0a57836002016001856003015403815481101515614a8257fe5b600091825260209091200154600285018054600160a060020a039092169183908110614aaa57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550836002016001856003015403815481101515614af057fe5b60009182526020909120018054600160a060020a03191690555b50506003820180546000190190556001611f51565b6001016149f0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614b605780548555614b9c565b82800160010185558215614b9c57600052602060002091601f016020900482015b82811115614b9c578254825591600101919060010190614b81565b50614ba8929150614cc8565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614bed57805160ff1916838001178555614b9c565b82800160010185558215614b9c579182015b82811115614b9c578251825591602001919060010190614bff565b6060604051908101604052806003906020820280388339509192915050565b50805460018160011615610100020316600290046000825580601f10614c5f5750611d91565b601f016020900490600052602060002090810190611d919190614cc8565b5060009055565b81548183558181111561202157600083815260209020612021918101908301614ce2565b815481835581811115612021576000838152602090206120219181019083015b611c3791905b80821115614ba85760008155600101614cce565b611c3791905b80821115614ba8576000614cfc8282614c39565b50600101614ce856fea165627a7a7230582047a537e8b8c89a7a326a4551760d16763323616a4375078e1d61f6eb0c18ccf00029"

// DeployBaseAccessControlGroup deploys a new Ethereum contract, binding an instance of BaseAccessControlGroup to it.
func DeployBaseAccessControlGroup(auth *bind.TransactOpts, backend bind.ContractBackend, _contentSpace common.Address) (common.Address, *types.Transaction, *BaseAccessControlGroup, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessControlGroupABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseAccessControlGroupBin), backend, _contentSpace)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessControlGroup{BaseAccessControlGroupCaller: BaseAccessControlGroupCaller{contract: contract}, BaseAccessControlGroupTransactor: BaseAccessControlGroupTransactor{contract: contract}, BaseAccessControlGroupFilterer: BaseAccessControlGroupFilterer{contract: contract}}, nil
}

// BaseAccessControlGroup is an auto generated Go binding around an Ethereum contract.
type BaseAccessControlGroup struct {
	BaseAccessControlGroupCaller     // Read-only binding to the contract
	BaseAccessControlGroupTransactor // Write-only binding to the contract
	BaseAccessControlGroupFilterer   // Log filterer for contract events
}

// BaseAccessControlGroupCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessControlGroupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessControlGroupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessControlGroupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessControlGroupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessControlGroupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessControlGroupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseAccessControlGroupSession struct {
	Contract     *BaseAccessControlGroup // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// BaseAccessControlGroupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseAccessControlGroupCallerSession struct {
	Contract *BaseAccessControlGroupCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// BaseAccessControlGroupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseAccessControlGroupTransactorSession struct {
	Contract     *BaseAccessControlGroupTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// BaseAccessControlGroupRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseAccessControlGroupRaw struct {
	Contract *BaseAccessControlGroup // Generic contract binding to access the raw methods on
}

// BaseAccessControlGroupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseAccessControlGroupCallerRaw struct {
	Contract *BaseAccessControlGroupCaller // Generic read-only contract binding to access the raw methods on
}

// BaseAccessControlGroupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseAccessControlGroupTransactorRaw struct {
	Contract *BaseAccessControlGroupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseAccessControlGroup creates a new instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroup(address common.Address, backend bind.ContractBackend) (*BaseAccessControlGroup, error) {
	contract, err := bindBaseAccessControlGroup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroup{BaseAccessControlGroupCaller: BaseAccessControlGroupCaller{contract: contract}, BaseAccessControlGroupTransactor: BaseAccessControlGroupTransactor{contract: contract}, BaseAccessControlGroupFilterer: BaseAccessControlGroupFilterer{contract: contract}}, nil
}

// NewBaseAccessControlGroupCaller creates a new read-only instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessControlGroupCaller, error) {
	contract, err := bindBaseAccessControlGroup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupCaller{contract: contract}, nil
}

// NewBaseAccessControlGroupTransactor creates a new write-only instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessControlGroupTransactor, error) {
	contract, err := bindBaseAccessControlGroup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupTransactor{contract: contract}, nil
}

// NewBaseAccessControlGroupFilterer creates a new log filterer instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessControlGroupFilterer, error) {
	contract, err := bindBaseAccessControlGroup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupFilterer{contract: contract}, nil
}

// bindBaseAccessControlGroup binds a generic wrapper to an already deployed contract.
func bindBaseAccessControlGroup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessControlGroupABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessControlGroup *BaseAccessControlGroupRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessControlGroup.Contract.BaseAccessControlGroupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessControlGroup *BaseAccessControlGroupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.BaseAccessControlGroupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessControlGroup *BaseAccessControlGroupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.BaseAccessControlGroupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessControlGroup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.contract.Transact(opts, method, params...)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "ACCESS_CONFIRMED")
	return *ret0, err
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ACCESSCONFIRMED() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSCONFIRMED(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ACCESSCONFIRMED() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSCONFIRMED(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "ACCESS_NONE")
	return *ret0, err
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ACCESSNONE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSNONE(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ACCESSNONE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSNONE(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "ACCESS_TENTATIVE")
	return *ret0, err
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ACCESSTENTATIVE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSTENTATIVE(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ACCESSTENTATIVE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSTENTATIVE(&_BaseAccessControlGroup.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CANACCESS() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CANACCESS(&_BaseAccessControlGroup.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CANACCESS() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CANACCESS(&_BaseAccessControlGroup.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CANEDIT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CANEDIT(&_BaseAccessControlGroup.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CANEDIT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CANEDIT(&_BaseAccessControlGroup.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CANSEE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CANSEE(&_BaseAccessControlGroup.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CANSEE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CANSEE(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_CONTENT_OBJECT")
	return *ret0, err
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTENTOBJECT(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTENTOBJECT(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_CONTENT_TYPE")
	return *ret0, err
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTENTTYPE(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTENTTYPE(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_CONTRACT")
	return *ret0, err
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYCONTRACT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTRACT(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYCONTRACT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTRACT(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_GROUP")
	return *ret0, err
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYGROUP() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYGROUP(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYGROUP() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYGROUP(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_LIBRARY")
	return *ret0, err
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYLIBRARY() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYLIBRARY(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYLIBRARY() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYLIBRARY(&_BaseAccessControlGroup.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "TYPE_ACCESS")
	return *ret0, err
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TYPEACCESS() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPEACCESS(&_BaseAccessControlGroup.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) TYPEACCESS() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPEACCESS(&_BaseAccessControlGroup.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "TYPE_EDIT")
	return *ret0, err
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TYPEEDIT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPEEDIT(&_BaseAccessControlGroup.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) TYPEEDIT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPEEDIT(&_BaseAccessControlGroup.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "TYPE_SEE")
	return *ret0, err
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TYPESEE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPESEE(&_BaseAccessControlGroup.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) TYPESEE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPESEE(&_BaseAccessControlGroup.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "accessGroups")
	return *ret, err
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.AccessGroups(&_BaseAccessControlGroup.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.AccessGroups(&_BaseAccessControlGroup.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CanCommit() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanCommit(&_BaseAccessControlGroup.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CanCommit() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanCommit(&_BaseAccessControlGroup.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CanConfirm() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanConfirm(&_BaseAccessControlGroup.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CanConfirm() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanConfirm(&_BaseAccessControlGroup.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CanEdit() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanEdit(&_BaseAccessControlGroup.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CanEdit() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanEdit(&_BaseAccessControlGroup.CallOpts)
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckAccessGroupRights(opts *bind.CallOpts, group common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkAccessGroupRights", group, access_type)
	return *ret0, err
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckAccessGroupRights(group common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckAccessGroupRights(&_BaseAccessControlGroup.CallOpts, group, access_type)
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckAccessGroupRights(group common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckAccessGroupRights(&_BaseAccessControlGroup.CallOpts, group, access_type)
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckContentObjectRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkContentObjectRights", obj, access_type)
	return *ret0, err
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckContentObjectRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckContentObjectRights(&_BaseAccessControlGroup.CallOpts, obj, access_type)
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckContentObjectRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckContentObjectRights(&_BaseAccessControlGroup.CallOpts, obj, access_type)
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckContentTypeRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkContentTypeRights", obj, access_type)
	return *ret0, err
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckContentTypeRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckContentTypeRights(&_BaseAccessControlGroup.CallOpts, obj, access_type)
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckContentTypeRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckContentTypeRights(&_BaseAccessControlGroup.CallOpts, obj, access_type)
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckContractRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkContractRights", obj, access_type)
	return *ret0, err
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckContractRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckContractRights(&_BaseAccessControlGroup.CallOpts, obj, access_type)
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckContractRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckContractRights(&_BaseAccessControlGroup.CallOpts, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkDirectRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckDirectRights(&_BaseAccessControlGroup.CallOpts, index_type, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckDirectRights(&_BaseAccessControlGroup.CallOpts, index_type, obj, access_type)
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckLibraryRights(opts *bind.CallOpts, lib common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkLibraryRights", lib, access_type)
	return *ret0, err
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckLibraryRights(lib common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckLibraryRights(&_BaseAccessControlGroup.CallOpts, lib, access_type)
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckLibraryRights(lib common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckLibraryRights(&_BaseAccessControlGroup.CallOpts, lib, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckRights(&_BaseAccessControlGroup.CallOpts, index_type, obj, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckRights(&_BaseAccessControlGroup.CallOpts, index_type, obj, access_type)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CommitPending() (bool, error) {
	return _BaseAccessControlGroup.Contract.CommitPending(&_BaseAccessControlGroup.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CommitPending() (bool, error) {
	return _BaseAccessControlGroup.Contract.CommitPending(&_BaseAccessControlGroup.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contentObjects")
	return *ret, err
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.ContentObjects(&_BaseAccessControlGroup.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.ContentObjects(&_BaseAccessControlGroup.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ContentSpace() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ContentSpace(&_BaseAccessControlGroup.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ContentSpace() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ContentSpace(&_BaseAccessControlGroup.CallOpts)
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentTypes(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contentTypes")
	return *ret, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ContentTypes() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.ContentTypes(&_BaseAccessControlGroup.CallOpts)
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ContentTypes() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.ContentTypes(&_BaseAccessControlGroup.CallOpts)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contractExists", addr)
	return *ret0, err
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ContractExists(addr common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.ContractExists(&_BaseAccessControlGroup.CallOpts, addr)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ContractExists(addr common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.ContractExists(&_BaseAccessControlGroup.CallOpts, addr)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contracts")
	return *ret, err
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Contracts(&_BaseAccessControlGroup.CallOpts)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Contracts(&_BaseAccessControlGroup.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CountVersionHashes() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.CountVersionHashes(&_BaseAccessControlGroup.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.CountVersionHashes(&_BaseAccessControlGroup.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Creator() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Creator(&_BaseAccessControlGroup.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Creator() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Creator(&_BaseAccessControlGroup.CallOpts)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getAccessGroup", position)
	return *ret0, err
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroup(&_BaseAccessControlGroup.CallOpts, position)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroup(&_BaseAccessControlGroup.CallOpts, position)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getAccessGroupRights", group)
	return *ret0, err
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroupRights(&_BaseAccessControlGroup.CallOpts, group)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroupRights(&_BaseAccessControlGroup.CallOpts, group)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getAccessGroupsLength")
	return *ret0, err
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetAccessGroupsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroupsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetAccessGroupsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroupsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetBit(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getBit", _ident, _ord)
	return *ret0, err
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.GetBit(&_BaseAccessControlGroup.CallOpts, _ident, _ord)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.GetBit(&_BaseAccessControlGroup.CallOpts, _ident, _ord)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentObject", position)
	return *ret0, err
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContentObject(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContentObject(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentObjectRights", obj)
	return *ret0, err
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContentObjectRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContentObjectRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentObjectsLength")
	return *ret0, err
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentObjectsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContentObjectsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentObjectsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContentObjectsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentType", position)
	return *ret0, err
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentType(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContentType(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentType(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContentType(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentTypeRights", obj)
	return *ret0, err
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContentTypeRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContentTypeRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentTypesLength")
	return *ret0, err
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentTypesLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContentTypesLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentTypesLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContentTypesLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContract", position)
	return *ret0, err
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContract(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContract(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContract(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContract(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContractRights", obj)
	return *ret0, err
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContractRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContractRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContractRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContractRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContractsLength")
	return *ret0, err
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContractsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContractsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContractsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContractsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetCounter(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getCounter", _ident, _ord)
	return *ret0, err
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _BaseAccessControlGroup.Contract.GetCounter(&_BaseAccessControlGroup.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _BaseAccessControlGroup.Contract.GetCounter(&_BaseAccessControlGroup.CallOpts, _ident, _ord)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getLibrariesLength")
	return *ret0, err
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetLibrariesLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetLibrariesLength(&_BaseAccessControlGroup.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetLibrariesLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetLibrariesLength(&_BaseAccessControlGroup.CallOpts)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getLibrary", position)
	return *ret0, err
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetLibrary(&_BaseAccessControlGroup.CallOpts, position)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetLibrary(&_BaseAccessControlGroup.CallOpts, position)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getLibraryRights", lib)
	return *ret0, err
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetLibraryRights(&_BaseAccessControlGroup.CallOpts, lib)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetLibraryRights(&_BaseAccessControlGroup.CallOpts, lib)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseAccessControlGroup.Contract.GetMeta(&_BaseAccessControlGroup.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseAccessControlGroup.Contract.GetMeta(&_BaseAccessControlGroup.CallOpts, key)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasAccess(&_BaseAccessControlGroup.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasAccess(&_BaseAccessControlGroup.CallOpts, candidate)
}

// HasAccessRight is a free data retrieval call binding the contract method 0xd8961c8d.
//
// Solidity: function hasAccessRight(address candidate, bool mgr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasAccessRight(opts *bind.CallOpts, candidate common.Address, mgr bool) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "hasAccessRight", candidate, mgr)
	return *ret0, err
}

// HasAccessRight is a free data retrieval call binding the contract method 0xd8961c8d.
//
// Solidity: function hasAccessRight(address candidate, bool mgr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) HasAccessRight(candidate common.Address, mgr bool) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasAccessRight(&_BaseAccessControlGroup.CallOpts, candidate, mgr)
}

// HasAccessRight is a free data retrieval call binding the contract method 0xd8961c8d.
//
// Solidity: function hasAccessRight(address candidate, bool mgr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) HasAccessRight(candidate common.Address, mgr bool) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasAccessRight(&_BaseAccessControlGroup.CallOpts, candidate, mgr)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasEditorRight(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "hasEditorRight", _candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) HasEditorRight(_candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasEditorRight(&_BaseAccessControlGroup.CallOpts, _candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) HasEditorRight(_candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasEditorRight(&_BaseAccessControlGroup.CallOpts, _candidate)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasManagerAccess(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "hasManagerAccess", _candidate)
	return *ret0, err
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) HasManagerAccess(_candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasManagerAccess(&_BaseAccessControlGroup.CallOpts, _candidate)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) HasManagerAccess(_candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasManagerAccess(&_BaseAccessControlGroup.CallOpts, _candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) IndexCategory() (uint8, error) {
	return _BaseAccessControlGroup.Contract.IndexCategory(&_BaseAccessControlGroup.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) IndexCategory() (uint8, error) {
	return _BaseAccessControlGroup.Contract.IndexCategory(&_BaseAccessControlGroup.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.IsAdmin(&_BaseAccessControlGroup.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.IsAdmin(&_BaseAccessControlGroup.CallOpts, _candidate)
}

// IsConsumerGroup is a free data retrieval call binding the contract method 0xdde12828.
//
// Solidity: function isConsumerGroup() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) IsConsumerGroup(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "isConsumerGroup")
	return *ret0, err
}

// IsConsumerGroup is a free data retrieval call binding the contract method 0xdde12828.
//
// Solidity: function isConsumerGroup() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) IsConsumerGroup() (bool, error) {
	return _BaseAccessControlGroup.Contract.IsConsumerGroup(&_BaseAccessControlGroup.CallOpts)
}

// IsConsumerGroup is a free data retrieval call binding the contract method 0xdde12828.
//
// Solidity: function isConsumerGroup() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) IsConsumerGroup() (bool, error) {
	return _BaseAccessControlGroup.Contract.IsConsumerGroup(&_BaseAccessControlGroup.CallOpts)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "libraries")
	return *ret, err
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Libraries(&_BaseAccessControlGroup.CallOpts)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Libraries(&_BaseAccessControlGroup.CallOpts)
}

// ManagersMap is a free data retrieval call binding the contract method 0x793f3f71.
//
// Solidity: function managersMap(address ) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ManagersMap(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "managersMap", arg0)
	return *ret0, err
}

// ManagersMap is a free data retrieval call binding the contract method 0x793f3f71.
//
// Solidity: function managersMap(address ) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ManagersMap(arg0 common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.ManagersMap(&_BaseAccessControlGroup.CallOpts, arg0)
}

// ManagersMap is a free data retrieval call binding the contract method 0x793f3f71.
//
// Solidity: function managersMap(address ) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ManagersMap(arg0 common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.ManagersMap(&_BaseAccessControlGroup.CallOpts, arg0)
}

// ManagersNum is a free data retrieval call binding the contract method 0x638d0290.
//
// Solidity: function managersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ManagersNum(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "managersNum")
	return *ret0, err
}

// ManagersNum is a free data retrieval call binding the contract method 0x638d0290.
//
// Solidity: function managersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ManagersNum() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.ManagersNum(&_BaseAccessControlGroup.CallOpts)
}

// ManagersNum is a free data retrieval call binding the contract method 0x638d0290.
//
// Solidity: function managersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ManagersNum() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.ManagersNum(&_BaseAccessControlGroup.CallOpts)
}

// MembersMap is a free data retrieval call binding the contract method 0x872ea68a.
//
// Solidity: function membersMap(address ) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) MembersMap(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "membersMap", arg0)
	return *ret0, err
}

// MembersMap is a free data retrieval call binding the contract method 0x872ea68a.
//
// Solidity: function membersMap(address ) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) MembersMap(arg0 common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.MembersMap(&_BaseAccessControlGroup.CallOpts, arg0)
}

// MembersMap is a free data retrieval call binding the contract method 0x872ea68a.
//
// Solidity: function membersMap(address ) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) MembersMap(arg0 common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.MembersMap(&_BaseAccessControlGroup.CallOpts, arg0)
}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) MembersNum(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "membersNum")
	return *ret0, err
}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) MembersNum() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.MembersNum(&_BaseAccessControlGroup.CallOpts)
}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) MembersNum() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.MembersNum(&_BaseAccessControlGroup.CallOpts)
}

// OauthEnabled is a free data retrieval call binding the contract method 0x12b39dd0.
//
// Solidity: function oauthEnabled() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) OauthEnabled(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "oauthEnabled")
	return *ret0, err
}

// OauthEnabled is a free data retrieval call binding the contract method 0x12b39dd0.
//
// Solidity: function oauthEnabled() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) OauthEnabled() (bool, error) {
	return _BaseAccessControlGroup.Contract.OauthEnabled(&_BaseAccessControlGroup.CallOpts)
}

// OauthEnabled is a free data retrieval call binding the contract method 0x12b39dd0.
//
// Solidity: function oauthEnabled() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) OauthEnabled() (bool, error) {
	return _BaseAccessControlGroup.Contract.OauthEnabled(&_BaseAccessControlGroup.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ObjectHash() (string, error) {
	return _BaseAccessControlGroup.Contract.ObjectHash(&_BaseAccessControlGroup.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ObjectHash() (string, error) {
	return _BaseAccessControlGroup.Contract.ObjectHash(&_BaseAccessControlGroup.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.ObjectTimestamp(&_BaseAccessControlGroup.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.ObjectTimestamp(&_BaseAccessControlGroup.CallOpts)
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Others(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "others")
	return *ret, err
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Others() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Others(&_BaseAccessControlGroup.CallOpts)
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Others() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Others(&_BaseAccessControlGroup.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Owner() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Owner(&_BaseAccessControlGroup.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Owner() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Owner(&_BaseAccessControlGroup.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ParentAddress() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ParentAddress(&_BaseAccessControlGroup.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ParentAddress() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ParentAddress(&_BaseAccessControlGroup.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) PendingHash() (string, error) {
	return _BaseAccessControlGroup.Contract.PendingHash(&_BaseAccessControlGroup.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) PendingHash() (string, error) {
	return _BaseAccessControlGroup.Contract.PendingHash(&_BaseAccessControlGroup.CallOpts)
}

// Tenant is a free data retrieval call binding the contract method 0xadf07791.
//
// Solidity: function tenant() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Tenant(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "tenant")
	return *ret0, err
}

// Tenant is a free data retrieval call binding the contract method 0xadf07791.
//
// Solidity: function tenant() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Tenant() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Tenant(&_BaseAccessControlGroup.CallOpts)
}

// Tenant is a free data retrieval call binding the contract method 0xadf07791.
//
// Solidity: function tenant() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Tenant() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Tenant(&_BaseAccessControlGroup.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Version() ([32]byte, error) {
	return _BaseAccessControlGroup.Contract.Version(&_BaseAccessControlGroup.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Version() ([32]byte, error) {
	return _BaseAccessControlGroup.Contract.Version(&_BaseAccessControlGroup.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) VersionAPI() ([32]byte, error) {
	return _BaseAccessControlGroup.Contract.VersionAPI(&_BaseAccessControlGroup.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseAccessControlGroup.Contract.VersionAPI(&_BaseAccessControlGroup.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseAccessControlGroup.Contract.VersionHashes(&_BaseAccessControlGroup.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseAccessControlGroup.Contract.VersionHashes(&_BaseAccessControlGroup.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.VersionTimestamp(&_BaseAccessControlGroup.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.VersionTimestamp(&_BaseAccessControlGroup.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Visibility() (uint8, error) {
	return _BaseAccessControlGroup.Contract.Visibility(&_BaseAccessControlGroup.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Visibility() (uint8, error) {
	return _BaseAccessControlGroup.Contract.Visibility(&_BaseAccessControlGroup.CallOpts)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.AccessRequestV3(&_BaseAccessControlGroup.TransactOpts, arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.AccessRequestV3(&_BaseAccessControlGroup.TransactOpts, arg0, arg1)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpAccessGroups(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpAccessGroups(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpAll")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpAll() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpAll(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpAll() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpAll(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpContentObjects(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpContentObjects(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpContentTypes(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpContentTypes(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpLibraries")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpLibraries() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpLibraries(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpLibraries() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpLibraries(&_BaseAccessControlGroup.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ClearPending() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.ClearPending(&_BaseAccessControlGroup.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.ClearPending(&_BaseAccessControlGroup.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.Commit(&_BaseAccessControlGroup.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.Commit(&_BaseAccessControlGroup.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.ConfirmCommit(&_BaseAccessControlGroup.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.ConfirmCommit(&_BaseAccessControlGroup.TransactOpts)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) DeleteGroup(opts *bind.TransactOpts, _ident [32]byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "deleteGroup", _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.DeleteGroup(&_BaseAccessControlGroup.TransactOpts, _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.DeleteGroup(&_BaseAccessControlGroup.TransactOpts, _ident)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.DeleteVersion(&_BaseAccessControlGroup.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.DeleteVersion(&_BaseAccessControlGroup.TransactOpts, _versionHash)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) GrantAccess(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "grantAccess", candidate)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GrantAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.GrantAccess(&_BaseAccessControlGroup.TransactOpts, candidate)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) GrantAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.GrantAccess(&_BaseAccessControlGroup.TransactOpts, candidate)
}

// GrantAccessMany is a paid mutator transaction binding the contract method 0x9602a0b3.
//
// Solidity: function grantAccessMany(address[] candidates) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) GrantAccessMany(opts *bind.TransactOpts, candidates []common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "grantAccessMany", candidates)
}

// GrantAccessMany is a paid mutator transaction binding the contract method 0x9602a0b3.
//
// Solidity: function grantAccessMany(address[] candidates) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GrantAccessMany(candidates []common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.GrantAccessMany(&_BaseAccessControlGroup.TransactOpts, candidates)
}

// GrantAccessMany is a paid mutator transaction binding the contract method 0x9602a0b3.
//
// Solidity: function grantAccessMany(address[] candidates) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) GrantAccessMany(candidates []common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.GrantAccessMany(&_BaseAccessControlGroup.TransactOpts, candidates)
}

// GrantManagerAccess is a paid mutator transaction binding the contract method 0x75861a95.
//
// Solidity: function grantManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) GrantManagerAccess(opts *bind.TransactOpts, manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "grantManagerAccess", manager)
}

// GrantManagerAccess is a paid mutator transaction binding the contract method 0x75861a95.
//
// Solidity: function grantManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GrantManagerAccess(manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.GrantManagerAccess(&_BaseAccessControlGroup.TransactOpts, manager)
}

// GrantManagerAccess is a paid mutator transaction binding the contract method 0x75861a95.
//
// Solidity: function grantManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) GrantManagerAccess(manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.GrantManagerAccess(&_BaseAccessControlGroup.TransactOpts, manager)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) IncrementCounter(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "incrementCounter", _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.IncrementCounter(&_BaseAccessControlGroup.TransactOpts, _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.IncrementCounter(&_BaseAccessControlGroup.TransactOpts, _ident, _ord)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Kill() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.Kill(&_BaseAccessControlGroup.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.Kill(&_BaseAccessControlGroup.TransactOpts)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.PutMeta(&_BaseAccessControlGroup.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.PutMeta(&_BaseAccessControlGroup.TransactOpts, key, value)
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) RevokeAccess(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "revokeAccess", candidate)
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) RevokeAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.RevokeAccess(&_BaseAccessControlGroup.TransactOpts, candidate)
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) RevokeAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.RevokeAccess(&_BaseAccessControlGroup.TransactOpts, candidate)
}

// RevokeManagerAccess is a paid mutator transaction binding the contract method 0xcdb849b7.
//
// Solidity: function revokeManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) RevokeManagerAccess(opts *bind.TransactOpts, manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "revokeManagerAccess", manager)
}

// RevokeManagerAccess is a paid mutator transaction binding the contract method 0xcdb849b7.
//
// Solidity: function revokeManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) RevokeManagerAccess(manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.RevokeManagerAccess(&_BaseAccessControlGroup.TransactOpts, manager)
}

// RevokeManagerAccess is a paid mutator transaction binding the contract method 0xcdb849b7.
//
// Solidity: function revokeManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) RevokeManagerAccess(manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.RevokeManagerAccess(&_BaseAccessControlGroup.TransactOpts, manager)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAccessGroupRights(&_BaseAccessControlGroup.TransactOpts, group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAccessGroupRights(&_BaseAccessControlGroup.TransactOpts, group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setAccessRights")
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetAccessRights() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAccessRights(&_BaseAccessControlGroup.TransactOpts)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetAccessRights() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAccessRights(&_BaseAccessControlGroup.TransactOpts)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetAndGetBit(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setAndGetBit", _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAndGetBit(&_BaseAccessControlGroup.TransactOpts, _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAndGetBit(&_BaseAccessControlGroup.TransactOpts, _ident, _ord)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentObjectRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentObjectRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentSpace(&_BaseAccessControlGroup.TransactOpts, content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentSpace(&_BaseAccessControlGroup.TransactOpts, content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentTypeRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentTypeRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContractRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContractRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetEntityRights(opts *bind.TransactOpts, indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setEntityRights", indexType, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetEntityRights(indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetEntityRights(&_BaseAccessControlGroup.TransactOpts, indexType, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetEntityRights(indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetEntityRights(&_BaseAccessControlGroup.TransactOpts, indexType, obj, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetGroupRights(&_BaseAccessControlGroup.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetGroupRights(&_BaseAccessControlGroup.TransactOpts, group, access_type, access)
}

// SetIsConsumerGroup is a paid mutator transaction binding the contract method 0xa3125255.
//
// Solidity: function setIsConsumerGroup(bool _enabled) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetIsConsumerGroup(opts *bind.TransactOpts, _enabled bool) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setIsConsumerGroup", _enabled)
}

// SetIsConsumerGroup is a paid mutator transaction binding the contract method 0xa3125255.
//
// Solidity: function setIsConsumerGroup(bool _enabled) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetIsConsumerGroup(_enabled bool) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetIsConsumerGroup(&_BaseAccessControlGroup.TransactOpts, _enabled)
}

// SetIsConsumerGroup is a paid mutator transaction binding the contract method 0xa3125255.
//
// Solidity: function setIsConsumerGroup(bool _enabled) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetIsConsumerGroup(_enabled bool) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetIsConsumerGroup(&_BaseAccessControlGroup.TransactOpts, _enabled)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetLibraryRights(&_BaseAccessControlGroup.TransactOpts, lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetLibraryRights(&_BaseAccessControlGroup.TransactOpts, lib, access_type, access)
}

// SetOAuthEnabled is a paid mutator transaction binding the contract method 0xfba3779a.
//
// Solidity: function setOAuthEnabled(bool _enabled) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetOAuthEnabled(opts *bind.TransactOpts, _enabled bool) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setOAuthEnabled", _enabled)
}

// SetOAuthEnabled is a paid mutator transaction binding the contract method 0xfba3779a.
//
// Solidity: function setOAuthEnabled(bool _enabled) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetOAuthEnabled(_enabled bool) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetOAuthEnabled(&_BaseAccessControlGroup.TransactOpts, _enabled)
}

// SetOAuthEnabled is a paid mutator transaction binding the contract method 0xfba3779a.
//
// Solidity: function setOAuthEnabled(bool _enabled) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetOAuthEnabled(_enabled bool) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetOAuthEnabled(&_BaseAccessControlGroup.TransactOpts, _enabled)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetRights(&_BaseAccessControlGroup.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetRights(&_BaseAccessControlGroup.TransactOpts, stakeholder, access_type, access)
}

// SetTenant is a paid mutator transaction binding the contract method 0x2e74a4de.
//
// Solidity: function setTenant(address _tenantAddr) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetTenant(opts *bind.TransactOpts, _tenantAddr common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setTenant", _tenantAddr)
}

// SetTenant is a paid mutator transaction binding the contract method 0x2e74a4de.
//
// Solidity: function setTenant(address _tenantAddr) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetTenant(_tenantAddr common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetTenant(&_BaseAccessControlGroup.TransactOpts, _tenantAddr)
}

// SetTenant is a paid mutator transaction binding the contract method 0x2e74a4de.
//
// Solidity: function setTenant(address _tenantAddr) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetTenant(_tenantAddr common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetTenant(&_BaseAccessControlGroup.TransactOpts, _tenantAddr)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetVisibility(&_BaseAccessControlGroup.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetVisibility(&_BaseAccessControlGroup.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.TransferCreatorship(&_BaseAccessControlGroup.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.TransferCreatorship(&_BaseAccessControlGroup.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.TransferOwnership(&_BaseAccessControlGroup.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.TransferOwnership(&_BaseAccessControlGroup.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.UpdateRequest(&_BaseAccessControlGroup.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.UpdateRequest(&_BaseAccessControlGroup.TransactOpts)
}

// BaseAccessControlGroupAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupAccessRequestV3Iterator struct {
	Event *BaseAccessControlGroupAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupAccessRequestV3 represents a AccessRequestV3 event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseAccessControlGroupAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupAccessRequestV3Iterator{contract: _BaseAccessControlGroup.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupAccessRequestV3)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseAccessRequestV3(log types.Log) (*BaseAccessControlGroupAccessRequestV3, error) {
	event := new(BaseAccessControlGroupAccessRequestV3)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupBitSetAndGetIterator is returned from FilterBitSetAndGet and is used to iterate over the raw logs and unpacked data for BitSetAndGet events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupBitSetAndGetIterator struct {
	Event *BaseAccessControlGroupBitSetAndGet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupBitSetAndGetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupBitSetAndGet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupBitSetAndGet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupBitSetAndGetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupBitSetAndGetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupBitSetAndGet represents a BitSetAndGet event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupBitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBitSetAndGet is a free log retrieval operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterBitSetAndGet(opts *bind.FilterOpts) (*BaseAccessControlGroupBitSetAndGetIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupBitSetAndGetIterator{contract: _BaseAccessControlGroup.contract, event: "BitSetAndGet", logs: logs, sub: sub}, nil
}

// WatchBitSetAndGet is a free log subscription operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchBitSetAndGet(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupBitSetAndGet) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupBitSetAndGet)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitSetAndGet is a log parse operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseBitSetAndGet(log types.Log) (*BaseAccessControlGroupBitSetAndGet, error) {
	event := new(BaseAccessControlGroupBitSetAndGet)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCommitPendingIterator struct {
	Event *BaseAccessControlGroupCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupCommitPending represents a CommitPending event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseAccessControlGroupCommitPendingIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupCommitPendingIterator{contract: _BaseAccessControlGroup.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupCommitPending)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseCommitPending(log types.Log) (*BaseAccessControlGroupCommitPending, error) {
	event := new(BaseAccessControlGroupCommitPending)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupCounterIncrementedIterator is returned from FilterCounterIncremented and is used to iterate over the raw logs and unpacked data for CounterIncremented events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCounterIncrementedIterator struct {
	Event *BaseAccessControlGroupCounterIncremented // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupCounterIncrementedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupCounterIncremented)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupCounterIncremented)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupCounterIncrementedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupCounterIncrementedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupCounterIncremented represents a CounterIncremented event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterIncremented is a free log retrieval operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterCounterIncremented(opts *bind.FilterOpts) (*BaseAccessControlGroupCounterIncrementedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupCounterIncrementedIterator{contract: _BaseAccessControlGroup.contract, event: "CounterIncremented", logs: logs, sub: sub}, nil
}

// WatchCounterIncremented is a free log subscription operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchCounterIncremented(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupCounterIncremented) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupCounterIncremented)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterIncremented is a log parse operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseCounterIncremented(log types.Log) (*BaseAccessControlGroupCounterIncremented, error) {
	event := new(BaseAccessControlGroupCounterIncremented)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupManagerAccessGrantedIterator is returned from FilterManagerAccessGranted and is used to iterate over the raw logs and unpacked data for ManagerAccessGranted events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessGrantedIterator struct {
	Event *BaseAccessControlGroupManagerAccessGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupManagerAccessGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupManagerAccessGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupManagerAccessGranted represents a ManagerAccessGranted event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessGranted struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterManagerAccessGranted is a free log retrieval operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterManagerAccessGranted(opts *bind.FilterOpts) (*BaseAccessControlGroupManagerAccessGrantedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "ManagerAccessGranted")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupManagerAccessGrantedIterator{contract: _BaseAccessControlGroup.contract, event: "ManagerAccessGranted", logs: logs, sub: sub}, nil
}

// WatchManagerAccessGranted is a free log subscription operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchManagerAccessGranted(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupManagerAccessGranted) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "ManagerAccessGranted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupManagerAccessGranted)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseManagerAccessGranted is a log parse operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseManagerAccessGranted(log types.Log) (*BaseAccessControlGroupManagerAccessGranted, error) {
	event := new(BaseAccessControlGroupManagerAccessGranted)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessGranted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupManagerAccessRevokedIterator is returned from FilterManagerAccessRevoked and is used to iterate over the raw logs and unpacked data for ManagerAccessRevoked events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessRevokedIterator struct {
	Event *BaseAccessControlGroupManagerAccessRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupManagerAccessRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupManagerAccessRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupManagerAccessRevoked represents a ManagerAccessRevoked event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterManagerAccessRevoked is a free log retrieval operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterManagerAccessRevoked(opts *bind.FilterOpts) (*BaseAccessControlGroupManagerAccessRevokedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "ManagerAccessRevoked")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupManagerAccessRevokedIterator{contract: _BaseAccessControlGroup.contract, event: "ManagerAccessRevoked", logs: logs, sub: sub}, nil
}

// WatchManagerAccessRevoked is a free log subscription operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchManagerAccessRevoked(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupManagerAccessRevoked) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "ManagerAccessRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupManagerAccessRevoked)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseManagerAccessRevoked is a log parse operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseManagerAccessRevoked(log types.Log) (*BaseAccessControlGroupManagerAccessRevoked, error) {
	event := new(BaseAccessControlGroupManagerAccessRevoked)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessRevoked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupMemberAddedIterator is returned from FilterMemberAdded and is used to iterate over the raw logs and unpacked data for MemberAdded events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberAddedIterator struct {
	Event *BaseAccessControlGroupMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupMemberAdded represents a MemberAdded event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberAdded struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMemberAdded is a free log retrieval operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterMemberAdded(opts *bind.FilterOpts) (*BaseAccessControlGroupMemberAddedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "MemberAdded")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupMemberAddedIterator{contract: _BaseAccessControlGroup.contract, event: "MemberAdded", logs: logs, sub: sub}, nil
}

// WatchMemberAdded is a free log subscription operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchMemberAdded(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupMemberAdded) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "MemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupMemberAdded)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberAdded is a log parse operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseMemberAdded(log types.Log) (*BaseAccessControlGroupMemberAdded, error) {
	event := new(BaseAccessControlGroupMemberAdded)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupMemberRevokedIterator is returned from FilterMemberRevoked and is used to iterate over the raw logs and unpacked data for MemberRevoked events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberRevokedIterator struct {
	Event *BaseAccessControlGroupMemberRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupMemberRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupMemberRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupMemberRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupMemberRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupMemberRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupMemberRevoked represents a MemberRevoked event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMemberRevoked is a free log retrieval operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterMemberRevoked(opts *bind.FilterOpts) (*BaseAccessControlGroupMemberRevokedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "MemberRevoked")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupMemberRevokedIterator{contract: _BaseAccessControlGroup.contract, event: "MemberRevoked", logs: logs, sub: sub}, nil
}

// WatchMemberRevoked is a free log subscription operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchMemberRevoked(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupMemberRevoked) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "MemberRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupMemberRevoked)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberRevoked is a log parse operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseMemberRevoked(log types.Log) (*BaseAccessControlGroupMemberRevoked, error) {
	event := new(BaseAccessControlGroupMemberRevoked)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberRevoked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupOAuthStatusChangedIterator is returned from FilterOAuthStatusChanged and is used to iterate over the raw logs and unpacked data for OAuthStatusChanged events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupOAuthStatusChangedIterator struct {
	Event *BaseAccessControlGroupOAuthStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupOAuthStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupOAuthStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupOAuthStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupOAuthStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupOAuthStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupOAuthStatusChanged represents a OAuthStatusChanged event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupOAuthStatusChanged struct {
	Enabled bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOAuthStatusChanged is a free log retrieval operation binding the contract event 0x04c71e53d136838eea703132a77007b0526b9a7691cdb7a6017a93673f865cbb.
//
// Solidity: event OAuthStatusChanged(bool enabled)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterOAuthStatusChanged(opts *bind.FilterOpts) (*BaseAccessControlGroupOAuthStatusChangedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "OAuthStatusChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupOAuthStatusChangedIterator{contract: _BaseAccessControlGroup.contract, event: "OAuthStatusChanged", logs: logs, sub: sub}, nil
}

// WatchOAuthStatusChanged is a free log subscription operation binding the contract event 0x04c71e53d136838eea703132a77007b0526b9a7691cdb7a6017a93673f865cbb.
//
// Solidity: event OAuthStatusChanged(bool enabled)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchOAuthStatusChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupOAuthStatusChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "OAuthStatusChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupOAuthStatusChanged)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "OAuthStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOAuthStatusChanged is a log parse operation binding the contract event 0x04c71e53d136838eea703132a77007b0526b9a7691cdb7a6017a93673f865cbb.
//
// Solidity: event OAuthStatusChanged(bool enabled)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseOAuthStatusChanged(log types.Log) (*BaseAccessControlGroupOAuthStatusChanged, error) {
	event := new(BaseAccessControlGroupOAuthStatusChanged)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "OAuthStatusChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupObjectMetaChangedIterator struct {
	Event *BaseAccessControlGroupObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseAccessControlGroupObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupObjectMetaChangedIterator{contract: _BaseAccessControlGroup.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupObjectMetaChanged)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseObjectMetaChanged(log types.Log) (*BaseAccessControlGroupObjectMetaChanged, error) {
	event := new(BaseAccessControlGroupObjectMetaChanged)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupRightsChangedIterator struct {
	Event *BaseAccessControlGroupRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupRightsChanged represents a RightsChanged event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*BaseAccessControlGroupRightsChangedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupRightsChangedIterator{contract: _BaseAccessControlGroup.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupRightsChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupRightsChanged)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseRightsChanged(log types.Log) (*BaseAccessControlGroupRightsChanged, error) {
	event := new(BaseAccessControlGroupRightsChanged)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupUnauthorizedOperationIterator is returned from FilterUnauthorizedOperation and is used to iterate over the raw logs and unpacked data for UnauthorizedOperation events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUnauthorizedOperationIterator struct {
	Event *BaseAccessControlGroupUnauthorizedOperation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupUnauthorizedOperation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupUnauthorizedOperation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupUnauthorizedOperation represents a UnauthorizedOperation event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUnauthorizedOperation struct {
	OperationCode *big.Int
	Candidate     common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUnauthorizedOperation is a free log retrieval operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterUnauthorizedOperation(opts *bind.FilterOpts) (*BaseAccessControlGroupUnauthorizedOperationIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupUnauthorizedOperationIterator{contract: _BaseAccessControlGroup.contract, event: "UnauthorizedOperation", logs: logs, sub: sub}, nil
}

// WatchUnauthorizedOperation is a free log subscription operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchUnauthorizedOperation(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupUnauthorizedOperation) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupUnauthorizedOperation)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnauthorizedOperation is a log parse operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseUnauthorizedOperation(log types.Log) (*BaseAccessControlGroupUnauthorizedOperation, error) {
	event := new(BaseAccessControlGroupUnauthorizedOperation)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUpdateRequestIterator struct {
	Event *BaseAccessControlGroupUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupUpdateRequest represents a UpdateRequest event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseAccessControlGroupUpdateRequestIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupUpdateRequestIterator{contract: _BaseAccessControlGroup.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupUpdateRequest)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseUpdateRequest(log types.Log) (*BaseAccessControlGroupUpdateRequest, error) {
	event := new(BaseAccessControlGroupUpdateRequest)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionConfirmIterator struct {
	Event *BaseAccessControlGroupVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupVersionConfirm represents a VersionConfirm event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseAccessControlGroupVersionConfirmIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupVersionConfirmIterator{contract: _BaseAccessControlGroup.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupVersionConfirm)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseVersionConfirm(log types.Log) (*BaseAccessControlGroupVersionConfirm, error) {
	event := new(BaseAccessControlGroupVersionConfirm)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionDeleteIterator struct {
	Event *BaseAccessControlGroupVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupVersionDelete represents a VersionDelete event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseAccessControlGroupVersionDeleteIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupVersionDeleteIterator{contract: _BaseAccessControlGroup.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupVersionDelete)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseVersionDelete(log types.Log) (*BaseAccessControlGroupVersionDelete, error) {
	event := new(BaseAccessControlGroupVersionDelete)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVisibilityChangedIterator struct {
	Event *BaseAccessControlGroupVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupVisibilityChanged represents a VisibilityChanged event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseAccessControlGroupVisibilityChangedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupVisibilityChangedIterator{contract: _BaseAccessControlGroup.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupVisibilityChanged)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseVisibilityChanged(log types.Log) (*BaseAccessControlGroupVisibilityChanged, error) {
	event := new(BaseAccessControlGroupVisibilityChanged)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupWordGroupDeletedIterator is returned from FilterWordGroupDeleted and is used to iterate over the raw logs and unpacked data for WordGroupDeleted events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupWordGroupDeletedIterator struct {
	Event *BaseAccessControlGroupWordGroupDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupWordGroupDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupWordGroupDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupWordGroupDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupWordGroupDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupWordGroupDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupWordGroupDeleted represents a WordGroupDeleted event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupWordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWordGroupDeleted is a free log retrieval operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterWordGroupDeleted(opts *bind.FilterOpts) (*BaseAccessControlGroupWordGroupDeletedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupWordGroupDeletedIterator{contract: _BaseAccessControlGroup.contract, event: "WordGroupDeleted", logs: logs, sub: sub}, nil
}

// WatchWordGroupDeleted is a free log subscription operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchWordGroupDeleted(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupWordGroupDeleted) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupWordGroupDeleted)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWordGroupDeleted is a log parse operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseWordGroupDeleted(log types.Log) (*BaseAccessControlGroupWordGroupDeleted, error) {
	event := new(BaseAccessControlGroupWordGroupDeleted)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletABI is the input ABI used to generate the binding from.
const BaseAccessWalletABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusNonceFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusSendFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guarantor\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"others\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indexType\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setEntityRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusBalanceFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusOk\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusSigFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"guarantor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"int256\"}],\"name\":\"ExecStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// BaseAccessWalletFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessWalletFuncSigs = map[string]string{
	"18689733": "ACCESS_CONFIRMED()",
	"8232f3f1": "ACCESS_NONE()",
	"479a0c51": "ACCESS_TENTATIVE()",
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"091600e6": "CATEGORY_CONTENT_OBJECT()",
	"68a0469a": "CATEGORY_CONTENT_TYPE()",
	"6373a411": "CATEGORY_CONTRACT()",
	"12915a30": "CATEGORY_GROUP()",
	"16aed232": "CATEGORY_LIBRARY()",
	"d1aeb651": "TYPE_ACCESS()",
	"5d97b6c2": "TYPE_EDIT()",
	"96eba03d": "TYPE_SEE()",
	"30e66949": "accessGroups()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"0f58a786": "addContentType(address,address)",
	"32eaf21b": "addressKMS()",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"0eaec2c5": "canContribute(address)",
	"81beeb64": "canEdit()",
	"9b55f901": "canPublish(address)",
	"29d00219": "canReview(address)",
	"15c0bac1": "checkAccessGroupRights(address,uint8)",
	"5faecb76": "checkContentObjectRights(address,uint8)",
	"fe538c5a": "checkContentTypeRights(address,uint8)",
	"a864dfa5": "checkContractRights(address,uint8)",
	"a00b38c4": "checkDirectRights(uint8,address,uint8)",
	"6813b6d1": "checkLibraryRights(address,uint8)",
	"7fb52f1a": "checkRights(uint8,address,uint8)",
	"d30f8cd0": "cleanUpAccessGroups()",
	"2fa5c842": "cleanUpAll()",
	"048bd529": "cleanUpContentObjects()",
	"85e0a200": "cleanUpContentTypes()",
	"92297d7b": "cleanUpLibraries()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"a980892d": "contentObjects()",
	"af570c04": "contentSpace()",
	"1cdbee5a": "contentTypeContracts(address)",
	"9f46133e": "contentTypes()",
	"991a3a7c": "contentTypes(uint256)",
	"c65bcbe2": "contentTypesLength()",
	"7709bc78": "contractExists(address)",
	"6c0f79b6": "contracts()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"1e2ff94f": "currentTimestamp()",
	"e1a70717": "deleteVersion(string)",
	"9476c478": "execStatusBalanceFail()",
	"04f55daf": "execStatusNonceFail()",
	"95ba60ba": "execStatusOk()",
	"07a08237": "execStatusSendFail()",
	"eb23b7aa": "execStatusSigFail()",
	"508ad278": "execute(address,uint8,bytes32,bytes32,address,uint256,uint256)",
	"1f2caaec": "findTypeByHash(bytes32)",
	"2d474cbd": "getAccessGroup(uint256)",
	"304f4a7b": "getAccessGroupRights(address)",
	"0dc10d3f": "getAccessGroupsLength()",
	"cf8a7503": "getContentObject(uint256)",
	"69881c0c": "getContentObjectRights(address)",
	"ebe9314e": "getContentObjectsLength()",
	"aa3f6952": "getContentType(uint256)",
	"a4081d62": "getContentTypeRights(address)",
	"5c1d3059": "getContentTypesLength()",
	"6ebc8c86": "getContract(uint256)",
	"08d865d7": "getContractRights(address)",
	"fccc134f": "getContractsLength()",
	"cb86806d": "getLibrariesLength()",
	"d15d62a7": "getLibrary(uint256)",
	"fb52222c": "getLibraryRights(address)",
	"ac55c906": "getMeta(bytes)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"42e7ba7b": "hasManagerAccess(address)",
	"6380501f": "indexCategory()",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"c4b1978d": "libraries()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"51a7fc87": "others()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"2cf99422": "publish(address)",
	"e542b7cb": "putMeta(bytes,bytes)",
	"fd089196": "removeContentType(address)",
	"3dd71d99": "requiresReview()",
	"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
	"b8ff1dba": "setAccessRights()",
	"c9e8e72d": "setAddressKMS(address)",
	"3def5140": "setContentObjectRights(address,uint8,uint8)",
	"055af48f": "setContentSpace(address)",
	"8635adb5": "setContentTypeRights(address,uint8,uint8)",
	"224dcba0": "setContractRights(address,uint8,uint8)",
	"5d7cf830": "setEntityRights(uint8,address,uint8,uint8)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"aa024e8b": "setVisibility(uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"29dedde5": "validType(address)",
	"f50b2efe": "validateTimestamp(uint256)",
	"763d5ee6": "validateTransaction(uint8,bytes32,bytes32,address,uint256,uint256)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
	"9cb121ba": "whitelistedType(address)",
}

// BaseAccessWalletBin is the compiled bytecode used for deploying new contracts.
var BaseAccessWalletBin = ""

// DeployBaseAccessWallet deploys a new Ethereum contract, binding an instance of BaseAccessWallet to it.
func DeployBaseAccessWallet(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address) (common.Address, *types.Transaction, *BaseAccessWallet, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessWalletABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseAccessWalletBin), backend, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessWallet{BaseAccessWalletCaller: BaseAccessWalletCaller{contract: contract}, BaseAccessWalletTransactor: BaseAccessWalletTransactor{contract: contract}, BaseAccessWalletFilterer: BaseAccessWalletFilterer{contract: contract}}, nil
}

// BaseAccessWallet is an auto generated Go binding around an Ethereum contract.
type BaseAccessWallet struct {
	BaseAccessWalletCaller     // Read-only binding to the contract
	BaseAccessWalletTransactor // Write-only binding to the contract
	BaseAccessWalletFilterer   // Log filterer for contract events
}

// BaseAccessWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseAccessWalletSession struct {
	Contract     *BaseAccessWallet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseAccessWalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseAccessWalletCallerSession struct {
	Contract *BaseAccessWalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// BaseAccessWalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseAccessWalletTransactorSession struct {
	Contract     *BaseAccessWalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// BaseAccessWalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseAccessWalletRaw struct {
	Contract *BaseAccessWallet // Generic contract binding to access the raw methods on
}

// BaseAccessWalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseAccessWalletCallerRaw struct {
	Contract *BaseAccessWalletCaller // Generic read-only contract binding to access the raw methods on
}

// BaseAccessWalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseAccessWalletTransactorRaw struct {
	Contract *BaseAccessWalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseAccessWallet creates a new instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWallet(address common.Address, backend bind.ContractBackend) (*BaseAccessWallet, error) {
	contract, err := bindBaseAccessWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWallet{BaseAccessWalletCaller: BaseAccessWalletCaller{contract: contract}, BaseAccessWalletTransactor: BaseAccessWalletTransactor{contract: contract}, BaseAccessWalletFilterer: BaseAccessWalletFilterer{contract: contract}}, nil
}

// NewBaseAccessWalletCaller creates a new read-only instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessWalletCaller, error) {
	contract, err := bindBaseAccessWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletCaller{contract: contract}, nil
}

// NewBaseAccessWalletTransactor creates a new write-only instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessWalletTransactor, error) {
	contract, err := bindBaseAccessWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletTransactor{contract: contract}, nil
}

// NewBaseAccessWalletFilterer creates a new log filterer instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessWalletFilterer, error) {
	contract, err := bindBaseAccessWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFilterer{contract: contract}, nil
}

// bindBaseAccessWallet binds a generic wrapper to an already deployed contract.
func bindBaseAccessWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessWalletABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessWallet *BaseAccessWalletRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessWallet.Contract.BaseAccessWalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessWallet *BaseAccessWalletRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.BaseAccessWalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessWallet *BaseAccessWalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.BaseAccessWalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessWallet *BaseAccessWalletCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessWallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessWallet *BaseAccessWalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessWallet *BaseAccessWalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.contract.Transact(opts, method, params...)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "ACCESS_CONFIRMED")
	return *ret0, err
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) ACCESSCONFIRMED() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSCONFIRMED(&_BaseAccessWallet.CallOpts)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ACCESSCONFIRMED() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSCONFIRMED(&_BaseAccessWallet.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "ACCESS_NONE")
	return *ret0, err
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) ACCESSNONE() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSNONE(&_BaseAccessWallet.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ACCESSNONE() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSNONE(&_BaseAccessWallet.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "ACCESS_TENTATIVE")
	return *ret0, err
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) ACCESSTENTATIVE() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSTENTATIVE(&_BaseAccessWallet.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ACCESSTENTATIVE() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSTENTATIVE(&_BaseAccessWallet.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CANACCESS() (uint8, error) {
	return _BaseAccessWallet.Contract.CANACCESS(&_BaseAccessWallet.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CANACCESS() (uint8, error) {
	return _BaseAccessWallet.Contract.CANACCESS(&_BaseAccessWallet.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CANEDIT() (uint8, error) {
	return _BaseAccessWallet.Contract.CANEDIT(&_BaseAccessWallet.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CANEDIT() (uint8, error) {
	return _BaseAccessWallet.Contract.CANEDIT(&_BaseAccessWallet.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CANSEE() (uint8, error) {
	return _BaseAccessWallet.Contract.CANSEE(&_BaseAccessWallet.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CANSEE() (uint8, error) {
	return _BaseAccessWallet.Contract.CANSEE(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_CONTENT_OBJECT")
	return *ret0, err
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTENTOBJECT(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTENTOBJECT(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_CONTENT_TYPE")
	return *ret0, err
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTENTTYPE(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTENTTYPE(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_CONTRACT")
	return *ret0, err
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYCONTRACT() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTRACT(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYCONTRACT() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTRACT(&_BaseAccessWallet.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_GROUP")
	return *ret0, err
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYGROUP() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYGROUP(&_BaseAccessWallet.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYGROUP() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYGROUP(&_BaseAccessWallet.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_LIBRARY")
	return *ret0, err
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYLIBRARY() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYLIBRARY(&_BaseAccessWallet.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYLIBRARY() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYLIBRARY(&_BaseAccessWallet.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "TYPE_ACCESS")
	return *ret0, err
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) TYPEACCESS() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPEACCESS(&_BaseAccessWallet.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) TYPEACCESS() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPEACCESS(&_BaseAccessWallet.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "TYPE_EDIT")
	return *ret0, err
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) TYPEEDIT() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPEEDIT(&_BaseAccessWallet.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) TYPEEDIT() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPEEDIT(&_BaseAccessWallet.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "TYPE_SEE")
	return *ret0, err
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) TYPESEE() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPESEE(&_BaseAccessWallet.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) TYPESEE() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPESEE(&_BaseAccessWallet.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "accessGroups")
	return *ret, err
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.AccessGroups(&_BaseAccessWallet.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.AccessGroups(&_BaseAccessWallet.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) AddressKMS() (common.Address, error) {
	return _BaseAccessWallet.Contract.AddressKMS(&_BaseAccessWallet.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) AddressKMS() (common.Address, error) {
	return _BaseAccessWallet.Contract.AddressKMS(&_BaseAccessWallet.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanCommit() (bool, error) {
	return _BaseAccessWallet.Contract.CanCommit(&_BaseAccessWallet.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanCommit() (bool, error) {
	return _BaseAccessWallet.Contract.CanCommit(&_BaseAccessWallet.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanConfirm() (bool, error) {
	return _BaseAccessWallet.Contract.CanConfirm(&_BaseAccessWallet.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanConfirm() (bool, error) {
	return _BaseAccessWallet.Contract.CanConfirm(&_BaseAccessWallet.CallOpts)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canContribute", _candidate)
	return *ret0, err
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanContribute(&_BaseAccessWallet.CallOpts, _candidate)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanContribute(&_BaseAccessWallet.CallOpts, _candidate)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanEdit() (bool, error) {
	return _BaseAccessWallet.Contract.CanEdit(&_BaseAccessWallet.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanEdit() (bool, error) {
	return _BaseAccessWallet.Contract.CanEdit(&_BaseAccessWallet.CallOpts)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canPublish", _candidate)
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanPublish(&_BaseAccessWallet.CallOpts, _candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanPublish(&_BaseAccessWallet.CallOpts, _candidate)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canReview", arg0)
	return *ret0, err
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanReview(arg0 common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanReview(&_BaseAccessWallet.CallOpts, arg0)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanReview(arg0 common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanReview(&_BaseAccessWallet.CallOpts, arg0)
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckAccessGroupRights(opts *bind.CallOpts, group common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkAccessGroupRights", group, access_type)
	return *ret0, err
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckAccessGroupRights(group common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckAccessGroupRights(&_BaseAccessWallet.CallOpts, group, access_type)
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckAccessGroupRights(group common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckAccessGroupRights(&_BaseAccessWallet.CallOpts, group, access_type)
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckContentObjectRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkContentObjectRights", obj, access_type)
	return *ret0, err
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckContentObjectRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckContentObjectRights(&_BaseAccessWallet.CallOpts, obj, access_type)
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckContentObjectRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckContentObjectRights(&_BaseAccessWallet.CallOpts, obj, access_type)
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckContentTypeRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkContentTypeRights", obj, access_type)
	return *ret0, err
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckContentTypeRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckContentTypeRights(&_BaseAccessWallet.CallOpts, obj, access_type)
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckContentTypeRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckContentTypeRights(&_BaseAccessWallet.CallOpts, obj, access_type)
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckContractRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkContractRights", obj, access_type)
	return *ret0, err
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckContractRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckContractRights(&_BaseAccessWallet.CallOpts, obj, access_type)
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckContractRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckContractRights(&_BaseAccessWallet.CallOpts, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkDirectRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckDirectRights(&_BaseAccessWallet.CallOpts, index_type, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckDirectRights(&_BaseAccessWallet.CallOpts, index_type, obj, access_type)
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckLibraryRights(opts *bind.CallOpts, lib common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkLibraryRights", lib, access_type)
	return *ret0, err
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckLibraryRights(lib common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckLibraryRights(&_BaseAccessWallet.CallOpts, lib, access_type)
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckLibraryRights(lib common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckLibraryRights(&_BaseAccessWallet.CallOpts, lib, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckRights(&_BaseAccessWallet.CallOpts, index_type, obj, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckRights(&_BaseAccessWallet.CallOpts, index_type, obj, access_type)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CommitPending() (bool, error) {
	return _BaseAccessWallet.Contract.CommitPending(&_BaseAccessWallet.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CommitPending() (bool, error) {
	return _BaseAccessWallet.Contract.CommitPending(&_BaseAccessWallet.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "contentObjects")
	return *ret, err
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.ContentObjects(&_BaseAccessWallet.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.ContentObjects(&_BaseAccessWallet.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentSpace() (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentSpace(&_BaseAccessWallet.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentSpace() (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentSpace(&_BaseAccessWallet.CallOpts)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contentTypeContracts", arg0)
	return *ret0, err
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentTypeContracts(&_BaseAccessWallet.CallOpts, arg0)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentTypeContracts(&_BaseAccessWallet.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contentTypes", arg0)
	return *ret0, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentTypes(&_BaseAccessWallet.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentTypes(&_BaseAccessWallet.CallOpts, arg0)
}

// ContentTypes0 is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypes0(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "contentTypes0")
	return *ret, err
}

// ContentTypes0 is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentTypes0() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.ContentTypes0(&_BaseAccessWallet.CallOpts)
}

// ContentTypes0 is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentTypes0() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.ContentTypes0(&_BaseAccessWallet.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contentTypesLength")
	return *ret0, err
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentTypesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ContentTypesLength(&_BaseAccessWallet.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentTypesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ContentTypesLength(&_BaseAccessWallet.CallOpts)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contractExists", addr)
	return *ret0, err
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ContractExists(addr common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.ContractExists(&_BaseAccessWallet.CallOpts, addr)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContractExists(addr common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.ContractExists(&_BaseAccessWallet.CallOpts, addr)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "contracts")
	return *ret, err
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Contracts(&_BaseAccessWallet.CallOpts)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Contracts(&_BaseAccessWallet.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CountVersionHashes() (*big.Int, error) {
	return _BaseAccessWallet.Contract.CountVersionHashes(&_BaseAccessWallet.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseAccessWallet.Contract.CountVersionHashes(&_BaseAccessWallet.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) Creator() (common.Address, error) {
	return _BaseAccessWallet.Contract.Creator(&_BaseAccessWallet.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Creator() (common.Address, error) {
	return _BaseAccessWallet.Contract.Creator(&_BaseAccessWallet.CallOpts)
}

// CurrentTimestamp is a free data retrieval call binding the contract method 0x1e2ff94f.
//
// Solidity: function currentTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) CurrentTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "currentTimestamp")
	return *ret0, err
}

// CurrentTimestamp is a free data retrieval call binding the contract method 0x1e2ff94f.
//
// Solidity: function currentTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CurrentTimestamp() (*big.Int, error) {
	return _BaseAccessWallet.Contract.CurrentTimestamp(&_BaseAccessWallet.CallOpts)
}

// CurrentTimestamp is a free data retrieval call binding the contract method 0x1e2ff94f.
//
// Solidity: function currentTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CurrentTimestamp() (*big.Int, error) {
	return _BaseAccessWallet.Contract.CurrentTimestamp(&_BaseAccessWallet.CallOpts)
}

// ExecStatusBalanceFail is a free data retrieval call binding the contract method 0x9476c478.
//
// Solidity: function execStatusBalanceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusBalanceFail(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusBalanceFail")
	return *ret0, err
}

// ExecStatusBalanceFail is a free data retrieval call binding the contract method 0x9476c478.
//
// Solidity: function execStatusBalanceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusBalanceFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusBalanceFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusBalanceFail is a free data retrieval call binding the contract method 0x9476c478.
//
// Solidity: function execStatusBalanceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusBalanceFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusBalanceFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusNonceFail is a free data retrieval call binding the contract method 0x04f55daf.
//
// Solidity: function execStatusNonceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusNonceFail(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusNonceFail")
	return *ret0, err
}

// ExecStatusNonceFail is a free data retrieval call binding the contract method 0x04f55daf.
//
// Solidity: function execStatusNonceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusNonceFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusNonceFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusNonceFail is a free data retrieval call binding the contract method 0x04f55daf.
//
// Solidity: function execStatusNonceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusNonceFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusNonceFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusOk is a free data retrieval call binding the contract method 0x95ba60ba.
//
// Solidity: function execStatusOk() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusOk(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusOk")
	return *ret0, err
}

// ExecStatusOk is a free data retrieval call binding the contract method 0x95ba60ba.
//
// Solidity: function execStatusOk() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusOk() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusOk(&_BaseAccessWallet.CallOpts)
}

// ExecStatusOk is a free data retrieval call binding the contract method 0x95ba60ba.
//
// Solidity: function execStatusOk() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusOk() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusOk(&_BaseAccessWallet.CallOpts)
}

// ExecStatusSendFail is a free data retrieval call binding the contract method 0x07a08237.
//
// Solidity: function execStatusSendFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusSendFail(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusSendFail")
	return *ret0, err
}

// ExecStatusSendFail is a free data retrieval call binding the contract method 0x07a08237.
//
// Solidity: function execStatusSendFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusSendFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusSendFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusSendFail is a free data retrieval call binding the contract method 0x07a08237.
//
// Solidity: function execStatusSendFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusSendFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusSendFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusSigFail is a free data retrieval call binding the contract method 0xeb23b7aa.
//
// Solidity: function execStatusSigFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusSigFail(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusSigFail")
	return *ret0, err
}

// ExecStatusSigFail is a free data retrieval call binding the contract method 0xeb23b7aa.
//
// Solidity: function execStatusSigFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusSigFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusSigFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusSigFail is a free data retrieval call binding the contract method 0xeb23b7aa.
//
// Solidity: function execStatusSigFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusSigFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusSigFail(&_BaseAccessWallet.CallOpts)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "findTypeByHash", typeHash)
	return *ret0, err
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseAccessWallet.Contract.FindTypeByHash(&_BaseAccessWallet.CallOpts, typeHash)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseAccessWallet.Contract.FindTypeByHash(&_BaseAccessWallet.CallOpts, typeHash)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getAccessGroup", position)
	return *ret0, err
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetAccessGroup(&_BaseAccessWallet.CallOpts, position)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetAccessGroup(&_BaseAccessWallet.CallOpts, position)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getAccessGroupRights", group)
	return *ret0, err
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetAccessGroupRights(&_BaseAccessWallet.CallOpts, group)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetAccessGroupRights(&_BaseAccessWallet.CallOpts, group)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getAccessGroupsLength")
	return *ret0, err
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetAccessGroupsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetAccessGroupsLength(&_BaseAccessWallet.CallOpts)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetAccessGroupsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetAccessGroupsLength(&_BaseAccessWallet.CallOpts)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentObject", position)
	return *ret0, err
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContentObject(&_BaseAccessWallet.CallOpts, position)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContentObject(&_BaseAccessWallet.CallOpts, position)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentObjectRights", obj)
	return *ret0, err
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContentObjectRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContentObjectRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentObjectsLength")
	return *ret0, err
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentObjectsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContentObjectsLength(&_BaseAccessWallet.CallOpts)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentObjectsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContentObjectsLength(&_BaseAccessWallet.CallOpts)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentType", position)
	return *ret0, err
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentType(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContentType(&_BaseAccessWallet.CallOpts, position)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentType(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContentType(&_BaseAccessWallet.CallOpts, position)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentTypeRights", obj)
	return *ret0, err
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContentTypeRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContentTypeRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentTypesLength")
	return *ret0, err
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentTypesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContentTypesLength(&_BaseAccessWallet.CallOpts)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentTypesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContentTypesLength(&_BaseAccessWallet.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContract", position)
	return *ret0, err
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContract(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContract(&_BaseAccessWallet.CallOpts, position)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContract(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContract(&_BaseAccessWallet.CallOpts, position)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContractRights", obj)
	return *ret0, err
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContractRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContractRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContractRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContractRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContractsLength")
	return *ret0, err
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContractsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContractsLength(&_BaseAccessWallet.CallOpts)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContractsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContractsLength(&_BaseAccessWallet.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getLibrariesLength")
	return *ret0, err
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetLibrariesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetLibrariesLength(&_BaseAccessWallet.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetLibrariesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetLibrariesLength(&_BaseAccessWallet.CallOpts)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getLibrary", position)
	return *ret0, err
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetLibrary(&_BaseAccessWallet.CallOpts, position)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetLibrary(&_BaseAccessWallet.CallOpts, position)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getLibraryRights", lib)
	return *ret0, err
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetLibraryRights(&_BaseAccessWallet.CallOpts, lib)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetLibraryRights(&_BaseAccessWallet.CallOpts, lib)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseAccessWallet *BaseAccessWalletSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseAccessWallet.Contract.GetMeta(&_BaseAccessWallet.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseAccessWallet.Contract.GetMeta(&_BaseAccessWallet.CallOpts, key)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasAccess(&_BaseAccessWallet.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasAccess(&_BaseAccessWallet.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasEditorRight(&_BaseAccessWallet.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasEditorRight(&_BaseAccessWallet.CallOpts, candidate)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) HasManagerAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "hasManagerAccess", candidate)
	return *ret0, err
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) HasManagerAccess(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasManagerAccess(&_BaseAccessWallet.CallOpts, candidate)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) HasManagerAccess(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasManagerAccess(&_BaseAccessWallet.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) IndexCategory() (uint8, error) {
	return _BaseAccessWallet.Contract.IndexCategory(&_BaseAccessWallet.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) IndexCategory() (uint8, error) {
	return _BaseAccessWallet.Contract.IndexCategory(&_BaseAccessWallet.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.IsAdmin(&_BaseAccessWallet.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.IsAdmin(&_BaseAccessWallet.CallOpts, _candidate)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "libraries")
	return *ret, err
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Libraries(&_BaseAccessWallet.CallOpts)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Libraries(&_BaseAccessWallet.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletSession) ObjectHash() (string, error) {
	return _BaseAccessWallet.Contract.ObjectHash(&_BaseAccessWallet.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ObjectHash() (string, error) {
	return _BaseAccessWallet.Contract.ObjectHash(&_BaseAccessWallet.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ObjectTimestamp(&_BaseAccessWallet.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ObjectTimestamp(&_BaseAccessWallet.CallOpts)
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) Others(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "others")
	return *ret, err
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) Others() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Others(&_BaseAccessWallet.CallOpts)
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Others() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Others(&_BaseAccessWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) Owner() (common.Address, error) {
	return _BaseAccessWallet.Contract.Owner(&_BaseAccessWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Owner() (common.Address, error) {
	return _BaseAccessWallet.Contract.Owner(&_BaseAccessWallet.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) ParentAddress() (common.Address, error) {
	return _BaseAccessWallet.Contract.ParentAddress(&_BaseAccessWallet.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ParentAddress() (common.Address, error) {
	return _BaseAccessWallet.Contract.ParentAddress(&_BaseAccessWallet.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletSession) PendingHash() (string, error) {
	return _BaseAccessWallet.Contract.PendingHash(&_BaseAccessWallet.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) PendingHash() (string, error) {
	return _BaseAccessWallet.Contract.PendingHash(&_BaseAccessWallet.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "requiresReview")
	return *ret0, err
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) RequiresReview() (bool, error) {
	return _BaseAccessWallet.Contract.RequiresReview(&_BaseAccessWallet.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) RequiresReview() (bool, error) {
	return _BaseAccessWallet.Contract.RequiresReview(&_BaseAccessWallet.CallOpts)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "validType", content_type)
	return *ret0, err
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.ValidType(&_BaseAccessWallet.CallOpts, content_type)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.ValidType(&_BaseAccessWallet.CallOpts, content_type)
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidateTimestamp(opts *bind.CallOpts, _ts *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "validateTimestamp", _ts)
	return *ret0, err
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ValidateTimestamp(_ts *big.Int) (bool, error) {
	return _BaseAccessWallet.Contract.ValidateTimestamp(&_BaseAccessWallet.CallOpts, _ts)
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ValidateTimestamp(_ts *big.Int) (bool, error) {
	return _BaseAccessWallet.Contract.ValidateTimestamp(&_BaseAccessWallet.CallOpts, _ts)
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidateTransaction(opts *bind.CallOpts, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "validateTransaction", _v, _r, _s, _dest, _value, _ts)
	return *ret0, err
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ValidateTransaction(_v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	return _BaseAccessWallet.Contract.ValidateTransaction(&_BaseAccessWallet.CallOpts, _v, _r, _s, _dest, _value, _ts)
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ValidateTransaction(_v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	return _BaseAccessWallet.Contract.ValidateTransaction(&_BaseAccessWallet.CallOpts, _v, _r, _s, _dest, _value, _ts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletSession) Version() ([32]byte, error) {
	return _BaseAccessWallet.Contract.Version(&_BaseAccessWallet.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Version() ([32]byte, error) {
	return _BaseAccessWallet.Contract.Version(&_BaseAccessWallet.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletSession) VersionAPI() ([32]byte, error) {
	return _BaseAccessWallet.Contract.VersionAPI(&_BaseAccessWallet.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseAccessWallet.Contract.VersionAPI(&_BaseAccessWallet.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseAccessWallet.Contract.VersionHashes(&_BaseAccessWallet.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseAccessWallet.Contract.VersionHashes(&_BaseAccessWallet.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseAccessWallet.Contract.VersionTimestamp(&_BaseAccessWallet.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseAccessWallet.Contract.VersionTimestamp(&_BaseAccessWallet.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) Visibility() (uint8, error) {
	return _BaseAccessWallet.Contract.Visibility(&_BaseAccessWallet.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Visibility() (uint8, error) {
	return _BaseAccessWallet.Contract.Visibility(&_BaseAccessWallet.CallOpts)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "whitelistedType", content_type)
	return *ret0, err
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.WhitelistedType(&_BaseAccessWallet.CallOpts, content_type)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.WhitelistedType(&_BaseAccessWallet.CallOpts, content_type)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.AccessRequestV3(&_BaseAccessWallet.TransactOpts, arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.AccessRequestV3(&_BaseAccessWallet.TransactOpts, arg0, arg1)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.AddContentType(&_BaseAccessWallet.TransactOpts, content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.AddContentType(&_BaseAccessWallet.TransactOpts, content_type, content_contract)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpAccessGroups(&_BaseAccessWallet.TransactOpts)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpAccessGroups(&_BaseAccessWallet.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpAll")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpAll() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpAll(&_BaseAccessWallet.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpAll() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpAll(&_BaseAccessWallet.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpContentObjects(&_BaseAccessWallet.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpContentObjects(&_BaseAccessWallet.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpContentTypes(&_BaseAccessWallet.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpContentTypes(&_BaseAccessWallet.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpLibraries")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpLibraries() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpLibraries(&_BaseAccessWallet.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpLibraries() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpLibraries(&_BaseAccessWallet.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessWallet *BaseAccessWalletSession) ClearPending() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ClearPending(&_BaseAccessWallet.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ClearPending(&_BaseAccessWallet.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Commit(&_BaseAccessWallet.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Commit(&_BaseAccessWallet.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ConfirmCommit(&_BaseAccessWallet.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ConfirmCommit(&_BaseAccessWallet.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.DeleteVersion(&_BaseAccessWallet.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.DeleteVersion(&_BaseAccessWallet.TransactOpts, _versionHash)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) Execute(opts *bind.TransactOpts, _guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "execute", _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) Execute(_guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Execute(&_BaseAccessWallet.TransactOpts, _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) Execute(_guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Execute(&_BaseAccessWallet.TransactOpts, _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWallet *BaseAccessWalletSession) Kill() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Kill(&_BaseAccessWallet.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Kill(&_BaseAccessWallet.TransactOpts)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "publish", contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Publish(&_BaseAccessWallet.TransactOpts, contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Publish(&_BaseAccessWallet.TransactOpts, contentObj)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.PutMeta(&_BaseAccessWallet.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.PutMeta(&_BaseAccessWallet.TransactOpts, key, value)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.RemoveContentType(&_BaseAccessWallet.TransactOpts, content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.RemoveContentType(&_BaseAccessWallet.TransactOpts, content_type)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAccessGroupRights(&_BaseAccessWallet.TransactOpts, group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAccessGroupRights(&_BaseAccessWallet.TransactOpts, group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAccessRights")
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetAccessRights() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAccessRights(&_BaseAccessWallet.TransactOpts)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetAccessRights() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAccessRights(&_BaseAccessWallet.TransactOpts)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAddressKMS(&_BaseAccessWallet.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAddressKMS(&_BaseAccessWallet.TransactOpts, address_KMS)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentObjectRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentObjectRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentSpace(&_BaseAccessWallet.TransactOpts, content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentSpace(&_BaseAccessWallet.TransactOpts, content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentTypeRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentTypeRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContractRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContractRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetEntityRights(opts *bind.TransactOpts, indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setEntityRights", indexType, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetEntityRights(indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetEntityRights(&_BaseAccessWallet.TransactOpts, indexType, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetEntityRights(indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetEntityRights(&_BaseAccessWallet.TransactOpts, indexType, obj, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetGroupRights(&_BaseAccessWallet.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetGroupRights(&_BaseAccessWallet.TransactOpts, group, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetLibraryRights(&_BaseAccessWallet.TransactOpts, lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetLibraryRights(&_BaseAccessWallet.TransactOpts, lib, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetRights(&_BaseAccessWallet.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetRights(&_BaseAccessWallet.TransactOpts, stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetVisibility(&_BaseAccessWallet.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetVisibility(&_BaseAccessWallet.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.TransferCreatorship(&_BaseAccessWallet.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.TransferCreatorship(&_BaseAccessWallet.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.TransferOwnership(&_BaseAccessWallet.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.TransferOwnership(&_BaseAccessWallet.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessWallet *BaseAccessWalletSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.UpdateRequest(&_BaseAccessWallet.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.UpdateRequest(&_BaseAccessWallet.TransactOpts)
}

// BaseAccessWalletAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseAccessWallet contract.
type BaseAccessWalletAccessRequestV3Iterator struct {
	Event *BaseAccessWalletAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletAccessRequestV3 represents a AccessRequestV3 event raised by the BaseAccessWallet contract.
type BaseAccessWalletAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseAccessWalletAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletAccessRequestV3Iterator{contract: _BaseAccessWallet.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletAccessRequestV3)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseAccessRequestV3(log types.Log) (*BaseAccessWalletAccessRequestV3, error) {
	event := new(BaseAccessWalletAccessRequestV3)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseAccessWallet contract.
type BaseAccessWalletCommitPendingIterator struct {
	Event *BaseAccessWalletCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletCommitPending represents a CommitPending event raised by the BaseAccessWallet contract.
type BaseAccessWalletCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseAccessWalletCommitPendingIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletCommitPendingIterator{contract: _BaseAccessWallet.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletCommitPending)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseCommitPending(log types.Log) (*BaseAccessWalletCommitPending, error) {
	event := new(BaseAccessWalletCommitPending)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeAddedIterator struct {
	Event *BaseAccessWalletContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletContentTypeAdded represents a ContentTypeAdded event raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseAccessWalletContentTypeAddedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletContentTypeAddedIterator{contract: _BaseAccessWallet.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletContentTypeAdded)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseContentTypeAdded(log types.Log) (*BaseAccessWalletContentTypeAdded, error) {
	event := new(BaseAccessWalletContentTypeAdded)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeRemovedIterator struct {
	Event *BaseAccessWalletContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseAccessWalletContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletContentTypeRemovedIterator{contract: _BaseAccessWallet.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletContentTypeRemoved)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseContentTypeRemoved(log types.Log) (*BaseAccessWalletContentTypeRemoved, error) {
	event := new(BaseAccessWalletContentTypeRemoved)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletExecStatusIterator is returned from FilterExecStatus and is used to iterate over the raw logs and unpacked data for ExecStatus events raised by the BaseAccessWallet contract.
type BaseAccessWalletExecStatusIterator struct {
	Event *BaseAccessWalletExecStatus // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletExecStatusIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletExecStatus)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletExecStatus)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletExecStatusIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletExecStatusIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletExecStatus represents a ExecStatus event raised by the BaseAccessWallet contract.
type BaseAccessWalletExecStatus struct {
	Guarantor common.Address
	Code      *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterExecStatus is a free log retrieval operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterExecStatus(opts *bind.FilterOpts) (*BaseAccessWalletExecStatusIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ExecStatus")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletExecStatusIterator{contract: _BaseAccessWallet.contract, event: "ExecStatus", logs: logs, sub: sub}, nil
}

// WatchExecStatus is a free log subscription operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchExecStatus(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletExecStatus) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ExecStatus")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletExecStatus)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ExecStatus", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecStatus is a log parse operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseExecStatus(log types.Log) (*BaseAccessWalletExecStatus, error) {
	event := new(BaseAccessWalletExecStatus)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ExecStatus", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseAccessWallet contract.
type BaseAccessWalletObjectMetaChangedIterator struct {
	Event *BaseAccessWalletObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseAccessWallet contract.
type BaseAccessWalletObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseAccessWalletObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletObjectMetaChangedIterator{contract: _BaseAccessWallet.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletObjectMetaChanged)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseObjectMetaChanged(log types.Log) (*BaseAccessWalletObjectMetaChanged, error) {
	event := new(BaseAccessWalletObjectMetaChanged)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the BaseAccessWallet contract.
type BaseAccessWalletRightsChangedIterator struct {
	Event *BaseAccessWalletRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletRightsChanged represents a RightsChanged event raised by the BaseAccessWallet contract.
type BaseAccessWalletRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*BaseAccessWalletRightsChangedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletRightsChangedIterator{contract: _BaseAccessWallet.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletRightsChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletRightsChanged)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseRightsChanged(log types.Log) (*BaseAccessWalletRightsChanged, error) {
	event := new(BaseAccessWalletRightsChanged)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseAccessWallet contract.
type BaseAccessWalletUpdateRequestIterator struct {
	Event *BaseAccessWalletUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletUpdateRequest represents a UpdateRequest event raised by the BaseAccessWallet contract.
type BaseAccessWalletUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseAccessWalletUpdateRequestIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletUpdateRequestIterator{contract: _BaseAccessWallet.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletUpdateRequest)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseUpdateRequest(log types.Log) (*BaseAccessWalletUpdateRequest, error) {
	event := new(BaseAccessWalletUpdateRequest)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionConfirmIterator struct {
	Event *BaseAccessWalletVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletVersionConfirm represents a VersionConfirm event raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseAccessWalletVersionConfirmIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletVersionConfirmIterator{contract: _BaseAccessWallet.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletVersionConfirm)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseVersionConfirm(log types.Log) (*BaseAccessWalletVersionConfirm, error) {
	event := new(BaseAccessWalletVersionConfirm)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionDeleteIterator struct {
	Event *BaseAccessWalletVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletVersionDelete represents a VersionDelete event raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseAccessWalletVersionDeleteIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletVersionDeleteIterator{contract: _BaseAccessWallet.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletVersionDelete)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseVersionDelete(log types.Log) (*BaseAccessWalletVersionDelete, error) {
	event := new(BaseAccessWalletVersionDelete)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseAccessWallet contract.
type BaseAccessWalletVisibilityChangedIterator struct {
	Event *BaseAccessWalletVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletVisibilityChanged represents a VisibilityChanged event raised by the BaseAccessWallet contract.
type BaseAccessWalletVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseAccessWalletVisibilityChangedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletVisibilityChangedIterator{contract: _BaseAccessWallet.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletVisibilityChanged)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseVisibilityChanged(log types.Log) (*BaseAccessWalletVisibilityChanged, error) {
	event := new(BaseAccessWalletVisibilityChanged)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletFactoryABI is the input ABI used to generate the binding from.
const BaseAccessWalletFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_spaceAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseAccessWalletFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessWalletFactoryFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"7708bc41": "createAccessWallet()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// BaseAccessWalletFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseAccessWalletFactoryBin = "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f4273416363576c74466163746f727932303139303530363135343230304d4c0060055534801561007c57600080fd5b50604051602080615a798339810180604052602081101561009c57600080fd5b505160028054600160a060020a031990811632179091556003805482163317905560048054600160a060020a0390931692909116919091179055615994806100e56000396000f3fe6080604052600436106100a3576000357c0100000000000000000000000000000000000000000000000000000000900480636d2e4b1b116100765780636d2e4b1b146101275780637708bc411461015a5780638da5cb5b1461016f578063af570c0414610184578063f2fde38b14610199576100a3565b806302d05d3f146100a557806341c0e1b5146100d657806354fd4d50146100eb5780635f4fcae114610112575b005b3480156100b157600080fd5b506100ba6101cc565b60408051600160a060020a039092168252519081900360200190f35b3480156100e257600080fd5b506100a36101db565b3480156100f757600080fd5b50610100610200565b60408051918252519081900360200190f35b34801561011e57600080fd5b50610100610206565b34801561013357600080fd5b506100a36004803603602081101561014a57600080fd5b5035600160a060020a031661020c565b34801561016657600080fd5b506100ba610267565b34801561017b57600080fd5b506100ba610340565b34801561019057600080fd5b506100ba61034f565b3480156101a557600080fd5b506100a3600480360360208110156101bc57600080fd5b5035600160a060020a031661035e565b600254600160a060020a031681565b600354600160a060020a031633146101f257600080fd5b600354600160a060020a0316ff5b60055481565b60015481565b600254600160a060020a0316331461022357600080fd5b600160a060020a038116151561023857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600454600090600160a060020a0316331461028157600080fd5b600033604051610290906103b9565b600160a060020a03909116815260405190819003602001906000f0801580156102bd573d6000803e3d6000fd5b50604080517ff2fde38b0000000000000000000000000000000000000000000000000000000081523260048201529051919250600160a060020a0383169163f2fde38b9160248082019260009290919082900301818387803b15801561032257600080fd5b505af1158015610336573d6000803e3d6000fd5b5092935050505090565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a0316331461037557600080fd5b600160a060020a038116151561038a57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6155a2806103c78339019056fe7f4f776e61626c653230323030393238313130303030504f00000000000000000060009081557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006007556008805460ff19908116831761ff00199081169092557f4564697461626c653230323030393238313130303030504f00000000000000006009557f436f6e7461696e657232303230303331363133353330304d4c000000000000006010556013939093557f416363657373496e6465786f723230323030393238313130303030504f000000601555601680549093168217166102001762ff00001916620300001763ff000000191663040000001764ff0000000019166405000000001790915560e06040526080908152600a60a052606460c052620001539060179060036200023e565b507f427341636365737357616c6c65743230323030393238313130303030504f0000603155604051602080620055a2833981018060405260208110156200019957600080fd5b505160028054600160a060020a03199081163217909155600380548216331790556016546018805460ff1990811660ff62010000850481169190911790925560208054821661010085048416179055601c805482168385161790556024805482166301000000850484161790556028805490911664010000000090930490911691909117905560048054600160a060020a0390931692909116919091179055620002fc565b600183019183908215620002c65791602002820160005b838211156200029557835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000255565b8015620002c45782816101000a81549060ff021916905560010160208160000104928301926001030262000295565b505b50620002d4929150620002d8565b5090565b620002f991905b80821115620002d457805460ff19168155600101620002df565b90565b615296806200030c6000396000f3fe6080604052600436106107025760003560e060020a9004806369881c0c11610394578063a864dfa5116101e0578063d1aeb65111610111578063ef1d7dc2116100af578063fb52222c1161007e578063fb52222c14611b32578063fccc134f14611b65578063fd08919614611b7a578063fe538c5a14611bad57610702565b8063ef1d7dc214611a7c578063f17bda9114611a91578063f2fde38b14611ad5578063f50b2efe14611b0857610702565b8063e1a70717116100eb578063e1a7071714611865578063e542b7cb14611918578063eb23b7aa14611a52578063ebe9314e14611a6757610702565b8063d1aeb65114610907578063d30f8cd01461183b578063e02dd9c21461185057610702565b8063c287e0ed1161017e578063c9e8e72d11610158578063c9e8e72d1461179f578063cb86806d146117d2578063cf8a7503146117e7578063d15d62a71461181157610702565b8063c287e0ed14611760578063c4b1978d14611775578063c65bcbe21461178a57610702565b8063aa3f6952116101ba578063aa3f695214611659578063ac55c90614611683578063af570c0414611736578063b8ff1dba1461174b57610702565b8063a864dfa5146115db578063a980892d14611617578063aa024e8b1461162c57610702565b80638635adb5116102c557806397ac4fd2116102635780639cb121ba116102325780639cb121ba1461151a5780639f46133e1461154d578063a00b38c414611562578063a4081d62146115a857610702565b806397ac4fd2146114285780639867db741461143d578063991a3a7c146114f05780639b55f9011461084157610702565b80639476c4781161029f5780639476c478146113cb57806395a078e8146113e057806395ba60ba1461141357806396eba03d1461133357610702565b80638635adb51461135d5780638da5cb5b146113a157806392297d7b146113b657610702565b80637886f747116103325780637fb52f1a1161030c5780637fb52f1a146112d857806381beeb641461131e5780638232f3f11461133357806385e0a2001461134857610702565b80637886f747146112405780637ca8f6181461126a5780637cbb7bf21461129457610702565b80636e3754271161036e5780636e3754271461117a5780636ebc8c861461118f578063763d5ee6146111b95780637709bc781461120d57610702565b806369881c0c146110ff5780636c0f79b6146111325780636d2e4b1b1461114757610702565b80632d474cbd11610553578063508ad278116104845780635f6a1301116104225780636380501f116103f15780636380501f1461106657806367e5c3bf1461107b5780636813b6d1146110ae57806368a0469a146110ea57610702565b80635f6a130114610f765780635faecb7614610f8b578063628449fd14610fc75780636373a4111461105157610702565b80635c1d30591161045e5780635c1d305914610f005780635d7cf83014610f155780635d97b6c2146109975780635f4fcae114610f6157610702565b8063508ad27814610e7a57806351a7fc8714610ed657806354fd4d5014610eeb57610702565b80633dd71d99116104f157806341c0e1b5116104cb57806341c0e1b514610e2a57806342e7ba7b14610e3f578063446e882614610e72578063479a0c511461090757610702565b80633dd71d9914610dbc5780633def514014610dd157806340b87a2614610e1557610702565b806330e669491161052d57806330e6694914610d4b57806332eaf21b14610d7d578063331b86c014610d92578063375a6e7c14610da757610702565b80632d474cbd14610cae5780632fa5c84214610cd8578063304f4a7b14610d1857610702565b806314cfabb3116106385780631f2caaec116105d657806329adec14116105a557806329adec1414610c0057806329d0021914610c1557806329dedde514610c485780632cf9942214610c7b57610702565b80631f2caaec14610b1b578063224dcba014610b4557806322e564eb14610b8957806324d7806c14610bcd57610702565b8063186897331161061257806318689733146109975780631bf7a912146109ac5780631cdbee5a14610ad35780631e2ff94f14610b0657610702565b806314cfabb31461093157806315c0bac11461094657806316aed2321461098257610702565b8063091600e6116106a55780630f58a7861161067f5780630f58a786146108885780630fe1b5a2146108c3578063100508a21461090757806312915a301461091c57610702565b8063091600e6146108175780630dc10d3f1461082c5780630eaec2c51461084157610702565b806304f55daf116106e157806304f55daf14610771578063055af48f1461078657806307a08237146107b957806308d865d7146107ce57610702565b8062821de31461070457806302d05d3f14610735578063048bd5291461074a575b005b34801561071057600080fd5b50610719611be9565b60408051600160a060020a039092168252519081900360200190f35b34801561074157600080fd5b50610719611bf9565b34801561075657600080fd5b5061075f611c08565b60408051918252519081900360200190f35b34801561077d57600080fd5b5061075f611c19565b34801561079257600080fd5b50610702600480360360208110156107a957600080fd5b5035600160a060020a0316611c1e565b3480156107c557600080fd5b5061075f611c57565b3480156107da57600080fd5b50610801600480360360208110156107f157600080fd5b5035600160a060020a0316611c5c565b6040805160ff9092168252519081900360200190f35b34801561082357600080fd5b50610801611c7e565b34801561083857600080fd5b5061075f611c87565b34801561084d57600080fd5b506108746004803603602081101561086457600080fd5b5035600160a060020a0316611c8d565b604080519115158252519081900360200190f35b34801561089457600080fd5b50610702600480360360408110156108ab57600080fd5b50600160a060020a0381358116916020013516611cbc565b3480156108cf57600080fd5b50610702600480360360608110156108e657600080fd5b50600160a060020a038135169060ff60208201358116916040013516611e1a565b34801561091357600080fd5b50610801611c19565b34801561092857600080fd5b50610801611efc565b34801561093d57600080fd5b50610874611f0a565b34801561095257600080fd5b506108746004803603604081101561096957600080fd5b508035600160a060020a0316906020013560ff16611fa7565b34801561098e57600080fd5b50610801611fc7565b3480156109a357600080fd5b50610801611fd6565b610874600480360360408110156109c257600080fd5b8101906020810181356401000000008111156109dd57600080fd5b8201836020820111156109ef57600080fd5b80359060200191846020830284011164010000000083111715610a1157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050640100000000811115610a6157600080fd5b820183602082011115610a7357600080fd5b80359060200191846020830284011164010000000083111715610a9557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611fdb945050505050565b348015610adf57600080fd5b5061071960048036036020811015610af657600080fd5b5035600160a060020a0316612084565b348015610b1257600080fd5b5061075f61209f565b348015610b2757600080fd5b5061071960048036036020811015610b3e57600080fd5b50356120a5565b348015610b5157600080fd5b5061070260048036036060811015610b6857600080fd5b50600160a060020a038135169060ff60208201358116916040013516612286565b348015610b9557600080fd5b5061070260048036036060811015610bac57600080fd5b50600160a060020a038135169060ff60208201358116916040013516612298565b348015610bd957600080fd5b5061087460048036036020811015610bf057600080fd5b5035600160a060020a031661276b565b348015610c0c57600080fd5b50610801612794565b348015610c2157600080fd5b5061087460048036036020811015610c3857600080fd5b5035600160a060020a031661279d565b348015610c5457600080fd5b5061087460048036036020811015610c6b57600080fd5b5035600160a060020a03166127a3565b348015610c8757600080fd5b5061087460048036036020811015610c9e57600080fd5b5035600160a060020a03166127c1565b348015610cba57600080fd5b5061071960048036036020811015610cd157600080fd5b50356128e0565b348015610ce457600080fd5b50610ced61290d565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b348015610d2457600080fd5b5061080160048036036020811015610d3b57600080fd5b5035600160a060020a0316612958565b348015610d5757600080fd5b50610d60612976565b6040805160ff909316835260208301919091528051918290030190f35b348015610d8957600080fd5b50610719612985565b348015610d9e57600080fd5b5061075f612994565b348015610db357600080fd5b5061087461299a565b348015610dc857600080fd5b506108746129a3565b348015610ddd57600080fd5b5061070260048036036060811015610df457600080fd5b50600160a060020a038135169060ff602082013581169160400135166129a8565b348015610e2157600080fd5b5061075f6129b5565b348015610e3657600080fd5b506107026129bb565b348015610e4b57600080fd5b5061087460048036036020811015610e6257600080fd5b5035600160a060020a03166129e0565b6108746129f4565b348015610e8657600080fd5b50610874600480360360e0811015610e9d57600080fd5b50600160a060020a03813581169160ff602082013516916040820135916060810135916080820135169060a08101359060c00135612bf8565b348015610ee257600080fd5b50610d60612ed5565b348015610ef757600080fd5b5061075f612ee4565b348015610f0c57600080fd5b5061075f612eea565b348015610f2157600080fd5b5061070260048036036080811015610f3857600080fd5b5060ff8135811691600160a060020a036020820135169160408201358116916060013516612ef0565b348015610f6d57600080fd5b5061075f612f0d565b348015610f8257600080fd5b50610702612f13565b348015610f9757600080fd5b5061087460048036036040811015610fae57600080fd5b508035600160a060020a0316906020013560ff16612f51565b348015610fd357600080fd5b50610fdc612f65565b6040805160208082528351818301528351919283929083019185019080838360005b83811015611016578181015183820152602001610ffe565b50505050905090810190601f1680156110435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561105d57600080fd5b50610801612ff3565b34801561107257600080fd5b50610801613004565b34801561108757600080fd5b506108746004803603602081101561109e57600080fd5b5035600160a060020a0316613012565b3480156110ba57600080fd5b50610874600480360360408110156110d157600080fd5b508035600160a060020a0316906020013560ff166131a9565b3480156110f657600080fd5b506108016131c3565b34801561110b57600080fd5b506108016004803603602081101561112257600080fd5b5035600160a060020a03166131d3565b34801561113e57600080fd5b50610d606131f1565b34801561115357600080fd5b506107026004803603602081101561116a57600080fd5b5035600160a060020a0316613200565b34801561118657600080fd5b5061087461324e565b34801561119b57600080fd5b50610719600480360360208110156111b257600080fd5b503561325f565b3480156111c557600080fd5b50610874600480360360c08110156111dc57600080fd5b5060ff81351690602081013590604081013590600160a060020a036060820135169060808101359060a00135613271565b34801561121957600080fd5b506108746004803603602081101561123057600080fd5b5035600160a060020a0316613365565b34801561124c57600080fd5b5061075f6004803603602081101561126357600080fd5b503561336d565b34801561127657600080fd5b50610fdc6004803603602081101561128d57600080fd5b503561338c565b3480156112a057600080fd5b50610702600480360360608110156112b757600080fd5b50600160a060020a038135169060ff60208201358116916040013516613400565b3480156112e457600080fd5b50610874600480360360608110156112fb57600080fd5b5060ff8135811691600160a060020a03602082013516916040909101351661340d565b34801561132a57600080fd5b506108746136e8565b34801561133f57600080fd5b506108016136f3565b34801561135457600080fd5b5061075f6136f8565b34801561136957600080fd5b506107026004803603606081101561138057600080fd5b50600160a060020a038135169060ff60208201358116916040013516613704565b3480156113ad57600080fd5b5061071961371e565b3480156113c257600080fd5b5061075f61372d565b3480156113d757600080fd5b5061075f611fd6565b3480156113ec57600080fd5b506108746004803603602081101561140357600080fd5b5035600160a060020a0316613739565b34801561141f57600080fd5b5061075f6136f3565b34801561143457600080fd5b50610801613893565b34801561144957600080fd5b506107026004803603602081101561146057600080fd5b81019060208101813564010000000081111561147b57600080fd5b82018360208201111561148d57600080fd5b803590602001918460018302840111640100000000831117156114af57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613898945050505050565b3480156114fc57600080fd5b506107196004803603602081101561151357600080fd5b50356139c5565b34801561152657600080fd5b506108746004803603602081101561153d57600080fd5b5035600160a060020a03166139ed565b34801561155957600080fd5b50610d60613a44565b34801561156e57600080fd5b506108746004803603606081101561158557600080fd5b5060ff8135811691600160a060020a036020820135169160409091013516613a53565b3480156115b457600080fd5b50610801600480360360208110156115cb57600080fd5b5035600160a060020a0316613a82565b3480156115e757600080fd5b50610874600480360360408110156115fe57600080fd5b508035600160a060020a0316906020013560ff16613aa0565b34801561162357600080fd5b50610d60613abc565b34801561163857600080fd5b506107026004803603602081101561164f57600080fd5b503560ff16613acb565b34801561166557600080fd5b506107196004803603602081101561167c57600080fd5b5035613b45565b34801561168f57600080fd5b50610fdc600480360360208110156116a657600080fd5b8101906020810181356401000000008111156116c157600080fd5b8201836020820111156116d357600080fd5b803590602001918460018302840111640100000000831117156116f557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613b57945050505050565b34801561174257600080fd5b50610719613d00565b34801561175757600080fd5b50610702613d0f565b34801561176c57600080fd5b50610702613e08565b34801561178157600080fd5b50610d60613eca565b34801561179657600080fd5b5061075f613ed9565b3480156117ab57600080fd5b50610702600480360360208110156117c257600080fd5b5035600160a060020a0316613edf565b3480156117de57600080fd5b5061075f613f18565b3480156117f357600080fd5b506107196004803603602081101561180a57600080fd5b5035613f1e565b34801561181d57600080fd5b506107196004803603602081101561183457600080fd5b5035613f30565b34801561184757600080fd5b5061075f613f42565b34801561185c57600080fd5b50610fdc613f4e565b34801561187157600080fd5b5061075f6004803603602081101561188857600080fd5b8101906020810181356401000000008111156118a357600080fd5b8201836020820111156118b557600080fd5b803590602001918460018302840111640100000000831117156118d757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613fa9945050505050565b34801561192457600080fd5b506107026004803603604081101561193b57600080fd5b81019060208101813564010000000081111561195657600080fd5b82018360208201111561196857600080fd5b8035906020019184600183028401116401000000008311171561198a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156119dd57600080fd5b8201836020820111156119ef57600080fd5b80359060200191846001830284011164010000000083111715611a1157600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061441a945050505050565b348015611a5e57600080fd5b5061075f614611565b348015611a7357600080fd5b5061075f614616565b348015611a8857600080fd5b5061080161461c565b348015611a9d57600080fd5b5061070260048036036060811015611ab457600080fd5b50600160a060020a038135169060ff60208201358116916040013516614621565b348015611ae157600080fd5b5061070260048036036020811015611af857600080fd5b5035600160a060020a031661462e565b348015611b1457600080fd5b5061087460048036036020811015611b2b57600080fd5b503561467c565b348015611b3e57600080fd5b5061080160048036036020811015611b5557600080fd5b5035600160a060020a0316614690565b348015611b7157600080fd5b5061075f6146ae565b348015611b8657600080fd5b5061087460048036036020811015611b9d57600080fd5b5035600160a060020a03166146b4565b348015611bb957600080fd5b5061087460048036036040811015611bd057600080fd5b508035600160a060020a0316906020013560ff1661483c565b600454600160a060020a03165b90565b600254600160a060020a031681565b6000611c14601c614857565b905090565b600181565b600354600160a060020a03163314611c3557600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b600481565b600160a060020a03811660009081526029602052604090205460ff165b919050565b60165460ff1681565b60235490565b600354600090600160a060020a0383811691161480611cb65750600354600160a060020a031633145b92915050565b600354600160a060020a03163314611cd357600080fd5b600160a060020a0382811660009081526014602052604090205416158015611d015750611cff826139ed565b155b15611dad576012546013541015611d5757816012601354815481101515611d2457fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550611da3565b601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444018054600160a060020a031916600160a060020a0384161790555b6013805460010190555b600160a060020a038281166000818152601460209081526040918290208054600160a060020a0319169486169485179055815192835282019290925281517f280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7929181900390910190a15050565b611e226136e8565b1515611e2d57600080fd5b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd91602480820192602092909190829003018186803b158015611e9c57600080fd5b505afa158015611eb0573d6000803e3d6000fd5b505050506040513d6020811015611ec657600080fd5b50519050600160a060020a0381161515611eea57611ee5858585612298565b611ef5565b611ef5818585612298565b5050505050565b601654610100900460ff1681565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e1491602480820192602092909190829003018186803b158015611f7557600080fd5b505afa158015611f89573d6000803e3d6000fd5b505050506040513d6020811015611f9f57600080fd5b505191505090565b601654600090611fc090610100900460ff16848461340d565b9392505050565b60165462010000900460ff1681565b600281565b6000611fe633613739565b1515611ff157600080fd5b604080516c01000000000000000000000000300260208083019190915242603480840182905284518085039091018152605484018086528151919093012090915260006074830181905260948301523360b48301526103e80260d482015290517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360f40190a150600192915050565b601460205260009081526040902054600160a060020a031681565b60325481565b6000805b60125481101561227d5760006012828154811015156120c457fe5b600091825260208083209091015460408051808401899052815180820385018152818301808452815191909501207fe02dd9c2000000000000000000000000000000000000000000000000000000009094529051600160a060020a0390921694509192849263e02dd9c29260448083019392829003018186803b15801561214a57600080fd5b505afa15801561215e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561218757600080fd5b81019080805164010000000081111561219f57600080fd5b820160208101848111156121b257600080fd5b81516401000000008111828201871017156121cc57600080fd5b50509291905050506040516020018082805190602001908083835b602083106122065780518252601f1990920191602091820191016121e7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120141561227457601280548390811061225557fe5b600091825260209091200154600160a060020a03169250611c79915050565b506001016120a9565b50600092915050565b6122936028848484614995565b505050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156122d957600080fd5b505afa1580156122ed573d6000803e3d6000fd5b505050506040513d602081101561230357600080fd5b5051600854610100900460ff908116911614156123a857604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b15801561238b57600080fd5b505af115801561239f573d6000803e3d6000fd5b50505050612765565b80600160a060020a03166312915a306040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156123e457600080fd5b505afa1580156123f8573d6000803e3d6000fd5b505050506040513d602081101561240e57600080fd5b5051600854610100900460ff9081169116141561249657604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b15801561238b57600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156124d257600080fd5b505afa1580156124e6573d6000803e3d6000fd5b505050506040513d60208110156124fc57600080fd5b5051600854610100900460ff9081169116141561258457604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b15801561238b57600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156125c057600080fd5b505afa1580156125d4573d6000803e3d6000fd5b505050506040513d60208110156125ea57600080fd5b5051600854610100900460ff9081169116141561267257604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b15801561238b57600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156126ae57600080fd5b505afa1580156126c2573d6000803e3d6000fd5b505050506040513d60208110156126d857600080fd5b5051600854610100900460ff9081169116141561276057604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b15801561238b57600080fd5b600080fd5b50505050565b600354600090600160a060020a038381169116141561278c57506001611c79565b506000919050565b60085460ff1681565b50600090565b6000601354600014156127b857506001611c79565b611cb6826139ed565b600033600160a060020a038316146127d857600080fd5b600082905080600160a060020a0316638280dd8f60006040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b15801561282757600080fd5b505af115801561283b573d6000803e3d6000fd5b505050506040513d602081101561285157600080fd5b5050604080517f27c1c21d0000000000000000000000000000000000000000000000000000000081529051600160a060020a038316916327c1c21d916004808301926020929190829003018186803b1580156128ac57600080fd5b505afa1580156128c0573d6000803e3d6000fd5b505050506040513d60208110156128d657600080fd5b5051159392505050565b6022805460009190839081106128f257fe5b600091825260209091200154600160a060020a031692915050565b600080600080600061291f6018614857565b6129296020614857565b612933601c614857565b61293d6024614857565b6129476028614857565b945094509450945094509091929394565b600160a060020a031660009081526021602052604090205460ff1690565b60205460235460ff9091169082565b601154600160a060020a031681565b600c5490565b600f5460ff1681565b600090565b612293601c848484614995565b600b5481565b600354600160a060020a031633146129d257600080fd5b600354600160a060020a0316ff5b600354600160a060020a0390811691161490565b60006129fe611f0a565b1515612a0957600080fd5b600f5460ff161515612a1a57600080fd5b6000600a8054600181600116156101000203166002900490501115612ac957600c80546001818101808455600093909352600a8054612a90937fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70192600261010091831615919091026000190190911604615073565b5050600b54600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501555b600e8054612aec91600a9160026000196101006001841615020190911604615073565b5042600b55604080516020810191829052600090819052612b0f91600e916150f8565b50600f805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a0316612b50611be9565b60408051600160a060020a038085168252831660208201526060918101828152600a80546002600019610100600184161502019091160493830184905292608083019084908015612be25780601f10612bb757610100808354040283529160200191612be2565b820191906000526020600020905b815481529060010190602001808311612bc557829003601f168201915b505094505050505060405180910390a150600190565b600454600090600160a060020a031633811480612ca15750604080517fd6be0f490000000000000000000000000000000000000000000000000000000081523360048201529051600091600160a060020a0384169163d6be0f4991602480820192602092909190829003018186803b158015612c7357600080fd5b505afa158015612c87573d6000803e3d6000fd5b505050506040513d6020811015612c9d57600080fd5b5051115b1515612cac57600080fd5b600081600160a060020a031663d6be0f498b6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015612d0757600080fd5b505afa158015612d1b573d6000803e3d6000fd5b505050506040513d6020811015612d3157600080fd5b505111612d3d57600080fd5b6032548311612d825760408051600160a060020a038b16815260016020820152815160008051602061524b833981519152929181900390910190a16000915050612eca565b3031841115612dc75760408051600160a060020a038b16815260026020820152815160008051602061524b833981519152929181900390910190a16000915050612eca565b6000612dd7898989898989613271565b9050801515612e1d5760408051600160a060020a038c16815260036020820152815160008051602061524b833981519152929181900390910190a1600092505050612eca565b6032849055604051600090600160a060020a0388169087156108fc0290889084818181858888f193505050509050801515612e905760408051600160a060020a038d16815260046020820152815160008051602061524b833981519152929181900390910190a160009350505050612eca565b60408051600160a060020a038d16815260006020820152815160008051602061524b833981519152929181900390910190a1600193505050505b979650505050505050565b602c54602f5460ff9091169082565b60315481565b60275490565b60ff84161561276557612765612f0585614cac565b848484614995565b60015481565b612f1b61324e565b1515612f2657600080fd5b604080516020810191829052600090819052612f4491600e916150f8565b50600f805460ff19169055565b601654600090611fc09060ff16848461340d565b600e805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015612feb5780601f10612fc057610100808354040283529160200191612feb565b820191906000526020600020905b815481529060010190602001808311612fce57829003601f168201915b505050505081565b601654640100000000900460ff1681565b600854610100900460ff1681565b600354600090600160a060020a03838116911614806130395750600854606460ff90911610155b1561304657506001611c79565b600854600061010090910460ff1611156131a15760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b1580156130c657600080fd5b505afa1580156130da573d6000803e3d6000fd5b505050506040513d60208110156130f057600080fd5b5051600854604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561316c57600080fd5b505afa158015613180573d6000803e3d6000fd5b505050506040513d602081101561319657600080fd5b50519150611c799050565b506000611c79565b601654600090611fc09062010000900460ff16848461340d565b6016546301000000900460ff1681565b600160a060020a03166000908152601d602052604090205460ff1690565b602854602b5460ff9091169082565b600254600160a060020a0316331461321757600080fd5b600160a060020a038116151561322c57600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a0316331490565b602a805460009190839081106128f257fe5b604080516c01000000000000000000000000308102602080840191909152600160a060020a0387169091026034830152604882018590526068808301859052835180840390910181526088830180855281519183019190912060009182905260a8840180865281905260ff8b1660c885015260e884018a905261010884018990529351909392849260019261012880840193601f198301929081900390910190855afa158015613325573d6000803e3d6000fd5b5050604051601f190151600354909250600160a060020a0380841691161490506133545760009250505061335b565b6001925050505b9695505050505050565b6000903b1190565b600d80548290811061337b57fe5b600091825260209091200154905081565b600c80548290811061339a57fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815293509091830182828015612feb5780601f10612fc057610100808354040283529160200191612feb565b6122936018848484614995565b600080839050600360009054906101000a9004600160a060020a0316600160a060020a031681600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561346e57600080fd5b505afa158015613482573d6000803e3d6000fd5b505050506040513d602081101561349857600080fd5b5051600160a060020a031614156134b3576001915050611fc0565b60006134c0868686613a53565b9050600181151514156134d857600192505050611fc0565b60165460ff87811661010090920416146136dc57600080805b6023548110156136d857602280548290811061350957fe5b600091825260209091200154600160a060020a03169150811580159061354d5750600160a060020a038216600090815260216020526040902054600160ff90911610155b156136d057819250600360009054906101000a9004600160a060020a0316600160a060020a031683600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156135b057600080fd5b505afa1580156135c4573d6000803e3d6000fd5b505050506040513d60208110156135da57600080fd5b5051600160a060020a0316148061360f5750600160a060020a038216600090815260216020526040902054600a60ff90911610155b80156136bd5750604080517fa00b38c400000000000000000000000000000000000000000000000000000000815260ff808c166004830152600160a060020a038b81166024840152908a16604483015291519185169163a00b38c491606480820192602092909190829003018186803b15801561368b57600080fd5b505afa15801561369f573d6000803e3d6000fd5b505050506040513d60208110156136b557600080fd5b505115156001145b156136d057600195505050505050611fc0565b6001016134f1565b5050505b50600095945050505050565b6000611c1433613012565b600081565b6000611c146024614857565b60165461229390612f05906301000000900460ff16614cac565b600354600160a060020a031681565b6000611c146018614857565b600354600090600160a060020a03838116911614806137605750600854600a60ff90911610155b1561376d57506001611c79565b600854600061010090910460ff1611156131a15760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b1580156137ed57600080fd5b505afa158015613801573d6000803e3d6000fd5b505050506040513d602081101561381757600080fd5b5051600854604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561316c57600080fd5b600a81565b6138a061324e565b15156138ab57600080fd5b600f5460ff16156138bb57600080fd5b80516080116138c957600080fd5b80516138dc90600e9060208401906150f8565b50600f805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316613920611be9565b60408051600160a060020a038085168252831660208201526060918101828152600e805460026000196101006001841615020190911604938301849052926080830190849080156139b25780601f10613987576101008083540402835291602001916139b2565b820191906000526020600020905b81548152906001019060200180831161399557829003601f168201915b505094505050505060405180910390a150565b60128054829081106139d357fe5b600091825260209091200154600160a060020a0316905081565b600080805b601354811015613a3d5783600160a060020a0316601282815481101515613a1557fe5b600091825260209091200154600160a060020a03161415613a3557600191505b6001016139f2565b5092915050565b60245460275460ff9091169082565b600060ff841615613a7857613a71613a6a85614cac565b8484614d49565b9050611fc0565b5060009392505050565b600160a060020a031660009081526025602052604090205460ff1690565b601654600090611fc090640100000000900460ff16848461340d565b601c54601f5460ff9091169082565b613ad36136e8565b1515613ade57600080fd5b6008805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b6026805460009190839081106128f257fe5b606060208251111515613c0e5781518083015160008181526005602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529394939091830182828015613c005780601f10613bd557610100808354040283529160200191613c00565b820191906000526020600020905b815481529060010190602001808311613be357829003601f168201915b505050505092505050611c79565b6006826040518082805190602001908083835b60208310613c405780518252601f199092019160209182019101613c21565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f6002600183161590980290950116959095049283018290048202880182019052818752929450925050830182828015613cf45780601f10613cc957610100808354040283529160200191613cf4565b820191906000526020600020905b815481529060010190602001808311613cd757829003601f168201915b50505050509050919050565b600454600160a060020a031681565b336000818152601d602052604090205460ff16613d2a615166565b600a60ff8381169182068116808452606490920682900381168403829003811660408085018290526017546101009004831660020283166020808701829052600160a060020a0389166000908152601d9091529190912080549190940190910191821660ff1990911681179092559015801590613da8575060ff8316155b15613db857613db8601c85614d9d565b60408051308152600160a060020a038616602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a150505050565b613e106136e8565b1515613e1b57600080fd5b604080516020808252600a8054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b6593909291829182019084908015613eba5780601f10613e8f57610100808354040283529160200191613eba565b820191906000526020600020905b815481529060010190602001808311613e9d57829003601f168201915b50509250505060405180910390a1565b601854601b5460ff9091169082565b60135481565b600354600160a060020a03163314613ef657600080fd5b60118054600160a060020a031916600160a060020a0392909216919091179055565b601b5490565b601e805460009190839081106128f257fe5b601a805460009190839081106128f257fe5b6000611c146020614857565b600a805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015612feb5780601f10612fc057610100808354040283529160200191612feb565b6000613fb361324e565b1515613fbe57600080fd5b6000826040516020018082805190602001908083835b60208310613ff35780518252601f199092019160209182019101613fd4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090506000600a60405160200180828054600181600116156101000203166002900480156140925780601f10614070576101008083540402835291820191614092565b820191906000526020600020905b81548152906001019060200180831161407e575b50509150506040516020818303038152906040528051906020012090508082141561426957600c5415156140e9576040805160208101918290526000908190526140de91600a916150f8565b506000600b5561418d565b600080805b600c548110156141415781600d8281548110151561410857fe5b9060005260206000200154111561413957809250600d8181548110151561412b57fe5b906000526020600020015491505b6001016140ee565b50600c80548390811061415057fe5b90600052602060002001600a908054600181600116156101000203166002900461417b929190615073565b50600b81905561418a82614e34565b50505b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168560006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561422257818101518382015260200161420a565b50505050905090810190601f16801561424f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600092505050611c79565b60001960005b600c54811015614332576000600c8281548110151561428a57fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156142f25780601f106142d05761010080835404028352918201916142f2565b820191906000526020600020905b8154815290600101906020018083116142de575b5050915050604051602081830303815290604052805190602001209050808514156143295761432082614e34565b81925050614332565b5060010161426f565b5060001981141561434257600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031686836040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156143d65781810151838201526020016143be565b50505050905090810190601f1680156144035780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1949350505050565b6144233361276b565b151561442e57600080fd5b815160201061448957815180830151600081815260056020526040812091929161445791615185565b6000835111156144825760008281526005602090815260409091208451614480928601906150f8565b505b5050614574565b6006826040518082805190602001908083835b602083106144bb5780518252601f19909201916020918201910161449c565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092206144f4925090506000615185565b60008151111561457457806006836040518082805190602001908083835b602083106145315780518252601f199092019160209182019101614512565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161457295919491909101925090506150f8565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c826040518080602001828103825283818151815260200191508051906020019080838360005b838110156145d35781810151838201526020016145bb565b50505050905090810190601f1680156146005780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050565b600381565b601f5490565b606481565b6122936020848484614995565b600354600160a060020a0316331461464557600080fd5b600160a060020a038116151561465a57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600060325482111561278c57506001611c79565b600160a060020a031660009081526019602052604090205460ff1690565b602b5490565b600354600090600160a060020a031633146146ce57600080fd5b6013546000190160005b601354811015613a785783600160a060020a03166012828154811015156146fb57fe5b600091825260209091200154600160a060020a0316141561483457601280548290811061472457fe5b60009182526020909120018054600160a060020a03191690558082146147c957601280548390811061475257fe5b60009182526020909120015460128054600160a060020a03909216918390811061477857fe5b60009182526020909120018054600160a060020a031916600160a060020a039290921691909117905560128054839081106147af57fe5b60009182526020909120018054600160a060020a03191690555b6013829055600160a060020a0384166000818152601460209081526040918290208054600160a060020a0319169055815192835290517fd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e29281900390910190a1600192505050611c79565b6001016146d8565b601654600090611fc0906301000000900460ff16848461340d565b600080805b8360030154811015613a3d57614896846002018281548110151561487c57fe5b600091825260209091200154600160a060020a0316613365565b151561498c57600284018054829081106148ac57fe5b60009182526020909120018054600160a060020a031916905560038401546001929092019160001901811461497b578360020160018560030154038154811015156148f357fe5b600091825260209091200154600285018054600160a060020a03909216918390811061491b57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555083600201600185600301540381548110151561496157fe5b60009182526020909120018054600160a060020a03191690555b600384018054600019019055614990565b6001015b61485c565b6000600133600160a060020a03861614614a4a57604080517f67e5c3bf00000000000000000000000000000000000000000000000000000000815233600482015290518691600160a060020a038316916367e5c3bf91602480820192602092909190829003018186803b158015614a0b57600080fd5b505afa158015614a1f573d6000803e3d6000fd5b505050506040513d6020811015614a3557600080fd5b50519150614a42336129e0565b925050614a56565b614a53326129e0565b91505b600160a060020a038516600090815260018701602052604090205460ff16614a7c615166565b600a60ff838116918206811680845260649092068290038116602084018190528403919091038116604083015260009086908116158015614ac157508580614ac15750845b15614acb57600191505b60ff871615801590614ada5750855b8015614afc575060018360ff8a1660038110614af257fe5b602002015160ff16145b15614b0957506001905060025b60ff871615801590614b185750845b8015614b3b575060028360ff8a1660038110614b3057fe5b602002015160ff1614155b15614b47575060019050805b60ff871615801590614b565750855b8015614b5f5750845b15614b6c57506001905060025b811515614b7857600080fd5b601760ff891660038110614b8857fe5b602081049091015460ff601f9092166101000a9004811682029084908a1660038110614bb057fe5b60ff9092166020929092020152600083600260200201518460016020020151856000602002015101019050808b60010160008c600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508060ff16600014158015614c30575060ff8516155b15614c3f57614c3f8b8b614d9d565b60ff81161515614c5557614c538b8b614f38565b505b60408051308152600160a060020a038c16602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a15050505050505050505050565b60165460009060ff83811691161415614cc75750601c611c79565b60165460ff838116610100909204161415614ce457506020611c79565b60165460ff83811662010000909204161415614d0257506018611c79565b60165460ff838116640100000000909204161415614d2257506028611c79565b60165460ff8381166301000000909204161415614d4157506024611c79565b50602c919050565b600160a060020a038216600090815260018401602052604081205460ff90811690601790841660038110614d7957fe5b602081049091015460ff601f9092166101000a900481169116101590509392505050565b600282015460038301541015614df65780826002018360030154815481101515614dc357fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550614e27565b60028201805460018101825560009182526020909120018054600160a060020a031916600160a060020a0383161790555b5060030180546001019055565b600c805482908110614e4257fe5b906000526020600020016000614e589190615185565b600d805482908110614e6657fe5b6000918252602082200155600c54600019018114614f0c57600c80546000198101908110614e9057fe5b90600052602060002001600c82815481101515614ea957fe5b906000526020600020019080546001816001161561010002031660029004614ed2929190615073565b50600d80546000198101908110614ee557fe5b9060005260206000200154600d82815481101515614eff57fe5b6000918252602090912001555b600c805490614f1f9060001983016151c9565b50600d805490614f339060001983016151ed565b505b50565b6000805b8360030154811015613a785782600160a060020a03168460020182815481101515614f6357fe5b600091825260209091200154600160a060020a0316141561506b5760028401805482908110614f8e57fe5b60009182526020909120018054600160a060020a0319169055600384015460001901811461505657836002016001856003015403815481101515614fce57fe5b600091825260209091200154600285018054600160a060020a039092169183908110614ff657fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555083600201600185600301540381548110151561503c57fe5b60009182526020909120018054600160a060020a03191690555b50506003820180546000190190556001611cb6565b600101614f3c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106150ac57805485556150e8565b828001600101855582156150e857600052602060002091601f016020900482015b828111156150e85782548255916001019190600101906150cd565b506150f492915061520d565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061513957805160ff19168380011785556150e8565b828001600101855582156150e8579182015b828111156150e857825182559160200191906001019061514b565b6060604051908101604052806003906020820280388339509192915050565b50805460018160011615610100020316600290046000825580601f106151ab5750614f35565b601f016020900490600052602060002090810190614f35919061520d565b81548183558181111561229357600083815260209020612293918101908301615227565b815481835581811115612293576000838152602090206122939181019083015b611bf691905b808211156150f45760008155600101615213565b611bf691905b808211156150f45760006152418282615185565b5060010161522d56fe583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefada165627a7a72305820cefadcf59ef742017b8edfa022ea558b4cc37521e3449580d72757a7958a5d0d0029a165627a7a72305820294433ec7df00a08ce63e30410214f8d9a7d30d19d1fbc34050e8f8057a72b290029"

// DeployBaseAccessWalletFactory deploys a new Ethereum contract, binding an instance of BaseAccessWalletFactory to it.
func DeployBaseAccessWalletFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _spaceAddr common.Address) (common.Address, *types.Transaction, *BaseAccessWalletFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessWalletFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseAccessWalletFactoryBin), backend, _spaceAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessWalletFactory{BaseAccessWalletFactoryCaller: BaseAccessWalletFactoryCaller{contract: contract}, BaseAccessWalletFactoryTransactor: BaseAccessWalletFactoryTransactor{contract: contract}, BaseAccessWalletFactoryFilterer: BaseAccessWalletFactoryFilterer{contract: contract}}, nil
}

// BaseAccessWalletFactory is an auto generated Go binding around an Ethereum contract.
type BaseAccessWalletFactory struct {
	BaseAccessWalletFactoryCaller     // Read-only binding to the contract
	BaseAccessWalletFactoryTransactor // Write-only binding to the contract
	BaseAccessWalletFactoryFilterer   // Log filterer for contract events
}

// BaseAccessWalletFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessWalletFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseAccessWalletFactorySession struct {
	Contract     *BaseAccessWalletFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// BaseAccessWalletFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseAccessWalletFactoryCallerSession struct {
	Contract *BaseAccessWalletFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// BaseAccessWalletFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseAccessWalletFactoryTransactorSession struct {
	Contract     *BaseAccessWalletFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// BaseAccessWalletFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseAccessWalletFactoryRaw struct {
	Contract *BaseAccessWalletFactory // Generic contract binding to access the raw methods on
}

// BaseAccessWalletFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryCallerRaw struct {
	Contract *BaseAccessWalletFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseAccessWalletFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryTransactorRaw struct {
	Contract *BaseAccessWalletFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseAccessWalletFactory creates a new instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactory(address common.Address, backend bind.ContractBackend) (*BaseAccessWalletFactory, error) {
	contract, err := bindBaseAccessWalletFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactory{BaseAccessWalletFactoryCaller: BaseAccessWalletFactoryCaller{contract: contract}, BaseAccessWalletFactoryTransactor: BaseAccessWalletFactoryTransactor{contract: contract}, BaseAccessWalletFactoryFilterer: BaseAccessWalletFactoryFilterer{contract: contract}}, nil
}

// NewBaseAccessWalletFactoryCaller creates a new read-only instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessWalletFactoryCaller, error) {
	contract, err := bindBaseAccessWalletFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryCaller{contract: contract}, nil
}

// NewBaseAccessWalletFactoryTransactor creates a new write-only instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessWalletFactoryTransactor, error) {
	contract, err := bindBaseAccessWalletFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryTransactor{contract: contract}, nil
}

// NewBaseAccessWalletFactoryFilterer creates a new log filterer instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessWalletFactoryFilterer, error) {
	contract, err := bindBaseAccessWalletFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryFilterer{contract: contract}, nil
}

// bindBaseAccessWalletFactory binds a generic wrapper to an already deployed contract.
func bindBaseAccessWalletFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessWalletFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessWalletFactory.Contract.BaseAccessWalletFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.BaseAccessWalletFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.BaseAccessWalletFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessWalletFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWalletFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) ContentSpace() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.ContentSpace(&_BaseAccessWalletFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.ContentSpace(&_BaseAccessWalletFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWalletFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) Creator() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.Creator(&_BaseAccessWalletFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.Creator(&_BaseAccessWalletFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWalletFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) Owner() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.Owner(&_BaseAccessWalletFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.Owner(&_BaseAccessWalletFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessWalletFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) Version() ([32]byte, error) {
	return _BaseAccessWalletFactory.Contract.Version(&_BaseAccessWalletFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseAccessWalletFactory.Contract.Version(&_BaseAccessWalletFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessWalletFactory.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) VersionAPI() ([32]byte, error) {
	return _BaseAccessWalletFactory.Contract.VersionAPI(&_BaseAccessWalletFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseAccessWalletFactory.Contract.VersionAPI(&_BaseAccessWalletFactory.CallOpts)
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) CreateAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "createAccessWallet")
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) CreateAccessWallet() (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.CreateAccessWallet(&_BaseAccessWalletFactory.TransactOpts)
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorSession) CreateAccessWallet() (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.CreateAccessWallet(&_BaseAccessWalletFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) Kill() (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.Kill(&_BaseAccessWalletFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.Kill(&_BaseAccessWalletFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.TransferCreatorship(&_BaseAccessWalletFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.TransferCreatorship(&_BaseAccessWalletFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.TransferOwnership(&_BaseAccessWalletFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.TransferOwnership(&_BaseAccessWalletFactory.TransactOpts, newOwner)
}

// BaseContentABI is the input ABI used to generate the binding from.
const BaseContentABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"request_ID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accessComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"name\":\"payee\",\"type\":\"address\"},{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"processRequestPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestMap\",\"outputs\":[{\"name\":\"originator\",\"type\":\"address\"},{\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"int8\"},{\"name\":\"settled\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statusCode\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"getAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessCompleteV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessCompleteInternal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status_code\",\"type\":\"int256\"}],\"name\":\"setStatusCode\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"name\":\"accessor\",\"type\":\"address\"},{\"name\":\"request_timestamp\",\"type\":\"uint256\"}],\"name\":\"accessRequestContext\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accessor\",\"type\":\"address\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"getAccessInfoV3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status_code\",\"type\":\"int256\"}],\"name\":\"updateStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"pkeRequestor\",\"type\":\"string\"},{\"name\":\"pkeAFGH\",\"type\":\"string\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestNonce\",\"type\":\"uint256\"},{\"name\":\"_contextHash\",\"type\":\"bytes32\"},{\"name\":\"_accessor\",\"type\":\"address\"},{\"name\":\"_request_timestamp\",\"type\":\"uint256\"}],\"name\":\"accessCompleteContext\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accessor\",\"type\":\"address\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"getCustomInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContentContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"charge\",\"type\":\"uint256\"}],\"name\":\"setAccessCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"},{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"containingLibrary\",\"type\":\"address\"}],\"name\":\"ContentObjectCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContractAddress\",\"type\":\"address\"}],\"name\":\"SetContentType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customValue\",\"type\":\"bytes32\"}],\"name\":\"AccessRequestValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"AccessRequestStakeholder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"contentHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pkeRequestor\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pkeAFGH\",\"type\":\"string\"}],\"name\":\"AccessRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scorePct\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customContractResult\",\"type\":\"bool\"}],\"name\":\"AccessComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customContractResult\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"request_timestamp\",\"type\":\"uint256\"}],\"name\":\"AccessCompleteV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentContractAddress\",\"type\":\"address\"}],\"name\":\"SetContentContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accessCharge\",\"type\":\"uint256\"}],\"name\":\"SetAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accessCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountProvided\",\"type\":\"uint256\"}],\"name\":\"InsufficientFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"statusCode\",\"type\":\"int256\"}],\"name\":\"SetStatusCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestStatus\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"statusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"Publish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// BaseContentFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"64ade32b": "accessCharge()",
	"0593e335": "accessComplete(uint256,uint256,uint256)",
	"bc7dba33": "accessCompleteContext(uint256,bytes32,address,uint256)",
	"484f4b3b": "accessCompleteInternal(uint256,bytes32[],address[])",
	"45155f6e": "accessCompleteV3(uint256,bytes32[],address[])",
	"a1ff106e": "accessRequest(uint8,string,string,bytes32[],address[])",
	"78f52ffb": "accessRequestContext(uint256,bytes32,address,uint256)",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"32eaf21b": "addressKMS()",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"81beeb64": "canEdit()",
	"cbcd4461": "canPublish()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"2310167f": "contentContractAddress()",
	"af570c04": "contentSpace()",
	"36ebffca": "contentType()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"38d0f504": "getAccessInfo(uint8,bytes32[],address[])",
	"7ddc2c56": "getAccessInfoV3(address,bytes32[],address[])",
	"c26484a6": "getCustomInfo(address,bytes32[],address[])",
	"a8d4160e": "getKMSInfo(bytes)",
	"ac55c906": "getMeta(bytes)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"6380501f": "indexCategory()",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"b816f513": "libraryAddress()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"0c6d3f93": "processRequestPayment(uint256,address,string,uint256)",
	"075d4782": "publish()",
	"e542b7cb": "putMeta(bytes,bytes)",
	"8f779201": "requestID()",
	"1a735f18": "requestMap(uint256)",
	"f4d9bae8": "setAccessCharge(uint256)",
	"c9e8e72d": "setAddressKMS(address)",
	"e5385303": "setContentContractAddress(address)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"5267db44": "setStatusCode(int256)",
	"aa024e8b": "setVisibility(uint8)",
	"27c1c21d": "statusCode()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"8280dd8f": "updateStatus(int256)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
}

// BaseContentBin is the compiled bytecode used for deploying new contracts.
var BaseContentBin = ""

// DeployBaseContent deploys a new Ethereum contract, binding an instance of BaseContent to it.
func DeployBaseContent(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address, lib common.Address, content_type common.Address) (common.Address, *types.Transaction, *BaseContent, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseContentBin), backend, content_space, lib, content_type)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContent{BaseContentCaller: BaseContentCaller{contract: contract}, BaseContentTransactor: BaseContentTransactor{contract: contract}, BaseContentFilterer: BaseContentFilterer{contract: contract}}, nil
}

// BaseContent is an auto generated Go binding around an Ethereum contract.
type BaseContent struct {
	BaseContentCaller     // Read-only binding to the contract
	BaseContentTransactor // Write-only binding to the contract
	BaseContentFilterer   // Log filterer for contract events
}

// BaseContentCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseContentSession struct {
	Contract     *BaseContent      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseContentCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseContentCallerSession struct {
	Contract *BaseContentCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// BaseContentTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseContentTransactorSession struct {
	Contract     *BaseContentTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// BaseContentRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseContentRaw struct {
	Contract *BaseContent // Generic contract binding to access the raw methods on
}

// BaseContentCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseContentCallerRaw struct {
	Contract *BaseContentCaller // Generic read-only contract binding to access the raw methods on
}

// BaseContentTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseContentTransactorRaw struct {
	Contract *BaseContentTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseContent creates a new instance of BaseContent, bound to a specific deployed contract.
func NewBaseContent(address common.Address, backend bind.ContractBackend) (*BaseContent, error) {
	contract, err := bindBaseContent(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContent{BaseContentCaller: BaseContentCaller{contract: contract}, BaseContentTransactor: BaseContentTransactor{contract: contract}, BaseContentFilterer: BaseContentFilterer{contract: contract}}, nil
}

// NewBaseContentCaller creates a new read-only instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentCaller(address common.Address, caller bind.ContractCaller) (*BaseContentCaller, error) {
	contract, err := bindBaseContent(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentCaller{contract: contract}, nil
}

// NewBaseContentTransactor creates a new write-only instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentTransactor, error) {
	contract, err := bindBaseContent(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTransactor{contract: contract}, nil
}

// NewBaseContentFilterer creates a new log filterer instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentFilterer, error) {
	contract, err := bindBaseContent(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentFilterer{contract: contract}, nil
}

// bindBaseContent binds a generic wrapper to an already deployed contract.
func bindBaseContent(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContent *BaseContentRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContent.Contract.BaseContentCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContent *BaseContentRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.Contract.BaseContentTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContent *BaseContentRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContent.Contract.BaseContentTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContent *BaseContentCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContent.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContent *BaseContentTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContent *BaseContentTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContent.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContent *BaseContentCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContent *BaseContentSession) CANACCESS() (uint8, error) {
	return _BaseContent.Contract.CANACCESS(&_BaseContent.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContent *BaseContentCallerSession) CANACCESS() (uint8, error) {
	return _BaseContent.Contract.CANACCESS(&_BaseContent.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContent *BaseContentCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContent *BaseContentSession) CANEDIT() (uint8, error) {
	return _BaseContent.Contract.CANEDIT(&_BaseContent.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContent *BaseContentCallerSession) CANEDIT() (uint8, error) {
	return _BaseContent.Contract.CANEDIT(&_BaseContent.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContent *BaseContentCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContent *BaseContentSession) CANSEE() (uint8, error) {
	return _BaseContent.Contract.CANSEE(&_BaseContent.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContent *BaseContentCallerSession) CANSEE() (uint8, error) {
	return _BaseContent.Contract.CANSEE(&_BaseContent.CallOpts)
}

// AccessCharge is a free data retrieval call binding the contract method 0x64ade32b.
//
// Solidity: function accessCharge() constant returns(uint256)
func (_BaseContent *BaseContentCaller) AccessCharge(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "accessCharge")
	return *ret0, err
}

// AccessCharge is a free data retrieval call binding the contract method 0x64ade32b.
//
// Solidity: function accessCharge() constant returns(uint256)
func (_BaseContent *BaseContentSession) AccessCharge() (*big.Int, error) {
	return _BaseContent.Contract.AccessCharge(&_BaseContent.CallOpts)
}

// AccessCharge is a free data retrieval call binding the contract method 0x64ade32b.
//
// Solidity: function accessCharge() constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) AccessCharge() (*big.Int, error) {
	return _BaseContent.Contract.AccessCharge(&_BaseContent.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContent *BaseContentCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContent *BaseContentSession) AddressKMS() (common.Address, error) {
	return _BaseContent.Contract.AddressKMS(&_BaseContent.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContent *BaseContentCallerSession) AddressKMS() (common.Address, error) {
	return _BaseContent.Contract.AddressKMS(&_BaseContent.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContent *BaseContentCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContent *BaseContentSession) CanCommit() (bool, error) {
	return _BaseContent.Contract.CanCommit(&_BaseContent.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CanCommit() (bool, error) {
	return _BaseContent.Contract.CanCommit(&_BaseContent.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContent *BaseContentCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContent *BaseContentSession) CanConfirm() (bool, error) {
	return _BaseContent.Contract.CanConfirm(&_BaseContent.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CanConfirm() (bool, error) {
	return _BaseContent.Contract.CanConfirm(&_BaseContent.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContent *BaseContentCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContent *BaseContentSession) CanEdit() (bool, error) {
	return _BaseContent.Contract.CanEdit(&_BaseContent.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CanEdit() (bool, error) {
	return _BaseContent.Contract.CanEdit(&_BaseContent.CallOpts)
}

// CanPublish is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseContent *BaseContentCaller) CanPublish(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "canPublish")
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseContent *BaseContentSession) CanPublish() (bool, error) {
	return _BaseContent.Contract.CanPublish(&_BaseContent.CallOpts)
}

// CanPublish is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CanPublish() (bool, error) {
	return _BaseContent.Contract.CanPublish(&_BaseContent.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContent *BaseContentCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContent *BaseContentSession) CommitPending() (bool, error) {
	return _BaseContent.Contract.CommitPending(&_BaseContent.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CommitPending() (bool, error) {
	return _BaseContent.Contract.CommitPending(&_BaseContent.CallOpts)
}

// ContentContractAddress is a free data retrieval call binding the contract method 0x2310167f.
//
// Solidity: function contentContractAddress() constant returns(address)
func (_BaseContent *BaseContentCaller) ContentContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "contentContractAddress")
	return *ret0, err
}

// ContentContractAddress is a free data retrieval call binding the contract method 0x2310167f.
//
// Solidity: function contentContractAddress() constant returns(address)
func (_BaseContent *BaseContentSession) ContentContractAddress() (common.Address, error) {
	return _BaseContent.Contract.ContentContractAddress(&_BaseContent.CallOpts)
}

// ContentContractAddress is a free data retrieval call binding the contract method 0x2310167f.
//
// Solidity: function contentContractAddress() constant returns(address)
func (_BaseContent *BaseContentCallerSession) ContentContractAddress() (common.Address, error) {
	return _BaseContent.Contract.ContentContractAddress(&_BaseContent.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContent *BaseContentCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContent *BaseContentSession) ContentSpace() (common.Address, error) {
	return _BaseContent.Contract.ContentSpace(&_BaseContent.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContent *BaseContentCallerSession) ContentSpace() (common.Address, error) {
	return _BaseContent.Contract.ContentSpace(&_BaseContent.CallOpts)
}

// ContentType is a free data retrieval call binding the contract method 0x36ebffca.
//
// Solidity: function contentType() constant returns(address)
func (_BaseContent *BaseContentCaller) ContentType(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "contentType")
	return *ret0, err
}

// ContentType is a free data retrieval call binding the contract method 0x36ebffca.
//
// Solidity: function contentType() constant returns(address)
func (_BaseContent *BaseContentSession) ContentType() (common.Address, error) {
	return _BaseContent.Contract.ContentType(&_BaseContent.CallOpts)
}

// ContentType is a free data retrieval call binding the contract method 0x36ebffca.
//
// Solidity: function contentType() constant returns(address)
func (_BaseContent *BaseContentCallerSession) ContentType() (common.Address, error) {
	return _BaseContent.Contract.ContentType(&_BaseContent.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContent *BaseContentCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContent *BaseContentSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContent.Contract.CountVersionHashes(&_BaseContent.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContent.Contract.CountVersionHashes(&_BaseContent.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContent *BaseContentCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContent *BaseContentSession) Creator() (common.Address, error) {
	return _BaseContent.Contract.Creator(&_BaseContent.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContent *BaseContentCallerSession) Creator() (common.Address, error) {
	return _BaseContent.Contract.Creator(&_BaseContent.CallOpts)
}

// GetAccessInfo is a free data retrieval call binding the contract method 0x38d0f504.
//
// Solidity: function getAccessInfo(uint8 , bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCaller) GetAccessInfo(opts *bind.CallOpts, arg0 uint8, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _BaseContent.contract.Call(opts, out, "getAccessInfo", arg0, customValues, stakeholders)
	return *ret0, *ret1, *ret2, err
}

// GetAccessInfo is a free data retrieval call binding the contract method 0x38d0f504.
//
// Solidity: function getAccessInfo(uint8 , bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentSession) GetAccessInfo(arg0 uint8, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetAccessInfo(&_BaseContent.CallOpts, arg0, customValues, stakeholders)
}

// GetAccessInfo is a free data retrieval call binding the contract method 0x38d0f504.
//
// Solidity: function getAccessInfo(uint8 , bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCallerSession) GetAccessInfo(arg0 uint8, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetAccessInfo(&_BaseContent.CallOpts, arg0, customValues, stakeholders)
}

// GetAccessInfoV3 is a free data retrieval call binding the contract method 0x7ddc2c56.
//
// Solidity: function getAccessInfoV3(address accessor, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCaller) GetAccessInfoV3(opts *bind.CallOpts, accessor common.Address, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _BaseContent.contract.Call(opts, out, "getAccessInfoV3", accessor, customValues, stakeholders)
	return *ret0, *ret1, *ret2, err
}

// GetAccessInfoV3 is a free data retrieval call binding the contract method 0x7ddc2c56.
//
// Solidity: function getAccessInfoV3(address accessor, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentSession) GetAccessInfoV3(accessor common.Address, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetAccessInfoV3(&_BaseContent.CallOpts, accessor, customValues, stakeholders)
}

// GetAccessInfoV3 is a free data retrieval call binding the contract method 0x7ddc2c56.
//
// Solidity: function getAccessInfoV3(address accessor, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCallerSession) GetAccessInfoV3(accessor common.Address, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetAccessInfoV3(&_BaseContent.CallOpts, accessor, customValues, stakeholders)
}

// GetCustomInfo is a free data retrieval call binding the contract method 0xc26484a6.
//
// Solidity: function getCustomInfo(address accessor, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCaller) GetCustomInfo(opts *bind.CallOpts, accessor common.Address, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _BaseContent.contract.Call(opts, out, "getCustomInfo", accessor, customValues, stakeholders)
	return *ret0, *ret1, *ret2, err
}

// GetCustomInfo is a free data retrieval call binding the contract method 0xc26484a6.
//
// Solidity: function getCustomInfo(address accessor, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentSession) GetCustomInfo(accessor common.Address, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetCustomInfo(&_BaseContent.CallOpts, accessor, customValues, stakeholders)
}

// GetCustomInfo is a free data retrieval call binding the contract method 0xc26484a6.
//
// Solidity: function getCustomInfo(address accessor, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCallerSession) GetCustomInfo(accessor common.Address, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetCustomInfo(&_BaseContent.CallOpts, accessor, customValues, stakeholders)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0xa8d4160e.
//
// Solidity: function getKMSInfo(bytes prefix) constant returns(string, string)
func (_BaseContent *BaseContentCaller) GetKMSInfo(opts *bind.CallOpts, prefix []byte) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _BaseContent.contract.Call(opts, out, "getKMSInfo", prefix)
	return *ret0, *ret1, err
}

// GetKMSInfo is a free data retrieval call binding the contract method 0xa8d4160e.
//
// Solidity: function getKMSInfo(bytes prefix) constant returns(string, string)
func (_BaseContent *BaseContentSession) GetKMSInfo(prefix []byte) (string, string, error) {
	return _BaseContent.Contract.GetKMSInfo(&_BaseContent.CallOpts, prefix)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0xa8d4160e.
//
// Solidity: function getKMSInfo(bytes prefix) constant returns(string, string)
func (_BaseContent *BaseContentCallerSession) GetKMSInfo(prefix []byte) (string, string, error) {
	return _BaseContent.Contract.GetKMSInfo(&_BaseContent.CallOpts, prefix)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContent *BaseContentCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContent *BaseContentSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseContent.Contract.GetMeta(&_BaseContent.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContent *BaseContentCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseContent.Contract.GetMeta(&_BaseContent.CallOpts, key)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContent *BaseContentCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContent *BaseContentSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseContent.Contract.HasAccess(&_BaseContent.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContent *BaseContentCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseContent.Contract.HasAccess(&_BaseContent.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContent *BaseContentCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContent *BaseContentSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseContent.Contract.HasEditorRight(&_BaseContent.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContent *BaseContentCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseContent.Contract.HasEditorRight(&_BaseContent.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContent *BaseContentCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContent *BaseContentSession) IndexCategory() (uint8, error) {
	return _BaseContent.Contract.IndexCategory(&_BaseContent.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContent *BaseContentCallerSession) IndexCategory() (uint8, error) {
	return _BaseContent.Contract.IndexCategory(&_BaseContent.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseContent *BaseContentCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseContent *BaseContentSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseContent.Contract.IsAdmin(&_BaseContent.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseContent *BaseContentCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseContent.Contract.IsAdmin(&_BaseContent.CallOpts, _candidate)
}

// LibraryAddress is a free data retrieval call binding the contract method 0xb816f513.
//
// Solidity: function libraryAddress() constant returns(address)
func (_BaseContent *BaseContentCaller) LibraryAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "libraryAddress")
	return *ret0, err
}

// LibraryAddress is a free data retrieval call binding the contract method 0xb816f513.
//
// Solidity: function libraryAddress() constant returns(address)
func (_BaseContent *BaseContentSession) LibraryAddress() (common.Address, error) {
	return _BaseContent.Contract.LibraryAddress(&_BaseContent.CallOpts)
}

// LibraryAddress is a free data retrieval call binding the contract method 0xb816f513.
//
// Solidity: function libraryAddress() constant returns(address)
func (_BaseContent *BaseContentCallerSession) LibraryAddress() (common.Address, error) {
	return _BaseContent.Contract.LibraryAddress(&_BaseContent.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContent *BaseContentCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContent *BaseContentSession) ObjectHash() (string, error) {
	return _BaseContent.Contract.ObjectHash(&_BaseContent.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContent *BaseContentCallerSession) ObjectHash() (string, error) {
	return _BaseContent.Contract.ObjectHash(&_BaseContent.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContent *BaseContentCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContent *BaseContentSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseContent.Contract.ObjectTimestamp(&_BaseContent.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseContent.Contract.ObjectTimestamp(&_BaseContent.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContent *BaseContentCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContent *BaseContentSession) Owner() (common.Address, error) {
	return _BaseContent.Contract.Owner(&_BaseContent.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContent *BaseContentCallerSession) Owner() (common.Address, error) {
	return _BaseContent.Contract.Owner(&_BaseContent.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContent *BaseContentCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContent *BaseContentSession) ParentAddress() (common.Address, error) {
	return _BaseContent.Contract.ParentAddress(&_BaseContent.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContent *BaseContentCallerSession) ParentAddress() (common.Address, error) {
	return _BaseContent.Contract.ParentAddress(&_BaseContent.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContent *BaseContentCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContent *BaseContentSession) PendingHash() (string, error) {
	return _BaseContent.Contract.PendingHash(&_BaseContent.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContent *BaseContentCallerSession) PendingHash() (string, error) {
	return _BaseContent.Contract.PendingHash(&_BaseContent.CallOpts)
}

// RequestID is a free data retrieval call binding the contract method 0x8f779201.
//
// Solidity: function requestID() constant returns(uint256)
func (_BaseContent *BaseContentCaller) RequestID(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "requestID")
	return *ret0, err
}

// RequestID is a free data retrieval call binding the contract method 0x8f779201.
//
// Solidity: function requestID() constant returns(uint256)
func (_BaseContent *BaseContentSession) RequestID() (*big.Int, error) {
	return _BaseContent.Contract.RequestID(&_BaseContent.CallOpts)
}

// RequestID is a free data retrieval call binding the contract method 0x8f779201.
//
// Solidity: function requestID() constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) RequestID() (*big.Int, error) {
	return _BaseContent.Contract.RequestID(&_BaseContent.CallOpts)
}

// RequestMap is a free data retrieval call binding the contract method 0x1a735f18.
//
// Solidity: function requestMap(uint256 ) constant returns(address originator, uint256 amountPaid, int8 status, uint256 settled)
func (_BaseContent *BaseContentCaller) RequestMap(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Originator common.Address
	AmountPaid *big.Int
	Status     int8
	Settled    *big.Int
}, error) {
	ret := new(struct {
		Originator common.Address
		AmountPaid *big.Int
		Status     int8
		Settled    *big.Int
	})
	out := ret
	err := _BaseContent.contract.Call(opts, out, "requestMap", arg0)
	return *ret, err
}

// RequestMap is a free data retrieval call binding the contract method 0x1a735f18.
//
// Solidity: function requestMap(uint256 ) constant returns(address originator, uint256 amountPaid, int8 status, uint256 settled)
func (_BaseContent *BaseContentSession) RequestMap(arg0 *big.Int) (struct {
	Originator common.Address
	AmountPaid *big.Int
	Status     int8
	Settled    *big.Int
}, error) {
	return _BaseContent.Contract.RequestMap(&_BaseContent.CallOpts, arg0)
}

// RequestMap is a free data retrieval call binding the contract method 0x1a735f18.
//
// Solidity: function requestMap(uint256 ) constant returns(address originator, uint256 amountPaid, int8 status, uint256 settled)
func (_BaseContent *BaseContentCallerSession) RequestMap(arg0 *big.Int) (struct {
	Originator common.Address
	AmountPaid *big.Int
	Status     int8
	Settled    *big.Int
}, error) {
	return _BaseContent.Contract.RequestMap(&_BaseContent.CallOpts, arg0)
}

// StatusCode is a free data retrieval call binding the contract method 0x27c1c21d.
//
// Solidity: function statusCode() constant returns(int256)
func (_BaseContent *BaseContentCaller) StatusCode(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "statusCode")
	return *ret0, err
}

// StatusCode is a free data retrieval call binding the contract method 0x27c1c21d.
//
// Solidity: function statusCode() constant returns(int256)
func (_BaseContent *BaseContentSession) StatusCode() (*big.Int, error) {
	return _BaseContent.Contract.StatusCode(&_BaseContent.CallOpts)
}

// StatusCode is a free data retrieval call binding the contract method 0x27c1c21d.
//
// Solidity: function statusCode() constant returns(int256)
func (_BaseContent *BaseContentCallerSession) StatusCode() (*big.Int, error) {
	return _BaseContent.Contract.StatusCode(&_BaseContent.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContent *BaseContentCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContent *BaseContentSession) Version() ([32]byte, error) {
	return _BaseContent.Contract.Version(&_BaseContent.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) Version() ([32]byte, error) {
	return _BaseContent.Contract.Version(&_BaseContent.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContent *BaseContentCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContent *BaseContentSession) VersionAPI() ([32]byte, error) {
	return _BaseContent.Contract.VersionAPI(&_BaseContent.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseContent.Contract.VersionAPI(&_BaseContent.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContent *BaseContentCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContent *BaseContentSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContent.Contract.VersionHashes(&_BaseContent.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContent *BaseContentCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContent.Contract.VersionHashes(&_BaseContent.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContent *BaseContentCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContent *BaseContentSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContent.Contract.VersionTimestamp(&_BaseContent.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContent.Contract.VersionTimestamp(&_BaseContent.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContent *BaseContentCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContent *BaseContentSession) Visibility() (uint8, error) {
	return _BaseContent.Contract.Visibility(&_BaseContent.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContent *BaseContentCallerSession) Visibility() (uint8, error) {
	return _BaseContent.Contract.Visibility(&_BaseContent.CallOpts)
}

// AccessComplete is a paid mutator transaction binding the contract method 0x0593e335.
//
// Solidity: function accessComplete(uint256 request_ID, uint256 score_pct, uint256 ) returns(bool)
func (_BaseContent *BaseContentTransactor) AccessComplete(opts *bind.TransactOpts, request_ID *big.Int, score_pct *big.Int, arg2 *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessComplete", request_ID, score_pct, arg2)
}

// AccessComplete is a paid mutator transaction binding the contract method 0x0593e335.
//
// Solidity: function accessComplete(uint256 request_ID, uint256 score_pct, uint256 ) returns(bool)
func (_BaseContent *BaseContentSession) AccessComplete(request_ID *big.Int, score_pct *big.Int, arg2 *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessComplete(&_BaseContent.TransactOpts, request_ID, score_pct, arg2)
}

// AccessComplete is a paid mutator transaction binding the contract method 0x0593e335.
//
// Solidity: function accessComplete(uint256 request_ID, uint256 score_pct, uint256 ) returns(bool)
func (_BaseContent *BaseContentTransactorSession) AccessComplete(request_ID *big.Int, score_pct *big.Int, arg2 *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessComplete(&_BaseContent.TransactOpts, request_ID, score_pct, arg2)
}

// AccessCompleteContext is a paid mutator transaction binding the contract method 0xbc7dba33.
//
// Solidity: function accessCompleteContext(uint256 _requestNonce, bytes32 _contextHash, address _accessor, uint256 _request_timestamp) returns(bool)
func (_BaseContent *BaseContentTransactor) AccessCompleteContext(opts *bind.TransactOpts, _requestNonce *big.Int, _contextHash [32]byte, _accessor common.Address, _request_timestamp *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessCompleteContext", _requestNonce, _contextHash, _accessor, _request_timestamp)
}

// AccessCompleteContext is a paid mutator transaction binding the contract method 0xbc7dba33.
//
// Solidity: function accessCompleteContext(uint256 _requestNonce, bytes32 _contextHash, address _accessor, uint256 _request_timestamp) returns(bool)
func (_BaseContent *BaseContentSession) AccessCompleteContext(_requestNonce *big.Int, _contextHash [32]byte, _accessor common.Address, _request_timestamp *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessCompleteContext(&_BaseContent.TransactOpts, _requestNonce, _contextHash, _accessor, _request_timestamp)
}

// AccessCompleteContext is a paid mutator transaction binding the contract method 0xbc7dba33.
//
// Solidity: function accessCompleteContext(uint256 _requestNonce, bytes32 _contextHash, address _accessor, uint256 _request_timestamp) returns(bool)
func (_BaseContent *BaseContentTransactorSession) AccessCompleteContext(_requestNonce *big.Int, _contextHash [32]byte, _accessor common.Address, _request_timestamp *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessCompleteContext(&_BaseContent.TransactOpts, _requestNonce, _contextHash, _accessor, _request_timestamp)
}

// AccessCompleteInternal is a paid mutator transaction binding the contract method 0x484f4b3b.
//
// Solidity: function accessCompleteInternal(uint256 requestNonce, bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentTransactor) AccessCompleteInternal(opts *bind.TransactOpts, requestNonce *big.Int, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessCompleteInternal", requestNonce, customValues, stakeholders)
}

// AccessCompleteInternal is a paid mutator transaction binding the contract method 0x484f4b3b.
//
// Solidity: function accessCompleteInternal(uint256 requestNonce, bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentSession) AccessCompleteInternal(requestNonce *big.Int, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessCompleteInternal(&_BaseContent.TransactOpts, requestNonce, customValues, stakeholders)
}

// AccessCompleteInternal is a paid mutator transaction binding the contract method 0x484f4b3b.
//
// Solidity: function accessCompleteInternal(uint256 requestNonce, bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentTransactorSession) AccessCompleteInternal(requestNonce *big.Int, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessCompleteInternal(&_BaseContent.TransactOpts, requestNonce, customValues, stakeholders)
}

// AccessCompleteV3 is a paid mutator transaction binding the contract method 0x45155f6e.
//
// Solidity: function accessCompleteV3(uint256 requestNonce, bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentTransactor) AccessCompleteV3(opts *bind.TransactOpts, requestNonce *big.Int, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessCompleteV3", requestNonce, customValues, stakeholders)
}

// AccessCompleteV3 is a paid mutator transaction binding the contract method 0x45155f6e.
//
// Solidity: function accessCompleteV3(uint256 requestNonce, bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentSession) AccessCompleteV3(requestNonce *big.Int, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessCompleteV3(&_BaseContent.TransactOpts, requestNonce, customValues, stakeholders)
}

// AccessCompleteV3 is a paid mutator transaction binding the contract method 0x45155f6e.
//
// Solidity: function accessCompleteV3(uint256 requestNonce, bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentTransactorSession) AccessCompleteV3(requestNonce *big.Int, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessCompleteV3(&_BaseContent.TransactOpts, requestNonce, customValues, stakeholders)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xa1ff106e.
//
// Solidity: function accessRequest(uint8 , string pkeRequestor, string pkeAFGH, bytes32[] customValues, address[] stakeholders) returns(uint256)
func (_BaseContent *BaseContentTransactor) AccessRequest(opts *bind.TransactOpts, arg0 uint8, pkeRequestor string, pkeAFGH string, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessRequest", arg0, pkeRequestor, pkeAFGH, customValues, stakeholders)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xa1ff106e.
//
// Solidity: function accessRequest(uint8 , string pkeRequestor, string pkeAFGH, bytes32[] customValues, address[] stakeholders) returns(uint256)
func (_BaseContent *BaseContentSession) AccessRequest(arg0 uint8, pkeRequestor string, pkeAFGH string, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessRequest(&_BaseContent.TransactOpts, arg0, pkeRequestor, pkeAFGH, customValues, stakeholders)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xa1ff106e.
//
// Solidity: function accessRequest(uint8 , string pkeRequestor, string pkeAFGH, bytes32[] customValues, address[] stakeholders) returns(uint256)
func (_BaseContent *BaseContentTransactorSession) AccessRequest(arg0 uint8, pkeRequestor string, pkeAFGH string, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessRequest(&_BaseContent.TransactOpts, arg0, pkeRequestor, pkeAFGH, customValues, stakeholders)
}

// AccessRequestContext is a paid mutator transaction binding the contract method 0x78f52ffb.
//
// Solidity: function accessRequestContext(uint256 requestNonce, bytes32 contextHash, address accessor, uint256 request_timestamp) returns(uint256)
func (_BaseContent *BaseContentTransactor) AccessRequestContext(opts *bind.TransactOpts, requestNonce *big.Int, contextHash [32]byte, accessor common.Address, request_timestamp *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessRequestContext", requestNonce, contextHash, accessor, request_timestamp)
}

// AccessRequestContext is a paid mutator transaction binding the contract method 0x78f52ffb.
//
// Solidity: function accessRequestContext(uint256 requestNonce, bytes32 contextHash, address accessor, uint256 request_timestamp) returns(uint256)
func (_BaseContent *BaseContentSession) AccessRequestContext(requestNonce *big.Int, contextHash [32]byte, accessor common.Address, request_timestamp *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessRequestContext(&_BaseContent.TransactOpts, requestNonce, contextHash, accessor, request_timestamp)
}

// AccessRequestContext is a paid mutator transaction binding the contract method 0x78f52ffb.
//
// Solidity: function accessRequestContext(uint256 requestNonce, bytes32 contextHash, address accessor, uint256 request_timestamp) returns(uint256)
func (_BaseContent *BaseContentTransactorSession) AccessRequestContext(requestNonce *big.Int, contextHash [32]byte, accessor common.Address, request_timestamp *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessRequestContext(&_BaseContent.TransactOpts, requestNonce, contextHash, accessor, request_timestamp)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentTransactor) AccessRequestV3(opts *bind.TransactOpts, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessRequestV3", customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessRequestV3(&_BaseContent.TransactOpts, customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentTransactorSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessRequestV3(&_BaseContent.TransactOpts, customValues, stakeholders)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContent *BaseContentTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContent *BaseContentSession) ClearPending() (*types.Transaction, error) {
	return _BaseContent.Contract.ClearPending(&_BaseContent.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContent *BaseContentTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseContent.Contract.ClearPending(&_BaseContent.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContent *BaseContentTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContent *BaseContentSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContent.Contract.Commit(&_BaseContent.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContent *BaseContentTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContent.Contract.Commit(&_BaseContent.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContent *BaseContentTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContent *BaseContentSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContent.Contract.ConfirmCommit(&_BaseContent.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContent *BaseContentTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContent.Contract.ConfirmCommit(&_BaseContent.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContent *BaseContentTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContent *BaseContentSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContent.Contract.DeleteVersion(&_BaseContent.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContent *BaseContentTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContent.Contract.DeleteVersion(&_BaseContent.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContent *BaseContentTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContent *BaseContentSession) Kill() (*types.Transaction, error) {
	return _BaseContent.Contract.Kill(&_BaseContent.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContent *BaseContentTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseContent.Contract.Kill(&_BaseContent.TransactOpts)
}

// ProcessRequestPayment is a paid mutator transaction binding the contract method 0x0c6d3f93.
//
// Solidity: function processRequestPayment(uint256 requestNonce, address payee, string label, uint256 amount) returns(bool)
func (_BaseContent *BaseContentTransactor) ProcessRequestPayment(opts *bind.TransactOpts, requestNonce *big.Int, payee common.Address, label string, amount *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "processRequestPayment", requestNonce, payee, label, amount)
}

// ProcessRequestPayment is a paid mutator transaction binding the contract method 0x0c6d3f93.
//
// Solidity: function processRequestPayment(uint256 requestNonce, address payee, string label, uint256 amount) returns(bool)
func (_BaseContent *BaseContentSession) ProcessRequestPayment(requestNonce *big.Int, payee common.Address, label string, amount *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.ProcessRequestPayment(&_BaseContent.TransactOpts, requestNonce, payee, label, amount)
}

// ProcessRequestPayment is a paid mutator transaction binding the contract method 0x0c6d3f93.
//
// Solidity: function processRequestPayment(uint256 requestNonce, address payee, string label, uint256 amount) returns(bool)
func (_BaseContent *BaseContentTransactorSession) ProcessRequestPayment(requestNonce *big.Int, payee common.Address, label string, amount *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.ProcessRequestPayment(&_BaseContent.TransactOpts, requestNonce, payee, label, amount)
}

// Publish is a paid mutator transaction binding the contract method 0x075d4782.
//
// Solidity: function publish() returns(bool)
func (_BaseContent *BaseContentTransactor) Publish(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "publish")
}

// Publish is a paid mutator transaction binding the contract method 0x075d4782.
//
// Solidity: function publish() returns(bool)
func (_BaseContent *BaseContentSession) Publish() (*types.Transaction, error) {
	return _BaseContent.Contract.Publish(&_BaseContent.TransactOpts)
}

// Publish is a paid mutator transaction binding the contract method 0x075d4782.
//
// Solidity: function publish() returns(bool)
func (_BaseContent *BaseContentTransactorSession) Publish() (*types.Transaction, error) {
	return _BaseContent.Contract.Publish(&_BaseContent.TransactOpts)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContent *BaseContentTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContent *BaseContentSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContent.Contract.PutMeta(&_BaseContent.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContent *BaseContentTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContent.Contract.PutMeta(&_BaseContent.TransactOpts, key, value)
}

// SetAccessCharge is a paid mutator transaction binding the contract method 0xf4d9bae8.
//
// Solidity: function setAccessCharge(uint256 charge) returns(uint256)
func (_BaseContent *BaseContentTransactor) SetAccessCharge(opts *bind.TransactOpts, charge *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setAccessCharge", charge)
}

// SetAccessCharge is a paid mutator transaction binding the contract method 0xf4d9bae8.
//
// Solidity: function setAccessCharge(uint256 charge) returns(uint256)
func (_BaseContent *BaseContentSession) SetAccessCharge(charge *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.SetAccessCharge(&_BaseContent.TransactOpts, charge)
}

// SetAccessCharge is a paid mutator transaction binding the contract method 0xf4d9bae8.
//
// Solidity: function setAccessCharge(uint256 charge) returns(uint256)
func (_BaseContent *BaseContentTransactorSession) SetAccessCharge(charge *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.SetAccessCharge(&_BaseContent.TransactOpts, charge)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContent *BaseContentTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContent *BaseContentSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.SetAddressKMS(&_BaseContent.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContent *BaseContentTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.SetAddressKMS(&_BaseContent.TransactOpts, address_KMS)
}

// SetContentContractAddress is a paid mutator transaction binding the contract method 0xe5385303.
//
// Solidity: function setContentContractAddress(address addr) returns()
func (_BaseContent *BaseContentTransactor) SetContentContractAddress(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setContentContractAddress", addr)
}

// SetContentContractAddress is a paid mutator transaction binding the contract method 0xe5385303.
//
// Solidity: function setContentContractAddress(address addr) returns()
func (_BaseContent *BaseContentSession) SetContentContractAddress(addr common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.SetContentContractAddress(&_BaseContent.TransactOpts, addr)
}

// SetContentContractAddress is a paid mutator transaction binding the contract method 0xe5385303.
//
// Solidity: function setContentContractAddress(address addr) returns()
func (_BaseContent *BaseContentTransactorSession) SetContentContractAddress(addr common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.SetContentContractAddress(&_BaseContent.TransactOpts, addr)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetGroupRights(&_BaseContent.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetGroupRights(&_BaseContent.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetRights(&_BaseContent.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetRights(&_BaseContent.TransactOpts, stakeholder, access_type, access)
}

// SetStatusCode is a paid mutator transaction binding the contract method 0x5267db44.
//
// Solidity: function setStatusCode(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactor) SetStatusCode(opts *bind.TransactOpts, status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setStatusCode", status_code)
}

// SetStatusCode is a paid mutator transaction binding the contract method 0x5267db44.
//
// Solidity: function setStatusCode(int256 status_code) returns(int256)
func (_BaseContent *BaseContentSession) SetStatusCode(status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.SetStatusCode(&_BaseContent.TransactOpts, status_code)
}

// SetStatusCode is a paid mutator transaction binding the contract method 0x5267db44.
//
// Solidity: function setStatusCode(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactorSession) SetStatusCode(status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.SetStatusCode(&_BaseContent.TransactOpts, status_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContent *BaseContentTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContent *BaseContentSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetVisibility(&_BaseContent.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContent *BaseContentTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetVisibility(&_BaseContent.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContent *BaseContentTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContent *BaseContentSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.TransferCreatorship(&_BaseContent.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContent *BaseContentTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.TransferCreatorship(&_BaseContent.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContent *BaseContentTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContent *BaseContentSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.TransferOwnership(&_BaseContent.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContent *BaseContentTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.TransferOwnership(&_BaseContent.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContent *BaseContentTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContent *BaseContentSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContent.Contract.UpdateRequest(&_BaseContent.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContent *BaseContentTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContent.Contract.UpdateRequest(&_BaseContent.TransactOpts)
}

// UpdateStatus is a paid mutator transaction binding the contract method 0x8280dd8f.
//
// Solidity: function updateStatus(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactor) UpdateStatus(opts *bind.TransactOpts, status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "updateStatus", status_code)
}

// UpdateStatus is a paid mutator transaction binding the contract method 0x8280dd8f.
//
// Solidity: function updateStatus(int256 status_code) returns(int256)
func (_BaseContent *BaseContentSession) UpdateStatus(status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.UpdateStatus(&_BaseContent.TransactOpts, status_code)
}

// UpdateStatus is a paid mutator transaction binding the contract method 0x8280dd8f.
//
// Solidity: function updateStatus(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactorSession) UpdateStatus(status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.UpdateStatus(&_BaseContent.TransactOpts, status_code)
}

// BaseContentAccessCompleteIterator is returned from FilterAccessComplete and is used to iterate over the raw logs and unpacked data for AccessComplete events raised by the BaseContent contract.
type BaseContentAccessCompleteIterator struct {
	Event *BaseContentAccessComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessComplete represents a AccessComplete event raised by the BaseContent contract.
type BaseContentAccessComplete struct {
	RequestID            *big.Int
	ScorePct             *big.Int
	CustomContractResult bool
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterAccessComplete is a free log retrieval operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) FilterAccessComplete(opts *bind.FilterOpts) (*BaseContentAccessCompleteIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessComplete")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessCompleteIterator{contract: _BaseContent.contract, event: "AccessComplete", logs: logs, sub: sub}, nil
}

// WatchAccessComplete is a free log subscription operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) WatchAccessComplete(opts *bind.WatchOpts, sink chan<- *BaseContentAccessComplete) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessComplete)
				if err := _BaseContent.contract.UnpackLog(event, "AccessComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessComplete is a log parse operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) ParseAccessComplete(log types.Log) (*BaseContentAccessComplete, error) {
	event := new(BaseContentAccessComplete)
	if err := _BaseContent.contract.UnpackLog(event, "AccessComplete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentAccessCompleteV3Iterator is returned from FilterAccessCompleteV3 and is used to iterate over the raw logs and unpacked data for AccessCompleteV3 events raised by the BaseContent contract.
type BaseContentAccessCompleteV3Iterator struct {
	Event *BaseContentAccessCompleteV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessCompleteV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessCompleteV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessCompleteV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessCompleteV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessCompleteV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessCompleteV3 represents a AccessCompleteV3 event raised by the BaseContent contract.
type BaseContentAccessCompleteV3 struct {
	RequestNonce         *big.Int
	CustomContractResult bool
	ParentAddress        common.Address
	ContextHash          [32]byte
	Accessor             common.Address
	RequestTimestamp     *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterAccessCompleteV3 is a free log retrieval operation binding the contract event 0xd3e5b1d14681444d8159fa85b57104b685f47fb9164fd82b7fafe4e123dcc3a1.
//
// Solidity: event AccessCompleteV3(uint256 requestNonce, bool customContractResult, address parentAddress, bytes32 contextHash, address accessor, uint256 request_timestamp)
func (_BaseContent *BaseContentFilterer) FilterAccessCompleteV3(opts *bind.FilterOpts) (*BaseContentAccessCompleteV3Iterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessCompleteV3")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessCompleteV3Iterator{contract: _BaseContent.contract, event: "AccessCompleteV3", logs: logs, sub: sub}, nil
}

// WatchAccessCompleteV3 is a free log subscription operation binding the contract event 0xd3e5b1d14681444d8159fa85b57104b685f47fb9164fd82b7fafe4e123dcc3a1.
//
// Solidity: event AccessCompleteV3(uint256 requestNonce, bool customContractResult, address parentAddress, bytes32 contextHash, address accessor, uint256 request_timestamp)
func (_BaseContent *BaseContentFilterer) WatchAccessCompleteV3(opts *bind.WatchOpts, sink chan<- *BaseContentAccessCompleteV3) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessCompleteV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessCompleteV3)
				if err := _BaseContent.contract.UnpackLog(event, "AccessCompleteV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessCompleteV3 is a log parse operation binding the contract event 0xd3e5b1d14681444d8159fa85b57104b685f47fb9164fd82b7fafe4e123dcc3a1.
//
// Solidity: event AccessCompleteV3(uint256 requestNonce, bool customContractResult, address parentAddress, bytes32 contextHash, address accessor, uint256 request_timestamp)
func (_BaseContent *BaseContentFilterer) ParseAccessCompleteV3(log types.Log) (*BaseContentAccessCompleteV3, error) {
	event := new(BaseContentAccessCompleteV3)
	if err := _BaseContent.contract.UnpackLog(event, "AccessCompleteV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseContent contract.
type BaseContentAccessRequestIterator struct {
	Event *BaseContentAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequest represents a AccessRequest event raised by the BaseContent contract.
type BaseContentAccessRequest struct {
	RequestID    *big.Int
	Level        uint8
	ContentHash  string
	PkeRequestor string
	PkeAFGH      string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseContentAccessRequestIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestIterator{contract: _BaseContent.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequest)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) ParseAccessRequest(log types.Log) (*BaseContentAccessRequest, error) {
	event := new(BaseContentAccessRequest)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentAccessRequestStakeholderIterator is returned from FilterAccessRequestStakeholder and is used to iterate over the raw logs and unpacked data for AccessRequestStakeholder events raised by the BaseContent contract.
type BaseContentAccessRequestStakeholderIterator struct {
	Event *BaseContentAccessRequestStakeholder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestStakeholderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequestStakeholder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequestStakeholder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestStakeholderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestStakeholderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequestStakeholder represents a AccessRequestStakeholder event raised by the BaseContent contract.
type BaseContentAccessRequestStakeholder struct {
	Stakeholder common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestStakeholder is a free log retrieval operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) FilterAccessRequestStakeholder(opts *bind.FilterOpts) (*BaseContentAccessRequestStakeholderIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequestStakeholder")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestStakeholderIterator{contract: _BaseContent.contract, event: "AccessRequestStakeholder", logs: logs, sub: sub}, nil
}

// WatchAccessRequestStakeholder is a free log subscription operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) WatchAccessRequestStakeholder(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequestStakeholder) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequestStakeholder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequestStakeholder)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequestStakeholder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestStakeholder is a log parse operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) ParseAccessRequestStakeholder(log types.Log) (*BaseContentAccessRequestStakeholder, error) {
	event := new(BaseContentAccessRequestStakeholder)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequestStakeholder", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseContent contract.
type BaseContentAccessRequestV3Iterator struct {
	Event *BaseContentAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequestV3 represents a AccessRequestV3 event raised by the BaseContent contract.
type BaseContentAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContent *BaseContentFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseContentAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestV3Iterator{contract: _BaseContent.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContent *BaseContentFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequestV3)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContent *BaseContentFilterer) ParseAccessRequestV3(log types.Log) (*BaseContentAccessRequestV3, error) {
	event := new(BaseContentAccessRequestV3)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentAccessRequestValueIterator is returned from FilterAccessRequestValue and is used to iterate over the raw logs and unpacked data for AccessRequestValue events raised by the BaseContent contract.
type BaseContentAccessRequestValueIterator struct {
	Event *BaseContentAccessRequestValue // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestValueIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequestValue)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequestValue)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestValueIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestValueIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequestValue represents a AccessRequestValue event raised by the BaseContent contract.
type BaseContentAccessRequestValue struct {
	CustomValue [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestValue is a free log retrieval operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) FilterAccessRequestValue(opts *bind.FilterOpts) (*BaseContentAccessRequestValueIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequestValue")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestValueIterator{contract: _BaseContent.contract, event: "AccessRequestValue", logs: logs, sub: sub}, nil
}

// WatchAccessRequestValue is a free log subscription operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) WatchAccessRequestValue(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequestValue) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequestValue")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequestValue)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequestValue", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestValue is a log parse operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) ParseAccessRequestValue(log types.Log) (*BaseContentAccessRequestValue, error) {
	event := new(BaseContentAccessRequestValue)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequestValue", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContent contract.
type BaseContentCommitPendingIterator struct {
	Event *BaseContentCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentCommitPending represents a CommitPending event raised by the BaseContent contract.
type BaseContentCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentCommitPendingIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentCommitPendingIterator{contract: _BaseContent.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentCommitPending)
				if err := _BaseContent.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) ParseCommitPending(log types.Log) (*BaseContentCommitPending, error) {
	event := new(BaseContentCommitPending)
	if err := _BaseContent.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentContentObjectCreateIterator is returned from FilterContentObjectCreate and is used to iterate over the raw logs and unpacked data for ContentObjectCreate events raised by the BaseContent contract.
type BaseContentContentObjectCreateIterator struct {
	Event *BaseContentContentObjectCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentContentObjectCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentContentObjectCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentContentObjectCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentContentObjectCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentContentObjectCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentContentObjectCreate represents a ContentObjectCreate event raised by the BaseContent contract.
type BaseContentContentObjectCreate struct {
	ContainingLibrary common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterContentObjectCreate is a free log retrieval operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) FilterContentObjectCreate(opts *bind.FilterOpts) (*BaseContentContentObjectCreateIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "ContentObjectCreate")
	if err != nil {
		return nil, err
	}
	return &BaseContentContentObjectCreateIterator{contract: _BaseContent.contract, event: "ContentObjectCreate", logs: logs, sub: sub}, nil
}

// WatchContentObjectCreate is a free log subscription operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) WatchContentObjectCreate(opts *bind.WatchOpts, sink chan<- *BaseContentContentObjectCreate) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "ContentObjectCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentContentObjectCreate)
				if err := _BaseContent.contract.UnpackLog(event, "ContentObjectCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectCreate is a log parse operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) ParseContentObjectCreate(log types.Log) (*BaseContentContentObjectCreate, error) {
	event := new(BaseContentContentObjectCreate)
	if err := _BaseContent.contract.UnpackLog(event, "ContentObjectCreate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentInsufficientFundsIterator is returned from FilterInsufficientFunds and is used to iterate over the raw logs and unpacked data for InsufficientFunds events raised by the BaseContent contract.
type BaseContentInsufficientFundsIterator struct {
	Event *BaseContentInsufficientFunds // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentInsufficientFundsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentInsufficientFunds)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentInsufficientFunds)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentInsufficientFundsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentInsufficientFundsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentInsufficientFunds represents a InsufficientFunds event raised by the BaseContent contract.
type BaseContentInsufficientFunds struct {
	AccessCharge   *big.Int
	AmountProvided *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInsufficientFunds is a free log retrieval operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) FilterInsufficientFunds(opts *bind.FilterOpts) (*BaseContentInsufficientFundsIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "InsufficientFunds")
	if err != nil {
		return nil, err
	}
	return &BaseContentInsufficientFundsIterator{contract: _BaseContent.contract, event: "InsufficientFunds", logs: logs, sub: sub}, nil
}

// WatchInsufficientFunds is a free log subscription operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) WatchInsufficientFunds(opts *bind.WatchOpts, sink chan<- *BaseContentInsufficientFunds) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "InsufficientFunds")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentInsufficientFunds)
				if err := _BaseContent.contract.UnpackLog(event, "InsufficientFunds", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInsufficientFunds is a log parse operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) ParseInsufficientFunds(log types.Log) (*BaseContentInsufficientFunds, error) {
	event := new(BaseContentInsufficientFunds)
	if err := _BaseContent.contract.UnpackLog(event, "InsufficientFunds", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the BaseContent contract.
type BaseContentLogPaymentIterator struct {
	Event *BaseContentLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentLogPayment represents a LogPayment event raised by the BaseContent contract.
type BaseContentLogPayment struct {
	RequestNonce *big.Int
	Label        string
	Payee        common.Address
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestNonce, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) FilterLogPayment(opts *bind.FilterOpts) (*BaseContentLogPaymentIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &BaseContentLogPaymentIterator{contract: _BaseContent.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestNonce, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *BaseContentLogPayment) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentLogPayment)
				if err := _BaseContent.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestNonce, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) ParseLogPayment(log types.Log) (*BaseContentLogPayment, error) {
	event := new(BaseContentLogPayment)
	if err := _BaseContent.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseContent contract.
type BaseContentObjectMetaChangedIterator struct {
	Event *BaseContentObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseContent contract.
type BaseContentObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContent *BaseContentFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseContentObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentObjectMetaChangedIterator{contract: _BaseContent.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContent *BaseContentFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseContentObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentObjectMetaChanged)
				if err := _BaseContent.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContent *BaseContentFilterer) ParseObjectMetaChanged(log types.Log) (*BaseContentObjectMetaChanged, error) {
	event := new(BaseContentObjectMetaChanged)
	if err := _BaseContent.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentPublishIterator is returned from FilterPublish and is used to iterate over the raw logs and unpacked data for Publish events raised by the BaseContent contract.
type BaseContentPublishIterator struct {
	Event *BaseContentPublish // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentPublishIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentPublish)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentPublish)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentPublishIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentPublishIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentPublish represents a Publish event raised by the BaseContent contract.
type BaseContentPublish struct {
	RequestStatus bool
	StatusCode    *big.Int
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPublish is a free log retrieval operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterPublish(opts *bind.FilterOpts) (*BaseContentPublishIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "Publish")
	if err != nil {
		return nil, err
	}
	return &BaseContentPublishIterator{contract: _BaseContent.contract, event: "Publish", logs: logs, sub: sub}, nil
}

// WatchPublish is a free log subscription operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchPublish(opts *bind.WatchOpts, sink chan<- *BaseContentPublish) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "Publish")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentPublish)
				if err := _BaseContent.contract.UnpackLog(event, "Publish", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePublish is a log parse operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) ParsePublish(log types.Log) (*BaseContentPublish, error) {
	event := new(BaseContentPublish)
	if err := _BaseContent.contract.UnpackLog(event, "Publish", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSetAccessChargeIterator is returned from FilterSetAccessCharge and is used to iterate over the raw logs and unpacked data for SetAccessCharge events raised by the BaseContent contract.
type BaseContentSetAccessChargeIterator struct {
	Event *BaseContentSetAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetAccessCharge represents a SetAccessCharge event raised by the BaseContent contract.
type BaseContentSetAccessCharge struct {
	AccessCharge *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSetAccessCharge is a free log retrieval operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) FilterSetAccessCharge(opts *bind.FilterOpts) (*BaseContentSetAccessChargeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetAccessCharge")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetAccessChargeIterator{contract: _BaseContent.contract, event: "SetAccessCharge", logs: logs, sub: sub}, nil
}

// WatchSetAccessCharge is a free log subscription operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) WatchSetAccessCharge(opts *bind.WatchOpts, sink chan<- *BaseContentSetAccessCharge) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetAccessCharge)
				if err := _BaseContent.contract.UnpackLog(event, "SetAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAccessCharge is a log parse operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) ParseSetAccessCharge(log types.Log) (*BaseContentSetAccessCharge, error) {
	event := new(BaseContentSetAccessCharge)
	if err := _BaseContent.contract.UnpackLog(event, "SetAccessCharge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSetContentContractIterator is returned from FilterSetContentContract and is used to iterate over the raw logs and unpacked data for SetContentContract events raised by the BaseContent contract.
type BaseContentSetContentContractIterator struct {
	Event *BaseContentSetContentContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetContentContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetContentContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetContentContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetContentContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetContentContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetContentContract represents a SetContentContract event raised by the BaseContent contract.
type BaseContentSetContentContract struct {
	ContentContractAddress common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSetContentContract is a free log retrieval operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) FilterSetContentContract(opts *bind.FilterOpts) (*BaseContentSetContentContractIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetContentContract")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetContentContractIterator{contract: _BaseContent.contract, event: "SetContentContract", logs: logs, sub: sub}, nil
}

// WatchSetContentContract is a free log subscription operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) WatchSetContentContract(opts *bind.WatchOpts, sink chan<- *BaseContentSetContentContract) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetContentContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetContentContract)
				if err := _BaseContent.contract.UnpackLog(event, "SetContentContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetContentContract is a log parse operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) ParseSetContentContract(log types.Log) (*BaseContentSetContentContract, error) {
	event := new(BaseContentSetContentContract)
	if err := _BaseContent.contract.UnpackLog(event, "SetContentContract", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSetContentTypeIterator is returned from FilterSetContentType and is used to iterate over the raw logs and unpacked data for SetContentType events raised by the BaseContent contract.
type BaseContentSetContentTypeIterator struct {
	Event *BaseContentSetContentType // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetContentTypeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetContentType)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetContentType)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetContentTypeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetContentTypeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetContentType represents a SetContentType event raised by the BaseContent contract.
type BaseContentSetContentType struct {
	ContentType            common.Address
	ContentContractAddress common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSetContentType is a free log retrieval operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) FilterSetContentType(opts *bind.FilterOpts) (*BaseContentSetContentTypeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetContentType")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetContentTypeIterator{contract: _BaseContent.contract, event: "SetContentType", logs: logs, sub: sub}, nil
}

// WatchSetContentType is a free log subscription operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) WatchSetContentType(opts *bind.WatchOpts, sink chan<- *BaseContentSetContentType) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetContentType")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetContentType)
				if err := _BaseContent.contract.UnpackLog(event, "SetContentType", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetContentType is a log parse operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) ParseSetContentType(log types.Log) (*BaseContentSetContentType, error) {
	event := new(BaseContentSetContentType)
	if err := _BaseContent.contract.UnpackLog(event, "SetContentType", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSetStatusCodeIterator is returned from FilterSetStatusCode and is used to iterate over the raw logs and unpacked data for SetStatusCode events raised by the BaseContent contract.
type BaseContentSetStatusCodeIterator struct {
	Event *BaseContentSetStatusCode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetStatusCodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetStatusCode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetStatusCode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetStatusCodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetStatusCodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetStatusCode represents a SetStatusCode event raised by the BaseContent contract.
type BaseContentSetStatusCode struct {
	StatusCode *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSetStatusCode is a free log retrieval operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) FilterSetStatusCode(opts *bind.FilterOpts) (*BaseContentSetStatusCodeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetStatusCode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetStatusCodeIterator{contract: _BaseContent.contract, event: "SetStatusCode", logs: logs, sub: sub}, nil
}

// WatchSetStatusCode is a free log subscription operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) WatchSetStatusCode(opts *bind.WatchOpts, sink chan<- *BaseContentSetStatusCode) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetStatusCode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetStatusCode)
				if err := _BaseContent.contract.UnpackLog(event, "SetStatusCode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetStatusCode is a log parse operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) ParseSetStatusCode(log types.Log) (*BaseContentSetStatusCode, error) {
	event := new(BaseContentSetStatusCode)
	if err := _BaseContent.contract.UnpackLog(event, "SetStatusCode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContent contract.
type BaseContentUpdateRequestIterator struct {
	Event *BaseContentUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentUpdateRequest represents a UpdateRequest event raised by the BaseContent contract.
type BaseContentUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentUpdateRequestIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentUpdateRequestIterator{contract: _BaseContent.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentUpdateRequest)
				if err := _BaseContent.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) ParseUpdateRequest(log types.Log) (*BaseContentUpdateRequest, error) {
	event := new(BaseContentUpdateRequest)
	if err := _BaseContent.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContent contract.
type BaseContentVersionConfirmIterator struct {
	Event *BaseContentVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentVersionConfirm represents a VersionConfirm event raised by the BaseContent contract.
type BaseContentVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentVersionConfirmIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentVersionConfirmIterator{contract: _BaseContent.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentVersionConfirm)
				if err := _BaseContent.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) ParseVersionConfirm(log types.Log) (*BaseContentVersionConfirm, error) {
	event := new(BaseContentVersionConfirm)
	if err := _BaseContent.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContent contract.
type BaseContentVersionDeleteIterator struct {
	Event *BaseContentVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentVersionDelete represents a VersionDelete event raised by the BaseContent contract.
type BaseContentVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentVersionDeleteIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentVersionDeleteIterator{contract: _BaseContent.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentVersionDelete)
				if err := _BaseContent.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) ParseVersionDelete(log types.Log) (*BaseContentVersionDelete, error) {
	event := new(BaseContentVersionDelete)
	if err := _BaseContent.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseContent contract.
type BaseContentVisibilityChangedIterator struct {
	Event *BaseContentVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentVisibilityChanged represents a VisibilityChanged event raised by the BaseContent contract.
type BaseContentVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContent *BaseContentFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseContentVisibilityChangedIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentVisibilityChangedIterator{contract: _BaseContent.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContent *BaseContentFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseContentVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentVisibilityChanged)
				if err := _BaseContent.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContent *BaseContentFilterer) ParseVisibilityChanged(log types.Log) (*BaseContentVisibilityChanged, error) {
	event := new(BaseContentVisibilityChanged)
	if err := _BaseContent.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentFactoryABI is the input ABI used to generate the binding from.
const BaseContentFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OP_ACCESS_COMPLETE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_opCodes\",\"type\":\"uint32[]\"},{\"name\":\"_contentAddrs\",\"type\":\"address[]\"},{\"name\":\"_userAddrs\",\"type\":\"address[]\"},{\"name\":\"_requestNonces\",\"type\":\"uint256[]\"},{\"name\":\"_ctxHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_ts\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"executeAccessBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OP_ACCESS_REQUEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_spaceAddr\",\"type\":\"address\"},{\"name\":\"_helperAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseContentFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentFactoryFuncSigs = map[string]string{
	"4d887374": "OP_ACCESS_COMPLETE()",
	"52344328": "OP_ACCESS_REQUEST()",
	"af570c04": "contentSpace()",
	"bf4e088f": "createContent(address,address)",
	"02d05d3f": "creator()",
	"4dcc1d29": "executeAccessBatch(uint32[],address[],address[],uint256[],bytes32[],uint256[],uint256[])",
	"16279055": "isContract(address)",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// BaseContentFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseContentFactoryBin = ""

// DeployBaseContentFactory deploys a new Ethereum contract, binding an instance of BaseContentFactory to it.
func DeployBaseContentFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _spaceAddr common.Address, _helperAddr common.Address) (common.Address, *types.Transaction, *BaseContentFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseContentFactoryBin), backend, _spaceAddr, _helperAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentFactory{BaseContentFactoryCaller: BaseContentFactoryCaller{contract: contract}, BaseContentFactoryTransactor: BaseContentFactoryTransactor{contract: contract}, BaseContentFactoryFilterer: BaseContentFactoryFilterer{contract: contract}}, nil
}

// BaseContentFactory is an auto generated Go binding around an Ethereum contract.
type BaseContentFactory struct {
	BaseContentFactoryCaller     // Read-only binding to the contract
	BaseContentFactoryTransactor // Write-only binding to the contract
	BaseContentFactoryFilterer   // Log filterer for contract events
}

// BaseContentFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseContentFactorySession struct {
	Contract     *BaseContentFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BaseContentFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseContentFactoryCallerSession struct {
	Contract *BaseContentFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// BaseContentFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseContentFactoryTransactorSession struct {
	Contract     *BaseContentFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// BaseContentFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseContentFactoryRaw struct {
	Contract *BaseContentFactory // Generic contract binding to access the raw methods on
}

// BaseContentFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseContentFactoryCallerRaw struct {
	Contract *BaseContentFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseContentFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseContentFactoryTransactorRaw struct {
	Contract *BaseContentFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseContentFactory creates a new instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactory(address common.Address, backend bind.ContractBackend) (*BaseContentFactory, error) {
	contract, err := bindBaseContentFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactory{BaseContentFactoryCaller: BaseContentFactoryCaller{contract: contract}, BaseContentFactoryTransactor: BaseContentFactoryTransactor{contract: contract}, BaseContentFactoryFilterer: BaseContentFactoryFilterer{contract: contract}}, nil
}

// NewBaseContentFactoryCaller creates a new read-only instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseContentFactoryCaller, error) {
	contract, err := bindBaseContentFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryCaller{contract: contract}, nil
}

// NewBaseContentFactoryTransactor creates a new write-only instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentFactoryTransactor, error) {
	contract, err := bindBaseContentFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryTransactor{contract: contract}, nil
}

// NewBaseContentFactoryFilterer creates a new log filterer instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentFactoryFilterer, error) {
	contract, err := bindBaseContentFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryFilterer{contract: contract}, nil
}

// bindBaseContentFactory binds a generic wrapper to an already deployed contract.
func bindBaseContentFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentFactory *BaseContentFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentFactory.Contract.BaseContentFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentFactory *BaseContentFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.BaseContentFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentFactory *BaseContentFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.BaseContentFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentFactory *BaseContentFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentFactory *BaseContentFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentFactory *BaseContentFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.contract.Transact(opts, method, params...)
}

// OPACCESSCOMPLETE is a free data retrieval call binding the contract method 0x4d887374.
//
// Solidity: function OP_ACCESS_COMPLETE() constant returns(uint32)
func (_BaseContentFactory *BaseContentFactoryCaller) OPACCESSCOMPLETE(opts *bind.CallOpts) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "OP_ACCESS_COMPLETE")
	return *ret0, err
}

// OPACCESSCOMPLETE is a free data retrieval call binding the contract method 0x4d887374.
//
// Solidity: function OP_ACCESS_COMPLETE() constant returns(uint32)
func (_BaseContentFactory *BaseContentFactorySession) OPACCESSCOMPLETE() (uint32, error) {
	return _BaseContentFactory.Contract.OPACCESSCOMPLETE(&_BaseContentFactory.CallOpts)
}

// OPACCESSCOMPLETE is a free data retrieval call binding the contract method 0x4d887374.
//
// Solidity: function OP_ACCESS_COMPLETE() constant returns(uint32)
func (_BaseContentFactory *BaseContentFactoryCallerSession) OPACCESSCOMPLETE() (uint32, error) {
	return _BaseContentFactory.Contract.OPACCESSCOMPLETE(&_BaseContentFactory.CallOpts)
}

// OPACCESSREQUEST is a free data retrieval call binding the contract method 0x52344328.
//
// Solidity: function OP_ACCESS_REQUEST() constant returns(uint32)
func (_BaseContentFactory *BaseContentFactoryCaller) OPACCESSREQUEST(opts *bind.CallOpts) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "OP_ACCESS_REQUEST")
	return *ret0, err
}

// OPACCESSREQUEST is a free data retrieval call binding the contract method 0x52344328.
//
// Solidity: function OP_ACCESS_REQUEST() constant returns(uint32)
func (_BaseContentFactory *BaseContentFactorySession) OPACCESSREQUEST() (uint32, error) {
	return _BaseContentFactory.Contract.OPACCESSREQUEST(&_BaseContentFactory.CallOpts)
}

// OPACCESSREQUEST is a free data retrieval call binding the contract method 0x52344328.
//
// Solidity: function OP_ACCESS_REQUEST() constant returns(uint32)
func (_BaseContentFactory *BaseContentFactoryCallerSession) OPACCESSREQUEST() (uint32, error) {
	return _BaseContentFactory.Contract.OPACCESSREQUEST(&_BaseContentFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentFactory *BaseContentFactorySession) ContentSpace() (common.Address, error) {
	return _BaseContentFactory.Contract.ContentSpace(&_BaseContentFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseContentFactory.Contract.ContentSpace(&_BaseContentFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentFactory *BaseContentFactorySession) Creator() (common.Address, error) {
	return _BaseContentFactory.Contract.Creator(&_BaseContentFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseContentFactory.Contract.Creator(&_BaseContentFactory.CallOpts)
}

// IsContract is a free data retrieval call binding the contract method 0x16279055.
//
// Solidity: function isContract(address addr) constant returns(bool)
func (_BaseContentFactory *BaseContentFactoryCaller) IsContract(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "isContract", addr)
	return *ret0, err
}

// IsContract is a free data retrieval call binding the contract method 0x16279055.
//
// Solidity: function isContract(address addr) constant returns(bool)
func (_BaseContentFactory *BaseContentFactorySession) IsContract(addr common.Address) (bool, error) {
	return _BaseContentFactory.Contract.IsContract(&_BaseContentFactory.CallOpts, addr)
}

// IsContract is a free data retrieval call binding the contract method 0x16279055.
//
// Solidity: function isContract(address addr) constant returns(bool)
func (_BaseContentFactory *BaseContentFactoryCallerSession) IsContract(addr common.Address) (bool, error) {
	return _BaseContentFactory.Contract.IsContract(&_BaseContentFactory.CallOpts, addr)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentFactory *BaseContentFactorySession) Owner() (common.Address, error) {
	return _BaseContentFactory.Contract.Owner(&_BaseContentFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseContentFactory.Contract.Owner(&_BaseContentFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactorySession) Version() ([32]byte, error) {
	return _BaseContentFactory.Contract.Version(&_BaseContentFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseContentFactory.Contract.Version(&_BaseContentFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactorySession) VersionAPI() ([32]byte, error) {
	return _BaseContentFactory.Contract.VersionAPI(&_BaseContentFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactoryCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseContentFactory.Contract.VersionAPI(&_BaseContentFactory.CallOpts)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentFactory *BaseContentFactoryTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "createContent", lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentFactory *BaseContentFactorySession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.CreateContent(&_BaseContentFactory.TransactOpts, lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentFactory *BaseContentFactoryTransactorSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.CreateContent(&_BaseContentFactory.TransactOpts, lib, content_type)
}

// ExecuteAccessBatch is a paid mutator transaction binding the contract method 0x4dcc1d29.
//
// Solidity: function executeAccessBatch(uint32[] _opCodes, address[] _contentAddrs, address[] _userAddrs, uint256[] _requestNonces, bytes32[] _ctxHashes, uint256[] _ts, uint256[] ) returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) ExecuteAccessBatch(opts *bind.TransactOpts, _opCodes []uint32, _contentAddrs []common.Address, _userAddrs []common.Address, _requestNonces []*big.Int, _ctxHashes [][32]byte, _ts []*big.Int, arg6 []*big.Int) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "executeAccessBatch", _opCodes, _contentAddrs, _userAddrs, _requestNonces, _ctxHashes, _ts, arg6)
}

// ExecuteAccessBatch is a paid mutator transaction binding the contract method 0x4dcc1d29.
//
// Solidity: function executeAccessBatch(uint32[] _opCodes, address[] _contentAddrs, address[] _userAddrs, uint256[] _requestNonces, bytes32[] _ctxHashes, uint256[] _ts, uint256[] ) returns()
func (_BaseContentFactory *BaseContentFactorySession) ExecuteAccessBatch(_opCodes []uint32, _contentAddrs []common.Address, _userAddrs []common.Address, _requestNonces []*big.Int, _ctxHashes [][32]byte, _ts []*big.Int, arg6 []*big.Int) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.ExecuteAccessBatch(&_BaseContentFactory.TransactOpts, _opCodes, _contentAddrs, _userAddrs, _requestNonces, _ctxHashes, _ts, arg6)
}

// ExecuteAccessBatch is a paid mutator transaction binding the contract method 0x4dcc1d29.
//
// Solidity: function executeAccessBatch(uint32[] _opCodes, address[] _contentAddrs, address[] _userAddrs, uint256[] _requestNonces, bytes32[] _ctxHashes, uint256[] _ts, uint256[] ) returns()
func (_BaseContentFactory *BaseContentFactoryTransactorSession) ExecuteAccessBatch(_opCodes []uint32, _contentAddrs []common.Address, _userAddrs []common.Address, _requestNonces []*big.Int, _ctxHashes [][32]byte, _ts []*big.Int, arg6 []*big.Int) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.ExecuteAccessBatch(&_BaseContentFactory.TransactOpts, _opCodes, _contentAddrs, _userAddrs, _requestNonces, _ctxHashes, _ts, arg6)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactory *BaseContentFactorySession) Kill() (*types.Transaction, error) {
	return _BaseContentFactory.Contract.Kill(&_BaseContentFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactory *BaseContentFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseContentFactory.Contract.Kill(&_BaseContentFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactory *BaseContentFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.TransferCreatorship(&_BaseContentFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactory *BaseContentFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.TransferCreatorship(&_BaseContentFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactory *BaseContentFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.TransferOwnership(&_BaseContentFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactory *BaseContentFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.TransferOwnership(&_BaseContentFactory.TransactOpts, newOwner)
}

// BaseContentSpaceABI is the input ABI used to generate the binding from.
const BaseContentSpaceABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"submitNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numActiveNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraryFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"getKMSID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setWalletFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setGroupFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setContentFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsManAddr\",\"type\":\"address\"}],\"name\":\"setKmsManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsIdStr\",\"type\":\"string\"}],\"name\":\"checkKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space_description\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kmsManAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setLibraryFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"removeNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"checkKMSAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"approveNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"createUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPendingNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodeMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentTypeAddress\",\"type\":\"address\"}],\"name\":\"CreateContentType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"libraryAddress\",\"type\":\"address\"}],\"name\":\"CreateLibrary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupAddress\",\"type\":\"address\"}],\"name\":\"CreateGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"}],\"name\":\"CreateContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"CreateAccessWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"BindUserWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"EngageAccountLibrary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"SetFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CreateSpace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"GetAccessWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"AddNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"RemoveNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// BaseContentSpaceFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentSpaceFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"52f82dd8": "activeNodeAddresses(uint256)",
	"5272ae17": "activeNodeLocators(uint256)",
	"0f58a786": "addContentType(address,address)",
	"64f0f050": "addNode(address,bytes)",
	"32eaf21b": "addressKMS()",
	"dd4c97a0": "approveNode(address)",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"0eaec2c5": "canContribute(address)",
	"81beeb64": "canEdit()",
	"26683e14": "canNodePublish(address)",
	"9b55f901": "canPublish(address)",
	"29d00219": "canReview(address)",
	"8d2a23db": "checkKMS(string)",
	"d6be0f49": "checkKMSAddr(address)",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"904696a8": "contentFactory()",
	"af570c04": "contentSpace()",
	"1cdbee5a": "contentTypeContracts(address)",
	"991a3a7c": "contentTypes(uint256)",
	"c65bcbe2": "contentTypesLength()",
	"331b86c0": "countVersionHashes()",
	"7708bc41": "createAccessWallet()",
	"bf4e088f": "createContent(address,address)",
	"b8cfaf05": "createContentType()",
	"575185ed": "createGroup()",
	"40b89f06": "createLibrary(address)",
	"e7cf0c66": "createUserWallet(address)",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"7284e416": "description()",
	"c45a0155": "factory()",
	"1f2caaec": "findTypeByHash(bytes32)",
	"a2d67fcf": "getAccessWallet()",
	"589aafc1": "getKMSID(address)",
	"268bfac4": "getKMSInfo(string,bytes)",
	"ac55c906": "getMeta(bytes)",
	"b04b6caa": "groupFactory()",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"6380501f": "indexCategory()",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"9c9527f1": "kmsManAddr()",
	"441c5aa3": "libraryFactory()",
	"06fdde03": "name()",
	"fbd1b4ce": "nodeMapping(address)",
	"43f59ec7": "numActiveNodes()",
	"f41a1587": "numPendingNodes()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"6be9514c": "pendingNodeAddresses(uint256)",
	"69e30ff8": "pendingNodeLocators(uint256)",
	"2cf99422": "publish(address)",
	"e542b7cb": "putMeta(bytes,bytes)",
	"fd089196": "removeContentType(address)",
	"b2b99ec9": "removeNode(address)",
	"3dd71d99": "requiresReview()",
	"c9e8e72d": "setAddressKMS(address)",
	"85ce1df1": "setContentFactory(address)",
	"90c3f38f": "setDescription(string)",
	"5bb47808": "setFactory(address)",
	"837b3b93": "setGroupFactory(address)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"87e38281": "setKmsManager(address)",
	"9d05d18d": "setLibraryFactory(address)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"aa024e8b": "setVisibility(uint8)",
	"7ebf879c": "setWalletFactory(address)",
	"160eee74": "submitNode(bytes)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"63e6ffdd": "userWallets(address)",
	"29dedde5": "validType(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
	"c5c03699": "walletFactory()",
	"9cb121ba": "whitelistedType(address)",
}

// BaseContentSpaceBin is the compiled bytecode used for deploying new contracts.
var BaseContentSpaceBin = ""

// DeployBaseContentSpace deploys a new Ethereum contract, binding an instance of BaseContentSpace to it.
func DeployBaseContentSpace(auth *bind.TransactOpts, backend bind.ContractBackend, content_space_name string) (common.Address, *types.Transaction, *BaseContentSpace, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentSpaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseContentSpaceBin), backend, content_space_name)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentSpace{BaseContentSpaceCaller: BaseContentSpaceCaller{contract: contract}, BaseContentSpaceTransactor: BaseContentSpaceTransactor{contract: contract}, BaseContentSpaceFilterer: BaseContentSpaceFilterer{contract: contract}}, nil
}

// BaseContentSpace is an auto generated Go binding around an Ethereum contract.
type BaseContentSpace struct {
	BaseContentSpaceCaller     // Read-only binding to the contract
	BaseContentSpaceTransactor // Write-only binding to the contract
	BaseContentSpaceFilterer   // Log filterer for contract events
}

// BaseContentSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseContentSpaceSession struct {
	Contract     *BaseContentSpace // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseContentSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseContentSpaceCallerSession struct {
	Contract *BaseContentSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// BaseContentSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseContentSpaceTransactorSession struct {
	Contract     *BaseContentSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// BaseContentSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseContentSpaceRaw struct {
	Contract *BaseContentSpace // Generic contract binding to access the raw methods on
}

// BaseContentSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseContentSpaceCallerRaw struct {
	Contract *BaseContentSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// BaseContentSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseContentSpaceTransactorRaw struct {
	Contract *BaseContentSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseContentSpace creates a new instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpace(address common.Address, backend bind.ContractBackend) (*BaseContentSpace, error) {
	contract, err := bindBaseContentSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpace{BaseContentSpaceCaller: BaseContentSpaceCaller{contract: contract}, BaseContentSpaceTransactor: BaseContentSpaceTransactor{contract: contract}, BaseContentSpaceFilterer: BaseContentSpaceFilterer{contract: contract}}, nil
}

// NewBaseContentSpaceCaller creates a new read-only instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceCaller(address common.Address, caller bind.ContractCaller) (*BaseContentSpaceCaller, error) {
	contract, err := bindBaseContentSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCaller{contract: contract}, nil
}

// NewBaseContentSpaceTransactor creates a new write-only instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentSpaceTransactor, error) {
	contract, err := bindBaseContentSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceTransactor{contract: contract}, nil
}

// NewBaseContentSpaceFilterer creates a new log filterer instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentSpaceFilterer, error) {
	contract, err := bindBaseContentSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceFilterer{contract: contract}, nil
}

// bindBaseContentSpace binds a generic wrapper to an already deployed contract.
func bindBaseContentSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentSpace *BaseContentSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentSpace.Contract.BaseContentSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentSpace *BaseContentSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.BaseContentSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentSpace *BaseContentSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.BaseContentSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentSpace *BaseContentSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentSpace *BaseContentSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentSpace *BaseContentSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceSession) CANACCESS() (uint8, error) {
	return _BaseContentSpace.Contract.CANACCESS(&_BaseContentSpace.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CANACCESS() (uint8, error) {
	return _BaseContentSpace.Contract.CANACCESS(&_BaseContentSpace.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceSession) CANEDIT() (uint8, error) {
	return _BaseContentSpace.Contract.CANEDIT(&_BaseContentSpace.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CANEDIT() (uint8, error) {
	return _BaseContentSpace.Contract.CANEDIT(&_BaseContentSpace.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceSession) CANSEE() (uint8, error) {
	return _BaseContentSpace.Contract.CANSEE(&_BaseContentSpace.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CANSEE() (uint8, error) {
	return _BaseContentSpace.Contract.CANSEE(&_BaseContentSpace.CallOpts)
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ActiveNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "activeNodeAddresses", arg0)
	return *ret0, err
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ActiveNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.ActiveNodeAddresses(&_BaseContentSpace.CallOpts, arg0)
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ActiveNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.ActiveNodeAddresses(&_BaseContentSpace.CallOpts, arg0)
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) ActiveNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "activeNodeLocators", arg0)
	return *ret0, err
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceSession) ActiveNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _BaseContentSpace.Contract.ActiveNodeLocators(&_BaseContentSpace.CallOpts, arg0)
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ActiveNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _BaseContentSpace.Contract.ActiveNodeLocators(&_BaseContentSpace.CallOpts, arg0)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) AddressKMS() (common.Address, error) {
	return _BaseContentSpace.Contract.AddressKMS(&_BaseContentSpace.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) AddressKMS() (common.Address, error) {
	return _BaseContentSpace.Contract.AddressKMS(&_BaseContentSpace.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanCommit() (bool, error) {
	return _BaseContentSpace.Contract.CanCommit(&_BaseContentSpace.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanCommit() (bool, error) {
	return _BaseContentSpace.Contract.CanCommit(&_BaseContentSpace.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanConfirm() (bool, error) {
	return _BaseContentSpace.Contract.CanConfirm(&_BaseContentSpace.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanConfirm() (bool, error) {
	return _BaseContentSpace.Contract.CanConfirm(&_BaseContentSpace.CallOpts)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canContribute", _candidate)
	return *ret0, err
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanContribute(&_BaseContentSpace.CallOpts, _candidate)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanContribute(&_BaseContentSpace.CallOpts, _candidate)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanEdit() (bool, error) {
	return _BaseContentSpace.Contract.CanEdit(&_BaseContentSpace.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanEdit() (bool, error) {
	return _BaseContentSpace.Contract.CanEdit(&_BaseContentSpace.CallOpts)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canNodePublish", candidate)
	return *ret0, err
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanNodePublish(&_BaseContentSpace.CallOpts, candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanNodePublish(&_BaseContentSpace.CallOpts, candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canPublish", _candidate)
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanPublish(&_BaseContentSpace.CallOpts, _candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanPublish(&_BaseContentSpace.CallOpts, _candidate)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canReview", arg0)
	return *ret0, err
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanReview(arg0 common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanReview(&_BaseContentSpace.CallOpts, arg0)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanReview(arg0 common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanReview(&_BaseContentSpace.CallOpts, arg0)
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CheckKMS(opts *bind.CallOpts, _kmsIdStr string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "checkKMS", _kmsIdStr)
	return *ret0, err
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) CheckKMS(_kmsIdStr string) (*big.Int, error) {
	return _BaseContentSpace.Contract.CheckKMS(&_BaseContentSpace.CallOpts, _kmsIdStr)
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CheckKMS(_kmsIdStr string) (*big.Int, error) {
	return _BaseContentSpace.Contract.CheckKMS(&_BaseContentSpace.CallOpts, _kmsIdStr)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CheckKMSAddr(opts *bind.CallOpts, _kmsAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "checkKMSAddr", _kmsAddr)
	return *ret0, err
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _BaseContentSpace.Contract.CheckKMSAddr(&_BaseContentSpace.CallOpts, _kmsAddr)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _BaseContentSpace.Contract.CheckKMSAddr(&_BaseContentSpace.CallOpts, _kmsAddr)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CommitPending() (bool, error) {
	return _BaseContentSpace.Contract.CommitPending(&_BaseContentSpace.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CommitPending() (bool, error) {
	return _BaseContentSpace.Contract.CommitPending(&_BaseContentSpace.CallOpts)
}

// ContentFactory is a free data retrieval call binding the contract method 0x904696a8.
//
// Solidity: function contentFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentFactory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentFactory")
	return *ret0, err
}

// ContentFactory is a free data retrieval call binding the contract method 0x904696a8.
//
// Solidity: function contentFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ContentFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.ContentFactory(&_BaseContentSpace.CallOpts)
}

// ContentFactory is a free data retrieval call binding the contract method 0x904696a8.
//
// Solidity: function contentFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.ContentFactory(&_BaseContentSpace.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ContentSpace() (common.Address, error) {
	return _BaseContentSpace.Contract.ContentSpace(&_BaseContentSpace.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentSpace() (common.Address, error) {
	return _BaseContentSpace.Contract.ContentSpace(&_BaseContentSpace.CallOpts)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentTypeContracts", arg0)
	return *ret0, err
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.ContentTypeContracts(&_BaseContentSpace.CallOpts, arg0)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.ContentTypeContracts(&_BaseContentSpace.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentTypes", arg0)
	return *ret0, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.ContentTypes(&_BaseContentSpace.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.ContentTypes(&_BaseContentSpace.CallOpts, arg0)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentTypesLength")
	return *ret0, err
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) ContentTypesLength() (*big.Int, error) {
	return _BaseContentSpace.Contract.ContentTypesLength(&_BaseContentSpace.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentTypesLength() (*big.Int, error) {
	return _BaseContentSpace.Contract.ContentTypesLength(&_BaseContentSpace.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContentSpace.Contract.CountVersionHashes(&_BaseContentSpace.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContentSpace.Contract.CountVersionHashes(&_BaseContentSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) Creator() (common.Address, error) {
	return _BaseContentSpace.Contract.Creator(&_BaseContentSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Creator() (common.Address, error) {
	return _BaseContentSpace.Contract.Creator(&_BaseContentSpace.CallOpts)
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) Description(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "description")
	return *ret0, err
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) Description() (string, error) {
	return _BaseContentSpace.Contract.Description(&_BaseContentSpace.CallOpts)
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Description() (string, error) {
	return _BaseContentSpace.Contract.Description(&_BaseContentSpace.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "factory")
	return *ret0, err
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) Factory() (common.Address, error) {
	return _BaseContentSpace.Contract.Factory(&_BaseContentSpace.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Factory() (common.Address, error) {
	return _BaseContentSpace.Contract.Factory(&_BaseContentSpace.CallOpts)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "findTypeByHash", typeHash)
	return *ret0, err
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseContentSpace.Contract.FindTypeByHash(&_BaseContentSpace.CallOpts, typeHash)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseContentSpace.Contract.FindTypeByHash(&_BaseContentSpace.CallOpts, typeHash)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) GetKMSID(opts *bind.CallOpts, _kmsAddr common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "getKMSID", _kmsAddr)
	return *ret0, err
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _BaseContentSpace.Contract.GetKMSID(&_BaseContentSpace.CallOpts, _kmsAddr)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _BaseContentSpace.Contract.GetKMSID(&_BaseContentSpace.CallOpts, _kmsAddr)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_BaseContentSpace *BaseContentSpaceCaller) GetKMSInfo(opts *bind.CallOpts, _kmsID string, prefix []byte) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _BaseContentSpace.contract.Call(opts, out, "getKMSInfo", _kmsID, prefix)
	return *ret0, *ret1, err
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_BaseContentSpace *BaseContentSpaceSession) GetKMSInfo(_kmsID string, prefix []byte) (string, string, error) {
	return _BaseContentSpace.Contract.GetKMSInfo(&_BaseContentSpace.CallOpts, _kmsID, prefix)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) GetKMSInfo(_kmsID string, prefix []byte) (string, string, error) {
	return _BaseContentSpace.Contract.GetKMSInfo(&_BaseContentSpace.CallOpts, _kmsID, prefix)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseContentSpace.Contract.GetMeta(&_BaseContentSpace.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseContentSpace.Contract.GetMeta(&_BaseContentSpace.CallOpts, key)
}

// GroupFactory is a free data retrieval call binding the contract method 0xb04b6caa.
//
// Solidity: function groupFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) GroupFactory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "groupFactory")
	return *ret0, err
}

// GroupFactory is a free data retrieval call binding the contract method 0xb04b6caa.
//
// Solidity: function groupFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) GroupFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.GroupFactory(&_BaseContentSpace.CallOpts)
}

// GroupFactory is a free data retrieval call binding the contract method 0xb04b6caa.
//
// Solidity: function groupFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) GroupFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.GroupFactory(&_BaseContentSpace.CallOpts)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.HasAccess(&_BaseContentSpace.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.HasAccess(&_BaseContentSpace.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.HasEditorRight(&_BaseContentSpace.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.HasEditorRight(&_BaseContentSpace.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceSession) IndexCategory() (uint8, error) {
	return _BaseContentSpace.Contract.IndexCategory(&_BaseContentSpace.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCallerSession) IndexCategory() (uint8, error) {
	return _BaseContentSpace.Contract.IndexCategory(&_BaseContentSpace.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.IsAdmin(&_BaseContentSpace.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.IsAdmin(&_BaseContentSpace.CallOpts, _candidate)
}

// KmsManAddr is a free data retrieval call binding the contract method 0x9c9527f1.
//
// Solidity: function kmsManAddr() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) KmsManAddr(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "kmsManAddr")
	return *ret0, err
}

// KmsManAddr is a free data retrieval call binding the contract method 0x9c9527f1.
//
// Solidity: function kmsManAddr() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) KmsManAddr() (common.Address, error) {
	return _BaseContentSpace.Contract.KmsManAddr(&_BaseContentSpace.CallOpts)
}

// KmsManAddr is a free data retrieval call binding the contract method 0x9c9527f1.
//
// Solidity: function kmsManAddr() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) KmsManAddr() (common.Address, error) {
	return _BaseContentSpace.Contract.KmsManAddr(&_BaseContentSpace.CallOpts)
}

// LibraryFactory is a free data retrieval call binding the contract method 0x441c5aa3.
//
// Solidity: function libraryFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) LibraryFactory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "libraryFactory")
	return *ret0, err
}

// LibraryFactory is a free data retrieval call binding the contract method 0x441c5aa3.
//
// Solidity: function libraryFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) LibraryFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.LibraryFactory(&_BaseContentSpace.CallOpts)
}

// LibraryFactory is a free data retrieval call binding the contract method 0x441c5aa3.
//
// Solidity: function libraryFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) LibraryFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.LibraryFactory(&_BaseContentSpace.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) Name() (string, error) {
	return _BaseContentSpace.Contract.Name(&_BaseContentSpace.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Name() (string, error) {
	return _BaseContentSpace.Contract.Name(&_BaseContentSpace.CallOpts)
}

// NodeMapping is a free data retrieval call binding the contract method 0xfbd1b4ce.
//
// Solidity: function nodeMapping(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) NodeMapping(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "nodeMapping", arg0)
	return *ret0, err
}

// NodeMapping is a free data retrieval call binding the contract method 0xfbd1b4ce.
//
// Solidity: function nodeMapping(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) NodeMapping(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.NodeMapping(&_BaseContentSpace.CallOpts, arg0)
}

// NodeMapping is a free data retrieval call binding the contract method 0xfbd1b4ce.
//
// Solidity: function nodeMapping(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) NodeMapping(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.NodeMapping(&_BaseContentSpace.CallOpts, arg0)
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) NumActiveNodes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "numActiveNodes")
	return *ret0, err
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) NumActiveNodes() (*big.Int, error) {
	return _BaseContentSpace.Contract.NumActiveNodes(&_BaseContentSpace.CallOpts)
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) NumActiveNodes() (*big.Int, error) {
	return _BaseContentSpace.Contract.NumActiveNodes(&_BaseContentSpace.CallOpts)
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) NumPendingNodes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "numPendingNodes")
	return *ret0, err
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) NumPendingNodes() (*big.Int, error) {
	return _BaseContentSpace.Contract.NumPendingNodes(&_BaseContentSpace.CallOpts)
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) NumPendingNodes() (*big.Int, error) {
	return _BaseContentSpace.Contract.NumPendingNodes(&_BaseContentSpace.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) ObjectHash() (string, error) {
	return _BaseContentSpace.Contract.ObjectHash(&_BaseContentSpace.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ObjectHash() (string, error) {
	return _BaseContentSpace.Contract.ObjectHash(&_BaseContentSpace.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseContentSpace.Contract.ObjectTimestamp(&_BaseContentSpace.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseContentSpace.Contract.ObjectTimestamp(&_BaseContentSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) Owner() (common.Address, error) {
	return _BaseContentSpace.Contract.Owner(&_BaseContentSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Owner() (common.Address, error) {
	return _BaseContentSpace.Contract.Owner(&_BaseContentSpace.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ParentAddress() (common.Address, error) {
	return _BaseContentSpace.Contract.ParentAddress(&_BaseContentSpace.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ParentAddress() (common.Address, error) {
	return _BaseContentSpace.Contract.ParentAddress(&_BaseContentSpace.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) PendingHash() (string, error) {
	return _BaseContentSpace.Contract.PendingHash(&_BaseContentSpace.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) PendingHash() (string, error) {
	return _BaseContentSpace.Contract.PendingHash(&_BaseContentSpace.CallOpts)
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "pendingNodeAddresses", arg0)
	return *ret0, err
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) PendingNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.PendingNodeAddresses(&_BaseContentSpace.CallOpts, arg0)
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) PendingNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.PendingNodeAddresses(&_BaseContentSpace.CallOpts, arg0)
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "pendingNodeLocators", arg0)
	return *ret0, err
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceSession) PendingNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _BaseContentSpace.Contract.PendingNodeLocators(&_BaseContentSpace.CallOpts, arg0)
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCallerSession) PendingNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _BaseContentSpace.Contract.PendingNodeLocators(&_BaseContentSpace.CallOpts, arg0)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "requiresReview")
	return *ret0, err
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) RequiresReview() (bool, error) {
	return _BaseContentSpace.Contract.RequiresReview(&_BaseContentSpace.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) RequiresReview() (bool, error) {
	return _BaseContentSpace.Contract.RequiresReview(&_BaseContentSpace.CallOpts)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) UserWallets(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "userWallets", arg0)
	return *ret0, err
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) UserWallets(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.UserWallets(&_BaseContentSpace.CallOpts, arg0)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) UserWallets(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.UserWallets(&_BaseContentSpace.CallOpts, arg0)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "validType", content_type)
	return *ret0, err
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseContentSpace.Contract.ValidType(&_BaseContentSpace.CallOpts, content_type)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseContentSpace.Contract.ValidType(&_BaseContentSpace.CallOpts, content_type)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceSession) Version() ([32]byte, error) {
	return _BaseContentSpace.Contract.Version(&_BaseContentSpace.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Version() ([32]byte, error) {
	return _BaseContentSpace.Contract.Version(&_BaseContentSpace.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceSession) VersionAPI() ([32]byte, error) {
	return _BaseContentSpace.Contract.VersionAPI(&_BaseContentSpace.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseContentSpace.Contract.VersionAPI(&_BaseContentSpace.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContentSpace.Contract.VersionHashes(&_BaseContentSpace.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContentSpace.Contract.VersionHashes(&_BaseContentSpace.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContentSpace.Contract.VersionTimestamp(&_BaseContentSpace.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContentSpace.Contract.VersionTimestamp(&_BaseContentSpace.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceSession) Visibility() (uint8, error) {
	return _BaseContentSpace.Contract.Visibility(&_BaseContentSpace.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Visibility() (uint8, error) {
	return _BaseContentSpace.Contract.Visibility(&_BaseContentSpace.CallOpts)
}

// WalletFactory is a free data retrieval call binding the contract method 0xc5c03699.
//
// Solidity: function walletFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) WalletFactory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "walletFactory")
	return *ret0, err
}

// WalletFactory is a free data retrieval call binding the contract method 0xc5c03699.
//
// Solidity: function walletFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) WalletFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.WalletFactory(&_BaseContentSpace.CallOpts)
}

// WalletFactory is a free data retrieval call binding the contract method 0xc5c03699.
//
// Solidity: function walletFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) WalletFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.WalletFactory(&_BaseContentSpace.CallOpts)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "whitelistedType", content_type)
	return *ret0, err
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseContentSpace.Contract.WhitelistedType(&_BaseContentSpace.CallOpts, content_type)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseContentSpace.Contract.WhitelistedType(&_BaseContentSpace.CallOpts, content_type)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AccessRequestV3(&_BaseContentSpace.TransactOpts, arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AccessRequestV3(&_BaseContentSpace.TransactOpts, arg0, arg1)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseContentSpace *BaseContentSpaceSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddContentType(&_BaseContentSpace.TransactOpts, content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddContentType(&_BaseContentSpace.TransactOpts, content_type, content_contract)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) AddNode(opts *bind.TransactOpts, _nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "addNode", _nodeAddr, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceSession) AddNode(_nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddNode(&_BaseContentSpace.TransactOpts, _nodeAddr, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) AddNode(_nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddNode(&_BaseContentSpace.TransactOpts, _nodeAddr, _locator)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) ApproveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "approveNode", _nodeAddr)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceSession) ApproveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ApproveNode(&_BaseContentSpace.TransactOpts, _nodeAddr)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) ApproveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ApproveNode(&_BaseContentSpace.TransactOpts, _nodeAddr)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentSpace *BaseContentSpaceSession) ClearPending() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ClearPending(&_BaseContentSpace.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ClearPending(&_BaseContentSpace.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentSpace *BaseContentSpaceSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Commit(&_BaseContentSpace.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Commit(&_BaseContentSpace.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ConfirmCommit(&_BaseContentSpace.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ConfirmCommit(&_BaseContentSpace.TransactOpts)
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createAccessWallet")
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateAccessWallet() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateAccessWallet(&_BaseContentSpace.TransactOpts)
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateAccessWallet() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateAccessWallet(&_BaseContentSpace.TransactOpts)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createContent", lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateContent(&_BaseContentSpace.TransactOpts, lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateContent(&_BaseContentSpace.TransactOpts, lib, content_type)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createContentType")
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateContentType() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateContentType(&_BaseContentSpace.TransactOpts)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateContentType() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateContentType(&_BaseContentSpace.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createGroup")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateGroup() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateGroup(&_BaseContentSpace.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateGroup() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateGroup(&_BaseContentSpace.TransactOpts)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateLibrary(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createLibrary", address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateLibrary(&_BaseContentSpace.TransactOpts, address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateLibrary(&_BaseContentSpace.TransactOpts, address_KMS)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateUserWallet(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createUserWallet", _user)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateUserWallet(_user common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateUserWallet(&_BaseContentSpace.TransactOpts, _user)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateUserWallet(_user common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateUserWallet(&_BaseContentSpace.TransactOpts, _user)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentSpace *BaseContentSpaceTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentSpace *BaseContentSpaceSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.DeleteVersion(&_BaseContentSpace.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.DeleteVersion(&_BaseContentSpace.TransactOpts, _versionHash)
}

// GetAccessWallet is a paid mutator transaction binding the contract method 0xa2d67fcf.
//
// Solidity: function getAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) GetAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "getAccessWallet")
}

// GetAccessWallet is a paid mutator transaction binding the contract method 0xa2d67fcf.
//
// Solidity: function getAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) GetAccessWallet() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.GetAccessWallet(&_BaseContentSpace.TransactOpts)
}

// GetAccessWallet is a paid mutator transaction binding the contract method 0xa2d67fcf.
//
// Solidity: function getAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) GetAccessWallet() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.GetAccessWallet(&_BaseContentSpace.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentSpace *BaseContentSpaceSession) Kill() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Kill(&_BaseContentSpace.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Kill(&_BaseContentSpace.TransactOpts)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "publish", contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Publish(&_BaseContentSpace.TransactOpts, contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Publish(&_BaseContentSpace.TransactOpts, contentObj)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContentSpace *BaseContentSpaceSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.PutMeta(&_BaseContentSpace.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.PutMeta(&_BaseContentSpace.TransactOpts, key, value)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveContentType(&_BaseContentSpace.TransactOpts, content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveContentType(&_BaseContentSpace.TransactOpts, content_type)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) RemoveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "removeNode", _nodeAddr)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceSession) RemoveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveNode(&_BaseContentSpace.TransactOpts, _nodeAddr)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) RemoveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveNode(&_BaseContentSpace.TransactOpts, _nodeAddr)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetAddressKMS(&_BaseContentSpace.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetAddressKMS(&_BaseContentSpace.TransactOpts, address_KMS)
}

// SetContentFactory is a paid mutator transaction binding the contract method 0x85ce1df1.
//
// Solidity: function setContentFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetContentFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setContentFactory", new_factory)
}

// SetContentFactory is a paid mutator transaction binding the contract method 0x85ce1df1.
//
// Solidity: function setContentFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetContentFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetContentFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetContentFactory is a paid mutator transaction binding the contract method 0x85ce1df1.
//
// Solidity: function setContentFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetContentFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetContentFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string content_space_description) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetDescription(opts *bind.TransactOpts, content_space_description string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setDescription", content_space_description)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string content_space_description) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetDescription(content_space_description string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetDescription(&_BaseContentSpace.TransactOpts, content_space_description)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string content_space_description) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetDescription(content_space_description string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetDescription(&_BaseContentSpace.TransactOpts, content_space_description)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setFactory", new_factory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetGroupFactory is a paid mutator transaction binding the contract method 0x837b3b93.
//
// Solidity: function setGroupFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetGroupFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setGroupFactory", new_factory)
}

// SetGroupFactory is a paid mutator transaction binding the contract method 0x837b3b93.
//
// Solidity: function setGroupFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetGroupFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetGroupFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetGroupFactory is a paid mutator transaction binding the contract method 0x837b3b93.
//
// Solidity: function setGroupFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetGroupFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetGroupFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetGroupRights(&_BaseContentSpace.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetGroupRights(&_BaseContentSpace.TransactOpts, group, access_type, access)
}

// SetKmsManager is a paid mutator transaction binding the contract method 0x87e38281.
//
// Solidity: function setKmsManager(address _kmsManAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetKmsManager(opts *bind.TransactOpts, _kmsManAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setKmsManager", _kmsManAddr)
}

// SetKmsManager is a paid mutator transaction binding the contract method 0x87e38281.
//
// Solidity: function setKmsManager(address _kmsManAddr) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetKmsManager(_kmsManAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetKmsManager(&_BaseContentSpace.TransactOpts, _kmsManAddr)
}

// SetKmsManager is a paid mutator transaction binding the contract method 0x87e38281.
//
// Solidity: function setKmsManager(address _kmsManAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetKmsManager(_kmsManAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetKmsManager(&_BaseContentSpace.TransactOpts, _kmsManAddr)
}

// SetLibraryFactory is a paid mutator transaction binding the contract method 0x9d05d18d.
//
// Solidity: function setLibraryFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetLibraryFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setLibraryFactory", new_factory)
}

// SetLibraryFactory is a paid mutator transaction binding the contract method 0x9d05d18d.
//
// Solidity: function setLibraryFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetLibraryFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetLibraryFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetLibraryFactory is a paid mutator transaction binding the contract method 0x9d05d18d.
//
// Solidity: function setLibraryFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetLibraryFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetLibraryFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetRights(&_BaseContentSpace.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetRights(&_BaseContentSpace.TransactOpts, stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetVisibility(&_BaseContentSpace.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetVisibility(&_BaseContentSpace.TransactOpts, _visibility_code)
}

// SetWalletFactory is a paid mutator transaction binding the contract method 0x7ebf879c.
//
// Solidity: function setWalletFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetWalletFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setWalletFactory", new_factory)
}

// SetWalletFactory is a paid mutator transaction binding the contract method 0x7ebf879c.
//
// Solidity: function setWalletFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetWalletFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetWalletFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetWalletFactory is a paid mutator transaction binding the contract method 0x7ebf879c.
//
// Solidity: function setWalletFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetWalletFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetWalletFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SubmitNode(opts *bind.TransactOpts, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "submitNode", _locator)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SubmitNode(_locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SubmitNode(&_BaseContentSpace.TransactOpts, _locator)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SubmitNode(_locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SubmitNode(&_BaseContentSpace.TransactOpts, _locator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentSpace *BaseContentSpaceSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.TransferCreatorship(&_BaseContentSpace.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.TransferCreatorship(&_BaseContentSpace.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentSpace *BaseContentSpaceSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.TransferOwnership(&_BaseContentSpace.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.TransferOwnership(&_BaseContentSpace.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentSpace *BaseContentSpaceSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.UpdateRequest(&_BaseContentSpace.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.UpdateRequest(&_BaseContentSpace.TransactOpts)
}

// BaseContentSpaceAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseContentSpace contract.
type BaseContentSpaceAccessRequestV3Iterator struct {
	Event *BaseContentSpaceAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceAccessRequestV3 represents a AccessRequestV3 event raised by the BaseContentSpace contract.
type BaseContentSpaceAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseContentSpaceAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceAccessRequestV3Iterator{contract: _BaseContentSpace.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceAccessRequestV3)
				if err := _BaseContentSpace.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseAccessRequestV3(log types.Log) (*BaseContentSpaceAccessRequestV3, error) {
	event := new(BaseContentSpaceAccessRequestV3)
	if err := _BaseContentSpace.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceAddNodeIterator is returned from FilterAddNode and is used to iterate over the raw logs and unpacked data for AddNode events raised by the BaseContentSpace contract.
type BaseContentSpaceAddNodeIterator struct {
	Event *BaseContentSpaceAddNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceAddNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceAddNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceAddNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceAddNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceAddNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceAddNode represents a AddNode event raised by the BaseContentSpace contract.
type BaseContentSpaceAddNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddNode is a free log retrieval operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterAddNode(opts *bind.FilterOpts) (*BaseContentSpaceAddNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceAddNodeIterator{contract: _BaseContentSpace.contract, event: "AddNode", logs: logs, sub: sub}, nil
}

// WatchAddNode is a free log subscription operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchAddNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceAddNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceAddNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddNode is a log parse operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseAddNode(log types.Log) (*BaseContentSpaceAddNode, error) {
	event := new(BaseContentSpaceAddNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceBindUserWalletIterator is returned from FilterBindUserWallet and is used to iterate over the raw logs and unpacked data for BindUserWallet events raised by the BaseContentSpace contract.
type BaseContentSpaceBindUserWalletIterator struct {
	Event *BaseContentSpaceBindUserWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceBindUserWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceBindUserWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceBindUserWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceBindUserWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceBindUserWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceBindUserWallet represents a BindUserWallet event raised by the BaseContentSpace contract.
type BaseContentSpaceBindUserWallet struct {
	Wallet   common.Address
	UserAddr common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBindUserWallet is a free log retrieval operation binding the contract event 0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2.
//
// Solidity: event BindUserWallet(address wallet, address userAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterBindUserWallet(opts *bind.FilterOpts) (*BaseContentSpaceBindUserWalletIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "BindUserWallet")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceBindUserWalletIterator{contract: _BaseContentSpace.contract, event: "BindUserWallet", logs: logs, sub: sub}, nil
}

// WatchBindUserWallet is a free log subscription operation binding the contract event 0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2.
//
// Solidity: event BindUserWallet(address wallet, address userAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchBindUserWallet(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceBindUserWallet) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "BindUserWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceBindUserWallet)
				if err := _BaseContentSpace.contract.UnpackLog(event, "BindUserWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBindUserWallet is a log parse operation binding the contract event 0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2.
//
// Solidity: event BindUserWallet(address wallet, address userAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseBindUserWallet(log types.Log) (*BaseContentSpaceBindUserWallet, error) {
	event := new(BaseContentSpaceBindUserWallet)
	if err := _BaseContentSpace.contract.UnpackLog(event, "BindUserWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContentSpace contract.
type BaseContentSpaceCommitPendingIterator struct {
	Event *BaseContentSpaceCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCommitPending represents a CommitPending event raised by the BaseContentSpace contract.
type BaseContentSpaceCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentSpaceCommitPendingIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCommitPendingIterator{contract: _BaseContentSpace.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCommitPending)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCommitPending(log types.Log) (*BaseContentSpaceCommitPending, error) {
	event := new(BaseContentSpaceCommitPending)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeAddedIterator struct {
	Event *BaseContentSpaceContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceContentTypeAdded represents a ContentTypeAdded event raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseContentSpaceContentTypeAddedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceContentTypeAddedIterator{contract: _BaseContentSpace.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceContentTypeAdded)
				if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseContentTypeAdded(log types.Log) (*BaseContentSpaceContentTypeAdded, error) {
	event := new(BaseContentSpaceContentTypeAdded)
	if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeRemovedIterator struct {
	Event *BaseContentSpaceContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseContentSpaceContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceContentTypeRemovedIterator{contract: _BaseContentSpace.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceContentTypeRemoved)
				if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseContentTypeRemoved(log types.Log) (*BaseContentSpaceContentTypeRemoved, error) {
	event := new(BaseContentSpaceContentTypeRemoved)
	if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateAccessWalletIterator is returned from FilterCreateAccessWallet and is used to iterate over the raw logs and unpacked data for CreateAccessWallet events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateAccessWalletIterator struct {
	Event *BaseContentSpaceCreateAccessWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateAccessWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateAccessWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateAccessWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateAccessWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateAccessWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateAccessWallet represents a CreateAccessWallet event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateAccessWallet struct {
	Wallet common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCreateAccessWallet is a free log retrieval operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateAccessWallet(opts *bind.FilterOpts) (*BaseContentSpaceCreateAccessWalletIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateAccessWallet")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateAccessWalletIterator{contract: _BaseContentSpace.contract, event: "CreateAccessWallet", logs: logs, sub: sub}, nil
}

// WatchCreateAccessWallet is a free log subscription operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateAccessWallet(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateAccessWallet) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateAccessWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateAccessWallet)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateAccessWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateAccessWallet is a log parse operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateAccessWallet(log types.Log) (*BaseContentSpaceCreateAccessWallet, error) {
	event := new(BaseContentSpaceCreateAccessWallet)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateAccessWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateContentIterator is returned from FilterCreateContent and is used to iterate over the raw logs and unpacked data for CreateContent events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentIterator struct {
	Event *BaseContentSpaceCreateContent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateContentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateContent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateContent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateContentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateContentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateContent represents a CreateContent event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContent struct {
	ContentAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCreateContent is a free log retrieval operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateContent(opts *bind.FilterOpts) (*BaseContentSpaceCreateContentIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateContent")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateContentIterator{contract: _BaseContentSpace.contract, event: "CreateContent", logs: logs, sub: sub}, nil
}

// WatchCreateContent is a free log subscription operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateContent(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateContent) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateContent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateContent)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateContent is a log parse operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateContent(log types.Log) (*BaseContentSpaceCreateContent, error) {
	event := new(BaseContentSpaceCreateContent)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateContentTypeIterator is returned from FilterCreateContentType and is used to iterate over the raw logs and unpacked data for CreateContentType events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentTypeIterator struct {
	Event *BaseContentSpaceCreateContentType // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateContentTypeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateContentType)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateContentType)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateContentTypeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateContentTypeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateContentType represents a CreateContentType event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentType struct {
	ContentTypeAddress common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterCreateContentType is a free log retrieval operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateContentType(opts *bind.FilterOpts) (*BaseContentSpaceCreateContentTypeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateContentType")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateContentTypeIterator{contract: _BaseContentSpace.contract, event: "CreateContentType", logs: logs, sub: sub}, nil
}

// WatchCreateContentType is a free log subscription operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateContentType(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateContentType) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateContentType")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateContentType)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContentType", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateContentType is a log parse operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateContentType(log types.Log) (*BaseContentSpaceCreateContentType, error) {
	event := new(BaseContentSpaceCreateContentType)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContentType", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateGroupIterator is returned from FilterCreateGroup and is used to iterate over the raw logs and unpacked data for CreateGroup events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateGroupIterator struct {
	Event *BaseContentSpaceCreateGroup // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateGroupIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateGroup)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateGroup)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateGroupIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateGroupIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateGroup represents a CreateGroup event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateGroup struct {
	GroupAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCreateGroup is a free log retrieval operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateGroup(opts *bind.FilterOpts) (*BaseContentSpaceCreateGroupIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateGroup")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateGroupIterator{contract: _BaseContentSpace.contract, event: "CreateGroup", logs: logs, sub: sub}, nil
}

// WatchCreateGroup is a free log subscription operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateGroup(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateGroup) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateGroup")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateGroup)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateGroup", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateGroup is a log parse operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateGroup(log types.Log) (*BaseContentSpaceCreateGroup, error) {
	event := new(BaseContentSpaceCreateGroup)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateGroup", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateLibraryIterator is returned from FilterCreateLibrary and is used to iterate over the raw logs and unpacked data for CreateLibrary events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateLibraryIterator struct {
	Event *BaseContentSpaceCreateLibrary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateLibraryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateLibrary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateLibrary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateLibraryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateLibraryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateLibrary represents a CreateLibrary event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateLibrary struct {
	LibraryAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCreateLibrary is a free log retrieval operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateLibrary(opts *bind.FilterOpts) (*BaseContentSpaceCreateLibraryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateLibrary")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateLibraryIterator{contract: _BaseContentSpace.contract, event: "CreateLibrary", logs: logs, sub: sub}, nil
}

// WatchCreateLibrary is a free log subscription operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateLibrary(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateLibrary) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateLibrary")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateLibrary)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateLibrary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateLibrary is a log parse operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateLibrary(log types.Log) (*BaseContentSpaceCreateLibrary, error) {
	event := new(BaseContentSpaceCreateLibrary)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateLibrary", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateSpaceIterator is returned from FilterCreateSpace and is used to iterate over the raw logs and unpacked data for CreateSpace events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateSpaceIterator struct {
	Event *BaseContentSpaceCreateSpace // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateSpaceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateSpace)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateSpace)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateSpaceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateSpaceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateSpace represents a CreateSpace event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateSpace struct {
	Version [32]byte
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterCreateSpace is a free log retrieval operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateSpace(opts *bind.FilterOpts) (*BaseContentSpaceCreateSpaceIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateSpace")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateSpaceIterator{contract: _BaseContentSpace.contract, event: "CreateSpace", logs: logs, sub: sub}, nil
}

// WatchCreateSpace is a free log subscription operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateSpace(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateSpace) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateSpace")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateSpace)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateSpace", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateSpace is a log parse operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateSpace(log types.Log) (*BaseContentSpaceCreateSpace, error) {
	event := new(BaseContentSpaceCreateSpace)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateSpace", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceEngageAccountLibraryIterator is returned from FilterEngageAccountLibrary and is used to iterate over the raw logs and unpacked data for EngageAccountLibrary events raised by the BaseContentSpace contract.
type BaseContentSpaceEngageAccountLibraryIterator struct {
	Event *BaseContentSpaceEngageAccountLibrary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceEngageAccountLibrary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceEngageAccountLibrary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceEngageAccountLibrary represents a EngageAccountLibrary event raised by the BaseContentSpace contract.
type BaseContentSpaceEngageAccountLibrary struct {
	AccountAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterEngageAccountLibrary is a free log retrieval operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterEngageAccountLibrary(opts *bind.FilterOpts) (*BaseContentSpaceEngageAccountLibraryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "EngageAccountLibrary")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceEngageAccountLibraryIterator{contract: _BaseContentSpace.contract, event: "EngageAccountLibrary", logs: logs, sub: sub}, nil
}

// WatchEngageAccountLibrary is a free log subscription operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchEngageAccountLibrary(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceEngageAccountLibrary) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "EngageAccountLibrary")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceEngageAccountLibrary)
				if err := _BaseContentSpace.contract.UnpackLog(event, "EngageAccountLibrary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEngageAccountLibrary is a log parse operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseEngageAccountLibrary(log types.Log) (*BaseContentSpaceEngageAccountLibrary, error) {
	event := new(BaseContentSpaceEngageAccountLibrary)
	if err := _BaseContentSpace.contract.UnpackLog(event, "EngageAccountLibrary", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceGetAccessWalletIterator is returned from FilterGetAccessWallet and is used to iterate over the raw logs and unpacked data for GetAccessWallet events raised by the BaseContentSpace contract.
type BaseContentSpaceGetAccessWalletIterator struct {
	Event *BaseContentSpaceGetAccessWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceGetAccessWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceGetAccessWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceGetAccessWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceGetAccessWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceGetAccessWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceGetAccessWallet represents a GetAccessWallet event raised by the BaseContentSpace contract.
type BaseContentSpaceGetAccessWallet struct {
	WalletAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterGetAccessWallet is a free log retrieval operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterGetAccessWallet(opts *bind.FilterOpts) (*BaseContentSpaceGetAccessWalletIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceGetAccessWalletIterator{contract: _BaseContentSpace.contract, event: "GetAccessWallet", logs: logs, sub: sub}, nil
}

// WatchGetAccessWallet is a free log subscription operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchGetAccessWallet(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceGetAccessWallet) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceGetAccessWallet)
				if err := _BaseContentSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGetAccessWallet is a log parse operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseGetAccessWallet(log types.Log) (*BaseContentSpaceGetAccessWallet, error) {
	event := new(BaseContentSpaceGetAccessWallet)
	if err := _BaseContentSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceNodeApprovedIterator is returned from FilterNodeApproved and is used to iterate over the raw logs and unpacked data for NodeApproved events raised by the BaseContentSpace contract.
type BaseContentSpaceNodeApprovedIterator struct {
	Event *BaseContentSpaceNodeApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceNodeApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceNodeApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceNodeApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceNodeApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceNodeApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceNodeApproved represents a NodeApproved event raised by the BaseContentSpace contract.
type BaseContentSpaceNodeApproved struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeApproved is a free log retrieval operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterNodeApproved(opts *bind.FilterOpts) (*BaseContentSpaceNodeApprovedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceNodeApprovedIterator{contract: _BaseContentSpace.contract, event: "NodeApproved", logs: logs, sub: sub}, nil
}

// WatchNodeApproved is a free log subscription operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchNodeApproved(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceNodeApproved) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceNodeApproved)
				if err := _BaseContentSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeApproved is a log parse operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseNodeApproved(log types.Log) (*BaseContentSpaceNodeApproved, error) {
	event := new(BaseContentSpaceNodeApproved)
	if err := _BaseContentSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceNodeSubmittedIterator is returned from FilterNodeSubmitted and is used to iterate over the raw logs and unpacked data for NodeSubmitted events raised by the BaseContentSpace contract.
type BaseContentSpaceNodeSubmittedIterator struct {
	Event *BaseContentSpaceNodeSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceNodeSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceNodeSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceNodeSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceNodeSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceNodeSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceNodeSubmitted represents a NodeSubmitted event raised by the BaseContentSpace contract.
type BaseContentSpaceNodeSubmitted struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeSubmitted is a free log retrieval operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterNodeSubmitted(opts *bind.FilterOpts) (*BaseContentSpaceNodeSubmittedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceNodeSubmittedIterator{contract: _BaseContentSpace.contract, event: "NodeSubmitted", logs: logs, sub: sub}, nil
}

// WatchNodeSubmitted is a free log subscription operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchNodeSubmitted(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceNodeSubmitted) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceNodeSubmitted)
				if err := _BaseContentSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeSubmitted is a log parse operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseNodeSubmitted(log types.Log) (*BaseContentSpaceNodeSubmitted, error) {
	event := new(BaseContentSpaceNodeSubmitted)
	if err := _BaseContentSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseContentSpace contract.
type BaseContentSpaceObjectMetaChangedIterator struct {
	Event *BaseContentSpaceObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseContentSpace contract.
type BaseContentSpaceObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseContentSpaceObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceObjectMetaChangedIterator{contract: _BaseContentSpace.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceObjectMetaChanged)
				if err := _BaseContentSpace.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseObjectMetaChanged(log types.Log) (*BaseContentSpaceObjectMetaChanged, error) {
	event := new(BaseContentSpaceObjectMetaChanged)
	if err := _BaseContentSpace.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceRemoveNodeIterator is returned from FilterRemoveNode and is used to iterate over the raw logs and unpacked data for RemoveNode events raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveNodeIterator struct {
	Event *BaseContentSpaceRemoveNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceRemoveNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceRemoveNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceRemoveNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceRemoveNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceRemoveNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceRemoveNode represents a RemoveNode event raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoveNode is a free log retrieval operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterRemoveNode(opts *bind.FilterOpts) (*BaseContentSpaceRemoveNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceRemoveNodeIterator{contract: _BaseContentSpace.contract, event: "RemoveNode", logs: logs, sub: sub}, nil
}

// WatchRemoveNode is a free log subscription operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchRemoveNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceRemoveNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceRemoveNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveNode is a log parse operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseRemoveNode(log types.Log) (*BaseContentSpaceRemoveNode, error) {
	event := new(BaseContentSpaceRemoveNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceSetFactoryIterator is returned from FilterSetFactory and is used to iterate over the raw logs and unpacked data for SetFactory events raised by the BaseContentSpace contract.
type BaseContentSpaceSetFactoryIterator struct {
	Event *BaseContentSpaceSetFactory // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceSetFactoryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceSetFactory)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceSetFactory)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceSetFactoryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceSetFactoryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceSetFactory represents a SetFactory event raised by the BaseContentSpace contract.
type BaseContentSpaceSetFactory struct {
	Factory common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSetFactory is a free log retrieval operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterSetFactory(opts *bind.FilterOpts) (*BaseContentSpaceSetFactoryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "SetFactory")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceSetFactoryIterator{contract: _BaseContentSpace.contract, event: "SetFactory", logs: logs, sub: sub}, nil
}

// WatchSetFactory is a free log subscription operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchSetFactory(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceSetFactory) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "SetFactory")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceSetFactory)
				if err := _BaseContentSpace.contract.UnpackLog(event, "SetFactory", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFactory is a log parse operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseSetFactory(log types.Log) (*BaseContentSpaceSetFactory, error) {
	event := new(BaseContentSpaceSetFactory)
	if err := _BaseContentSpace.contract.UnpackLog(event, "SetFactory", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContentSpace contract.
type BaseContentSpaceUpdateRequestIterator struct {
	Event *BaseContentSpaceUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceUpdateRequest represents a UpdateRequest event raised by the BaseContentSpace contract.
type BaseContentSpaceUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentSpaceUpdateRequestIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceUpdateRequestIterator{contract: _BaseContentSpace.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceUpdateRequest)
				if err := _BaseContentSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseUpdateRequest(log types.Log) (*BaseContentSpaceUpdateRequest, error) {
	event := new(BaseContentSpaceUpdateRequest)
	if err := _BaseContentSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContentSpace contract.
type BaseContentSpaceVersionConfirmIterator struct {
	Event *BaseContentSpaceVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceVersionConfirm represents a VersionConfirm event raised by the BaseContentSpace contract.
type BaseContentSpaceVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentSpaceVersionConfirmIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceVersionConfirmIterator{contract: _BaseContentSpace.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceVersionConfirm)
				if err := _BaseContentSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseVersionConfirm(log types.Log) (*BaseContentSpaceVersionConfirm, error) {
	event := new(BaseContentSpaceVersionConfirm)
	if err := _BaseContentSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContentSpace contract.
type BaseContentSpaceVersionDeleteIterator struct {
	Event *BaseContentSpaceVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceVersionDelete represents a VersionDelete event raised by the BaseContentSpace contract.
type BaseContentSpaceVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentSpaceVersionDeleteIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceVersionDeleteIterator{contract: _BaseContentSpace.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceVersionDelete)
				if err := _BaseContentSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseVersionDelete(log types.Log) (*BaseContentSpaceVersionDelete, error) {
	event := new(BaseContentSpaceVersionDelete)
	if err := _BaseContentSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseContentSpace contract.
type BaseContentSpaceVisibilityChangedIterator struct {
	Event *BaseContentSpaceVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceVisibilityChanged represents a VisibilityChanged event raised by the BaseContentSpace contract.
type BaseContentSpaceVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseContentSpaceVisibilityChangedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceVisibilityChangedIterator{contract: _BaseContentSpace.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceVisibilityChanged)
				if err := _BaseContentSpace.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseVisibilityChanged(log types.Log) (*BaseContentSpaceVisibilityChanged, error) {
	event := new(BaseContentSpaceVisibilityChanged)
	if err := _BaseContentSpace.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeABI is the input ABI used to generate the binding from.
const BaseContentTypeABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"}]"

// BaseContentTypeFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentTypeFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"81beeb64": "canEdit()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"6380501f": "indexCategory()",
	"41c0e1b5": "kill()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"aa024e8b": "setVisibility(uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
}

// BaseContentTypeBin is the compiled bytecode used for deploying new contracts.
var BaseContentTypeBin = ""

// DeployBaseContentType deploys a new Ethereum contract, binding an instance of BaseContentType to it.
func DeployBaseContentType(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address) (common.Address, *types.Transaction, *BaseContentType, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentTypeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseContentTypeBin), backend, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentType{BaseContentTypeCaller: BaseContentTypeCaller{contract: contract}, BaseContentTypeTransactor: BaseContentTypeTransactor{contract: contract}, BaseContentTypeFilterer: BaseContentTypeFilterer{contract: contract}}, nil
}

// BaseContentType is an auto generated Go binding around an Ethereum contract.
type BaseContentType struct {
	BaseContentTypeCaller     // Read-only binding to the contract
	BaseContentTypeTransactor // Write-only binding to the contract
	BaseContentTypeFilterer   // Log filterer for contract events
}

// BaseContentTypeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentTypeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTypeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentTypeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTypeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentTypeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTypeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseContentTypeSession struct {
	Contract     *BaseContentType  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseContentTypeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseContentTypeCallerSession struct {
	Contract *BaseContentTypeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// BaseContentTypeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseContentTypeTransactorSession struct {
	Contract     *BaseContentTypeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// BaseContentTypeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseContentTypeRaw struct {
	Contract *BaseContentType // Generic contract binding to access the raw methods on
}

// BaseContentTypeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseContentTypeCallerRaw struct {
	Contract *BaseContentTypeCaller // Generic read-only contract binding to access the raw methods on
}

// BaseContentTypeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseContentTypeTransactorRaw struct {
	Contract *BaseContentTypeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseContentType creates a new instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentType(address common.Address, backend bind.ContractBackend) (*BaseContentType, error) {
	contract, err := bindBaseContentType(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentType{BaseContentTypeCaller: BaseContentTypeCaller{contract: contract}, BaseContentTypeTransactor: BaseContentTypeTransactor{contract: contract}, BaseContentTypeFilterer: BaseContentTypeFilterer{contract: contract}}, nil
}

// NewBaseContentTypeCaller creates a new read-only instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeCaller(address common.Address, caller bind.ContractCaller) (*BaseContentTypeCaller, error) {
	contract, err := bindBaseContentType(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeCaller{contract: contract}, nil
}

// NewBaseContentTypeTransactor creates a new write-only instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentTypeTransactor, error) {
	contract, err := bindBaseContentType(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeTransactor{contract: contract}, nil
}

// NewBaseContentTypeFilterer creates a new log filterer instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentTypeFilterer, error) {
	contract, err := bindBaseContentType(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeFilterer{contract: contract}, nil
}

// bindBaseContentType binds a generic wrapper to an already deployed contract.
func bindBaseContentType(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentTypeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentType *BaseContentTypeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentType.Contract.BaseContentTypeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentType *BaseContentTypeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.Contract.BaseContentTypeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentType *BaseContentTypeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentType.Contract.BaseContentTypeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentType *BaseContentTypeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentType.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentType *BaseContentTypeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentType *BaseContentTypeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentType.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContentType *BaseContentTypeSession) CANACCESS() (uint8, error) {
	return _BaseContentType.Contract.CANACCESS(&_BaseContentType.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCallerSession) CANACCESS() (uint8, error) {
	return _BaseContentType.Contract.CANACCESS(&_BaseContentType.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContentType *BaseContentTypeSession) CANEDIT() (uint8, error) {
	return _BaseContentType.Contract.CANEDIT(&_BaseContentType.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCallerSession) CANEDIT() (uint8, error) {
	return _BaseContentType.Contract.CANEDIT(&_BaseContentType.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContentType *BaseContentTypeSession) CANSEE() (uint8, error) {
	return _BaseContentType.Contract.CANSEE(&_BaseContentType.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCallerSession) CANSEE() (uint8, error) {
	return _BaseContentType.Contract.CANSEE(&_BaseContentType.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) CanCommit() (bool, error) {
	return _BaseContentType.Contract.CanCommit(&_BaseContentType.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) CanCommit() (bool, error) {
	return _BaseContentType.Contract.CanCommit(&_BaseContentType.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) CanConfirm() (bool, error) {
	return _BaseContentType.Contract.CanConfirm(&_BaseContentType.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) CanConfirm() (bool, error) {
	return _BaseContentType.Contract.CanConfirm(&_BaseContentType.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) CanEdit() (bool, error) {
	return _BaseContentType.Contract.CanEdit(&_BaseContentType.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) CanEdit() (bool, error) {
	return _BaseContentType.Contract.CanEdit(&_BaseContentType.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) CommitPending() (bool, error) {
	return _BaseContentType.Contract.CommitPending(&_BaseContentType.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) CommitPending() (bool, error) {
	return _BaseContentType.Contract.CommitPending(&_BaseContentType.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentType *BaseContentTypeCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentType *BaseContentTypeSession) ContentSpace() (common.Address, error) {
	return _BaseContentType.Contract.ContentSpace(&_BaseContentType.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentType *BaseContentTypeCallerSession) ContentSpace() (common.Address, error) {
	return _BaseContentType.Contract.ContentSpace(&_BaseContentType.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentType *BaseContentTypeCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentType *BaseContentTypeSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContentType.Contract.CountVersionHashes(&_BaseContentType.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentType *BaseContentTypeCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContentType.Contract.CountVersionHashes(&_BaseContentType.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentType *BaseContentTypeCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentType *BaseContentTypeSession) Creator() (common.Address, error) {
	return _BaseContentType.Contract.Creator(&_BaseContentType.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentType *BaseContentTypeCallerSession) Creator() (common.Address, error) {
	return _BaseContentType.Contract.Creator(&_BaseContentType.CallOpts)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseContentType.Contract.HasAccess(&_BaseContentType.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseContentType.Contract.HasAccess(&_BaseContentType.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseContentType.Contract.HasEditorRight(&_BaseContentType.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseContentType.Contract.HasEditorRight(&_BaseContentType.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContentType *BaseContentTypeSession) IndexCategory() (uint8, error) {
	return _BaseContentType.Contract.IndexCategory(&_BaseContentType.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCallerSession) IndexCategory() (uint8, error) {
	return _BaseContentType.Contract.IndexCategory(&_BaseContentType.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentType *BaseContentTypeCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentType *BaseContentTypeSession) ObjectHash() (string, error) {
	return _BaseContentType.Contract.ObjectHash(&_BaseContentType.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentType *BaseContentTypeCallerSession) ObjectHash() (string, error) {
	return _BaseContentType.Contract.ObjectHash(&_BaseContentType.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContentType *BaseContentTypeCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContentType *BaseContentTypeSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseContentType.Contract.ObjectTimestamp(&_BaseContentType.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContentType *BaseContentTypeCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseContentType.Contract.ObjectTimestamp(&_BaseContentType.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentType *BaseContentTypeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentType *BaseContentTypeSession) Owner() (common.Address, error) {
	return _BaseContentType.Contract.Owner(&_BaseContentType.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentType *BaseContentTypeCallerSession) Owner() (common.Address, error) {
	return _BaseContentType.Contract.Owner(&_BaseContentType.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentType *BaseContentTypeCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentType *BaseContentTypeSession) ParentAddress() (common.Address, error) {
	return _BaseContentType.Contract.ParentAddress(&_BaseContentType.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentType *BaseContentTypeCallerSession) ParentAddress() (common.Address, error) {
	return _BaseContentType.Contract.ParentAddress(&_BaseContentType.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentType *BaseContentTypeCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentType *BaseContentTypeSession) PendingHash() (string, error) {
	return _BaseContentType.Contract.PendingHash(&_BaseContentType.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentType *BaseContentTypeCallerSession) PendingHash() (string, error) {
	return _BaseContentType.Contract.PendingHash(&_BaseContentType.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeSession) Version() ([32]byte, error) {
	return _BaseContentType.Contract.Version(&_BaseContentType.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeCallerSession) Version() ([32]byte, error) {
	return _BaseContentType.Contract.Version(&_BaseContentType.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeSession) VersionAPI() ([32]byte, error) {
	return _BaseContentType.Contract.VersionAPI(&_BaseContentType.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseContentType.Contract.VersionAPI(&_BaseContentType.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentType *BaseContentTypeCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentType *BaseContentTypeSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContentType.Contract.VersionHashes(&_BaseContentType.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentType *BaseContentTypeCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContentType.Contract.VersionHashes(&_BaseContentType.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentType *BaseContentTypeCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentType *BaseContentTypeSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContentType.Contract.VersionTimestamp(&_BaseContentType.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentType *BaseContentTypeCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContentType.Contract.VersionTimestamp(&_BaseContentType.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContentType *BaseContentTypeSession) Visibility() (uint8, error) {
	return _BaseContentType.Contract.Visibility(&_BaseContentType.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCallerSession) Visibility() (uint8, error) {
	return _BaseContentType.Contract.Visibility(&_BaseContentType.CallOpts)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseContentType *BaseContentTypeTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseContentType *BaseContentTypeSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.AccessRequestV3(&_BaseContentType.TransactOpts, arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseContentType *BaseContentTypeTransactorSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.AccessRequestV3(&_BaseContentType.TransactOpts, arg0, arg1)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentType *BaseContentTypeTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentType *BaseContentTypeSession) ClearPending() (*types.Transaction, error) {
	return _BaseContentType.Contract.ClearPending(&_BaseContentType.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentType *BaseContentTypeTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseContentType.Contract.ClearPending(&_BaseContentType.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentType *BaseContentTypeTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentType *BaseContentTypeSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContentType.Contract.Commit(&_BaseContentType.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContentType.Contract.Commit(&_BaseContentType.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentType *BaseContentTypeTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentType *BaseContentTypeSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContentType.Contract.ConfirmCommit(&_BaseContentType.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentType *BaseContentTypeTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContentType.Contract.ConfirmCommit(&_BaseContentType.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentType *BaseContentTypeTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentType *BaseContentTypeSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContentType.Contract.DeleteVersion(&_BaseContentType.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentType *BaseContentTypeTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContentType.Contract.DeleteVersion(&_BaseContentType.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentType *BaseContentTypeTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentType *BaseContentTypeSession) Kill() (*types.Transaction, error) {
	return _BaseContentType.Contract.Kill(&_BaseContentType.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentType *BaseContentTypeTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseContentType.Contract.Kill(&_BaseContentType.TransactOpts)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetGroupRights(&_BaseContentType.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetGroupRights(&_BaseContentType.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetRights(&_BaseContentType.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetRights(&_BaseContentType.TransactOpts, stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContentType *BaseContentTypeTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContentType *BaseContentTypeSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetVisibility(&_BaseContentType.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetVisibility(&_BaseContentType.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentType *BaseContentTypeTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentType *BaseContentTypeSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.TransferCreatorship(&_BaseContentType.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.TransferCreatorship(&_BaseContentType.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentType *BaseContentTypeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentType *BaseContentTypeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.TransferOwnership(&_BaseContentType.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.TransferOwnership(&_BaseContentType.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentType *BaseContentTypeTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentType *BaseContentTypeSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContentType.Contract.UpdateRequest(&_BaseContentType.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentType *BaseContentTypeTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContentType.Contract.UpdateRequest(&_BaseContentType.TransactOpts)
}

// BaseContentTypeAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseContentType contract.
type BaseContentTypeAccessRequestV3Iterator struct {
	Event *BaseContentTypeAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeAccessRequestV3 represents a AccessRequestV3 event raised by the BaseContentType contract.
type BaseContentTypeAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentType *BaseContentTypeFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseContentTypeAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeAccessRequestV3Iterator{contract: _BaseContentType.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentType *BaseContentTypeFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseContentTypeAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeAccessRequestV3)
				if err := _BaseContentType.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentType *BaseContentTypeFilterer) ParseAccessRequestV3(log types.Log) (*BaseContentTypeAccessRequestV3, error) {
	event := new(BaseContentTypeAccessRequestV3)
	if err := _BaseContentType.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContentType contract.
type BaseContentTypeCommitPendingIterator struct {
	Event *BaseContentTypeCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeCommitPending represents a CommitPending event raised by the BaseContentType contract.
type BaseContentTypeCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentTypeCommitPendingIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeCommitPendingIterator{contract: _BaseContentType.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentTypeCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeCommitPending)
				if err := _BaseContentType.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseCommitPending(log types.Log) (*BaseContentTypeCommitPending, error) {
	event := new(BaseContentTypeCommitPending)
	if err := _BaseContentType.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContentType contract.
type BaseContentTypeUpdateRequestIterator struct {
	Event *BaseContentTypeUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeUpdateRequest represents a UpdateRequest event raised by the BaseContentType contract.
type BaseContentTypeUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentTypeUpdateRequestIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeUpdateRequestIterator{contract: _BaseContentType.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentTypeUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeUpdateRequest)
				if err := _BaseContentType.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseUpdateRequest(log types.Log) (*BaseContentTypeUpdateRequest, error) {
	event := new(BaseContentTypeUpdateRequest)
	if err := _BaseContentType.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContentType contract.
type BaseContentTypeVersionConfirmIterator struct {
	Event *BaseContentTypeVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeVersionConfirm represents a VersionConfirm event raised by the BaseContentType contract.
type BaseContentTypeVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentTypeVersionConfirmIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeVersionConfirmIterator{contract: _BaseContentType.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentTypeVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeVersionConfirm)
				if err := _BaseContentType.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseVersionConfirm(log types.Log) (*BaseContentTypeVersionConfirm, error) {
	event := new(BaseContentTypeVersionConfirm)
	if err := _BaseContentType.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContentType contract.
type BaseContentTypeVersionDeleteIterator struct {
	Event *BaseContentTypeVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeVersionDelete represents a VersionDelete event raised by the BaseContentType contract.
type BaseContentTypeVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentTypeVersionDeleteIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeVersionDeleteIterator{contract: _BaseContentType.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentTypeVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeVersionDelete)
				if err := _BaseContentType.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) ParseVersionDelete(log types.Log) (*BaseContentTypeVersionDelete, error) {
	event := new(BaseContentTypeVersionDelete)
	if err := _BaseContentType.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseContentType contract.
type BaseContentTypeVisibilityChangedIterator struct {
	Event *BaseContentTypeVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeVisibilityChanged represents a VisibilityChanged event raised by the BaseContentType contract.
type BaseContentTypeVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentType *BaseContentTypeFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseContentTypeVisibilityChangedIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeVisibilityChangedIterator{contract: _BaseContentType.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentType *BaseContentTypeFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseContentTypeVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeVisibilityChanged)
				if err := _BaseContentType.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentType *BaseContentTypeFilterer) ParseVisibilityChanged(log types.Log) (*BaseContentTypeVisibilityChanged, error) {
	event := new(BaseContentTypeVisibilityChanged)
	if err := _BaseContentType.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseGroupFactoryABI is the input ABI used to generate the binding from.
const BaseGroupFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_spaceAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseGroupFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseGroupFactoryFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"575185ed": "createGroup()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// BaseGroupFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseGroupFactoryBin = ""

// DeployBaseGroupFactory deploys a new Ethereum contract, binding an instance of BaseGroupFactory to it.
func DeployBaseGroupFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _spaceAddr common.Address) (common.Address, *types.Transaction, *BaseGroupFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseGroupFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseGroupFactoryBin), backend, _spaceAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseGroupFactory{BaseGroupFactoryCaller: BaseGroupFactoryCaller{contract: contract}, BaseGroupFactoryTransactor: BaseGroupFactoryTransactor{contract: contract}, BaseGroupFactoryFilterer: BaseGroupFactoryFilterer{contract: contract}}, nil
}

// BaseGroupFactory is an auto generated Go binding around an Ethereum contract.
type BaseGroupFactory struct {
	BaseGroupFactoryCaller     // Read-only binding to the contract
	BaseGroupFactoryTransactor // Write-only binding to the contract
	BaseGroupFactoryFilterer   // Log filterer for contract events
}

// BaseGroupFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseGroupFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseGroupFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseGroupFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseGroupFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseGroupFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseGroupFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseGroupFactorySession struct {
	Contract     *BaseGroupFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseGroupFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseGroupFactoryCallerSession struct {
	Contract *BaseGroupFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// BaseGroupFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseGroupFactoryTransactorSession struct {
	Contract     *BaseGroupFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// BaseGroupFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseGroupFactoryRaw struct {
	Contract *BaseGroupFactory // Generic contract binding to access the raw methods on
}

// BaseGroupFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseGroupFactoryCallerRaw struct {
	Contract *BaseGroupFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseGroupFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseGroupFactoryTransactorRaw struct {
	Contract *BaseGroupFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseGroupFactory creates a new instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactory(address common.Address, backend bind.ContractBackend) (*BaseGroupFactory, error) {
	contract, err := bindBaseGroupFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactory{BaseGroupFactoryCaller: BaseGroupFactoryCaller{contract: contract}, BaseGroupFactoryTransactor: BaseGroupFactoryTransactor{contract: contract}, BaseGroupFactoryFilterer: BaseGroupFactoryFilterer{contract: contract}}, nil
}

// NewBaseGroupFactoryCaller creates a new read-only instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseGroupFactoryCaller, error) {
	contract, err := bindBaseGroupFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryCaller{contract: contract}, nil
}

// NewBaseGroupFactoryTransactor creates a new write-only instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseGroupFactoryTransactor, error) {
	contract, err := bindBaseGroupFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryTransactor{contract: contract}, nil
}

// NewBaseGroupFactoryFilterer creates a new log filterer instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseGroupFactoryFilterer, error) {
	contract, err := bindBaseGroupFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryFilterer{contract: contract}, nil
}

// bindBaseGroupFactory binds a generic wrapper to an already deployed contract.
func bindBaseGroupFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseGroupFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseGroupFactory *BaseGroupFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseGroupFactory.Contract.BaseGroupFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseGroupFactory *BaseGroupFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.BaseGroupFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseGroupFactory *BaseGroupFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.BaseGroupFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseGroupFactory *BaseGroupFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseGroupFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseGroupFactory *BaseGroupFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseGroupFactory *BaseGroupFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseGroupFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactorySession) ContentSpace() (common.Address, error) {
	return _BaseGroupFactory.Contract.ContentSpace(&_BaseGroupFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseGroupFactory.Contract.ContentSpace(&_BaseGroupFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseGroupFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactorySession) Creator() (common.Address, error) {
	return _BaseGroupFactory.Contract.Creator(&_BaseGroupFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseGroupFactory.Contract.Creator(&_BaseGroupFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseGroupFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactorySession) Owner() (common.Address, error) {
	return _BaseGroupFactory.Contract.Owner(&_BaseGroupFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseGroupFactory.Contract.Owner(&_BaseGroupFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseGroupFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactorySession) Version() ([32]byte, error) {
	return _BaseGroupFactory.Contract.Version(&_BaseGroupFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseGroupFactory.Contract.Version(&_BaseGroupFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseGroupFactory.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactorySession) VersionAPI() ([32]byte, error) {
	return _BaseGroupFactory.Contract.VersionAPI(&_BaseGroupFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactoryCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseGroupFactory.Contract.VersionAPI(&_BaseGroupFactory.CallOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseGroupFactory *BaseGroupFactoryTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "createGroup")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseGroupFactory *BaseGroupFactorySession) CreateGroup() (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.CreateGroup(&_BaseGroupFactory.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseGroupFactory *BaseGroupFactoryTransactorSession) CreateGroup() (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.CreateGroup(&_BaseGroupFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseGroupFactory *BaseGroupFactorySession) Kill() (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.Kill(&_BaseGroupFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.Kill(&_BaseGroupFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseGroupFactory *BaseGroupFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.TransferCreatorship(&_BaseGroupFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.TransferCreatorship(&_BaseGroupFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseGroupFactory *BaseGroupFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.TransferOwnership(&_BaseGroupFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.TransferOwnership(&_BaseGroupFactory.TransactOpts, newOwner)
}

// BaseLibraryABI is the input ABI used to generate the binding from.
const BaseLibraryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"updateAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approvalRequestsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeReviewerGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addAccessorGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reviewerGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributorGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accessorGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeContributorGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"submitApprovalRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPendingApprovalRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addContributorGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_contract\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"approveContent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contentAddr\",\"type\":\"address\"}],\"name\":\"deleteContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvalRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reviewerGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addReviewerGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessorGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeAccessorGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"},{\"name\":\"_content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"content_type\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"}],\"name\":\"ContentObjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"}],\"name\":\"ContentObjectDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ContributorGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ContributorGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ReviewerGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ReviewerGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"AccessorGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"AccessorGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operationCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"UnauthorizedOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"ApproveContentRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"ApproveContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addressKms\",\"type\":\"address\"}],\"name\":\"UpdateKmsAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// BaseLibraryFuncSigs maps the 4-byte function signature to its string representation.
var BaseLibraryFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"2c11f392": "accessorGroups(uint256)",
	"e5538fd2": "accessorGroupsLength()",
	"1d0f4351": "addAccessorGroup(address)",
	"0f58a786": "addContentType(address,address)",
	"679a9a3c": "addContributorGroup(address)",
	"dc3c29c0": "addReviewerGroup(address)",
	"32eaf21b": "addressKMS()",
	"8cb13c2e": "approvalRequests(uint256)",
	"16308394": "approvalRequestsLength()",
	"87e86b2c": "approveContent(address,bool,string)",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"0eaec2c5": "canContribute(address)",
	"81beeb64": "canEdit()",
	"cbcd4461": "canPublish()",
	"9b55f901": "canPublish(address)",
	"29d00219": "canReview(address)",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"1cdbee5a": "contentTypeContracts(address)",
	"991a3a7c": "contentTypes(uint256)",
	"c65bcbe2": "contentTypesLength()",
	"2393553b": "contributorGroups(uint256)",
	"470750bb": "contributorGroupsLength()",
	"331b86c0": "countVersionHashes()",
	"1e35d8fa": "createContent(address)",
	"02d05d3f": "creator()",
	"87fcd0b8": "deleteContent(address)",
	"e1a70717": "deleteVersion(string)",
	"1f2caaec": "findTypeByHash(bytes32)",
	"ac55c906": "getMeta(bytes)",
	"63dab9d4": "getPendingApprovalRequest(uint256)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"6380501f": "indexCategory()",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"2cf99422": "publish(address)",
	"e542b7cb": "putMeta(bytes,bytes)",
	"e8de515f": "removeAccessorGroup(address)",
	"fd089196": "removeContentType(address)",
	"386493e0": "removeContributorGroup(address)",
	"1b969895": "removeReviewerGroup(address)",
	"3dd71d99": "requiresReview()",
	"952e464b": "reviewerGroups(uint256)",
	"21770a84": "reviewerGroupsLength()",
	"c9e8e72d": "setAddressKMS(address)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"aa024e8b": "setVisibility(uint8)",
	"49102e61": "submitApprovalRequest()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"011e01a5": "updateAddressKMS(address)",
	"c287e0ed": "updateRequest()",
	"29dedde5": "validType(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
	"9cb121ba": "whitelistedType(address)",
}

// BaseLibraryBin is the compiled bytecode used for deploying new contracts.
var BaseLibraryBin = ""

// DeployBaseLibrary deploys a new Ethereum contract, binding an instance of BaseLibrary to it.
func DeployBaseLibrary(auth *bind.TransactOpts, backend bind.ContractBackend, address_KMS common.Address, _content_space common.Address) (common.Address, *types.Transaction, *BaseLibrary, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseLibraryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseLibraryBin), backend, address_KMS, _content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseLibrary{BaseLibraryCaller: BaseLibraryCaller{contract: contract}, BaseLibraryTransactor: BaseLibraryTransactor{contract: contract}, BaseLibraryFilterer: BaseLibraryFilterer{contract: contract}}, nil
}

// BaseLibrary is an auto generated Go binding around an Ethereum contract.
type BaseLibrary struct {
	BaseLibraryCaller     // Read-only binding to the contract
	BaseLibraryTransactor // Write-only binding to the contract
	BaseLibraryFilterer   // Log filterer for contract events
}

// BaseLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseLibrarySession struct {
	Contract     *BaseLibrary      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseLibraryCallerSession struct {
	Contract *BaseLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// BaseLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseLibraryTransactorSession struct {
	Contract     *BaseLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// BaseLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseLibraryRaw struct {
	Contract *BaseLibrary // Generic contract binding to access the raw methods on
}

// BaseLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseLibraryCallerRaw struct {
	Contract *BaseLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseLibraryTransactorRaw struct {
	Contract *BaseLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseLibrary creates a new instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibrary(address common.Address, backend bind.ContractBackend) (*BaseLibrary, error) {
	contract, err := bindBaseLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseLibrary{BaseLibraryCaller: BaseLibraryCaller{contract: contract}, BaseLibraryTransactor: BaseLibraryTransactor{contract: contract}, BaseLibraryFilterer: BaseLibraryFilterer{contract: contract}}, nil
}

// NewBaseLibraryCaller creates a new read-only instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryCaller(address common.Address, caller bind.ContractCaller) (*BaseLibraryCaller, error) {
	contract, err := bindBaseLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryCaller{contract: contract}, nil
}

// NewBaseLibraryTransactor creates a new write-only instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseLibraryTransactor, error) {
	contract, err := bindBaseLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryTransactor{contract: contract}, nil
}

// NewBaseLibraryFilterer creates a new log filterer instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseLibraryFilterer, error) {
	contract, err := bindBaseLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFilterer{contract: contract}, nil
}

// bindBaseLibrary binds a generic wrapper to an already deployed contract.
func bindBaseLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseLibrary *BaseLibraryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseLibrary.Contract.BaseLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseLibrary *BaseLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.Contract.BaseLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseLibrary *BaseLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseLibrary.Contract.BaseLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseLibrary *BaseLibraryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseLibrary *BaseLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseLibrary *BaseLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseLibrary.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseLibrary *BaseLibrarySession) CANACCESS() (uint8, error) {
	return _BaseLibrary.Contract.CANACCESS(&_BaseLibrary.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCallerSession) CANACCESS() (uint8, error) {
	return _BaseLibrary.Contract.CANACCESS(&_BaseLibrary.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseLibrary *BaseLibrarySession) CANEDIT() (uint8, error) {
	return _BaseLibrary.Contract.CANEDIT(&_BaseLibrary.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCallerSession) CANEDIT() (uint8, error) {
	return _BaseLibrary.Contract.CANEDIT(&_BaseLibrary.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseLibrary *BaseLibrarySession) CANSEE() (uint8, error) {
	return _BaseLibrary.Contract.CANSEE(&_BaseLibrary.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCallerSession) CANSEE() (uint8, error) {
	return _BaseLibrary.Contract.CANSEE(&_BaseLibrary.CallOpts)
}

// AccessorGroups is a free data retrieval call binding the contract method 0x2c11f392.
//
// Solidity: function accessorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) AccessorGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "accessorGroups", arg0)
	return *ret0, err
}

// AccessorGroups is a free data retrieval call binding the contract method 0x2c11f392.
//
// Solidity: function accessorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) AccessorGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.AccessorGroups(&_BaseLibrary.CallOpts, arg0)
}

// AccessorGroups is a free data retrieval call binding the contract method 0x2c11f392.
//
// Solidity: function accessorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) AccessorGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.AccessorGroups(&_BaseLibrary.CallOpts, arg0)
}

// AccessorGroupsLength is a free data retrieval call binding the contract method 0xe5538fd2.
//
// Solidity: function accessorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) AccessorGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "accessorGroupsLength")
	return *ret0, err
}

// AccessorGroupsLength is a free data retrieval call binding the contract method 0xe5538fd2.
//
// Solidity: function accessorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) AccessorGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.AccessorGroupsLength(&_BaseLibrary.CallOpts)
}

// AccessorGroupsLength is a free data retrieval call binding the contract method 0xe5538fd2.
//
// Solidity: function accessorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) AccessorGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.AccessorGroupsLength(&_BaseLibrary.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) AddressKMS() (common.Address, error) {
	return _BaseLibrary.Contract.AddressKMS(&_BaseLibrary.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) AddressKMS() (common.Address, error) {
	return _BaseLibrary.Contract.AddressKMS(&_BaseLibrary.CallOpts)
}

// ApprovalRequests is a free data retrieval call binding the contract method 0x8cb13c2e.
//
// Solidity: function approvalRequests(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ApprovalRequests(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "approvalRequests", arg0)
	return *ret0, err
}

// ApprovalRequests is a free data retrieval call binding the contract method 0x8cb13c2e.
//
// Solidity: function approvalRequests(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ApprovalRequests(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ApprovalRequests(&_BaseLibrary.CallOpts, arg0)
}

// ApprovalRequests is a free data retrieval call binding the contract method 0x8cb13c2e.
//
// Solidity: function approvalRequests(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ApprovalRequests(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ApprovalRequests(&_BaseLibrary.CallOpts, arg0)
}

// ApprovalRequestsLength is a free data retrieval call binding the contract method 0x16308394.
//
// Solidity: function approvalRequestsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ApprovalRequestsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "approvalRequestsLength")
	return *ret0, err
}

// ApprovalRequestsLength is a free data retrieval call binding the contract method 0x16308394.
//
// Solidity: function approvalRequestsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) ApprovalRequestsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ApprovalRequestsLength(&_BaseLibrary.CallOpts)
}

// ApprovalRequestsLength is a free data retrieval call binding the contract method 0x16308394.
//
// Solidity: function approvalRequestsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) ApprovalRequestsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ApprovalRequestsLength(&_BaseLibrary.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanCommit() (bool, error) {
	return _BaseLibrary.Contract.CanCommit(&_BaseLibrary.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanCommit() (bool, error) {
	return _BaseLibrary.Contract.CanCommit(&_BaseLibrary.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanConfirm() (bool, error) {
	return _BaseLibrary.Contract.CanConfirm(&_BaseLibrary.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanConfirm() (bool, error) {
	return _BaseLibrary.Contract.CanConfirm(&_BaseLibrary.CallOpts)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canContribute", _candidate)
	return *ret0, err
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanContribute(&_BaseLibrary.CallOpts, _candidate)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanContribute(&_BaseLibrary.CallOpts, _candidate)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanEdit() (bool, error) {
	return _BaseLibrary.Contract.CanEdit(&_BaseLibrary.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanEdit() (bool, error) {
	return _BaseLibrary.Contract.CanEdit(&_BaseLibrary.CallOpts)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canPublish", _candidate)
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanPublish(&_BaseLibrary.CallOpts, _candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanPublish(&_BaseLibrary.CallOpts, _candidate)
}

// CanPublish0 is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanPublish0(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canPublish0")
	return *ret0, err
}

// CanPublish0 is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanPublish0() (bool, error) {
	return _BaseLibrary.Contract.CanPublish0(&_BaseLibrary.CallOpts)
}

// CanPublish0 is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanPublish0() (bool, error) {
	return _BaseLibrary.Contract.CanPublish0(&_BaseLibrary.CallOpts)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanReview(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canReview", _candidate)
	return *ret0, err
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanReview(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanReview(&_BaseLibrary.CallOpts, _candidate)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanReview(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanReview(&_BaseLibrary.CallOpts, _candidate)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CommitPending() (bool, error) {
	return _BaseLibrary.Contract.CommitPending(&_BaseLibrary.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CommitPending() (bool, error) {
	return _BaseLibrary.Contract.CommitPending(&_BaseLibrary.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ContentSpace() (common.Address, error) {
	return _BaseLibrary.Contract.ContentSpace(&_BaseLibrary.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseLibrary.Contract.ContentSpace(&_BaseLibrary.CallOpts)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contentTypeContracts", arg0)
	return *ret0, err
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseLibrary.Contract.ContentTypeContracts(&_BaseLibrary.CallOpts, arg0)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseLibrary.Contract.ContentTypeContracts(&_BaseLibrary.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contentTypes", arg0)
	return *ret0, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ContentTypes(&_BaseLibrary.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ContentTypes(&_BaseLibrary.CallOpts, arg0)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contentTypesLength")
	return *ret0, err
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) ContentTypesLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ContentTypesLength(&_BaseLibrary.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) ContentTypesLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ContentTypesLength(&_BaseLibrary.CallOpts)
}

// ContributorGroups is a free data retrieval call binding the contract method 0x2393553b.
//
// Solidity: function contributorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContributorGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contributorGroups", arg0)
	return *ret0, err
}

// ContributorGroups is a free data retrieval call binding the contract method 0x2393553b.
//
// Solidity: function contributorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ContributorGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ContributorGroups(&_BaseLibrary.CallOpts, arg0)
}

// ContributorGroups is a free data retrieval call binding the contract method 0x2393553b.
//
// Solidity: function contributorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ContributorGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ContributorGroups(&_BaseLibrary.CallOpts, arg0)
}

// ContributorGroupsLength is a free data retrieval call binding the contract method 0x470750bb.
//
// Solidity: function contributorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ContributorGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contributorGroupsLength")
	return *ret0, err
}

// ContributorGroupsLength is a free data retrieval call binding the contract method 0x470750bb.
//
// Solidity: function contributorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) ContributorGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ContributorGroupsLength(&_BaseLibrary.CallOpts)
}

// ContributorGroupsLength is a free data retrieval call binding the contract method 0x470750bb.
//
// Solidity: function contributorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) ContributorGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ContributorGroupsLength(&_BaseLibrary.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) CountVersionHashes() (*big.Int, error) {
	return _BaseLibrary.Contract.CountVersionHashes(&_BaseLibrary.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseLibrary.Contract.CountVersionHashes(&_BaseLibrary.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) Creator() (common.Address, error) {
	return _BaseLibrary.Contract.Creator(&_BaseLibrary.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) Creator() (common.Address, error) {
	return _BaseLibrary.Contract.Creator(&_BaseLibrary.CallOpts)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "findTypeByHash", typeHash)
	return *ret0, err
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseLibrary.Contract.FindTypeByHash(&_BaseLibrary.CallOpts, typeHash)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseLibrary.Contract.FindTypeByHash(&_BaseLibrary.CallOpts, typeHash)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseLibrary *BaseLibraryCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseLibrary *BaseLibrarySession) GetMeta(key []byte) ([]byte, error) {
	return _BaseLibrary.Contract.GetMeta(&_BaseLibrary.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseLibrary *BaseLibraryCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseLibrary.Contract.GetMeta(&_BaseLibrary.CallOpts, key)
}

// GetPendingApprovalRequest is a free data retrieval call binding the contract method 0x63dab9d4.
//
// Solidity: function getPendingApprovalRequest(uint256 index) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) GetPendingApprovalRequest(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "getPendingApprovalRequest", index)
	return *ret0, err
}

// GetPendingApprovalRequest is a free data retrieval call binding the contract method 0x63dab9d4.
//
// Solidity: function getPendingApprovalRequest(uint256 index) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) GetPendingApprovalRequest(index *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.GetPendingApprovalRequest(&_BaseLibrary.CallOpts, index)
}

// GetPendingApprovalRequest is a free data retrieval call binding the contract method 0x63dab9d4.
//
// Solidity: function getPendingApprovalRequest(uint256 index) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) GetPendingApprovalRequest(index *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.GetPendingApprovalRequest(&_BaseLibrary.CallOpts, index)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.HasAccess(&_BaseLibrary.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.HasAccess(&_BaseLibrary.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.HasEditorRight(&_BaseLibrary.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.HasEditorRight(&_BaseLibrary.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseLibrary *BaseLibrarySession) IndexCategory() (uint8, error) {
	return _BaseLibrary.Contract.IndexCategory(&_BaseLibrary.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCallerSession) IndexCategory() (uint8, error) {
	return _BaseLibrary.Contract.IndexCategory(&_BaseLibrary.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.IsAdmin(&_BaseLibrary.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.IsAdmin(&_BaseLibrary.CallOpts, _candidate)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseLibrary *BaseLibraryCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseLibrary *BaseLibrarySession) ObjectHash() (string, error) {
	return _BaseLibrary.Contract.ObjectHash(&_BaseLibrary.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseLibrary *BaseLibraryCallerSession) ObjectHash() (string, error) {
	return _BaseLibrary.Contract.ObjectHash(&_BaseLibrary.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) ObjectTimestamp() (*big.Int, error) {
	return _BaseLibrary.Contract.ObjectTimestamp(&_BaseLibrary.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseLibrary.Contract.ObjectTimestamp(&_BaseLibrary.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) Owner() (common.Address, error) {
	return _BaseLibrary.Contract.Owner(&_BaseLibrary.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) Owner() (common.Address, error) {
	return _BaseLibrary.Contract.Owner(&_BaseLibrary.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ParentAddress() (common.Address, error) {
	return _BaseLibrary.Contract.ParentAddress(&_BaseLibrary.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ParentAddress() (common.Address, error) {
	return _BaseLibrary.Contract.ParentAddress(&_BaseLibrary.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseLibrary *BaseLibraryCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseLibrary *BaseLibrarySession) PendingHash() (string, error) {
	return _BaseLibrary.Contract.PendingHash(&_BaseLibrary.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseLibrary *BaseLibraryCallerSession) PendingHash() (string, error) {
	return _BaseLibrary.Contract.PendingHash(&_BaseLibrary.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "requiresReview")
	return *ret0, err
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) RequiresReview() (bool, error) {
	return _BaseLibrary.Contract.RequiresReview(&_BaseLibrary.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) RequiresReview() (bool, error) {
	return _BaseLibrary.Contract.RequiresReview(&_BaseLibrary.CallOpts)
}

// ReviewerGroups is a free data retrieval call binding the contract method 0x952e464b.
//
// Solidity: function reviewerGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ReviewerGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "reviewerGroups", arg0)
	return *ret0, err
}

// ReviewerGroups is a free data retrieval call binding the contract method 0x952e464b.
//
// Solidity: function reviewerGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ReviewerGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ReviewerGroups(&_BaseLibrary.CallOpts, arg0)
}

// ReviewerGroups is a free data retrieval call binding the contract method 0x952e464b.
//
// Solidity: function reviewerGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ReviewerGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ReviewerGroups(&_BaseLibrary.CallOpts, arg0)
}

// ReviewerGroupsLength is a free data retrieval call binding the contract method 0x21770a84.
//
// Solidity: function reviewerGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ReviewerGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "reviewerGroupsLength")
	return *ret0, err
}

// ReviewerGroupsLength is a free data retrieval call binding the contract method 0x21770a84.
//
// Solidity: function reviewerGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) ReviewerGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ReviewerGroupsLength(&_BaseLibrary.CallOpts)
}

// ReviewerGroupsLength is a free data retrieval call binding the contract method 0x21770a84.
//
// Solidity: function reviewerGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) ReviewerGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ReviewerGroupsLength(&_BaseLibrary.CallOpts)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "validType", content_type)
	return *ret0, err
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) ValidType(content_type common.Address) (bool, error) {
	return _BaseLibrary.Contract.ValidType(&_BaseLibrary.CallOpts, content_type)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseLibrary.Contract.ValidType(&_BaseLibrary.CallOpts, content_type)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibrary *BaseLibraryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibrary *BaseLibrarySession) Version() ([32]byte, error) {
	return _BaseLibrary.Contract.Version(&_BaseLibrary.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibrary *BaseLibraryCallerSession) Version() ([32]byte, error) {
	return _BaseLibrary.Contract.Version(&_BaseLibrary.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseLibrary *BaseLibraryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseLibrary *BaseLibrarySession) VersionAPI() ([32]byte, error) {
	return _BaseLibrary.Contract.VersionAPI(&_BaseLibrary.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseLibrary *BaseLibraryCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseLibrary.Contract.VersionAPI(&_BaseLibrary.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseLibrary *BaseLibraryCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseLibrary *BaseLibrarySession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseLibrary.Contract.VersionHashes(&_BaseLibrary.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseLibrary *BaseLibraryCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseLibrary.Contract.VersionHashes(&_BaseLibrary.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseLibrary.Contract.VersionTimestamp(&_BaseLibrary.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseLibrary.Contract.VersionTimestamp(&_BaseLibrary.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseLibrary *BaseLibrarySession) Visibility() (uint8, error) {
	return _BaseLibrary.Contract.Visibility(&_BaseLibrary.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCallerSession) Visibility() (uint8, error) {
	return _BaseLibrary.Contract.Visibility(&_BaseLibrary.CallOpts)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "whitelistedType", content_type)
	return *ret0, err
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseLibrary.Contract.WhitelistedType(&_BaseLibrary.CallOpts, content_type)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseLibrary.Contract.WhitelistedType(&_BaseLibrary.CallOpts, content_type)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseLibrary *BaseLibrarySession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AccessRequestV3(&_BaseLibrary.TransactOpts, arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AccessRequestV3(&_BaseLibrary.TransactOpts, arg0, arg1)
}

// AddAccessorGroup is a paid mutator transaction binding the contract method 0x1d0f4351.
//
// Solidity: function addAccessorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddAccessorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addAccessorGroup", group)
}

// AddAccessorGroup is a paid mutator transaction binding the contract method 0x1d0f4351.
//
// Solidity: function addAccessorGroup(address group) returns()
func (_BaseLibrary *BaseLibrarySession) AddAccessorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddAccessorGroup(&_BaseLibrary.TransactOpts, group)
}

// AddAccessorGroup is a paid mutator transaction binding the contract method 0x1d0f4351.
//
// Solidity: function addAccessorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) AddAccessorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddAccessorGroup(&_BaseLibrary.TransactOpts, group)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseLibrary *BaseLibrarySession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddContentType(&_BaseLibrary.TransactOpts, content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddContentType(&_BaseLibrary.TransactOpts, content_type, content_contract)
}

// AddContributorGroup is a paid mutator transaction binding the contract method 0x679a9a3c.
//
// Solidity: function addContributorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddContributorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addContributorGroup", group)
}

// AddContributorGroup is a paid mutator transaction binding the contract method 0x679a9a3c.
//
// Solidity: function addContributorGroup(address group) returns()
func (_BaseLibrary *BaseLibrarySession) AddContributorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddContributorGroup(&_BaseLibrary.TransactOpts, group)
}

// AddContributorGroup is a paid mutator transaction binding the contract method 0x679a9a3c.
//
// Solidity: function addContributorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) AddContributorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddContributorGroup(&_BaseLibrary.TransactOpts, group)
}

// AddReviewerGroup is a paid mutator transaction binding the contract method 0xdc3c29c0.
//
// Solidity: function addReviewerGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddReviewerGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addReviewerGroup", group)
}

// AddReviewerGroup is a paid mutator transaction binding the contract method 0xdc3c29c0.
//
// Solidity: function addReviewerGroup(address group) returns()
func (_BaseLibrary *BaseLibrarySession) AddReviewerGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddReviewerGroup(&_BaseLibrary.TransactOpts, group)
}

// AddReviewerGroup is a paid mutator transaction binding the contract method 0xdc3c29c0.
//
// Solidity: function addReviewerGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) AddReviewerGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddReviewerGroup(&_BaseLibrary.TransactOpts, group)
}

// ApproveContent is a paid mutator transaction binding the contract method 0x87e86b2c.
//
// Solidity: function approveContent(address content_contract, bool approved, string note) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) ApproveContent(opts *bind.TransactOpts, content_contract common.Address, approved bool, note string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "approveContent", content_contract, approved, note)
}

// ApproveContent is a paid mutator transaction binding the contract method 0x87e86b2c.
//
// Solidity: function approveContent(address content_contract, bool approved, string note) returns(bool)
func (_BaseLibrary *BaseLibrarySession) ApproveContent(content_contract common.Address, approved bool, note string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.ApproveContent(&_BaseLibrary.TransactOpts, content_contract, approved, note)
}

// ApproveContent is a paid mutator transaction binding the contract method 0x87e86b2c.
//
// Solidity: function approveContent(address content_contract, bool approved, string note) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) ApproveContent(content_contract common.Address, approved bool, note string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.ApproveContent(&_BaseLibrary.TransactOpts, content_contract, approved, note)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseLibrary *BaseLibraryTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseLibrary *BaseLibrarySession) ClearPending() (*types.Transaction, error) {
	return _BaseLibrary.Contract.ClearPending(&_BaseLibrary.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseLibrary *BaseLibraryTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseLibrary.Contract.ClearPending(&_BaseLibrary.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseLibrary *BaseLibraryTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseLibrary *BaseLibrarySession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.Commit(&_BaseLibrary.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.Commit(&_BaseLibrary.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseLibrary *BaseLibrarySession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseLibrary.Contract.ConfirmCommit(&_BaseLibrary.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseLibrary.Contract.ConfirmCommit(&_BaseLibrary.TransactOpts)
}

// CreateContent is a paid mutator transaction binding the contract method 0x1e35d8fa.
//
// Solidity: function createContent(address content_type) returns(address)
func (_BaseLibrary *BaseLibraryTransactor) CreateContent(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "createContent", content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0x1e35d8fa.
//
// Solidity: function createContent(address content_type) returns(address)
func (_BaseLibrary *BaseLibrarySession) CreateContent(content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.CreateContent(&_BaseLibrary.TransactOpts, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0x1e35d8fa.
//
// Solidity: function createContent(address content_type) returns(address)
func (_BaseLibrary *BaseLibraryTransactorSession) CreateContent(content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.CreateContent(&_BaseLibrary.TransactOpts, content_type)
}

// DeleteContent is a paid mutator transaction binding the contract method 0x87fcd0b8.
//
// Solidity: function deleteContent(address _contentAddr) returns()
func (_BaseLibrary *BaseLibraryTransactor) DeleteContent(opts *bind.TransactOpts, _contentAddr common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "deleteContent", _contentAddr)
}

// DeleteContent is a paid mutator transaction binding the contract method 0x87fcd0b8.
//
// Solidity: function deleteContent(address _contentAddr) returns()
func (_BaseLibrary *BaseLibrarySession) DeleteContent(_contentAddr common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.DeleteContent(&_BaseLibrary.TransactOpts, _contentAddr)
}

// DeleteContent is a paid mutator transaction binding the contract method 0x87fcd0b8.
//
// Solidity: function deleteContent(address _contentAddr) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) DeleteContent(_contentAddr common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.DeleteContent(&_BaseLibrary.TransactOpts, _contentAddr)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseLibrary *BaseLibraryTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseLibrary *BaseLibrarySession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.DeleteVersion(&_BaseLibrary.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseLibrary *BaseLibraryTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.DeleteVersion(&_BaseLibrary.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibrary *BaseLibraryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibrary *BaseLibrarySession) Kill() (*types.Transaction, error) {
	return _BaseLibrary.Contract.Kill(&_BaseLibrary.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibrary *BaseLibraryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseLibrary.Contract.Kill(&_BaseLibrary.TransactOpts)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "publish", contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseLibrary *BaseLibrarySession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.Publish(&_BaseLibrary.TransactOpts, contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.Publish(&_BaseLibrary.TransactOpts, contentObj)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseLibrary *BaseLibraryTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseLibrary *BaseLibrarySession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseLibrary.Contract.PutMeta(&_BaseLibrary.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseLibrary.Contract.PutMeta(&_BaseLibrary.TransactOpts, key, value)
}

// RemoveAccessorGroup is a paid mutator transaction binding the contract method 0xe8de515f.
//
// Solidity: function removeAccessorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveAccessorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeAccessorGroup", group)
}

// RemoveAccessorGroup is a paid mutator transaction binding the contract method 0xe8de515f.
//
// Solidity: function removeAccessorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibrarySession) RemoveAccessorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveAccessorGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveAccessorGroup is a paid mutator transaction binding the contract method 0xe8de515f.
//
// Solidity: function removeAccessorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) RemoveAccessorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveAccessorGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseLibrary *BaseLibrarySession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveContentType(&_BaseLibrary.TransactOpts, content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveContentType(&_BaseLibrary.TransactOpts, content_type)
}

// RemoveContributorGroup is a paid mutator transaction binding the contract method 0x386493e0.
//
// Solidity: function removeContributorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveContributorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeContributorGroup", group)
}

// RemoveContributorGroup is a paid mutator transaction binding the contract method 0x386493e0.
//
// Solidity: function removeContributorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibrarySession) RemoveContributorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveContributorGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveContributorGroup is a paid mutator transaction binding the contract method 0x386493e0.
//
// Solidity: function removeContributorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) RemoveContributorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveContributorGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveReviewerGroup is a paid mutator transaction binding the contract method 0x1b969895.
//
// Solidity: function removeReviewerGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveReviewerGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeReviewerGroup", group)
}

// RemoveReviewerGroup is a paid mutator transaction binding the contract method 0x1b969895.
//
// Solidity: function removeReviewerGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibrarySession) RemoveReviewerGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveReviewerGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveReviewerGroup is a paid mutator transaction binding the contract method 0x1b969895.
//
// Solidity: function removeReviewerGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) RemoveReviewerGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveReviewerGroup(&_BaseLibrary.TransactOpts, group)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibrarySession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetAddressKMS(&_BaseLibrary.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetAddressKMS(&_BaseLibrary.TransactOpts, address_KMS)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibrarySession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetGroupRights(&_BaseLibrary.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetGroupRights(&_BaseLibrary.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibrarySession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetRights(&_BaseLibrary.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetRights(&_BaseLibrary.TransactOpts, stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseLibrary *BaseLibrarySession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetVisibility(&_BaseLibrary.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetVisibility(&_BaseLibrary.TransactOpts, _visibility_code)
}

// SubmitApprovalRequest is a paid mutator transaction binding the contract method 0x49102e61.
//
// Solidity: function submitApprovalRequest() returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) SubmitApprovalRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "submitApprovalRequest")
}

// SubmitApprovalRequest is a paid mutator transaction binding the contract method 0x49102e61.
//
// Solidity: function submitApprovalRequest() returns(bool)
func (_BaseLibrary *BaseLibrarySession) SubmitApprovalRequest() (*types.Transaction, error) {
	return _BaseLibrary.Contract.SubmitApprovalRequest(&_BaseLibrary.TransactOpts)
}

// SubmitApprovalRequest is a paid mutator transaction binding the contract method 0x49102e61.
//
// Solidity: function submitApprovalRequest() returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) SubmitApprovalRequest() (*types.Transaction, error) {
	return _BaseLibrary.Contract.SubmitApprovalRequest(&_BaseLibrary.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibrary *BaseLibraryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibrary *BaseLibrarySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.TransferCreatorship(&_BaseLibrary.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.TransferCreatorship(&_BaseLibrary.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibrary *BaseLibraryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibrary *BaseLibrarySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.TransferOwnership(&_BaseLibrary.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.TransferOwnership(&_BaseLibrary.TransactOpts, newOwner)
}

// UpdateAddressKMS is a paid mutator transaction binding the contract method 0x011e01a5.
//
// Solidity: function updateAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactor) UpdateAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "updateAddressKMS", address_KMS)
}

// UpdateAddressKMS is a paid mutator transaction binding the contract method 0x011e01a5.
//
// Solidity: function updateAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibrarySession) UpdateAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.UpdateAddressKMS(&_BaseLibrary.TransactOpts, address_KMS)
}

// UpdateAddressKMS is a paid mutator transaction binding the contract method 0x011e01a5.
//
// Solidity: function updateAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) UpdateAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.UpdateAddressKMS(&_BaseLibrary.TransactOpts, address_KMS)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseLibrary *BaseLibraryTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseLibrary *BaseLibrarySession) UpdateRequest() (*types.Transaction, error) {
	return _BaseLibrary.Contract.UpdateRequest(&_BaseLibrary.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseLibrary *BaseLibraryTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseLibrary.Contract.UpdateRequest(&_BaseLibrary.TransactOpts)
}

// BaseLibraryAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseLibrary contract.
type BaseLibraryAccessRequestV3Iterator struct {
	Event *BaseLibraryAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessRequestV3 represents a AccessRequestV3 event raised by the BaseLibrary contract.
type BaseLibraryAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseLibraryAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessRequestV3Iterator{contract: _BaseLibrary.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessRequestV3)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessRequestV3(log types.Log) (*BaseLibraryAccessRequestV3, error) {
	event := new(BaseLibraryAccessRequestV3)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryAccessorGroupAddedIterator is returned from FilterAccessorGroupAdded and is used to iterate over the raw logs and unpacked data for AccessorGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupAddedIterator struct {
	Event *BaseLibraryAccessorGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessorGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessorGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessorGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessorGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessorGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessorGroupAdded represents a AccessorGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAccessorGroupAdded is a free log retrieval operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessorGroupAdded(opts *bind.FilterOpts) (*BaseLibraryAccessorGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessorGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessorGroupAddedIterator{contract: _BaseLibrary.contract, event: "AccessorGroupAdded", logs: logs, sub: sub}, nil
}

// WatchAccessorGroupAdded is a free log subscription operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessorGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessorGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessorGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessorGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessorGroupAdded is a log parse operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessorGroupAdded(log types.Log) (*BaseLibraryAccessorGroupAdded, error) {
	event := new(BaseLibraryAccessorGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryAccessorGroupRemovedIterator is returned from FilterAccessorGroupRemoved and is used to iterate over the raw logs and unpacked data for AccessorGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupRemovedIterator struct {
	Event *BaseLibraryAccessorGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessorGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessorGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessorGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessorGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessorGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessorGroupRemoved represents a AccessorGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAccessorGroupRemoved is a free log retrieval operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessorGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryAccessorGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessorGroupRemovedIterator{contract: _BaseLibrary.contract, event: "AccessorGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchAccessorGroupRemoved is a free log subscription operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessorGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessorGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessorGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessorGroupRemoved is a log parse operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessorGroupRemoved(log types.Log) (*BaseLibraryAccessorGroupRemoved, error) {
	event := new(BaseLibraryAccessorGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryApproveContentIterator is returned from FilterApproveContent and is used to iterate over the raw logs and unpacked data for ApproveContent events raised by the BaseLibrary contract.
type BaseLibraryApproveContentIterator struct {
	Event *BaseLibraryApproveContent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryApproveContentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryApproveContent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryApproveContent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryApproveContentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryApproveContentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryApproveContent represents a ApproveContent event raised by the BaseLibrary contract.
type BaseLibraryApproveContent struct {
	ContentAddress common.Address
	Approved       bool
	Note           string
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApproveContent is a free log retrieval operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) FilterApproveContent(opts *bind.FilterOpts) (*BaseLibraryApproveContentIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ApproveContent")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryApproveContentIterator{contract: _BaseLibrary.contract, event: "ApproveContent", logs: logs, sub: sub}, nil
}

// WatchApproveContent is a free log subscription operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) WatchApproveContent(opts *bind.WatchOpts, sink chan<- *BaseLibraryApproveContent) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ApproveContent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryApproveContent)
				if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveContent is a log parse operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) ParseApproveContent(log types.Log) (*BaseLibraryApproveContent, error) {
	event := new(BaseLibraryApproveContent)
	if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryApproveContentRequestIterator is returned from FilterApproveContentRequest and is used to iterate over the raw logs and unpacked data for ApproveContentRequest events raised by the BaseLibrary contract.
type BaseLibraryApproveContentRequestIterator struct {
	Event *BaseLibraryApproveContentRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryApproveContentRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryApproveContentRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryApproveContentRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryApproveContentRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryApproveContentRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryApproveContentRequest represents a ApproveContentRequest event raised by the BaseLibrary contract.
type BaseLibraryApproveContentRequest struct {
	ContentAddress common.Address
	Submitter      common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApproveContentRequest is a free log retrieval operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) FilterApproveContentRequest(opts *bind.FilterOpts) (*BaseLibraryApproveContentRequestIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ApproveContentRequest")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryApproveContentRequestIterator{contract: _BaseLibrary.contract, event: "ApproveContentRequest", logs: logs, sub: sub}, nil
}

// WatchApproveContentRequest is a free log subscription operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) WatchApproveContentRequest(opts *bind.WatchOpts, sink chan<- *BaseLibraryApproveContentRequest) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ApproveContentRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryApproveContentRequest)
				if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContentRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveContentRequest is a log parse operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) ParseApproveContentRequest(log types.Log) (*BaseLibraryApproveContentRequest, error) {
	event := new(BaseLibraryApproveContentRequest)
	if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContentRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseLibrary contract.
type BaseLibraryCommitPendingIterator struct {
	Event *BaseLibraryCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryCommitPending represents a CommitPending event raised by the BaseLibrary contract.
type BaseLibraryCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseLibraryCommitPendingIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryCommitPendingIterator{contract: _BaseLibrary.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseLibraryCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryCommitPending)
				if err := _BaseLibrary.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseCommitPending(log types.Log) (*BaseLibraryCommitPending, error) {
	event := new(BaseLibraryCommitPending)
	if err := _BaseLibrary.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContentObjectCreatedIterator is returned from FilterContentObjectCreated and is used to iterate over the raw logs and unpacked data for ContentObjectCreated events raised by the BaseLibrary contract.
type BaseLibraryContentObjectCreatedIterator struct {
	Event *BaseLibraryContentObjectCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentObjectCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentObjectCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentObjectCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentObjectCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentObjectCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentObjectCreated represents a ContentObjectCreated event raised by the BaseLibrary contract.
type BaseLibraryContentObjectCreated struct {
	ContentAddress common.Address
	ContentType    common.Address
	SpaceAddress   common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterContentObjectCreated is a free log retrieval operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentObjectCreated(opts *bind.FilterOpts) (*BaseLibraryContentObjectCreatedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentObjectCreated")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentObjectCreatedIterator{contract: _BaseLibrary.contract, event: "ContentObjectCreated", logs: logs, sub: sub}, nil
}

// WatchContentObjectCreated is a free log subscription operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentObjectCreated(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentObjectCreated) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentObjectCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentObjectCreated)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectCreated is a log parse operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentObjectCreated(log types.Log) (*BaseLibraryContentObjectCreated, error) {
	event := new(BaseLibraryContentObjectCreated)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContentObjectDeletedIterator is returned from FilterContentObjectDeleted and is used to iterate over the raw logs and unpacked data for ContentObjectDeleted events raised by the BaseLibrary contract.
type BaseLibraryContentObjectDeletedIterator struct {
	Event *BaseLibraryContentObjectDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentObjectDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentObjectDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentObjectDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentObjectDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentObjectDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentObjectDeleted represents a ContentObjectDeleted event raised by the BaseLibrary contract.
type BaseLibraryContentObjectDeleted struct {
	ContentAddress common.Address
	SpaceAddress   common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterContentObjectDeleted is a free log retrieval operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentObjectDeleted(opts *bind.FilterOpts) (*BaseLibraryContentObjectDeletedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentObjectDeleted")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentObjectDeletedIterator{contract: _BaseLibrary.contract, event: "ContentObjectDeleted", logs: logs, sub: sub}, nil
}

// WatchContentObjectDeleted is a free log subscription operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentObjectDeleted(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentObjectDeleted) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentObjectDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentObjectDeleted)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectDeleted is a log parse operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentObjectDeleted(log types.Log) (*BaseLibraryContentObjectDeleted, error) {
	event := new(BaseLibraryContentObjectDeleted)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectDeleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseLibrary contract.
type BaseLibraryContentTypeAddedIterator struct {
	Event *BaseLibraryContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentTypeAdded represents a ContentTypeAdded event raised by the BaseLibrary contract.
type BaseLibraryContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseLibraryContentTypeAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentTypeAddedIterator{contract: _BaseLibrary.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentTypeAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentTypeAdded(log types.Log) (*BaseLibraryContentTypeAdded, error) {
	event := new(BaseLibraryContentTypeAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseLibrary contract.
type BaseLibraryContentTypeRemovedIterator struct {
	Event *BaseLibraryContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseLibrary contract.
type BaseLibraryContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseLibraryContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentTypeRemovedIterator{contract: _BaseLibrary.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentTypeRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentTypeRemoved(log types.Log) (*BaseLibraryContentTypeRemoved, error) {
	event := new(BaseLibraryContentTypeRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContributorGroupAddedIterator is returned from FilterContributorGroupAdded and is used to iterate over the raw logs and unpacked data for ContributorGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryContributorGroupAddedIterator struct {
	Event *BaseLibraryContributorGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContributorGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContributorGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContributorGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContributorGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContributorGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContributorGroupAdded represents a ContributorGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryContributorGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterContributorGroupAdded is a free log retrieval operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterContributorGroupAdded(opts *bind.FilterOpts) (*BaseLibraryContributorGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContributorGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContributorGroupAddedIterator{contract: _BaseLibrary.contract, event: "ContributorGroupAdded", logs: logs, sub: sub}, nil
}

// WatchContributorGroupAdded is a free log subscription operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchContributorGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryContributorGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContributorGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContributorGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContributorGroupAdded is a log parse operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseContributorGroupAdded(log types.Log) (*BaseLibraryContributorGroupAdded, error) {
	event := new(BaseLibraryContributorGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContributorGroupRemovedIterator is returned from FilterContributorGroupRemoved and is used to iterate over the raw logs and unpacked data for ContributorGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryContributorGroupRemovedIterator struct {
	Event *BaseLibraryContributorGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContributorGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContributorGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContributorGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContributorGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContributorGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContributorGroupRemoved represents a ContributorGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryContributorGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterContributorGroupRemoved is a free log retrieval operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterContributorGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryContributorGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContributorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContributorGroupRemovedIterator{contract: _BaseLibrary.contract, event: "ContributorGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchContributorGroupRemoved is a free log subscription operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchContributorGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryContributorGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContributorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContributorGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContributorGroupRemoved is a log parse operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseContributorGroupRemoved(log types.Log) (*BaseLibraryContributorGroupRemoved, error) {
	event := new(BaseLibraryContributorGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseLibrary contract.
type BaseLibraryObjectMetaChangedIterator struct {
	Event *BaseLibraryObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseLibrary contract.
type BaseLibraryObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseLibrary *BaseLibraryFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseLibraryObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryObjectMetaChangedIterator{contract: _BaseLibrary.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseLibrary *BaseLibraryFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseLibraryObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryObjectMetaChanged)
				if err := _BaseLibrary.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseLibrary *BaseLibraryFilterer) ParseObjectMetaChanged(log types.Log) (*BaseLibraryObjectMetaChanged, error) {
	event := new(BaseLibraryObjectMetaChanged)
	if err := _BaseLibrary.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryReviewerGroupAddedIterator is returned from FilterReviewerGroupAdded and is used to iterate over the raw logs and unpacked data for ReviewerGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupAddedIterator struct {
	Event *BaseLibraryReviewerGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryReviewerGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryReviewerGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryReviewerGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryReviewerGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryReviewerGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryReviewerGroupAdded represents a ReviewerGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReviewerGroupAdded is a free log retrieval operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterReviewerGroupAdded(opts *bind.FilterOpts) (*BaseLibraryReviewerGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ReviewerGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryReviewerGroupAddedIterator{contract: _BaseLibrary.contract, event: "ReviewerGroupAdded", logs: logs, sub: sub}, nil
}

// WatchReviewerGroupAdded is a free log subscription operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchReviewerGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryReviewerGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ReviewerGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryReviewerGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewerGroupAdded is a log parse operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseReviewerGroupAdded(log types.Log) (*BaseLibraryReviewerGroupAdded, error) {
	event := new(BaseLibraryReviewerGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryReviewerGroupRemovedIterator is returned from FilterReviewerGroupRemoved and is used to iterate over the raw logs and unpacked data for ReviewerGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupRemovedIterator struct {
	Event *BaseLibraryReviewerGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryReviewerGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryReviewerGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryReviewerGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryReviewerGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryReviewerGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryReviewerGroupRemoved represents a ReviewerGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReviewerGroupRemoved is a free log retrieval operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterReviewerGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryReviewerGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ReviewerGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryReviewerGroupRemovedIterator{contract: _BaseLibrary.contract, event: "ReviewerGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchReviewerGroupRemoved is a free log subscription operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchReviewerGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryReviewerGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ReviewerGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryReviewerGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewerGroupRemoved is a log parse operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseReviewerGroupRemoved(log types.Log) (*BaseLibraryReviewerGroupRemoved, error) {
	event := new(BaseLibraryReviewerGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryUnauthorizedOperationIterator is returned from FilterUnauthorizedOperation and is used to iterate over the raw logs and unpacked data for UnauthorizedOperation events raised by the BaseLibrary contract.
type BaseLibraryUnauthorizedOperationIterator struct {
	Event *BaseLibraryUnauthorizedOperation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUnauthorizedOperationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUnauthorizedOperation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUnauthorizedOperation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUnauthorizedOperationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUnauthorizedOperationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUnauthorizedOperation represents a UnauthorizedOperation event raised by the BaseLibrary contract.
type BaseLibraryUnauthorizedOperation struct {
	OperationCode *big.Int
	Candidate     common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUnauthorizedOperation is a free log retrieval operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) FilterUnauthorizedOperation(opts *bind.FilterOpts) (*BaseLibraryUnauthorizedOperationIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUnauthorizedOperationIterator{contract: _BaseLibrary.contract, event: "UnauthorizedOperation", logs: logs, sub: sub}, nil
}

// WatchUnauthorizedOperation is a free log subscription operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) WatchUnauthorizedOperation(opts *bind.WatchOpts, sink chan<- *BaseLibraryUnauthorizedOperation) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUnauthorizedOperation)
				if err := _BaseLibrary.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnauthorizedOperation is a log parse operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) ParseUnauthorizedOperation(log types.Log) (*BaseLibraryUnauthorizedOperation, error) {
	event := new(BaseLibraryUnauthorizedOperation)
	if err := _BaseLibrary.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryUpdateKmsAddressIterator is returned from FilterUpdateKmsAddress and is used to iterate over the raw logs and unpacked data for UpdateKmsAddress events raised by the BaseLibrary contract.
type BaseLibraryUpdateKmsAddressIterator struct {
	Event *BaseLibraryUpdateKmsAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUpdateKmsAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUpdateKmsAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUpdateKmsAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUpdateKmsAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUpdateKmsAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUpdateKmsAddress represents a UpdateKmsAddress event raised by the BaseLibrary contract.
type BaseLibraryUpdateKmsAddress struct {
	AddressKms common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateKmsAddress is a free log retrieval operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) FilterUpdateKmsAddress(opts *bind.FilterOpts) (*BaseLibraryUpdateKmsAddressIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UpdateKmsAddress")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUpdateKmsAddressIterator{contract: _BaseLibrary.contract, event: "UpdateKmsAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateKmsAddress is a free log subscription operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) WatchUpdateKmsAddress(opts *bind.WatchOpts, sink chan<- *BaseLibraryUpdateKmsAddress) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UpdateKmsAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUpdateKmsAddress)
				if err := _BaseLibrary.contract.UnpackLog(event, "UpdateKmsAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateKmsAddress is a log parse operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) ParseUpdateKmsAddress(log types.Log) (*BaseLibraryUpdateKmsAddress, error) {
	event := new(BaseLibraryUpdateKmsAddress)
	if err := _BaseLibrary.contract.UnpackLog(event, "UpdateKmsAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseLibrary contract.
type BaseLibraryUpdateRequestIterator struct {
	Event *BaseLibraryUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUpdateRequest represents a UpdateRequest event raised by the BaseLibrary contract.
type BaseLibraryUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseLibraryUpdateRequestIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUpdateRequestIterator{contract: _BaseLibrary.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseLibraryUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUpdateRequest)
				if err := _BaseLibrary.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseUpdateRequest(log types.Log) (*BaseLibraryUpdateRequest, error) {
	event := new(BaseLibraryUpdateRequest)
	if err := _BaseLibrary.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseLibrary contract.
type BaseLibraryVersionConfirmIterator struct {
	Event *BaseLibraryVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryVersionConfirm represents a VersionConfirm event raised by the BaseLibrary contract.
type BaseLibraryVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseLibraryVersionConfirmIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryVersionConfirmIterator{contract: _BaseLibrary.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseLibraryVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryVersionConfirm)
				if err := _BaseLibrary.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseVersionConfirm(log types.Log) (*BaseLibraryVersionConfirm, error) {
	event := new(BaseLibraryVersionConfirm)
	if err := _BaseLibrary.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseLibrary contract.
type BaseLibraryVersionDeleteIterator struct {
	Event *BaseLibraryVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryVersionDelete represents a VersionDelete event raised by the BaseLibrary contract.
type BaseLibraryVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseLibraryVersionDeleteIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryVersionDeleteIterator{contract: _BaseLibrary.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseLibraryVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryVersionDelete)
				if err := _BaseLibrary.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) ParseVersionDelete(log types.Log) (*BaseLibraryVersionDelete, error) {
	event := new(BaseLibraryVersionDelete)
	if err := _BaseLibrary.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseLibrary contract.
type BaseLibraryVisibilityChangedIterator struct {
	Event *BaseLibraryVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryVisibilityChanged represents a VisibilityChanged event raised by the BaseLibrary contract.
type BaseLibraryVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseLibrary *BaseLibraryFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseLibraryVisibilityChangedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryVisibilityChangedIterator{contract: _BaseLibrary.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseLibrary *BaseLibraryFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseLibraryVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryVisibilityChanged)
				if err := _BaseLibrary.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseLibrary *BaseLibraryFilterer) ParseVisibilityChanged(log types.Log) (*BaseLibraryVisibilityChanged, error) {
	event := new(BaseLibraryVisibilityChanged)
	if err := _BaseLibrary.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryFactoryABI is the input ABI used to generate the binding from.
const BaseLibraryFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_spaceAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseLibraryFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseLibraryFactoryFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"40b89f06": "createLibrary(address)",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// BaseLibraryFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseLibraryFactoryBin = ""

// DeployBaseLibraryFactory deploys a new Ethereum contract, binding an instance of BaseLibraryFactory to it.
func DeployBaseLibraryFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _spaceAddr common.Address) (common.Address, *types.Transaction, *BaseLibraryFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseLibraryFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseLibraryFactoryBin), backend, _spaceAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseLibraryFactory{BaseLibraryFactoryCaller: BaseLibraryFactoryCaller{contract: contract}, BaseLibraryFactoryTransactor: BaseLibraryFactoryTransactor{contract: contract}, BaseLibraryFactoryFilterer: BaseLibraryFactoryFilterer{contract: contract}}, nil
}

// BaseLibraryFactory is an auto generated Go binding around an Ethereum contract.
type BaseLibraryFactory struct {
	BaseLibraryFactoryCaller     // Read-only binding to the contract
	BaseLibraryFactoryTransactor // Write-only binding to the contract
	BaseLibraryFactoryFilterer   // Log filterer for contract events
}

// BaseLibraryFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseLibraryFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseLibraryFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseLibraryFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseLibraryFactorySession struct {
	Contract     *BaseLibraryFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BaseLibraryFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseLibraryFactoryCallerSession struct {
	Contract *BaseLibraryFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// BaseLibraryFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseLibraryFactoryTransactorSession struct {
	Contract     *BaseLibraryFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// BaseLibraryFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseLibraryFactoryRaw struct {
	Contract *BaseLibraryFactory // Generic contract binding to access the raw methods on
}

// BaseLibraryFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseLibraryFactoryCallerRaw struct {
	Contract *BaseLibraryFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseLibraryFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseLibraryFactoryTransactorRaw struct {
	Contract *BaseLibraryFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseLibraryFactory creates a new instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactory(address common.Address, backend bind.ContractBackend) (*BaseLibraryFactory, error) {
	contract, err := bindBaseLibraryFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactory{BaseLibraryFactoryCaller: BaseLibraryFactoryCaller{contract: contract}, BaseLibraryFactoryTransactor: BaseLibraryFactoryTransactor{contract: contract}, BaseLibraryFactoryFilterer: BaseLibraryFactoryFilterer{contract: contract}}, nil
}

// NewBaseLibraryFactoryCaller creates a new read-only instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseLibraryFactoryCaller, error) {
	contract, err := bindBaseLibraryFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryCaller{contract: contract}, nil
}

// NewBaseLibraryFactoryTransactor creates a new write-only instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseLibraryFactoryTransactor, error) {
	contract, err := bindBaseLibraryFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryTransactor{contract: contract}, nil
}

// NewBaseLibraryFactoryFilterer creates a new log filterer instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseLibraryFactoryFilterer, error) {
	contract, err := bindBaseLibraryFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryFilterer{contract: contract}, nil
}

// bindBaseLibraryFactory binds a generic wrapper to an already deployed contract.
func bindBaseLibraryFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseLibraryFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseLibraryFactory *BaseLibraryFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseLibraryFactory.Contract.BaseLibraryFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseLibraryFactory *BaseLibraryFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.BaseLibraryFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseLibraryFactory *BaseLibraryFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.BaseLibraryFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseLibraryFactory *BaseLibraryFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseLibraryFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibraryFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactorySession) ContentSpace() (common.Address, error) {
	return _BaseLibraryFactory.Contract.ContentSpace(&_BaseLibraryFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseLibraryFactory.Contract.ContentSpace(&_BaseLibraryFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibraryFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactorySession) Creator() (common.Address, error) {
	return _BaseLibraryFactory.Contract.Creator(&_BaseLibraryFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseLibraryFactory.Contract.Creator(&_BaseLibraryFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibraryFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactorySession) Owner() (common.Address, error) {
	return _BaseLibraryFactory.Contract.Owner(&_BaseLibraryFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseLibraryFactory.Contract.Owner(&_BaseLibraryFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseLibraryFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactorySession) Version() ([32]byte, error) {
	return _BaseLibraryFactory.Contract.Version(&_BaseLibraryFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseLibraryFactory.Contract.Version(&_BaseLibraryFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseLibraryFactory.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactorySession) VersionAPI() ([32]byte, error) {
	return _BaseLibraryFactory.Contract.VersionAPI(&_BaseLibraryFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactoryCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseLibraryFactory.Contract.VersionAPI(&_BaseLibraryFactory.CallOpts)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) CreateLibrary(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "createLibrary", address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseLibraryFactory *BaseLibraryFactorySession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.CreateLibrary(&_BaseLibraryFactory.TransactOpts, address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorSession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.CreateLibrary(&_BaseLibraryFactory.TransactOpts, address_KMS)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibraryFactory *BaseLibraryFactorySession) Kill() (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.Kill(&_BaseLibraryFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.Kill(&_BaseLibraryFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibraryFactory *BaseLibraryFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.TransferCreatorship(&_BaseLibraryFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.TransferCreatorship(&_BaseLibraryFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibraryFactory *BaseLibraryFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.TransferOwnership(&_BaseLibraryFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.TransferOwnership(&_BaseLibraryFactory.TransactOpts, newOwner)
}

// BaseTenantConsumerGroupABI is the input ABI used to generate the binding from.
const BaseTenantConsumerGroupABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"membersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"membersMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidates\",\"type\":\"address[]\"}],\"name\":\"grantAccessMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tenant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isConsumerGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tenantSpace\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"MemberRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint32\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ord\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"prev\",\"type\":\"bool\"}],\"name\":\"BitSetAndGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"}],\"name\":\"WordGroupDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// BaseTenantConsumerGroupFuncSigs maps the 4-byte function signature to its string representation.
var BaseTenantConsumerGroupFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"81beeb64": "canEdit()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e57097c9": "deleteGroup(bytes32)",
	"e1a70717": "deleteVersion(string)",
	"30f846a2": "getBit(bytes32,uint8)",
	"e1954b61": "getCounter(bytes32,uint8)",
	"ac55c906": "getMeta(bytes)",
	"0ae5e739": "grantAccess(address)",
	"9602a0b3": "grantAccessMany(address[])",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"7558cbf0": "incrementCounter(bytes32,uint8)",
	"6380501f": "indexCategory()",
	"24d7806c": "isAdmin(address)",
	"dde12828": "isConsumerGroup()",
	"41c0e1b5": "kill()",
	"872ea68a": "membersMap(address)",
	"55277a5b": "membersNum()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"e542b7cb": "putMeta(bytes,bytes)",
	"85e68531": "revokeAccess(address)",
	"24d7c18d": "setAndGetBit(bytes32,uint8)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"aa024e8b": "setVisibility(uint8)",
	"adf07791": "tenant()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
}

// BaseTenantConsumerGroupBin is the compiled bytecode used for deploying new contracts.
var BaseTenantConsumerGroupBin = ""

// DeployBaseTenantConsumerGroup deploys a new Ethereum contract, binding an instance of BaseTenantConsumerGroup to it.
func DeployBaseTenantConsumerGroup(auth *bind.TransactOpts, backend bind.ContractBackend, _tenantSpace common.Address) (common.Address, *types.Transaction, *BaseTenantConsumerGroup, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseTenantConsumerGroupABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseTenantConsumerGroupBin), backend, _tenantSpace)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseTenantConsumerGroup{BaseTenantConsumerGroupCaller: BaseTenantConsumerGroupCaller{contract: contract}, BaseTenantConsumerGroupTransactor: BaseTenantConsumerGroupTransactor{contract: contract}, BaseTenantConsumerGroupFilterer: BaseTenantConsumerGroupFilterer{contract: contract}}, nil
}

// BaseTenantConsumerGroup is an auto generated Go binding around an Ethereum contract.
type BaseTenantConsumerGroup struct {
	BaseTenantConsumerGroupCaller     // Read-only binding to the contract
	BaseTenantConsumerGroupTransactor // Write-only binding to the contract
	BaseTenantConsumerGroupFilterer   // Log filterer for contract events
}

// BaseTenantConsumerGroupCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseTenantConsumerGroupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantConsumerGroupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseTenantConsumerGroupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantConsumerGroupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseTenantConsumerGroupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantConsumerGroupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseTenantConsumerGroupSession struct {
	Contract     *BaseTenantConsumerGroup // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// BaseTenantConsumerGroupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseTenantConsumerGroupCallerSession struct {
	Contract *BaseTenantConsumerGroupCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// BaseTenantConsumerGroupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseTenantConsumerGroupTransactorSession struct {
	Contract     *BaseTenantConsumerGroupTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// BaseTenantConsumerGroupRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseTenantConsumerGroupRaw struct {
	Contract *BaseTenantConsumerGroup // Generic contract binding to access the raw methods on
}

// BaseTenantConsumerGroupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseTenantConsumerGroupCallerRaw struct {
	Contract *BaseTenantConsumerGroupCaller // Generic read-only contract binding to access the raw methods on
}

// BaseTenantConsumerGroupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseTenantConsumerGroupTransactorRaw struct {
	Contract *BaseTenantConsumerGroupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseTenantConsumerGroup creates a new instance of BaseTenantConsumerGroup, bound to a specific deployed contract.
func NewBaseTenantConsumerGroup(address common.Address, backend bind.ContractBackend) (*BaseTenantConsumerGroup, error) {
	contract, err := bindBaseTenantConsumerGroup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroup{BaseTenantConsumerGroupCaller: BaseTenantConsumerGroupCaller{contract: contract}, BaseTenantConsumerGroupTransactor: BaseTenantConsumerGroupTransactor{contract: contract}, BaseTenantConsumerGroupFilterer: BaseTenantConsumerGroupFilterer{contract: contract}}, nil
}

// NewBaseTenantConsumerGroupCaller creates a new read-only instance of BaseTenantConsumerGroup, bound to a specific deployed contract.
func NewBaseTenantConsumerGroupCaller(address common.Address, caller bind.ContractCaller) (*BaseTenantConsumerGroupCaller, error) {
	contract, err := bindBaseTenantConsumerGroup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupCaller{contract: contract}, nil
}

// NewBaseTenantConsumerGroupTransactor creates a new write-only instance of BaseTenantConsumerGroup, bound to a specific deployed contract.
func NewBaseTenantConsumerGroupTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseTenantConsumerGroupTransactor, error) {
	contract, err := bindBaseTenantConsumerGroup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupTransactor{contract: contract}, nil
}

// NewBaseTenantConsumerGroupFilterer creates a new log filterer instance of BaseTenantConsumerGroup, bound to a specific deployed contract.
func NewBaseTenantConsumerGroupFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseTenantConsumerGroupFilterer, error) {
	contract, err := bindBaseTenantConsumerGroup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupFilterer{contract: contract}, nil
}

// bindBaseTenantConsumerGroup binds a generic wrapper to an already deployed contract.
func bindBaseTenantConsumerGroup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseTenantConsumerGroupABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseTenantConsumerGroup.Contract.BaseTenantConsumerGroupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.BaseTenantConsumerGroupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.BaseTenantConsumerGroupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseTenantConsumerGroup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) CANACCESS() (uint8, error) {
	return _BaseTenantConsumerGroup.Contract.CANACCESS(&_BaseTenantConsumerGroup.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) CANACCESS() (uint8, error) {
	return _BaseTenantConsumerGroup.Contract.CANACCESS(&_BaseTenantConsumerGroup.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) CANEDIT() (uint8, error) {
	return _BaseTenantConsumerGroup.Contract.CANEDIT(&_BaseTenantConsumerGroup.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) CANEDIT() (uint8, error) {
	return _BaseTenantConsumerGroup.Contract.CANEDIT(&_BaseTenantConsumerGroup.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) CANSEE() (uint8, error) {
	return _BaseTenantConsumerGroup.Contract.CANSEE(&_BaseTenantConsumerGroup.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) CANSEE() (uint8, error) {
	return _BaseTenantConsumerGroup.Contract.CANSEE(&_BaseTenantConsumerGroup.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) CanCommit() (bool, error) {
	return _BaseTenantConsumerGroup.Contract.CanCommit(&_BaseTenantConsumerGroup.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) CanCommit() (bool, error) {
	return _BaseTenantConsumerGroup.Contract.CanCommit(&_BaseTenantConsumerGroup.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) CanConfirm() (bool, error) {
	return _BaseTenantConsumerGroup.Contract.CanConfirm(&_BaseTenantConsumerGroup.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) CanConfirm() (bool, error) {
	return _BaseTenantConsumerGroup.Contract.CanConfirm(&_BaseTenantConsumerGroup.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) CanEdit() (bool, error) {
	return _BaseTenantConsumerGroup.Contract.CanEdit(&_BaseTenantConsumerGroup.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) CanEdit() (bool, error) {
	return _BaseTenantConsumerGroup.Contract.CanEdit(&_BaseTenantConsumerGroup.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) CommitPending() (bool, error) {
	return _BaseTenantConsumerGroup.Contract.CommitPending(&_BaseTenantConsumerGroup.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) CommitPending() (bool, error) {
	return _BaseTenantConsumerGroup.Contract.CommitPending(&_BaseTenantConsumerGroup.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) ContentSpace() (common.Address, error) {
	return _BaseTenantConsumerGroup.Contract.ContentSpace(&_BaseTenantConsumerGroup.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) ContentSpace() (common.Address, error) {
	return _BaseTenantConsumerGroup.Contract.ContentSpace(&_BaseTenantConsumerGroup.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) CountVersionHashes() (*big.Int, error) {
	return _BaseTenantConsumerGroup.Contract.CountVersionHashes(&_BaseTenantConsumerGroup.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseTenantConsumerGroup.Contract.CountVersionHashes(&_BaseTenantConsumerGroup.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) Creator() (common.Address, error) {
	return _BaseTenantConsumerGroup.Contract.Creator(&_BaseTenantConsumerGroup.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) Creator() (common.Address, error) {
	return _BaseTenantConsumerGroup.Contract.Creator(&_BaseTenantConsumerGroup.CallOpts)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) GetBit(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "getBit", _ident, _ord)
	return *ret0, err
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _BaseTenantConsumerGroup.Contract.GetBit(&_BaseTenantConsumerGroup.CallOpts, _ident, _ord)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _BaseTenantConsumerGroup.Contract.GetBit(&_BaseTenantConsumerGroup.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) GetCounter(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "getCounter", _ident, _ord)
	return *ret0, err
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _BaseTenantConsumerGroup.Contract.GetCounter(&_BaseTenantConsumerGroup.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _BaseTenantConsumerGroup.Contract.GetCounter(&_BaseTenantConsumerGroup.CallOpts, _ident, _ord)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseTenantConsumerGroup.Contract.GetMeta(&_BaseTenantConsumerGroup.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseTenantConsumerGroup.Contract.GetMeta(&_BaseTenantConsumerGroup.CallOpts, key)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseTenantConsumerGroup.Contract.HasAccess(&_BaseTenantConsumerGroup.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseTenantConsumerGroup.Contract.HasAccess(&_BaseTenantConsumerGroup.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseTenantConsumerGroup.Contract.HasEditorRight(&_BaseTenantConsumerGroup.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseTenantConsumerGroup.Contract.HasEditorRight(&_BaseTenantConsumerGroup.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) IndexCategory() (uint8, error) {
	return _BaseTenantConsumerGroup.Contract.IndexCategory(&_BaseTenantConsumerGroup.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) IndexCategory() (uint8, error) {
	return _BaseTenantConsumerGroup.Contract.IndexCategory(&_BaseTenantConsumerGroup.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseTenantConsumerGroup.Contract.IsAdmin(&_BaseTenantConsumerGroup.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseTenantConsumerGroup.Contract.IsAdmin(&_BaseTenantConsumerGroup.CallOpts, _candidate)
}

// IsConsumerGroup is a free data retrieval call binding the contract method 0xdde12828.
//
// Solidity: function isConsumerGroup() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) IsConsumerGroup(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "isConsumerGroup")
	return *ret0, err
}

// IsConsumerGroup is a free data retrieval call binding the contract method 0xdde12828.
//
// Solidity: function isConsumerGroup() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) IsConsumerGroup() (bool, error) {
	return _BaseTenantConsumerGroup.Contract.IsConsumerGroup(&_BaseTenantConsumerGroup.CallOpts)
}

// IsConsumerGroup is a free data retrieval call binding the contract method 0xdde12828.
//
// Solidity: function isConsumerGroup() constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) IsConsumerGroup() (bool, error) {
	return _BaseTenantConsumerGroup.Contract.IsConsumerGroup(&_BaseTenantConsumerGroup.CallOpts)
}

// MembersMap is a free data retrieval call binding the contract method 0x872ea68a.
//
// Solidity: function membersMap(address ) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) MembersMap(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "membersMap", arg0)
	return *ret0, err
}

// MembersMap is a free data retrieval call binding the contract method 0x872ea68a.
//
// Solidity: function membersMap(address ) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) MembersMap(arg0 common.Address) (bool, error) {
	return _BaseTenantConsumerGroup.Contract.MembersMap(&_BaseTenantConsumerGroup.CallOpts, arg0)
}

// MembersMap is a free data retrieval call binding the contract method 0x872ea68a.
//
// Solidity: function membersMap(address ) constant returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) MembersMap(arg0 common.Address) (bool, error) {
	return _BaseTenantConsumerGroup.Contract.MembersMap(&_BaseTenantConsumerGroup.CallOpts, arg0)
}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() constant returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) MembersNum(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "membersNum")
	return *ret0, err
}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() constant returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) MembersNum() (*big.Int, error) {
	return _BaseTenantConsumerGroup.Contract.MembersNum(&_BaseTenantConsumerGroup.CallOpts)
}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() constant returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) MembersNum() (*big.Int, error) {
	return _BaseTenantConsumerGroup.Contract.MembersNum(&_BaseTenantConsumerGroup.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) ObjectHash() (string, error) {
	return _BaseTenantConsumerGroup.Contract.ObjectHash(&_BaseTenantConsumerGroup.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) ObjectHash() (string, error) {
	return _BaseTenantConsumerGroup.Contract.ObjectHash(&_BaseTenantConsumerGroup.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseTenantConsumerGroup.Contract.ObjectTimestamp(&_BaseTenantConsumerGroup.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseTenantConsumerGroup.Contract.ObjectTimestamp(&_BaseTenantConsumerGroup.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) Owner() (common.Address, error) {
	return _BaseTenantConsumerGroup.Contract.Owner(&_BaseTenantConsumerGroup.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) Owner() (common.Address, error) {
	return _BaseTenantConsumerGroup.Contract.Owner(&_BaseTenantConsumerGroup.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) ParentAddress() (common.Address, error) {
	return _BaseTenantConsumerGroup.Contract.ParentAddress(&_BaseTenantConsumerGroup.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) ParentAddress() (common.Address, error) {
	return _BaseTenantConsumerGroup.Contract.ParentAddress(&_BaseTenantConsumerGroup.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) PendingHash() (string, error) {
	return _BaseTenantConsumerGroup.Contract.PendingHash(&_BaseTenantConsumerGroup.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) PendingHash() (string, error) {
	return _BaseTenantConsumerGroup.Contract.PendingHash(&_BaseTenantConsumerGroup.CallOpts)
}

// Tenant is a free data retrieval call binding the contract method 0xadf07791.
//
// Solidity: function tenant() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) Tenant(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "tenant")
	return *ret0, err
}

// Tenant is a free data retrieval call binding the contract method 0xadf07791.
//
// Solidity: function tenant() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) Tenant() (common.Address, error) {
	return _BaseTenantConsumerGroup.Contract.Tenant(&_BaseTenantConsumerGroup.CallOpts)
}

// Tenant is a free data retrieval call binding the contract method 0xadf07791.
//
// Solidity: function tenant() constant returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) Tenant() (common.Address, error) {
	return _BaseTenantConsumerGroup.Contract.Tenant(&_BaseTenantConsumerGroup.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) Version() ([32]byte, error) {
	return _BaseTenantConsumerGroup.Contract.Version(&_BaseTenantConsumerGroup.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) Version() ([32]byte, error) {
	return _BaseTenantConsumerGroup.Contract.Version(&_BaseTenantConsumerGroup.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) VersionAPI() ([32]byte, error) {
	return _BaseTenantConsumerGroup.Contract.VersionAPI(&_BaseTenantConsumerGroup.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseTenantConsumerGroup.Contract.VersionAPI(&_BaseTenantConsumerGroup.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseTenantConsumerGroup.Contract.VersionHashes(&_BaseTenantConsumerGroup.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseTenantConsumerGroup.Contract.VersionHashes(&_BaseTenantConsumerGroup.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseTenantConsumerGroup.Contract.VersionTimestamp(&_BaseTenantConsumerGroup.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseTenantConsumerGroup.Contract.VersionTimestamp(&_BaseTenantConsumerGroup.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantConsumerGroup.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) Visibility() (uint8, error) {
	return _BaseTenantConsumerGroup.Contract.Visibility(&_BaseTenantConsumerGroup.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCallerSession) Visibility() (uint8, error) {
	return _BaseTenantConsumerGroup.Contract.Visibility(&_BaseTenantConsumerGroup.CallOpts)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.AccessRequestV3(&_BaseTenantConsumerGroup.TransactOpts, arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.AccessRequestV3(&_BaseTenantConsumerGroup.TransactOpts, arg0, arg1)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) ClearPending() (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.ClearPending(&_BaseTenantConsumerGroup.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.ClearPending(&_BaseTenantConsumerGroup.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.Commit(&_BaseTenantConsumerGroup.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.Commit(&_BaseTenantConsumerGroup.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.ConfirmCommit(&_BaseTenantConsumerGroup.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.ConfirmCommit(&_BaseTenantConsumerGroup.TransactOpts)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) DeleteGroup(opts *bind.TransactOpts, _ident [32]byte) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "deleteGroup", _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.DeleteGroup(&_BaseTenantConsumerGroup.TransactOpts, _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.DeleteGroup(&_BaseTenantConsumerGroup.TransactOpts, _ident)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.DeleteVersion(&_BaseTenantConsumerGroup.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.DeleteVersion(&_BaseTenantConsumerGroup.TransactOpts, _versionHash)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) GrantAccess(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "grantAccess", candidate)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) GrantAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.GrantAccess(&_BaseTenantConsumerGroup.TransactOpts, candidate)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) GrantAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.GrantAccess(&_BaseTenantConsumerGroup.TransactOpts, candidate)
}

// GrantAccessMany is a paid mutator transaction binding the contract method 0x9602a0b3.
//
// Solidity: function grantAccessMany(address[] candidates) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) GrantAccessMany(opts *bind.TransactOpts, candidates []common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "grantAccessMany", candidates)
}

// GrantAccessMany is a paid mutator transaction binding the contract method 0x9602a0b3.
//
// Solidity: function grantAccessMany(address[] candidates) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) GrantAccessMany(candidates []common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.GrantAccessMany(&_BaseTenantConsumerGroup.TransactOpts, candidates)
}

// GrantAccessMany is a paid mutator transaction binding the contract method 0x9602a0b3.
//
// Solidity: function grantAccessMany(address[] candidates) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) GrantAccessMany(candidates []common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.GrantAccessMany(&_BaseTenantConsumerGroup.TransactOpts, candidates)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) IncrementCounter(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "incrementCounter", _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.IncrementCounter(&_BaseTenantConsumerGroup.TransactOpts, _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.IncrementCounter(&_BaseTenantConsumerGroup.TransactOpts, _ident, _ord)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) Kill() (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.Kill(&_BaseTenantConsumerGroup.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.Kill(&_BaseTenantConsumerGroup.TransactOpts)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.PutMeta(&_BaseTenantConsumerGroup.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.PutMeta(&_BaseTenantConsumerGroup.TransactOpts, key, value)
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) RevokeAccess(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "revokeAccess", candidate)
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) RevokeAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.RevokeAccess(&_BaseTenantConsumerGroup.TransactOpts, candidate)
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) RevokeAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.RevokeAccess(&_BaseTenantConsumerGroup.TransactOpts, candidate)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) SetAndGetBit(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "setAndGetBit", _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.SetAndGetBit(&_BaseTenantConsumerGroup.TransactOpts, _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.SetAndGetBit(&_BaseTenantConsumerGroup.TransactOpts, _ident, _ord)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.SetGroupRights(&_BaseTenantConsumerGroup.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.SetGroupRights(&_BaseTenantConsumerGroup.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.SetRights(&_BaseTenantConsumerGroup.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.SetRights(&_BaseTenantConsumerGroup.TransactOpts, stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.SetVisibility(&_BaseTenantConsumerGroup.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.SetVisibility(&_BaseTenantConsumerGroup.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.TransferCreatorship(&_BaseTenantConsumerGroup.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.TransferCreatorship(&_BaseTenantConsumerGroup.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.TransferOwnership(&_BaseTenantConsumerGroup.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.TransferOwnership(&_BaseTenantConsumerGroup.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.UpdateRequest(&_BaseTenantConsumerGroup.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.Contract.UpdateRequest(&_BaseTenantConsumerGroup.TransactOpts)
}

// BaseTenantConsumerGroupAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupAccessRequestV3Iterator struct {
	Event *BaseTenantConsumerGroupAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupAccessRequestV3 represents a AccessRequestV3 event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseTenantConsumerGroupAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupAccessRequestV3Iterator{contract: _BaseTenantConsumerGroup.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupAccessRequestV3)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseAccessRequestV3(log types.Log) (*BaseTenantConsumerGroupAccessRequestV3, error) {
	event := new(BaseTenantConsumerGroupAccessRequestV3)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantConsumerGroupBitSetAndGetIterator is returned from FilterBitSetAndGet and is used to iterate over the raw logs and unpacked data for BitSetAndGet events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupBitSetAndGetIterator struct {
	Event *BaseTenantConsumerGroupBitSetAndGet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupBitSetAndGetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupBitSetAndGet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupBitSetAndGet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupBitSetAndGetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupBitSetAndGetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupBitSetAndGet represents a BitSetAndGet event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupBitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBitSetAndGet is a free log retrieval operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterBitSetAndGet(opts *bind.FilterOpts) (*BaseTenantConsumerGroupBitSetAndGetIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupBitSetAndGetIterator{contract: _BaseTenantConsumerGroup.contract, event: "BitSetAndGet", logs: logs, sub: sub}, nil
}

// WatchBitSetAndGet is a free log subscription operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchBitSetAndGet(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupBitSetAndGet) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupBitSetAndGet)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitSetAndGet is a log parse operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseBitSetAndGet(log types.Log) (*BaseTenantConsumerGroupBitSetAndGet, error) {
	event := new(BaseTenantConsumerGroupBitSetAndGet)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantConsumerGroupCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupCommitPendingIterator struct {
	Event *BaseTenantConsumerGroupCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupCommitPending represents a CommitPending event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseTenantConsumerGroupCommitPendingIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupCommitPendingIterator{contract: _BaseTenantConsumerGroup.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupCommitPending)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseCommitPending(log types.Log) (*BaseTenantConsumerGroupCommitPending, error) {
	event := new(BaseTenantConsumerGroupCommitPending)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantConsumerGroupCounterIncrementedIterator is returned from FilterCounterIncremented and is used to iterate over the raw logs and unpacked data for CounterIncremented events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupCounterIncrementedIterator struct {
	Event *BaseTenantConsumerGroupCounterIncremented // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupCounterIncrementedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupCounterIncremented)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupCounterIncremented)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupCounterIncrementedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupCounterIncrementedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupCounterIncremented represents a CounterIncremented event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupCounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterIncremented is a free log retrieval operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterCounterIncremented(opts *bind.FilterOpts) (*BaseTenantConsumerGroupCounterIncrementedIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupCounterIncrementedIterator{contract: _BaseTenantConsumerGroup.contract, event: "CounterIncremented", logs: logs, sub: sub}, nil
}

// WatchCounterIncremented is a free log subscription operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchCounterIncremented(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupCounterIncremented) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupCounterIncremented)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterIncremented is a log parse operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseCounterIncremented(log types.Log) (*BaseTenantConsumerGroupCounterIncremented, error) {
	event := new(BaseTenantConsumerGroupCounterIncremented)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantConsumerGroupMemberAddedIterator is returned from FilterMemberAdded and is used to iterate over the raw logs and unpacked data for MemberAdded events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupMemberAddedIterator struct {
	Event *BaseTenantConsumerGroupMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupMemberAdded represents a MemberAdded event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupMemberAdded struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMemberAdded is a free log retrieval operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterMemberAdded(opts *bind.FilterOpts) (*BaseTenantConsumerGroupMemberAddedIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "MemberAdded")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupMemberAddedIterator{contract: _BaseTenantConsumerGroup.contract, event: "MemberAdded", logs: logs, sub: sub}, nil
}

// WatchMemberAdded is a free log subscription operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchMemberAdded(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupMemberAdded) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "MemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupMemberAdded)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "MemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberAdded is a log parse operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseMemberAdded(log types.Log) (*BaseTenantConsumerGroupMemberAdded, error) {
	event := new(BaseTenantConsumerGroupMemberAdded)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "MemberAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantConsumerGroupMemberRevokedIterator is returned from FilterMemberRevoked and is used to iterate over the raw logs and unpacked data for MemberRevoked events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupMemberRevokedIterator struct {
	Event *BaseTenantConsumerGroupMemberRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupMemberRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupMemberRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupMemberRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupMemberRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupMemberRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupMemberRevoked represents a MemberRevoked event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupMemberRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMemberRevoked is a free log retrieval operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterMemberRevoked(opts *bind.FilterOpts) (*BaseTenantConsumerGroupMemberRevokedIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "MemberRevoked")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupMemberRevokedIterator{contract: _BaseTenantConsumerGroup.contract, event: "MemberRevoked", logs: logs, sub: sub}, nil
}

// WatchMemberRevoked is a free log subscription operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchMemberRevoked(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupMemberRevoked) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "MemberRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupMemberRevoked)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "MemberRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberRevoked is a log parse operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseMemberRevoked(log types.Log) (*BaseTenantConsumerGroupMemberRevoked, error) {
	event := new(BaseTenantConsumerGroupMemberRevoked)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "MemberRevoked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantConsumerGroupObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupObjectMetaChangedIterator struct {
	Event *BaseTenantConsumerGroupObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseTenantConsumerGroupObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupObjectMetaChangedIterator{contract: _BaseTenantConsumerGroup.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupObjectMetaChanged)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseObjectMetaChanged(log types.Log) (*BaseTenantConsumerGroupObjectMetaChanged, error) {
	event := new(BaseTenantConsumerGroupObjectMetaChanged)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantConsumerGroupUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupUpdateRequestIterator struct {
	Event *BaseTenantConsumerGroupUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupUpdateRequest represents a UpdateRequest event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseTenantConsumerGroupUpdateRequestIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupUpdateRequestIterator{contract: _BaseTenantConsumerGroup.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupUpdateRequest)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseUpdateRequest(log types.Log) (*BaseTenantConsumerGroupUpdateRequest, error) {
	event := new(BaseTenantConsumerGroupUpdateRequest)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantConsumerGroupVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupVersionConfirmIterator struct {
	Event *BaseTenantConsumerGroupVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupVersionConfirm represents a VersionConfirm event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseTenantConsumerGroupVersionConfirmIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupVersionConfirmIterator{contract: _BaseTenantConsumerGroup.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupVersionConfirm)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseVersionConfirm(log types.Log) (*BaseTenantConsumerGroupVersionConfirm, error) {
	event := new(BaseTenantConsumerGroupVersionConfirm)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantConsumerGroupVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupVersionDeleteIterator struct {
	Event *BaseTenantConsumerGroupVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupVersionDelete represents a VersionDelete event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseTenantConsumerGroupVersionDeleteIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupVersionDeleteIterator{contract: _BaseTenantConsumerGroup.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupVersionDelete)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseVersionDelete(log types.Log) (*BaseTenantConsumerGroupVersionDelete, error) {
	event := new(BaseTenantConsumerGroupVersionDelete)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantConsumerGroupVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupVisibilityChangedIterator struct {
	Event *BaseTenantConsumerGroupVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupVisibilityChanged represents a VisibilityChanged event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseTenantConsumerGroupVisibilityChangedIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupVisibilityChangedIterator{contract: _BaseTenantConsumerGroup.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupVisibilityChanged)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseVisibilityChanged(log types.Log) (*BaseTenantConsumerGroupVisibilityChanged, error) {
	event := new(BaseTenantConsumerGroupVisibilityChanged)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantConsumerGroupWordGroupDeletedIterator is returned from FilterWordGroupDeleted and is used to iterate over the raw logs and unpacked data for WordGroupDeleted events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupWordGroupDeletedIterator struct {
	Event *BaseTenantConsumerGroupWordGroupDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupWordGroupDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupWordGroupDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupWordGroupDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupWordGroupDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupWordGroupDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupWordGroupDeleted represents a WordGroupDeleted event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupWordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWordGroupDeleted is a free log retrieval operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterWordGroupDeleted(opts *bind.FilterOpts) (*BaseTenantConsumerGroupWordGroupDeletedIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupWordGroupDeletedIterator{contract: _BaseTenantConsumerGroup.contract, event: "WordGroupDeleted", logs: logs, sub: sub}, nil
}

// WatchWordGroupDeleted is a free log subscription operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchWordGroupDeleted(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupWordGroupDeleted) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupWordGroupDeleted)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWordGroupDeleted is a log parse operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseWordGroupDeleted(log types.Log) (*BaseTenantConsumerGroupWordGroupDeleted, error) {
	event := new(BaseTenantConsumerGroupWordGroupDeleted)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceABI is the input ABI used to generate the binding from.
const BaseTenantSpaceABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factoryManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_func4Bytes\",\"type\":\"bytes4[]\"},{\"name\":\"_funcAddr\",\"type\":\"address\"}],\"name\":\"addFuncs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listKey\",\"type\":\"bytes32\"}],\"name\":\"listLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeMan\",\"type\":\"address\"}],\"name\":\"setNodeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listKey\",\"type\":\"bytes32\"},{\"name\":\"itemOrd\",\"type\":\"uint256\"}],\"name\":\"removeListOrd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTenantID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsAddress\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factMan\",\"type\":\"address\"}],\"name\":\"setFactoryManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listsMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"getKMSID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GROUP_ID_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_groupAddr\",\"type\":\"address\"}],\"name\":\"addGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listKey\",\"type\":\"bytes32\"},{\"name\":\"itemVal\",\"type\":\"string\"}],\"name\":\"addListItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsMan\",\"type\":\"address\"}],\"name\":\"setKmsManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsIdStr\",\"type\":\"string\"}],\"name\":\"checkKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_desc\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userMan\",\"type\":\"address\"}],\"name\":\"setUserManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nodeManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_func4Bytes\",\"type\":\"bytes4\"},{\"name\":\"_p1\",\"type\":\"uint256\"},{\"name\":\"_p2\",\"type\":\"address\"},{\"name\":\"_encAuthToken\",\"type\":\"bytes\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"callFuncUintAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kmsManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lib\",\"type\":\"address\"},{\"name\":\"_contentType\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"funcMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_groupAddr\",\"type\":\"address\"}],\"name\":\"removeGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defLeewaySecs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"checkKMSAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"createUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupsMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_func4Bytes\",\"type\":\"bytes4\"},{\"name\":\"_encAuthToken\",\"type\":\"bytes\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"checkCallFunc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defTokenExpSecs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contentSpace\",\"type\":\"address\"},{\"name\":\"_tenantName\",\"type\":\"string\"},{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CreateTenant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"GetAccessWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"func4Bytes\",\"type\":\"bytes4[]\"},{\"indexed\":false,\"name\":\"funcAddr\",\"type\":\"address\"}],\"name\":\"FunctionsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"groupAddr\",\"type\":\"address\"}],\"name\":\"AddTenantGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"groupAddr\",\"type\":\"address\"}],\"name\":\"RemoveTenantGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevManager\",\"type\":\"address\"}],\"name\":\"SetUserManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevManager\",\"type\":\"address\"}],\"name\":\"SetNodeManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevManager\",\"type\":\"address\"}],\"name\":\"SetFactoryManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevManager\",\"type\":\"address\"}],\"name\":\"SetKmsManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint32\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ord\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"prev\",\"type\":\"bool\"}],\"name\":\"BitSetAndGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"}],\"name\":\"WordGroupDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// BaseTenantSpaceFuncSigs maps the 4-byte function signature to its string representation.
var BaseTenantSpaceFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"58d40b25": "GROUP_ID_ADMIN()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"0a581edc": "addFuncs(bytes4[],address)",
	"65d8dd34": "addGroup(bytes32,address)",
	"74daf3a0": "addListItem(bytes32,string)",
	"32eaf21b": "addressKMS()",
	"9c075d67": "callFuncUintAddr(bytes4,uint256,address,bytes,uint8,bytes32,bytes32)",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"81beeb64": "canEdit()",
	"26683e14": "canNodePublish(address)",
	"ed1f6456": "checkCallFunc(bytes4,bytes,uint8,bytes32,bytes32)",
	"8d2a23db": "checkKMS(string)",
	"d6be0f49": "checkKMSAddr(address)",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"331b86c0": "countVersionHashes()",
	"bf4e088f": "createContent(address,address)",
	"b8cfaf05": "createContentType()",
	"575185ed": "createGroup()",
	"40b89f06": "createLibrary(address)",
	"e7cf0c66": "createUserWallet(address)",
	"02d05d3f": "creator()",
	"d21a8c94": "defLeewaySecs()",
	"f1df8140": "defTokenExpSecs()",
	"e57097c9": "deleteGroup(bytes32)",
	"e1a70717": "deleteVersion(string)",
	"7284e416": "description()",
	"032b5a73": "factoryManager()",
	"c2a21f14": "funcMapping(bytes4)",
	"30f846a2": "getBit(bytes32,uint8)",
	"e1954b61": "getCounter(bytes32,uint8)",
	"589aafc1": "getKMSID(address)",
	"268bfac4": "getKMSInfo(string,bytes)",
	"ac55c906": "getMeta(bytes)",
	"401262c8": "getTenantID()",
	"4093d7a1": "groupIds(uint256)",
	"ea8a3ed8": "groupsMapping(bytes32,uint256)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"7558cbf0": "incrementCounter(bytes32,uint8)",
	"6380501f": "indexCategory()",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"ac65b649": "kmsManager()",
	"11a3fa38": "listLength(bytes32)",
	"4d368f10": "listsMapping(bytes32,uint256)",
	"06fdde03": "name()",
	"9bb5cd3f": "nodeManager()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"e542b7cb": "putMeta(bytes,bytes)",
	"cb3899b3": "removeGroup(bytes32,address)",
	"1fa12f11": "removeListOrd(bytes32,uint256)",
	"c9e8e72d": "setAddressKMS(address)",
	"24d7c18d": "setAndGetBit(bytes32,uint8)",
	"90c3f38f": "setDescription(string)",
	"430e621e": "setFactoryManager(address)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"87e38281": "setKmsManager(address)",
	"1319e7e1": "setNodeManager(address)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"97d0b02c": "setUserManager(address)",
	"aa024e8b": "setVisibility(uint8)",
	"a9059cbb": "transfer(address,uint256)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"5c8a7687": "userManager()",
	"63e6ffdd": "userWallets(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
}

// BaseTenantSpaceBin is the compiled bytecode used for deploying new contracts.
var BaseTenantSpaceBin = "0x608060408190527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006008556009805460ff191690911761ff00191690557f4564697461626c653230323030393238313130303030504f0000000000000000600a557f4261736554656e616e7453706163653230323030353034313230303030504f0060115562015180601555607860165562005f343881900390819083398101806040526060811015620000fc57600080fd5b8151602083018051919392830192916401000000008111156200011e57600080fd5b820160208101848111156200013257600080fd5b81516401000000008111828201871017156200014d57600080fd5b505060209182015160028054600160a060020a031990811632179091556003805490911633179055815191945092506200018e916012919085019062000343565b50600083905080600160a060020a0316638da5cb5b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015620001ea57600080fd5b505afa158015620001ff573d6000803e3d6000fd5b505050506040513d60208110156200021657600080fd5b5051600160a060020a0316331480620002be5750604080517fd6be0f490000000000000000000000000000000000000000000000000000000081523360048201529051600091600160a060020a0384169163d6be0f4991602480820192602092909190829003018186803b1580156200028e57600080fd5b505afa158015620002a3573d6000803e3d6000fd5b505050506040513d6020811015620002ba57600080fd5b5051115b1515620002ca57600080fd5b60048054600160a060020a03808716600160a060020a031992831617909255601480548584169216919091179055601154600354604080519283529216602082015281517fc2fe67ac699789805c53a93eea70eb0e316deaf8db4b810382d2412ba4fcb4c8929181900390910190a150505050620003e8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200038657805160ff1916838001178555620003b6565b82800160010185558215620003b6579182015b82811115620003b657825182559160200191906001019062000399565b50620003c4929150620003c8565b5090565b620003e591905b80821115620003c45760008155600101620003cf565b90565b615b3c80620003f86000396000f3fe6080604052600436106104a25760003560e060020a900480636d2e4b1b11610264578063ac65b64911610148578063e02dd9c2116100c5578063e7cf0c6611610089578063e7cf0c6614611891578063ea8a3ed8146118c4578063ed1f6456146118f4578063ef1d7dc2146119c6578063f1df8140146119db578063f2fde38b146119f0576104a2565b8063e02dd9c214611619578063e1954b611461162e578063e1a707171461167a578063e542b7cb1461172d578063e57097c914611867576104a2565b8063c2a21f141161010c578063c2a21f1414611531578063c9e8e72d14611565578063cb3899b314611598578063d21a8c94146115d1578063d6be0f49146115e6576104a2565b8063ac65b649146114a2578063af570c04146114b7578063b8cfaf05146114cc578063bf4e088f146114e1578063c287e0ed1461151c576104a2565b80638da5cb5b116101e15780639867db74116101a55780639867db74146111da5780639bb5cd3f1461128d5780639c075d67146112a2578063a9059cbb14611389578063aa024e8b146113c2578063ac55c906146113ef576104a2565b80638da5cb5b1461109757806390c3f38f146110ac57806395a078e81461115f57806397ac4fd21461119257806397d0b02c146111a7576104a2565b80637886f747116102285780637886f74714610f7e5780637ca8f61814610fa857806381beeb6414610fd257806387e3828114610fe75780638d2a23db1461101a576104a2565b80636d2e4b1b14610e345780636e37542714610e675780637284e41614610e7c57806374daf3a014610e915780637558cbf014610f4b576104a2565b8063375a6e7c1161038b578063575185ed116103085780635f6a1301116102cc5780635f6a130114610d56578063628449fd14610d6b5780636380501f14610d8057806363e6ffdd14610d9557806365d8dd3414610dc857806367e5c3bf14610e01576104a2565b8063575185ed14610ccf578063589aafc114610ce457806358d40b2514610d175780635c8a768714610d2c5780635f4fcae114610d41576104a2565b806341c0e1b51161034f57806341c0e1b514610c3a578063430e621e14610c4f578063446e882614610c825780634d368f1014610c8a57806354fd4d5014610cba576104a2565b8063375a6e7c14610b9e578063401262c814610bb35780634093d7a114610bc857806340b87a2614610bf257806340b89f0614610c07576104a2565b80631bf7a9121161042457806326683e14116103e857806326683e141461094c578063268bfac41461097f57806329adec1414610b2c57806330f846a214610b4157806332eaf21b14610b74578063331b86c014610b89576104a2565b80631bf7a9121461074b5780631fa12f111461087257806322e564eb146108a257806324d7806c146108e657806324d7c18d14610919576104a2565b80630fe1b5a21161046b5780630fe1b5a214610644578063100508a21461068857806311a3fa38146106b35780631319e7e1146106ef57806314cfabb314610722576104a2565b8062821de3146104a457806302d05d3f146104d5578063032b5a73146104ea57806306fdde03146104ff5780630a581edc14610589575b005b3480156104b057600080fd5b506104b9611a23565b60408051600160a060020a039092168252519081900360200190f35b3480156104e157600080fd5b506104b9611a33565b3480156104f657600080fd5b506104b9611a42565b34801561050b57600080fd5b50610514611a51565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561054e578181015183820152602001610536565b50505050905090810190601f16801561057b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561059557600080fd5b506104a2600480360360408110156105ac57600080fd5b8101906020810181356401000000008111156105c757600080fd5b8201836020820111156105d957600080fd5b803590602001918460208302840111640100000000831117156105fb57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050509035600160a060020a03169150611adf9050565b34801561065057600080fd5b506104a26004803603606081101561066757600080fd5b50600160a060020a038135169060ff60208201358116916040013516611bf0565b34801561069457600080fd5b5061069d611cbc565b6040805160ff9092168252519081900360200190f35b3480156106bf57600080fd5b506106dd600480360360208110156106d657600080fd5b5035611cc1565b60408051918252519081900360200190f35b3480156106fb57600080fd5b506104a26004803603602081101561071257600080fd5b5035600160a060020a0316611cd6565b34801561072e57600080fd5b50610737611d54565b604080519115158252519081900360200190f35b6107376004803603604081101561076157600080fd5b81019060208101813564010000000081111561077c57600080fd5b82018360208201111561078e57600080fd5b803590602001918460208302840111640100000000831117156107b057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561080057600080fd5b82018360208201111561081257600080fd5b8035906020019184602083028401116401000000008311171561083457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611e69945050505050565b34801561087e57600080fd5b506104a26004803603604081101561089557600080fd5b5080359060200135611f13565b3480156108ae57600080fd5b506104a2600480360360608110156108c557600080fd5b50600160a060020a038135169060ff60208201358116916040013516612006565b3480156108f257600080fd5b506107376004803603602081101561090957600080fd5b5035600160a060020a03166124d3565b34801561092557600080fd5b506107376004803603604081101561093c57600080fd5b508035906020013560ff16612705565b34801561095857600080fd5b506107376004803603602081101561096f57600080fd5b5035600160a060020a031661272c565b34801561098b57600080fd5b50610a4e600480360360408110156109a257600080fd5b8101906020810181356401000000008111156109bd57600080fd5b8201836020820111156109cf57600080fd5b803590602001918460018302840111640100000000831117156109f157600080fd5b919390929091602081019035640100000000811115610a0f57600080fd5b820183602082011115610a2157600080fd5b80359060200191846001830284011164010000000083111715610a4357600080fd5b509092509050612849565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610a8f578181015183820152602001610a77565b50505050905090810190601f168015610abc5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610aef578181015183820152602001610ad7565b50505050905090810190601f168015610b1c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610b3857600080fd5b5061069d612b93565b348015610b4d57600080fd5b5061073760048036036040811015610b6457600080fd5b508035906020013560ff16612b9c565b348015610b8057600080fd5b506104b9612c0a565b348015610b9557600080fd5b506106dd612c19565b348015610baa57600080fd5b50610737612c1f565b348015610bbf57600080fd5b50610514612c28565b348015610bd457600080fd5b506106dd60048036036020811015610beb57600080fd5b5035612ca1565b348015610bfe57600080fd5b506106dd612cc0565b348015610c1357600080fd5b506104b960048036036020811015610c2a57600080fd5b5035600160a060020a0316612cc6565b348015610c4657600080fd5b506104a2612dd6565b348015610c5b57600080fd5b506104a260048036036020811015610c7257600080fd5b5035600160a060020a0316612dfb565b610737612e79565b348015610c9657600080fd5b5061051460048036036040811015610cad57600080fd5b508035906020013561307d565b348015610cc657600080fd5b506106dd613100565b348015610cdb57600080fd5b506104b9613106565b348015610cf057600080fd5b5061051460048036036020811015610d0757600080fd5b5035600160a060020a03166131f2565b348015610d2357600080fd5b506106dd6133f4565b348015610d3857600080fd5b506104b9613406565b348015610d4d57600080fd5b506106dd613415565b348015610d6257600080fd5b506104a261341b565b348015610d7757600080fd5b50610514613459565b348015610d8c57600080fd5b5061069d6134b4565b348015610da157600080fd5b506104b960048036036020811015610db857600080fd5b5035600160a060020a03166134c2565b348015610dd457600080fd5b506104a260048036036040811015610deb57600080fd5b5080359060200135600160a060020a031661357a565b348015610e0d57600080fd5b5061073760048036036020811015610e2457600080fd5b5035600160a060020a03166136e8565b348015610e4057600080fd5b506104a260048036036020811015610e5757600080fd5b5035600160a060020a0316613869565b348015610e7357600080fd5b506107376138b7565b348015610e8857600080fd5b506105146138c8565b348015610e9d57600080fd5b506104a260048036036040811015610eb457600080fd5b81359190810190604081016020820135640100000000811115610ed657600080fd5b820183602082011115610ee857600080fd5b80359060200191846001830284011164010000000083111715610f0a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613923945050505050565b348015610f5757600080fd5b506104a260048036036040811015610f6e57600080fd5b508035906020013560ff1661396b565b348015610f8a57600080fd5b506106dd60048036036020811015610fa157600080fd5b5035613a6c565b348015610fb457600080fd5b5061051460048036036020811015610fcb57600080fd5b5035613a7a565b348015610fde57600080fd5b50610737613aee565b348015610ff357600080fd5b506104a26004803603602081101561100a57600080fd5b5035600160a060020a0316613afe565b34801561102657600080fd5b506106dd6004803603602081101561103d57600080fd5b81019060208101813564010000000081111561105857600080fd5b82018360208201111561106a57600080fd5b8035906020019184600183028401116401000000008311171561108c57600080fd5b509092509050613b7c565b3480156110a357600080fd5b506104b9613d10565b3480156110b857600080fd5b506104a2600480360360208110156110cf57600080fd5b8101906020810181356401000000008111156110ea57600080fd5b8201836020820111156110fc57600080fd5b8035906020019184600183028401116401000000008311171561111e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613d1f945050505050565b34801561116b57600080fd5b506107376004803603602081101561118257600080fd5b5035600160a060020a0316613d46565b34801561119e57600080fd5b5061069d613e8a565b3480156111b357600080fd5b506104a2600480360360208110156111ca57600080fd5b5035600160a060020a0316613e8f565b3480156111e657600080fd5b506104a2600480360360208110156111fd57600080fd5b81019060208101813564010000000081111561121857600080fd5b82018360208201111561122a57600080fd5b8035906020019184600183028401116401000000008311171561124c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613f0d945050505050565b34801561129957600080fd5b506104b961403a565b3480156112ae57600080fd5b506104a2600480360360e08110156112c557600080fd5b600160e060020a031982351691602081013591600160a060020a03604083013516919081019060808101606082013564010000000081111561130657600080fd5b82018360208201111561131857600080fd5b8035906020019184600183028401116401000000008311171561133a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505060ff8335169350505060208101359060400135614049565b34801561139557600080fd5b506104a2600480360360408110156113ac57600080fd5b50600160a060020a038135169060200135614210565b3480156113ce57600080fd5b506104a2600480360360208110156113e557600080fd5b503560ff1661425f565b3480156113fb57600080fd5b506105146004803603602081101561141257600080fd5b81019060208101813564010000000081111561142d57600080fd5b82018360208201111561143f57600080fd5b8035906020019184600183028401116401000000008311171561146157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506142d9945050505050565b3480156114ae57600080fd5b506104b9614482565b3480156114c357600080fd5b506104b9614491565b3480156114d857600080fd5b506104b96144a0565b3480156114ed57600080fd5b506104b96004803603604081101561150457600080fd5b50600160a060020a0381358116916020013516614564565b34801561152857600080fd5b506104a2614684565b34801561153d57600080fd5b506104b96004803603602081101561155457600080fd5b5035600160e060020a031916614746565b34801561157157600080fd5b506104a26004803603602081101561158857600080fd5b5035600160a060020a0316614761565b3480156115a457600080fd5b506104a2600480360360408110156115bb57600080fd5b5080359060200135600160a060020a031661479a565b3480156115dd57600080fd5b506106dd61496e565b3480156115f257600080fd5b506106dd6004803603602081101561160957600080fd5b5035600160a060020a0316614974565b34801561162557600080fd5b50610514614a58565b34801561163a57600080fd5b506116616004803603604081101561165157600080fd5b508035906020013560ff16614ab3565b6040805163ffffffff9092168252519081900360200190f35b34801561168657600080fd5b506106dd6004803603602081101561169d57600080fd5b8101906020810181356401000000008111156116b857600080fd5b8201836020820111156116ca57600080fd5b803590602001918460018302840111640100000000831117156116ec57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550614b05945050505050565b34801561173957600080fd5b506104a26004803603604081101561175057600080fd5b81019060208101813564010000000081111561176b57600080fd5b82018360208201111561177d57600080fd5b8035906020019184600183028401116401000000008311171561179f57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156117f257600080fd5b82018360208201111561180457600080fd5b8035906020019184600183028401116401000000008311171561182657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550614f76945050505050565b34801561187357600080fd5b506104a26004803603602081101561188a57600080fd5b503561516d565b34801561189d57600080fd5b506104b9600480360360208110156118b457600080fd5b5035600160a060020a03166151d2565b3480156118d057600080fd5b506104b9600480360360408110156118e757600080fd5b50803590602001356152ba565b34801561190057600080fd5b50610737600480360360a081101561191757600080fd5b600160e060020a0319823516919081019060408101602082013564010000000081111561194357600080fd5b82018360208201111561195557600080fd5b8035906020019184600183028401116401000000008311171561197757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505060ff83351693505050602081013590604001356152f1565b3480156119d257600080fd5b5061069d615488565b3480156119e757600080fd5b506106dd61548d565b3480156119fc57600080fd5b506104a260048036036020811015611a1357600080fd5b5035600160a060020a0316615493565b600454600160a060020a03165b90565b600254600160a060020a031681565b601d54600160a060020a031681565b6012805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611ad75780601f10611aac57610100808354040283529160200191611ad7565b820191906000526020600020905b815481529060010190602001808311611aba57829003601f168201915b505050505081565b611ae8336124d3565b1515611af357600080fd5b60005b8251811015611b5c5781601a60008584815181101515611b1257fe5b602090810291909101810151600160e060020a03191682528101919091526040016000208054600160a060020a031916600160a060020a0392909216919091179055600101611af6565b507f2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de88742668282604051808060200183600160a060020a0316600160a060020a03168152602001828103825284818151815260200191508051906020019060200280838360005b83811015611bd8578181015183820152602001611bc0565b50505050905001935050505060405180910390a15050565b611bf8613aee565b1515611c0357600080fd5b600480546040805160e060020a6363e6ffdd028152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd91602480820192602092909190829003018186803b158015611c5c57600080fd5b505afa158015611c70573d6000803e3d6000fd5b505050506040513d6020811015611c8657600080fd5b50519050600160a060020a0381161515611caa57611ca5858585612006565b611cb5565b611cb5818585612006565b5050505050565b600181565b6000818152601960205260409020545b919050565b611cdf336124d3565b1515611cea57600080fd5b601c5460408051600160a060020a038085168252909216602083015280517f9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b561779281900390910190a1601c8054600160a060020a031916600160a060020a0392909216919091179055565b601c54600090600160a060020a031615611de957601c546040805160e260020a63099a0f850281523360048201529051600160a060020a03909216916326683e1491602480820192602092909190829003018186803b158015611db657600080fd5b505afa158015611dca573d6000803e3d6000fd5b505050506040513d6020811015611de057600080fd5b50519050611a30565b600480546040805160e260020a63099a0f85028152339381019390935251600160a060020a03909116916326683e14916024808301926020929190829003018186803b158015611e3857600080fd5b505afa158015611e4c573d6000803e3d6000fd5b505050506040513d6020811015611e6257600080fd5b5051905090565b6000611e7433613d46565b1515611e7f57600080fd5b604080516c01000000000000000000000000300260208083019190915242603480840182905284518085039091018152605484018086528151919093012090915260006074830181905260948301523360b48301526103e80260d482015290517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360f40190a15060015b92915050565b611f1c336124d3565b1515611f2757600080fd5b6000828152601960205260409020546000190180821015611fb1576000838152601960205260409020805482908110611f5c57fe5b906000526020600020016019600085815260200190815260200160002083815481101515611f8657fe5b906000526020600020019080546001816001161561010002031660029004611faf92919061592d565b505b6000838152601960205260409020805482908110611fcb57fe5b906000526020600020016000611fe191906159b2565b60008381526019602052604090208054906120009060001983016159f6565b50505050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561204757600080fd5b505afa15801561205b573d6000803e3d6000fd5b505050506040513d602081101561207157600080fd5b5051600954610100900460ff9081169116141561211657604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b1580156120f957600080fd5b505af115801561210d573d6000803e3d6000fd5b50505050612000565b80600160a060020a03166312915a306040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561215257600080fd5b505afa158015612166573d6000803e3d6000fd5b505050506040513d602081101561217c57600080fd5b5051600954610100900460ff9081169116141561220457604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b1580156120f957600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561224057600080fd5b505afa158015612254573d6000803e3d6000fd5b505050506040513d602081101561226a57600080fd5b5051600954610100900460ff908116911614156122f257604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b1580156120f957600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561232e57600080fd5b505afa158015612342573d6000803e3d6000fd5b505050506040513d602081101561235857600080fd5b5051600954610100900460ff908116911614156123e057604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b1580156120f957600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561241c57600080fd5b505afa158015612430573d6000803e3d6000fd5b505050506040513d602081101561244657600080fd5b5051600954610100900460ff908116911614156124ce57604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b1580156120f957600080fd5b600080fd5b600354600090600160a060020a03838116911614156124f457506001611cd1565b600080516020615af1833981519152600052601760209081527f32dc2f122323555a2931187e5f104d329406c3094dd4da659019b9a47f95daf0805460408051828502810185019091528181526060939092919083018282801561258157602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612563575b50939450600093505050505b81518110156126fb57600082828151811015156125a657fe5b6020908102909101810151604080517fd8961c8d000000000000000000000000000000000000000000000000000000008152600160a060020a0389811660048301526000602483015291519294509084169263d8961c8d92604480840193829003018186803b15801561261857600080fd5b505afa15801561262c573d6000803e3d6000fd5b505050506040513d602081101561264257600080fd5b5051806126e15750604080517fd8961c8d000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301526001602483015291519183169163d8961c8d91604480820192602092909190829003018186803b1580156126b457600080fd5b505afa1580156126c8573d6000803e3d6000fd5b505050506040513d60208110156126de57600080fd5b50515b156126f25760019350505050611cd1565b5060010161258d565b5060009392505050565b6000612710336124d3565b151561271b57600080fd5b61272583836154e1565b9392505050565b601c54600090600160a060020a0316156127c357601c546040805160e260020a63099a0f85028152600160a060020a038581166004830152915191909216916326683e14916024808301926020929190829003018186803b15801561279057600080fd5b505afa1580156127a4573d6000803e3d6000fd5b505050506040513d60208110156127ba57600080fd5b50519050611cd1565b600480546040805160e260020a63099a0f85028152600160a060020a0386811694820194909452905192909116916326683e1491602480820192602092909190829003018186803b15801561281757600080fd5b505afa15801561282b573d6000803e3d6000fd5b505050506040513d602081101561284157600080fd5b505192915050565b601e546060908190600160a060020a0316156129f757601e54604080517f268bfac40000000000000000000000000000000000000000000000000000000081526004810191825260448101889052600160a060020a039092169163268bfac49189918991899189919081906024810190606401878780828437600083820152601f01601f191690910184810383528581526020019050858580828437600081840152601f19601f820116905080830192505050965050505050505060006040518083038186803b15801561291c57600080fd5b505afa158015612930573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561295957600080fd5b81019080805164010000000081111561297157600080fd5b8201602081018481111561298457600080fd5b815164010000000081118282018710171561299e57600080fd5b505092919060200180516401000000008111156129ba57600080fd5b820160208101848111156129cd57600080fd5b81516401000000008111828201871017156129e757600080fd5b509496509450612b8a9350505050565b60048054604080517f268bfac400000000000000000000000000000000000000000000000000000000815292830190815260448301889052600160a060020a039091169163268bfac49189918991899189919081906024810190606401878780828437600083820152601f01601f191690910184810383528581526020019050858580828437600081840152601f19601f820116905080830192505050965050505050505060006040518083038186803b158015612ab457600080fd5b505afa158015612ac8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015612af157600080fd5b810190808051640100000000811115612b0957600080fd5b82016020810184811115612b1c57600080fd5b8151640100000000811182820187101715612b3657600080fd5b50509291906020018051640100000000811115612b5257600080fd5b82016020810184811115612b6557600080fd5b8151640100000000811182820187101715612b7f57600080fd5b509496509450505050505b94509492505050565b60095460ff1681565b6000828152600760209081526040822060ff8481169290920490911690601f841690600282900a9081908460088110612bd157fe5b600881049091015460046007909216919091026101000a90041663ffffffff1615612bfd576001612c00565b60005b9695505050505050565b601454600160a060020a031681565b600d5490565b60105460ff1681565b600080516020615af1833981519152600090815260176020527f32dc2f122323555a2931187e5f104d329406c3094dd4da659019b9a47f95daf08054606092919082908110612c7357fe5b600091825260209091200154600160a060020a03169050612c9b612c956155ed565b826155f2565b91505090565b6018805482908110612caf57fe5b600091825260209091200154905081565b600c5481565b601d54600090600160a060020a031615612d5657601d54604080517f40b89f06000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152915191909216916340b89f069160248083019260209291908290030181600087803b158015612d4257600080fd5b505af11580156127a4573d6000803e3d6000fd5b60048054604080517f40b89f06000000000000000000000000000000000000000000000000000000008152600160a060020a0386811694820194909452905192909116916340b89f06916024808201926020929091908290030181600087803b158015612dc257600080fd5b505af115801561282b573d6000803e3d6000fd5b600354600160a060020a03163314612ded57600080fd5b600354600160a060020a0316ff5b612e04336124d3565b1515612e0f57600080fd5b601d5460408051600160a060020a038085168252909216602083015280517ffa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f6619281900390910190a1601d8054600160a060020a031916600160a060020a0392909216919091179055565b6000612e83611d54565b1515612e8e57600080fd5b60105460ff161515612e9f57600080fd5b6000600b8054600181600116156101000203166002900490501115612f4e57600d80546001818101808455600093909352600b8054612f15937fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5019260026101009183161591909102600019019091160461592d565b5050600c54600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd01555b600f8054612f7191600b916002600019610100600184161502019091160461592d565b5042600c55604080516020810191829052600090819052612f9491600f91615a1a565b506010805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a0316612fd5611a23565b60408051600160a060020a038085168252831660208201526060918101828152600b805460026000196101006001841615020190911604938301849052926080830190849080156130675780601f1061303c57610100808354040283529160200191613067565b820191906000526020600020905b81548152906001019060200180831161304a57829003601f168201915b505094505050505060405180910390a150600190565b60196020528160005260406000208181548110151561309857fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152945090925090830182828015611ad75780601f10611aac57610100808354040283529160200191611ad7565b60115481565b601d54600090600160a060020a03161561318157601d60009054906101000a9004600160a060020a0316600160a060020a031663575185ed6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561316d57600080fd5b505af1158015611dca573d6000803e3d6000fd5b60048054604080517f575185ed0000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263575185ed9282820192602092908290030181600087803b1580156131de57600080fd5b505af1158015611e4c573d6000803e3d6000fd5b601e54606090600160a060020a0316156132fc57601e54604080517f589aafc1000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163589aafc1916024808301926000929190829003018186803b15801561326c57600080fd5b505afa158015613280573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156132a957600080fd5b8101908080516401000000008111156132c157600080fd5b820160208101848111156132d457600080fd5b81516401000000008111828201871017156132ee57600080fd5b50909450611cd19350505050565b60048054604080517f589aafc1000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051929091169163589aafc191602480820192600092909190829003018186803b15801561336657600080fd5b505afa15801561337a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156133a357600080fd5b8101908080516401000000008111156133bb57600080fd5b820160208101848111156133ce57600080fd5b81516401000000008111828201871017156133e857600080fd5b50909695505050505050565b600080516020615af183398151915281565b601b54600160a060020a031681565b60015481565b6134236138b7565b151561342e57600080fd5b60408051602081019182905260009081905261344c91600f91615a1a565b506010805460ff19169055565b600f805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611ad75780601f10611aac57610100808354040283529160200191611ad7565b600954610100900460ff1681565b601b54600090600160a060020a03161561352657601b546040805160e060020a6363e6ffdd028152600160a060020a038581166004830152915191909216916363e6ffdd916024808301926020929190829003018186803b15801561279057600080fd5b600480546040805160e060020a6363e6ffdd028152600160a060020a0386811694820194909452905192909116916363e6ffdd91602480820192602092909190829003018186803b15801561281757600080fd5b613583336124d3565b151561358e57600080fd5b600160a060020a03811615156135a357600080fd5b60005b60008381526017602052604090205481101561362657600080516020615af18339815191528314156135d757600080fd5b60008381526017602052604090208054600160a060020a0384169190839081106135fd57fe5b600091825260209091200154600160a060020a0316141561361e57506136e4565b6001016135a6565b506000828152601760209081526040822080546001808201808455928552929093209092018054600160a060020a031916600160a060020a03851617905514156136a057601880546001810182556000919091527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e018290555b60408051838152600160a060020a038316602082015281517f145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471929181900390910190a15b5050565b600354600090600160a060020a038381169116148061370f5750600954606460ff90911610155b1561371c57506001611cd1565b600954600061010090910460ff16111561386157600480546040805160e060020a6363e6ffdd028152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b15801561378657600080fd5b505afa15801561379a573d6000803e3d6000fd5b505050506040513d60208110156137b057600080fd5b5051600954604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561382c57600080fd5b505afa158015613840573d6000803e3d6000fd5b505050506040513d602081101561385657600080fd5b50519150611cd19050565b506000611cd1565b600254600160a060020a0316331461388057600080fd5b600160a060020a038116151561389557600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a0316331490565b6013805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611ad75780601f10611aac57610100808354040283529160200191611ad7565b61392c336124d3565b151561393757600080fd5b6000828152601960209081526040822080546001810180835591845292829020845191936120009391019190850190615a1a565b613974336124d3565b151561397f57600080fd5b600860ff82161061398f57600080fd5b600082815260076020526040812060ff8316600881106139ab57fe5b600891828204019190066004029054906101000a900463ffffffff169050600760008481526020019081526020016000206000018260ff166008811015156139ef57fe5b600881049091018054600163ffffffff60046007909516949094026101000a80830485169190910184168102908402199091161790556040805185815260ff8516602082015291831682820152517f77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f9181900360600190a1505050565b600e805482908110612caf57fe5b600d805482908110613a8857fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815293509091830182828015611ad75780601f10611aac57610100808354040283529160200191611ad7565b6000613af9336136e8565b905090565b613b07336124d3565b1515613b1257600080fd5b601e5460408051600160a060020a038085168252909216602083015280517f78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee964779281900390910190a1601e8054600160a060020a031916600160a060020a0392909216919091179055565b601e54600090600160a060020a031615613c5057601e546040517f8d2a23db00000000000000000000000000000000000000000000000000000000815260206004820190815260248201859052600160a060020a0390921691638d2a23db91869186918190604401848480828437600083820152604051601f909101601f191690920195506020945090925050508083038186803b158015613c1d57600080fd5b505afa158015613c31573d6000803e3d6000fd5b505050506040513d6020811015613c4757600080fd5b50519050611f0d565b600480546040517f8d2a23db000000000000000000000000000000000000000000000000000000008152602092810192835260248101859052600160a060020a0390911691638d2a23db91869186918190604401848480828437600083820152604051601f909101601f191690920195506020945090925050508083038186803b158015613cdd57600080fd5b505afa158015613cf1573d6000803e3d6000fd5b505050506040513d6020811015613d0757600080fd5b50519392505050565b600354600160a060020a031681565b613d28336124d3565b1515613d3357600080fd5b80516136e4906013906020840190615a1a565b600354600090600160a060020a0383811691161480613d6d5750600954600a60ff90911610155b15613d7a57506001611cd1565b600954600061010090910460ff16111561386157600480546040805160e060020a6363e6ffdd028152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b158015613de457600080fd5b505afa158015613df8573d6000803e3d6000fd5b505050506040513d6020811015613e0e57600080fd5b5051600954604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561382c57600080fd5b600a81565b613e98336124d3565b1515613ea357600080fd5b601b5460408051600160a060020a038085168252909216602083015280517fc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce02999281900390910190a1601b8054600160a060020a031916600160a060020a0392909216919091179055565b613f156138b7565b1515613f2057600080fd5b60105460ff1615613f3057600080fd5b8051608011613f3e57600080fd5b8051613f5190600f906020840190615a1a565b506010805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316613f95611a23565b60408051600160a060020a038085168252831660208201526060918101828152600f805460026000196101006001841615020190911604938301849052926080830190849080156140275780601f10613ffc57610100808354040283529160200191614027565b820191906000526020600020905b81548152906001019060200180831161400a57829003601f168201915b505094505050505060405180910390a150565b601c54600160a060020a031681565b61405687858585856152f1565b151561406157600080fd5b600160e060020a031987166000908152601a60209081526040808320549051604481018a9052600160a060020a0389811660648301526060602483018181528a5160848501528a51929094169594909386938e938c938f938f939092839260a4909201918701908083838e5b838110156140e55781810151838201526020016140cd565b50505050905090810190601f1680156141125780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e060020a031990991698909817885251815191979096508695509350915081905083835b6020831061418d5780518252601f19909201916020918201910161416e565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146141ed576040519150601f19603f3d011682016040523d82523d6000602084013e6141f2565b606091505b50909250905081151561420457600080fd5b50505050505050505050565b614219336124d3565b151561422457600080fd5b604051600160a060020a0383169082156108fc029083906000818181858888f1935050505015801561425a573d6000803e3d6000fd5b505050565b614267613aee565b151561427257600080fd5b6009805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b6060602082511115156143905781518083015160008181526005602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845293949390918301828280156143825780601f1061435757610100808354040283529160200191614382565b820191906000526020600020905b81548152906001019060200180831161436557829003601f168201915b505050505092505050611cd1565b6006826040518082805190602001908083835b602083106143c25780518252601f1990920191602091820191016143a3565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156144765780601f1061444b57610100808354040283529160200191614476565b820191906000526020600020905b81548152906001019060200180831161445957829003601f168201915b50505050509050919050565b601e54600160a060020a031681565b600454600160a060020a031681565b601d54600090600160a060020a03161561450757601d60009054906101000a9004600160a060020a0316600160a060020a031663b8cfaf056040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561316d57600080fd5b60048054604080517fb8cfaf050000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263b8cfaf059282820192602092908290030181600087803b1580156131de57600080fd5b601d54600090600160a060020a0316156145fc57601d54604080517fbf4e088f000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015285811660248301529151919092169163bf4e088f9160448083019260209291908290030181600087803b1580156145e857600080fd5b505af1158015613c31573d6000803e3d6000fd5b60048054604080517fbf4e088f000000000000000000000000000000000000000000000000000000008152600160a060020a038781169482019490945285841660248201529051929091169163bf4e088f916044808201926020929091908290030181600087803b15801561467057600080fd5b505af1158015613cf1573d6000803e3d6000fd5b61468c613aee565b151561469757600080fd5b604080516020808252600b8054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156147365780601f1061470b57610100808354040283529160200191614736565b820191906000526020600020905b81548152906001019060200180831161471957829003601f168201915b50509250505060405180910390a1565b601a60205260009081526040902054600160a060020a031681565b600354600160a060020a0316331461477857600080fd5b60148054600160a060020a031916600160a060020a0392909216919091179055565b6147a3336124d3565b15156147ae57600080fd5b600080516020615af18339815191528214156147c957600080fd5b60005b60008381526017602052604090205481101561425a5760008381526017602052604090208054600160a060020a03841691908390811061480857fe5b600091825260209091200154600160a060020a0316141561496657600083815260176020526040902054600019810182146148bd5760008481526017602052604090208054600019830190811061485b57fe5b6000918252602080832090910154868352601790915260409091208054600160a060020a03909216918490811061488e57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b6000848152601760205260409020805460001983019081106148db57fe5b600091825260208083209091018054600160a060020a03191690558582526017905260409020805460001901906149129082615a88565b5061491c8461566d565b60408051858152600160a060020a038516602082015281517fa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456929181900390910190a150506136e4565b6001016147cc565b60165481565b601e54600090600160a060020a0316156149ee57601e54604080517fd6be0f49000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163d6be0f49916024808301926020929190829003018186803b15801561279057600080fd5b60048054604080517fd6be0f49000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051929091169163d6be0f4991602480820192602092909190829003018186803b15801561281757600080fd5b600b805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611ad75780601f10611aac57610100808354040283529160200191611ad7565b6000600860ff831610614ac557600080fd5b600083815260076020526040902060ff831660088110614ae157fe5b600891828204019190066004029054906101000a900463ffffffff16905092915050565b6000614b0f6138b7565b1515614b1a57600080fd5b6000826040516020018082805190602001908083835b60208310614b4f5780518252601f199092019160209182019101614b30565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090506000600b6040516020018082805460018160011615610100020316600290048015614bee5780601f10614bcc576101008083540402835291820191614bee565b820191906000526020600020905b815481529060010190602001808311614bda575b505091505060405160208183030381529060405280519060200120905080821415614dc557600d541515614c4557604080516020810191829052600090819052614c3a91600b91615a1a565b506000600c55614ce9565b600080805b600d54811015614c9d5781600e82815481101515614c6457fe5b90600052602060002001541115614c9557809250600e81815481101515614c8757fe5b906000526020600020015491505b600101614c4a565b50600d805483908110614cac57fe5b90600052602060002001600b9080546001816001161561010002031660029004614cd792919061592d565b50600c819055614ce682615733565b50505b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168560006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614d7e578181015183820152602001614d66565b50505050905090810190601f168015614dab5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600092505050611cd1565b60001960005b600d54811015614e8e576000600d82815481101515614de657fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015614e4e5780601f10614e2c576101008083540402835291820191614e4e565b820191906000526020600020905b815481529060010190602001808311614e3a575b505091505060405160208183030381529060405280519060200120905080851415614e8557614e7c82615733565b81925050614e8e565b50600101614dcb565b50600019811415614e9e57600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031686836040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614f32578181015183820152602001614f1a565b50505050905090810190601f168015614f5f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1949350505050565b614f7f336124d3565b1515614f8a57600080fd5b8151602010614fe5578151808301516000818152600560205260408120919291614fb3916159b2565b600083511115614fde5760008281526005602090815260409091208451614fdc92860190615a1a565b505b50506150d0565b6006826040518082805190602001908083835b602083106150175780518252601f199092019160209182019101614ff8565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092206150509250905060006159b2565b6000815111156150d057806006836040518082805190602001908083835b6020831061508d5780518252601f19909201916020918201910161506e565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932084516150ce9591949190910192509050615a1a565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c826040518080602001828103825283818151815260200191508051906020019080838360005b8381101561512f578181015183820152602001615117565b50505050905090810190601f16801561515c5780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050565b615176336124d3565b151561518157600080fd5b60008181526007602052604081209061519a8282615aac565b50506040805182815290517f87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f9181900360200190a150565b601b54600090600160a060020a03161561524e57601b54604080517fe7cf0c66000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163e7cf0c669160248083019260209291908290030181600087803b158015612d4257600080fd5b60048054604080517fe7cf0c66000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051929091169163e7cf0c66916024808201926020929091908290030181600087803b158015612dc257600080fd5b6017602052816000526040600020818154811015156152d557fe5b600091825260209091200154600160a060020a03169150829050565b600160e060020a031985166000908152601a6020526040812054600160a060020a031680151561532057600080fd5b60006001878051906020012087878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015615386573d6000803e3d6000fd5b50505060206040510351905061539b816124d3565b15156153ac5760009250505061547f565b60006153ed6040805190810160405280600381526020017f696964000000000000000000000000000000000000000000000000000000000081525089615832565b9050600160a060020a038116301461540b576000935050505061547f565b600061544c6040805190810160405280600381526020017f69617400000000000000000000000000000000000000000000000000000000008152508a6158c0565b905080156154765760006103e882046016544201039050601554811115151561547457600080fd5b505b60019450505050505b95945050505050565b606481565b60155481565b600354600160a060020a031633146154aa57600080fd5b600160a060020a03811615156154bf57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b6000828152600760209081526040822060ff8481169290920490911690601f841690600282900a9084908290856008811061551857fe5b600881049091015460046007909216919091026101000a90041663ffffffff1615615544576001615547565b60005b90508015156155a05760008781526007602052604090208290856008811061556b57fe5b60088104909101805463ffffffff60046007909416939093026101000a80820484169094178316840292909302199092161790555b6040805188815260ff881660208201528215158183015290517f4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d9181900360600190a19695505050505050565b600e90565b604080517f6d616b654944537472696e6728696e742c6164647265737329000000000000008152815190819003601901812080825260e060020a850260048301819052600883018590526060939192909160ff919081602881856000fa80151561565b57600080fd5b50604080820190529695505050505050565b60008181526017602052604090205415156157305760005b6018548110156136e4578160188281548110151561569f57fe5b90600052602060002001541415615728576018546000190181146156f6576018805460001981019081106156cf57fe5b90600052602060002001546018828154811015156156e957fe5b6000918252602090912001555b60188054600019810190811061570857fe5b60009182526020822001556018805460001901906157269082615a88565b505b600101615685565b50565b600d80548290811061574157fe5b90600052602060002001600061575791906159b2565b600e80548290811061576557fe5b6000918252602082200155600d5460001901811461580b57600d8054600019810190811061578f57fe5b90600052602060002001600d828154811015156157a857fe5b9060005260206000200190805460018160011615610100020316600290046157d192919061592d565b50600e805460001981019081106157e457fe5b9060005260206000200154600e828154811015156157fe57fe5b6000918252602090912001555b600d80549061581e9060001983016159f6565b50600e8054906136e4906000198301615a88565b604080517f6765744164647265737328737472696e672c627974657329000000000000000081529051908190036018018120825181835260208501516004840181905260009360fe92906024820190865b838110156158a0576020818a018101516024848401015201615883565b506020818383886000fa8080156124ce5750505198975050505050505050565b604080517f67657455696e7428737472696e672c627974657329000000000000000000000081529051908190036015018120825181835260208501516004840181905260009360fe9290602482019086838110156158a0576020818a018101516024848401015201615883565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061596657805485556159a2565b828001600101855582156159a257600052602060002091601f016020900482015b828111156159a2578254825591600101919060010190615987565b506159ae929150615ab3565b5090565b50805460018160011615610100020316600290046000825580601f106159d85750615730565b601f0160209004906000526020600020908101906157309190615ab3565b81548183558181111561425a5760008381526020902061425a918101908301615acd565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615a5b57805160ff19168380011785556159a2565b828001600101855582156159a2579182015b828111156159a2578251825591602001919060010190615a6d565b81548183558181111561425a5760008381526020902061425a918101908301615ab3565b5060009055565b611a3091905b808211156159ae5760008155600101615ab9565b611a3091905b808211156159ae576000615ae782826159b2565b50600101615ad356fe74656e616e745f61646d696e0000000000000000000000000000000000000000a165627a7a72305820eb18b593911982ce95a2236a3255b9829a682519ef020765ebc4ae2b59316e500029"

// DeployBaseTenantSpace deploys a new Ethereum contract, binding an instance of BaseTenantSpace to it.
func DeployBaseTenantSpace(auth *bind.TransactOpts, backend bind.ContractBackend, _contentSpace common.Address, _tenantName string, _kmsAddr common.Address) (common.Address, *types.Transaction, *BaseTenantSpace, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseTenantSpaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseTenantSpaceBin), backend, _contentSpace, _tenantName, _kmsAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseTenantSpace{BaseTenantSpaceCaller: BaseTenantSpaceCaller{contract: contract}, BaseTenantSpaceTransactor: BaseTenantSpaceTransactor{contract: contract}, BaseTenantSpaceFilterer: BaseTenantSpaceFilterer{contract: contract}}, nil
}

// BaseTenantSpace is an auto generated Go binding around an Ethereum contract.
type BaseTenantSpace struct {
	BaseTenantSpaceCaller     // Read-only binding to the contract
	BaseTenantSpaceTransactor // Write-only binding to the contract
	BaseTenantSpaceFilterer   // Log filterer for contract events
}

// BaseTenantSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseTenantSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseTenantSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseTenantSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseTenantSpaceSession struct {
	Contract     *BaseTenantSpace  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseTenantSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseTenantSpaceCallerSession struct {
	Contract *BaseTenantSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// BaseTenantSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseTenantSpaceTransactorSession struct {
	Contract     *BaseTenantSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// BaseTenantSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseTenantSpaceRaw struct {
	Contract *BaseTenantSpace // Generic contract binding to access the raw methods on
}

// BaseTenantSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseTenantSpaceCallerRaw struct {
	Contract *BaseTenantSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// BaseTenantSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseTenantSpaceTransactorRaw struct {
	Contract *BaseTenantSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseTenantSpace creates a new instance of BaseTenantSpace, bound to a specific deployed contract.
func NewBaseTenantSpace(address common.Address, backend bind.ContractBackend) (*BaseTenantSpace, error) {
	contract, err := bindBaseTenantSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpace{BaseTenantSpaceCaller: BaseTenantSpaceCaller{contract: contract}, BaseTenantSpaceTransactor: BaseTenantSpaceTransactor{contract: contract}, BaseTenantSpaceFilterer: BaseTenantSpaceFilterer{contract: contract}}, nil
}

// NewBaseTenantSpaceCaller creates a new read-only instance of BaseTenantSpace, bound to a specific deployed contract.
func NewBaseTenantSpaceCaller(address common.Address, caller bind.ContractCaller) (*BaseTenantSpaceCaller, error) {
	contract, err := bindBaseTenantSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceCaller{contract: contract}, nil
}

// NewBaseTenantSpaceTransactor creates a new write-only instance of BaseTenantSpace, bound to a specific deployed contract.
func NewBaseTenantSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseTenantSpaceTransactor, error) {
	contract, err := bindBaseTenantSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceTransactor{contract: contract}, nil
}

// NewBaseTenantSpaceFilterer creates a new log filterer instance of BaseTenantSpace, bound to a specific deployed contract.
func NewBaseTenantSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseTenantSpaceFilterer, error) {
	contract, err := bindBaseTenantSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceFilterer{contract: contract}, nil
}

// bindBaseTenantSpace binds a generic wrapper to an already deployed contract.
func bindBaseTenantSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseTenantSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseTenantSpace *BaseTenantSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseTenantSpace.Contract.BaseTenantSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseTenantSpace *BaseTenantSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.BaseTenantSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseTenantSpace *BaseTenantSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.BaseTenantSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseTenantSpace *BaseTenantSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseTenantSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseTenantSpace *BaseTenantSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseTenantSpace *BaseTenantSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceSession) CANACCESS() (uint8, error) {
	return _BaseTenantSpace.Contract.CANACCESS(&_BaseTenantSpace.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CANACCESS() (uint8, error) {
	return _BaseTenantSpace.Contract.CANACCESS(&_BaseTenantSpace.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceSession) CANEDIT() (uint8, error) {
	return _BaseTenantSpace.Contract.CANEDIT(&_BaseTenantSpace.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CANEDIT() (uint8, error) {
	return _BaseTenantSpace.Contract.CANEDIT(&_BaseTenantSpace.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceSession) CANSEE() (uint8, error) {
	return _BaseTenantSpace.Contract.CANSEE(&_BaseTenantSpace.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CANSEE() (uint8, error) {
	return _BaseTenantSpace.Contract.CANSEE(&_BaseTenantSpace.CallOpts)
}

// GROUPIDADMIN is a free data retrieval call binding the contract method 0x58d40b25.
//
// Solidity: function GROUP_ID_ADMIN() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GROUPIDADMIN(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "GROUP_ID_ADMIN")
	return *ret0, err
}

// GROUPIDADMIN is a free data retrieval call binding the contract method 0x58d40b25.
//
// Solidity: function GROUP_ID_ADMIN() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceSession) GROUPIDADMIN() ([32]byte, error) {
	return _BaseTenantSpace.Contract.GROUPIDADMIN(&_BaseTenantSpace.CallOpts)
}

// GROUPIDADMIN is a free data retrieval call binding the contract method 0x58d40b25.
//
// Solidity: function GROUP_ID_ADMIN() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GROUPIDADMIN() ([32]byte, error) {
	return _BaseTenantSpace.Contract.GROUPIDADMIN(&_BaseTenantSpace.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) AddressKMS() (common.Address, error) {
	return _BaseTenantSpace.Contract.AddressKMS(&_BaseTenantSpace.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) AddressKMS() (common.Address, error) {
	return _BaseTenantSpace.Contract.AddressKMS(&_BaseTenantSpace.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CanCommit() (bool, error) {
	return _BaseTenantSpace.Contract.CanCommit(&_BaseTenantSpace.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CanCommit() (bool, error) {
	return _BaseTenantSpace.Contract.CanCommit(&_BaseTenantSpace.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CanConfirm() (bool, error) {
	return _BaseTenantSpace.Contract.CanConfirm(&_BaseTenantSpace.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CanConfirm() (bool, error) {
	return _BaseTenantSpace.Contract.CanConfirm(&_BaseTenantSpace.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CanEdit() (bool, error) {
	return _BaseTenantSpace.Contract.CanEdit(&_BaseTenantSpace.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CanEdit() (bool, error) {
	return _BaseTenantSpace.Contract.CanEdit(&_BaseTenantSpace.CallOpts)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanNodePublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "canNodePublish", _candidate)
	return *ret0, err
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CanNodePublish(_candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.CanNodePublish(&_BaseTenantSpace.CallOpts, _candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CanNodePublish(_candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.CanNodePublish(&_BaseTenantSpace.CallOpts, _candidate)
}

// CheckCallFunc is a free data retrieval call binding the contract method 0xed1f6456.
//
// Solidity: function checkCallFunc(bytes4 _func4Bytes, bytes _encAuthToken, uint8 _v, bytes32 _r, bytes32 _s) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CheckCallFunc(opts *bind.CallOpts, _func4Bytes [4]byte, _encAuthToken []byte, _v uint8, _r [32]byte, _s [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "checkCallFunc", _func4Bytes, _encAuthToken, _v, _r, _s)
	return *ret0, err
}

// CheckCallFunc is a free data retrieval call binding the contract method 0xed1f6456.
//
// Solidity: function checkCallFunc(bytes4 _func4Bytes, bytes _encAuthToken, uint8 _v, bytes32 _r, bytes32 _s) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CheckCallFunc(_func4Bytes [4]byte, _encAuthToken []byte, _v uint8, _r [32]byte, _s [32]byte) (bool, error) {
	return _BaseTenantSpace.Contract.CheckCallFunc(&_BaseTenantSpace.CallOpts, _func4Bytes, _encAuthToken, _v, _r, _s)
}

// CheckCallFunc is a free data retrieval call binding the contract method 0xed1f6456.
//
// Solidity: function checkCallFunc(bytes4 _func4Bytes, bytes _encAuthToken, uint8 _v, bytes32 _r, bytes32 _s) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CheckCallFunc(_func4Bytes [4]byte, _encAuthToken []byte, _v uint8, _r [32]byte, _s [32]byte) (bool, error) {
	return _BaseTenantSpace.Contract.CheckCallFunc(&_BaseTenantSpace.CallOpts, _func4Bytes, _encAuthToken, _v, _r, _s)
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CheckKMS(opts *bind.CallOpts, _kmsIdStr string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "checkKMS", _kmsIdStr)
	return *ret0, err
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) CheckKMS(_kmsIdStr string) (*big.Int, error) {
	return _BaseTenantSpace.Contract.CheckKMS(&_BaseTenantSpace.CallOpts, _kmsIdStr)
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CheckKMS(_kmsIdStr string) (*big.Int, error) {
	return _BaseTenantSpace.Contract.CheckKMS(&_BaseTenantSpace.CallOpts, _kmsIdStr)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CheckKMSAddr(opts *bind.CallOpts, _kmsAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "checkKMSAddr", _kmsAddr)
	return *ret0, err
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _BaseTenantSpace.Contract.CheckKMSAddr(&_BaseTenantSpace.CallOpts, _kmsAddr)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _BaseTenantSpace.Contract.CheckKMSAddr(&_BaseTenantSpace.CallOpts, _kmsAddr)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CommitPending() (bool, error) {
	return _BaseTenantSpace.Contract.CommitPending(&_BaseTenantSpace.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CommitPending() (bool, error) {
	return _BaseTenantSpace.Contract.CommitPending(&_BaseTenantSpace.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) ContentSpace() (common.Address, error) {
	return _BaseTenantSpace.Contract.ContentSpace(&_BaseTenantSpace.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ContentSpace() (common.Address, error) {
	return _BaseTenantSpace.Contract.ContentSpace(&_BaseTenantSpace.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) CountVersionHashes() (*big.Int, error) {
	return _BaseTenantSpace.Contract.CountVersionHashes(&_BaseTenantSpace.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseTenantSpace.Contract.CountVersionHashes(&_BaseTenantSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) Creator() (common.Address, error) {
	return _BaseTenantSpace.Contract.Creator(&_BaseTenantSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) Creator() (common.Address, error) {
	return _BaseTenantSpace.Contract.Creator(&_BaseTenantSpace.CallOpts)
}

// DefLeewaySecs is a free data retrieval call binding the contract method 0xd21a8c94.
//
// Solidity: function defLeewaySecs() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) DefLeewaySecs(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "defLeewaySecs")
	return *ret0, err
}

// DefLeewaySecs is a free data retrieval call binding the contract method 0xd21a8c94.
//
// Solidity: function defLeewaySecs() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) DefLeewaySecs() (*big.Int, error) {
	return _BaseTenantSpace.Contract.DefLeewaySecs(&_BaseTenantSpace.CallOpts)
}

// DefLeewaySecs is a free data retrieval call binding the contract method 0xd21a8c94.
//
// Solidity: function defLeewaySecs() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) DefLeewaySecs() (*big.Int, error) {
	return _BaseTenantSpace.Contract.DefLeewaySecs(&_BaseTenantSpace.CallOpts)
}

// DefTokenExpSecs is a free data retrieval call binding the contract method 0xf1df8140.
//
// Solidity: function defTokenExpSecs() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) DefTokenExpSecs(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "defTokenExpSecs")
	return *ret0, err
}

// DefTokenExpSecs is a free data retrieval call binding the contract method 0xf1df8140.
//
// Solidity: function defTokenExpSecs() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) DefTokenExpSecs() (*big.Int, error) {
	return _BaseTenantSpace.Contract.DefTokenExpSecs(&_BaseTenantSpace.CallOpts)
}

// DefTokenExpSecs is a free data retrieval call binding the contract method 0xf1df8140.
//
// Solidity: function defTokenExpSecs() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) DefTokenExpSecs() (*big.Int, error) {
	return _BaseTenantSpace.Contract.DefTokenExpSecs(&_BaseTenantSpace.CallOpts)
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Description(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "description")
	return *ret0, err
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) Description() (string, error) {
	return _BaseTenantSpace.Contract.Description(&_BaseTenantSpace.CallOpts)
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) Description() (string, error) {
	return _BaseTenantSpace.Contract.Description(&_BaseTenantSpace.CallOpts)
}

// FactoryManager is a free data retrieval call binding the contract method 0x032b5a73.
//
// Solidity: function factoryManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) FactoryManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "factoryManager")
	return *ret0, err
}

// FactoryManager is a free data retrieval call binding the contract method 0x032b5a73.
//
// Solidity: function factoryManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) FactoryManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.FactoryManager(&_BaseTenantSpace.CallOpts)
}

// FactoryManager is a free data retrieval call binding the contract method 0x032b5a73.
//
// Solidity: function factoryManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) FactoryManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.FactoryManager(&_BaseTenantSpace.CallOpts)
}

// FuncMapping is a free data retrieval call binding the contract method 0xc2a21f14.
//
// Solidity: function funcMapping(bytes4 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) FuncMapping(opts *bind.CallOpts, arg0 [4]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "funcMapping", arg0)
	return *ret0, err
}

// FuncMapping is a free data retrieval call binding the contract method 0xc2a21f14.
//
// Solidity: function funcMapping(bytes4 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) FuncMapping(arg0 [4]byte) (common.Address, error) {
	return _BaseTenantSpace.Contract.FuncMapping(&_BaseTenantSpace.CallOpts, arg0)
}

// FuncMapping is a free data retrieval call binding the contract method 0xc2a21f14.
//
// Solidity: function funcMapping(bytes4 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) FuncMapping(arg0 [4]byte) (common.Address, error) {
	return _BaseTenantSpace.Contract.FuncMapping(&_BaseTenantSpace.CallOpts, arg0)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetBit(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "getBit", _ident, _ord)
	return *ret0, err
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _BaseTenantSpace.Contract.GetBit(&_BaseTenantSpace.CallOpts, _ident, _ord)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _BaseTenantSpace.Contract.GetBit(&_BaseTenantSpace.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetCounter(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "getCounter", _ident, _ord)
	return *ret0, err
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseTenantSpace *BaseTenantSpaceSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _BaseTenantSpace.Contract.GetCounter(&_BaseTenantSpace.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _BaseTenantSpace.Contract.GetCounter(&_BaseTenantSpace.CallOpts, _ident, _ord)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetKMSID(opts *bind.CallOpts, _kmsAddr common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "getKMSID", _kmsAddr)
	return *ret0, err
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _BaseTenantSpace.Contract.GetKMSID(&_BaseTenantSpace.CallOpts, _kmsAddr)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _BaseTenantSpace.Contract.GetKMSID(&_BaseTenantSpace.CallOpts, _kmsAddr)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes _prefix) constant returns(string, string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetKMSInfo(opts *bind.CallOpts, _kmsID string, _prefix []byte) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _BaseTenantSpace.contract.Call(opts, out, "getKMSInfo", _kmsID, _prefix)
	return *ret0, *ret1, err
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes _prefix) constant returns(string, string)
func (_BaseTenantSpace *BaseTenantSpaceSession) GetKMSInfo(_kmsID string, _prefix []byte) (string, string, error) {
	return _BaseTenantSpace.Contract.GetKMSInfo(&_BaseTenantSpace.CallOpts, _kmsID, _prefix)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes _prefix) constant returns(string, string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GetKMSInfo(_kmsID string, _prefix []byte) (string, string, error) {
	return _BaseTenantSpace.Contract.GetKMSInfo(&_BaseTenantSpace.CallOpts, _kmsID, _prefix)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseTenantSpace *BaseTenantSpaceSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseTenantSpace.Contract.GetMeta(&_BaseTenantSpace.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseTenantSpace.Contract.GetMeta(&_BaseTenantSpace.CallOpts, key)
}

// GetTenantID is a free data retrieval call binding the contract method 0x401262c8.
//
// Solidity: function getTenantID() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetTenantID(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "getTenantID")
	return *ret0, err
}

// GetTenantID is a free data retrieval call binding the contract method 0x401262c8.
//
// Solidity: function getTenantID() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) GetTenantID() (string, error) {
	return _BaseTenantSpace.Contract.GetTenantID(&_BaseTenantSpace.CallOpts)
}

// GetTenantID is a free data retrieval call binding the contract method 0x401262c8.
//
// Solidity: function getTenantID() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GetTenantID() (string, error) {
	return _BaseTenantSpace.Contract.GetTenantID(&_BaseTenantSpace.CallOpts)
}

// GroupIds is a free data retrieval call binding the contract method 0x4093d7a1.
//
// Solidity: function groupIds(uint256 ) constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GroupIds(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "groupIds", arg0)
	return *ret0, err
}

// GroupIds is a free data retrieval call binding the contract method 0x4093d7a1.
//
// Solidity: function groupIds(uint256 ) constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceSession) GroupIds(arg0 *big.Int) ([32]byte, error) {
	return _BaseTenantSpace.Contract.GroupIds(&_BaseTenantSpace.CallOpts, arg0)
}

// GroupIds is a free data retrieval call binding the contract method 0x4093d7a1.
//
// Solidity: function groupIds(uint256 ) constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GroupIds(arg0 *big.Int) ([32]byte, error) {
	return _BaseTenantSpace.Contract.GroupIds(&_BaseTenantSpace.CallOpts, arg0)
}

// GroupsMapping is a free data retrieval call binding the contract method 0xea8a3ed8.
//
// Solidity: function groupsMapping(bytes32 , uint256 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GroupsMapping(opts *bind.CallOpts, arg0 [32]byte, arg1 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "groupsMapping", arg0, arg1)
	return *ret0, err
}

// GroupsMapping is a free data retrieval call binding the contract method 0xea8a3ed8.
//
// Solidity: function groupsMapping(bytes32 , uint256 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) GroupsMapping(arg0 [32]byte, arg1 *big.Int) (common.Address, error) {
	return _BaseTenantSpace.Contract.GroupsMapping(&_BaseTenantSpace.CallOpts, arg0, arg1)
}

// GroupsMapping is a free data retrieval call binding the contract method 0xea8a3ed8.
//
// Solidity: function groupsMapping(bytes32 , uint256 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GroupsMapping(arg0 [32]byte, arg1 *big.Int) (common.Address, error) {
	return _BaseTenantSpace.Contract.GroupsMapping(&_BaseTenantSpace.CallOpts, arg0, arg1)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.HasAccess(&_BaseTenantSpace.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.HasAccess(&_BaseTenantSpace.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.HasEditorRight(&_BaseTenantSpace.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.HasEditorRight(&_BaseTenantSpace.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceSession) IndexCategory() (uint8, error) {
	return _BaseTenantSpace.Contract.IndexCategory(&_BaseTenantSpace.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) IndexCategory() (uint8, error) {
	return _BaseTenantSpace.Contract.IndexCategory(&_BaseTenantSpace.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.IsAdmin(&_BaseTenantSpace.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.IsAdmin(&_BaseTenantSpace.CallOpts, _candidate)
}

// KmsManager is a free data retrieval call binding the contract method 0xac65b649.
//
// Solidity: function kmsManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) KmsManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "kmsManager")
	return *ret0, err
}

// KmsManager is a free data retrieval call binding the contract method 0xac65b649.
//
// Solidity: function kmsManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) KmsManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.KmsManager(&_BaseTenantSpace.CallOpts)
}

// KmsManager is a free data retrieval call binding the contract method 0xac65b649.
//
// Solidity: function kmsManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) KmsManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.KmsManager(&_BaseTenantSpace.CallOpts)
}

// ListLength is a free data retrieval call binding the contract method 0x11a3fa38.
//
// Solidity: function listLength(bytes32 listKey) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ListLength(opts *bind.CallOpts, listKey [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "listLength", listKey)
	return *ret0, err
}

// ListLength is a free data retrieval call binding the contract method 0x11a3fa38.
//
// Solidity: function listLength(bytes32 listKey) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) ListLength(listKey [32]byte) (*big.Int, error) {
	return _BaseTenantSpace.Contract.ListLength(&_BaseTenantSpace.CallOpts, listKey)
}

// ListLength is a free data retrieval call binding the contract method 0x11a3fa38.
//
// Solidity: function listLength(bytes32 listKey) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ListLength(listKey [32]byte) (*big.Int, error) {
	return _BaseTenantSpace.Contract.ListLength(&_BaseTenantSpace.CallOpts, listKey)
}

// ListsMapping is a free data retrieval call binding the contract method 0x4d368f10.
//
// Solidity: function listsMapping(bytes32 , uint256 ) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ListsMapping(opts *bind.CallOpts, arg0 [32]byte, arg1 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "listsMapping", arg0, arg1)
	return *ret0, err
}

// ListsMapping is a free data retrieval call binding the contract method 0x4d368f10.
//
// Solidity: function listsMapping(bytes32 , uint256 ) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) ListsMapping(arg0 [32]byte, arg1 *big.Int) (string, error) {
	return _BaseTenantSpace.Contract.ListsMapping(&_BaseTenantSpace.CallOpts, arg0, arg1)
}

// ListsMapping is a free data retrieval call binding the contract method 0x4d368f10.
//
// Solidity: function listsMapping(bytes32 , uint256 ) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ListsMapping(arg0 [32]byte, arg1 *big.Int) (string, error) {
	return _BaseTenantSpace.Contract.ListsMapping(&_BaseTenantSpace.CallOpts, arg0, arg1)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) Name() (string, error) {
	return _BaseTenantSpace.Contract.Name(&_BaseTenantSpace.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) Name() (string, error) {
	return _BaseTenantSpace.Contract.Name(&_BaseTenantSpace.CallOpts)
}

// NodeManager is a free data retrieval call binding the contract method 0x9bb5cd3f.
//
// Solidity: function nodeManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) NodeManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "nodeManager")
	return *ret0, err
}

// NodeManager is a free data retrieval call binding the contract method 0x9bb5cd3f.
//
// Solidity: function nodeManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) NodeManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.NodeManager(&_BaseTenantSpace.CallOpts)
}

// NodeManager is a free data retrieval call binding the contract method 0x9bb5cd3f.
//
// Solidity: function nodeManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) NodeManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.NodeManager(&_BaseTenantSpace.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) ObjectHash() (string, error) {
	return _BaseTenantSpace.Contract.ObjectHash(&_BaseTenantSpace.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ObjectHash() (string, error) {
	return _BaseTenantSpace.Contract.ObjectHash(&_BaseTenantSpace.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseTenantSpace.Contract.ObjectTimestamp(&_BaseTenantSpace.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseTenantSpace.Contract.ObjectTimestamp(&_BaseTenantSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) Owner() (common.Address, error) {
	return _BaseTenantSpace.Contract.Owner(&_BaseTenantSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) Owner() (common.Address, error) {
	return _BaseTenantSpace.Contract.Owner(&_BaseTenantSpace.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) ParentAddress() (common.Address, error) {
	return _BaseTenantSpace.Contract.ParentAddress(&_BaseTenantSpace.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ParentAddress() (common.Address, error) {
	return _BaseTenantSpace.Contract.ParentAddress(&_BaseTenantSpace.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) PendingHash() (string, error) {
	return _BaseTenantSpace.Contract.PendingHash(&_BaseTenantSpace.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) PendingHash() (string, error) {
	return _BaseTenantSpace.Contract.PendingHash(&_BaseTenantSpace.CallOpts)
}

// UserManager is a free data retrieval call binding the contract method 0x5c8a7687.
//
// Solidity: function userManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) UserManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "userManager")
	return *ret0, err
}

// UserManager is a free data retrieval call binding the contract method 0x5c8a7687.
//
// Solidity: function userManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) UserManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.UserManager(&_BaseTenantSpace.CallOpts)
}

// UserManager is a free data retrieval call binding the contract method 0x5c8a7687.
//
// Solidity: function userManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) UserManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.UserManager(&_BaseTenantSpace.CallOpts)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) UserWallets(opts *bind.CallOpts, _userAddr common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "userWallets", _userAddr)
	return *ret0, err
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) UserWallets(_userAddr common.Address) (common.Address, error) {
	return _BaseTenantSpace.Contract.UserWallets(&_BaseTenantSpace.CallOpts, _userAddr)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) UserWallets(_userAddr common.Address) (common.Address, error) {
	return _BaseTenantSpace.Contract.UserWallets(&_BaseTenantSpace.CallOpts, _userAddr)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceSession) Version() ([32]byte, error) {
	return _BaseTenantSpace.Contract.Version(&_BaseTenantSpace.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) Version() ([32]byte, error) {
	return _BaseTenantSpace.Contract.Version(&_BaseTenantSpace.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceSession) VersionAPI() ([32]byte, error) {
	return _BaseTenantSpace.Contract.VersionAPI(&_BaseTenantSpace.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseTenantSpace.Contract.VersionAPI(&_BaseTenantSpace.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseTenantSpace.Contract.VersionHashes(&_BaseTenantSpace.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseTenantSpace.Contract.VersionHashes(&_BaseTenantSpace.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseTenantSpace.Contract.VersionTimestamp(&_BaseTenantSpace.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseTenantSpace.Contract.VersionTimestamp(&_BaseTenantSpace.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceSession) Visibility() (uint8, error) {
	return _BaseTenantSpace.Contract.Visibility(&_BaseTenantSpace.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) Visibility() (uint8, error) {
	return _BaseTenantSpace.Contract.Visibility(&_BaseTenantSpace.CallOpts)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AccessRequestV3(&_BaseTenantSpace.TransactOpts, arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AccessRequestV3(&_BaseTenantSpace.TransactOpts, arg0, arg1)
}

// AddFuncs is a paid mutator transaction binding the contract method 0x0a581edc.
//
// Solidity: function addFuncs(bytes4[] _func4Bytes, address _funcAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) AddFuncs(opts *bind.TransactOpts, _func4Bytes [][4]byte, _funcAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "addFuncs", _func4Bytes, _funcAddr)
}

// AddFuncs is a paid mutator transaction binding the contract method 0x0a581edc.
//
// Solidity: function addFuncs(bytes4[] _func4Bytes, address _funcAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) AddFuncs(_func4Bytes [][4]byte, _funcAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AddFuncs(&_BaseTenantSpace.TransactOpts, _func4Bytes, _funcAddr)
}

// AddFuncs is a paid mutator transaction binding the contract method 0x0a581edc.
//
// Solidity: function addFuncs(bytes4[] _func4Bytes, address _funcAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) AddFuncs(_func4Bytes [][4]byte, _funcAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AddFuncs(&_BaseTenantSpace.TransactOpts, _func4Bytes, _funcAddr)
}

// AddGroup is a paid mutator transaction binding the contract method 0x65d8dd34.
//
// Solidity: function addGroup(bytes32 _id, address _groupAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) AddGroup(opts *bind.TransactOpts, _id [32]byte, _groupAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "addGroup", _id, _groupAddr)
}

// AddGroup is a paid mutator transaction binding the contract method 0x65d8dd34.
//
// Solidity: function addGroup(bytes32 _id, address _groupAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) AddGroup(_id [32]byte, _groupAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AddGroup(&_BaseTenantSpace.TransactOpts, _id, _groupAddr)
}

// AddGroup is a paid mutator transaction binding the contract method 0x65d8dd34.
//
// Solidity: function addGroup(bytes32 _id, address _groupAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) AddGroup(_id [32]byte, _groupAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AddGroup(&_BaseTenantSpace.TransactOpts, _id, _groupAddr)
}

// AddListItem is a paid mutator transaction binding the contract method 0x74daf3a0.
//
// Solidity: function addListItem(bytes32 listKey, string itemVal) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) AddListItem(opts *bind.TransactOpts, listKey [32]byte, itemVal string) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "addListItem", listKey, itemVal)
}

// AddListItem is a paid mutator transaction binding the contract method 0x74daf3a0.
//
// Solidity: function addListItem(bytes32 listKey, string itemVal) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) AddListItem(listKey [32]byte, itemVal string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AddListItem(&_BaseTenantSpace.TransactOpts, listKey, itemVal)
}

// AddListItem is a paid mutator transaction binding the contract method 0x74daf3a0.
//
// Solidity: function addListItem(bytes32 listKey, string itemVal) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) AddListItem(listKey [32]byte, itemVal string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AddListItem(&_BaseTenantSpace.TransactOpts, listKey, itemVal)
}

// CallFuncUintAddr is a paid mutator transaction binding the contract method 0x9c075d67.
//
// Solidity: function callFuncUintAddr(bytes4 _func4Bytes, uint256 _p1, address _p2, bytes _encAuthToken, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CallFuncUintAddr(opts *bind.TransactOpts, _func4Bytes [4]byte, _p1 *big.Int, _p2 common.Address, _encAuthToken []byte, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "callFuncUintAddr", _func4Bytes, _p1, _p2, _encAuthToken, _v, _r, _s)
}

// CallFuncUintAddr is a paid mutator transaction binding the contract method 0x9c075d67.
//
// Solidity: function callFuncUintAddr(bytes4 _func4Bytes, uint256 _p1, address _p2, bytes _encAuthToken, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) CallFuncUintAddr(_func4Bytes [4]byte, _p1 *big.Int, _p2 common.Address, _encAuthToken []byte, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CallFuncUintAddr(&_BaseTenantSpace.TransactOpts, _func4Bytes, _p1, _p2, _encAuthToken, _v, _r, _s)
}

// CallFuncUintAddr is a paid mutator transaction binding the contract method 0x9c075d67.
//
// Solidity: function callFuncUintAddr(bytes4 _func4Bytes, uint256 _p1, address _p2, bytes _encAuthToken, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) CallFuncUintAddr(_func4Bytes [4]byte, _p1 *big.Int, _p2 common.Address, _encAuthToken []byte, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CallFuncUintAddr(&_BaseTenantSpace.TransactOpts, _func4Bytes, _p1, _p2, _encAuthToken, _v, _r, _s)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) ClearPending() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.ClearPending(&_BaseTenantSpace.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.ClearPending(&_BaseTenantSpace.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.Commit(&_BaseTenantSpace.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.Commit(&_BaseTenantSpace.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.ConfirmCommit(&_BaseTenantSpace.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.ConfirmCommit(&_BaseTenantSpace.TransactOpts)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address _lib, address _contentType) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateContent(opts *bind.TransactOpts, _lib common.Address, _contentType common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createContent", _lib, _contentType)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address _lib, address _contentType) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) CreateContent(_lib common.Address, _contentType common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateContent(&_BaseTenantSpace.TransactOpts, _lib, _contentType)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address _lib, address _contentType) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) CreateContent(_lib common.Address, _contentType common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateContent(&_BaseTenantSpace.TransactOpts, _lib, _contentType)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createContentType")
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) CreateContentType() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateContentType(&_BaseTenantSpace.TransactOpts)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) CreateContentType() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateContentType(&_BaseTenantSpace.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createGroup")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) CreateGroup() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateGroup(&_BaseTenantSpace.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) CreateGroup() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateGroup(&_BaseTenantSpace.TransactOpts)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address _kmsAddress) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateLibrary(opts *bind.TransactOpts, _kmsAddress common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createLibrary", _kmsAddress)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address _kmsAddress) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) CreateLibrary(_kmsAddress common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateLibrary(&_BaseTenantSpace.TransactOpts, _kmsAddress)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address _kmsAddress) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) CreateLibrary(_kmsAddress common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateLibrary(&_BaseTenantSpace.TransactOpts, _kmsAddress)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _userAddr) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateUserWallet(opts *bind.TransactOpts, _userAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createUserWallet", _userAddr)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _userAddr) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) CreateUserWallet(_userAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateUserWallet(&_BaseTenantSpace.TransactOpts, _userAddr)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _userAddr) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) CreateUserWallet(_userAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateUserWallet(&_BaseTenantSpace.TransactOpts, _userAddr)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) DeleteGroup(opts *bind.TransactOpts, _ident [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "deleteGroup", _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.DeleteGroup(&_BaseTenantSpace.TransactOpts, _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.DeleteGroup(&_BaseTenantSpace.TransactOpts, _ident)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseTenantSpace *BaseTenantSpaceSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.DeleteVersion(&_BaseTenantSpace.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.DeleteVersion(&_BaseTenantSpace.TransactOpts, _versionHash)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) IncrementCounter(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "incrementCounter", _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.IncrementCounter(&_BaseTenantSpace.TransactOpts, _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.IncrementCounter(&_BaseTenantSpace.TransactOpts, _ident, _ord)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) Kill() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.Kill(&_BaseTenantSpace.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.Kill(&_BaseTenantSpace.TransactOpts)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.PutMeta(&_BaseTenantSpace.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.PutMeta(&_BaseTenantSpace.TransactOpts, key, value)
}

// RemoveGroup is a paid mutator transaction binding the contract method 0xcb3899b3.
//
// Solidity: function removeGroup(bytes32 _id, address _groupAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) RemoveGroup(opts *bind.TransactOpts, _id [32]byte, _groupAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "removeGroup", _id, _groupAddr)
}

// RemoveGroup is a paid mutator transaction binding the contract method 0xcb3899b3.
//
// Solidity: function removeGroup(bytes32 _id, address _groupAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) RemoveGroup(_id [32]byte, _groupAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.RemoveGroup(&_BaseTenantSpace.TransactOpts, _id, _groupAddr)
}

// RemoveGroup is a paid mutator transaction binding the contract method 0xcb3899b3.
//
// Solidity: function removeGroup(bytes32 _id, address _groupAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) RemoveGroup(_id [32]byte, _groupAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.RemoveGroup(&_BaseTenantSpace.TransactOpts, _id, _groupAddr)
}

// RemoveListOrd is a paid mutator transaction binding the contract method 0x1fa12f11.
//
// Solidity: function removeListOrd(bytes32 listKey, uint256 itemOrd) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) RemoveListOrd(opts *bind.TransactOpts, listKey [32]byte, itemOrd *big.Int) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "removeListOrd", listKey, itemOrd)
}

// RemoveListOrd is a paid mutator transaction binding the contract method 0x1fa12f11.
//
// Solidity: function removeListOrd(bytes32 listKey, uint256 itemOrd) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) RemoveListOrd(listKey [32]byte, itemOrd *big.Int) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.RemoveListOrd(&_BaseTenantSpace.TransactOpts, listKey, itemOrd)
}

// RemoveListOrd is a paid mutator transaction binding the contract method 0x1fa12f11.
//
// Solidity: function removeListOrd(bytes32 listKey, uint256 itemOrd) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) RemoveListOrd(listKey [32]byte, itemOrd *big.Int) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.RemoveListOrd(&_BaseTenantSpace.TransactOpts, listKey, itemOrd)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetAddressKMS(&_BaseTenantSpace.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetAddressKMS(&_BaseTenantSpace.TransactOpts, address_KMS)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetAndGetBit(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setAndGetBit", _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetAndGetBit(&_BaseTenantSpace.TransactOpts, _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetAndGetBit(&_BaseTenantSpace.TransactOpts, _ident, _ord)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string _desc) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetDescription(opts *bind.TransactOpts, _desc string) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setDescription", _desc)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string _desc) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetDescription(_desc string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetDescription(&_BaseTenantSpace.TransactOpts, _desc)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string _desc) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetDescription(_desc string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetDescription(&_BaseTenantSpace.TransactOpts, _desc)
}

// SetFactoryManager is a paid mutator transaction binding the contract method 0x430e621e.
//
// Solidity: function setFactoryManager(address _factMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetFactoryManager(opts *bind.TransactOpts, _factMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setFactoryManager", _factMan)
}

// SetFactoryManager is a paid mutator transaction binding the contract method 0x430e621e.
//
// Solidity: function setFactoryManager(address _factMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetFactoryManager(_factMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetFactoryManager(&_BaseTenantSpace.TransactOpts, _factMan)
}

// SetFactoryManager is a paid mutator transaction binding the contract method 0x430e621e.
//
// Solidity: function setFactoryManager(address _factMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetFactoryManager(_factMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetFactoryManager(&_BaseTenantSpace.TransactOpts, _factMan)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetGroupRights(&_BaseTenantSpace.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetGroupRights(&_BaseTenantSpace.TransactOpts, group, access_type, access)
}

// SetKmsManager is a paid mutator transaction binding the contract method 0x87e38281.
//
// Solidity: function setKmsManager(address _kmsMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetKmsManager(opts *bind.TransactOpts, _kmsMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setKmsManager", _kmsMan)
}

// SetKmsManager is a paid mutator transaction binding the contract method 0x87e38281.
//
// Solidity: function setKmsManager(address _kmsMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetKmsManager(_kmsMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetKmsManager(&_BaseTenantSpace.TransactOpts, _kmsMan)
}

// SetKmsManager is a paid mutator transaction binding the contract method 0x87e38281.
//
// Solidity: function setKmsManager(address _kmsMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetKmsManager(_kmsMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetKmsManager(&_BaseTenantSpace.TransactOpts, _kmsMan)
}

// SetNodeManager is a paid mutator transaction binding the contract method 0x1319e7e1.
//
// Solidity: function setNodeManager(address _nodeMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetNodeManager(opts *bind.TransactOpts, _nodeMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setNodeManager", _nodeMan)
}

// SetNodeManager is a paid mutator transaction binding the contract method 0x1319e7e1.
//
// Solidity: function setNodeManager(address _nodeMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetNodeManager(_nodeMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetNodeManager(&_BaseTenantSpace.TransactOpts, _nodeMan)
}

// SetNodeManager is a paid mutator transaction binding the contract method 0x1319e7e1.
//
// Solidity: function setNodeManager(address _nodeMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetNodeManager(_nodeMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetNodeManager(&_BaseTenantSpace.TransactOpts, _nodeMan)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetRights(&_BaseTenantSpace.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetRights(&_BaseTenantSpace.TransactOpts, stakeholder, access_type, access)
}

// SetUserManager is a paid mutator transaction binding the contract method 0x97d0b02c.
//
// Solidity: function setUserManager(address _userMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetUserManager(opts *bind.TransactOpts, _userMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setUserManager", _userMan)
}

// SetUserManager is a paid mutator transaction binding the contract method 0x97d0b02c.
//
// Solidity: function setUserManager(address _userMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetUserManager(_userMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetUserManager(&_BaseTenantSpace.TransactOpts, _userMan)
}

// SetUserManager is a paid mutator transaction binding the contract method 0x97d0b02c.
//
// Solidity: function setUserManager(address _userMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetUserManager(_userMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetUserManager(&_BaseTenantSpace.TransactOpts, _userMan)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetVisibility(&_BaseTenantSpace.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetVisibility(&_BaseTenantSpace.TransactOpts, _visibility_code)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "transfer", _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.Transfer(&_BaseTenantSpace.TransactOpts, _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.Transfer(&_BaseTenantSpace.TransactOpts, _to, _amount)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.TransferCreatorship(&_BaseTenantSpace.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.TransferCreatorship(&_BaseTenantSpace.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.TransferOwnership(&_BaseTenantSpace.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.TransferOwnership(&_BaseTenantSpace.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.UpdateRequest(&_BaseTenantSpace.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.UpdateRequest(&_BaseTenantSpace.TransactOpts)
}

// BaseTenantSpaceAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseTenantSpace contract.
type BaseTenantSpaceAccessRequestV3Iterator struct {
	Event *BaseTenantSpaceAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceAccessRequestV3 represents a AccessRequestV3 event raised by the BaseTenantSpace contract.
type BaseTenantSpaceAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseTenantSpaceAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceAccessRequestV3Iterator{contract: _BaseTenantSpace.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceAccessRequestV3)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseAccessRequestV3(log types.Log) (*BaseTenantSpaceAccessRequestV3, error) {
	event := new(BaseTenantSpaceAccessRequestV3)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceAddTenantGroupIterator is returned from FilterAddTenantGroup and is used to iterate over the raw logs and unpacked data for AddTenantGroup events raised by the BaseTenantSpace contract.
type BaseTenantSpaceAddTenantGroupIterator struct {
	Event *BaseTenantSpaceAddTenantGroup // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceAddTenantGroupIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceAddTenantGroup)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceAddTenantGroup)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceAddTenantGroupIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceAddTenantGroupIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceAddTenantGroup represents a AddTenantGroup event raised by the BaseTenantSpace contract.
type BaseTenantSpaceAddTenantGroup struct {
	GroupId   [32]byte
	GroupAddr common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddTenantGroup is a free log retrieval operation binding the contract event 0x145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471.
//
// Solidity: event AddTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterAddTenantGroup(opts *bind.FilterOpts) (*BaseTenantSpaceAddTenantGroupIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "AddTenantGroup")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceAddTenantGroupIterator{contract: _BaseTenantSpace.contract, event: "AddTenantGroup", logs: logs, sub: sub}, nil
}

// WatchAddTenantGroup is a free log subscription operation binding the contract event 0x145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471.
//
// Solidity: event AddTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchAddTenantGroup(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceAddTenantGroup) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "AddTenantGroup")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceAddTenantGroup)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "AddTenantGroup", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddTenantGroup is a log parse operation binding the contract event 0x145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471.
//
// Solidity: event AddTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseAddTenantGroup(log types.Log) (*BaseTenantSpaceAddTenantGroup, error) {
	event := new(BaseTenantSpaceAddTenantGroup)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "AddTenantGroup", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceBitSetAndGetIterator is returned from FilterBitSetAndGet and is used to iterate over the raw logs and unpacked data for BitSetAndGet events raised by the BaseTenantSpace contract.
type BaseTenantSpaceBitSetAndGetIterator struct {
	Event *BaseTenantSpaceBitSetAndGet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceBitSetAndGetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceBitSetAndGet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceBitSetAndGet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceBitSetAndGetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceBitSetAndGetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceBitSetAndGet represents a BitSetAndGet event raised by the BaseTenantSpace contract.
type BaseTenantSpaceBitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBitSetAndGet is a free log retrieval operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterBitSetAndGet(opts *bind.FilterOpts) (*BaseTenantSpaceBitSetAndGetIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceBitSetAndGetIterator{contract: _BaseTenantSpace.contract, event: "BitSetAndGet", logs: logs, sub: sub}, nil
}

// WatchBitSetAndGet is a free log subscription operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchBitSetAndGet(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceBitSetAndGet) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceBitSetAndGet)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitSetAndGet is a log parse operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseBitSetAndGet(log types.Log) (*BaseTenantSpaceBitSetAndGet, error) {
	event := new(BaseTenantSpaceBitSetAndGet)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseTenantSpace contract.
type BaseTenantSpaceCommitPendingIterator struct {
	Event *BaseTenantSpaceCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceCommitPending represents a CommitPending event raised by the BaseTenantSpace contract.
type BaseTenantSpaceCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseTenantSpaceCommitPendingIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceCommitPendingIterator{contract: _BaseTenantSpace.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceCommitPending)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseCommitPending(log types.Log) (*BaseTenantSpaceCommitPending, error) {
	event := new(BaseTenantSpaceCommitPending)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceCounterIncrementedIterator is returned from FilterCounterIncremented and is used to iterate over the raw logs and unpacked data for CounterIncremented events raised by the BaseTenantSpace contract.
type BaseTenantSpaceCounterIncrementedIterator struct {
	Event *BaseTenantSpaceCounterIncremented // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceCounterIncrementedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceCounterIncremented)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceCounterIncremented)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceCounterIncrementedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceCounterIncrementedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceCounterIncremented represents a CounterIncremented event raised by the BaseTenantSpace contract.
type BaseTenantSpaceCounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterIncremented is a free log retrieval operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterCounterIncremented(opts *bind.FilterOpts) (*BaseTenantSpaceCounterIncrementedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceCounterIncrementedIterator{contract: _BaseTenantSpace.contract, event: "CounterIncremented", logs: logs, sub: sub}, nil
}

// WatchCounterIncremented is a free log subscription operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchCounterIncremented(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceCounterIncremented) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceCounterIncremented)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterIncremented is a log parse operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseCounterIncremented(log types.Log) (*BaseTenantSpaceCounterIncremented, error) {
	event := new(BaseTenantSpaceCounterIncremented)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceCreateTenantIterator is returned from FilterCreateTenant and is used to iterate over the raw logs and unpacked data for CreateTenant events raised by the BaseTenantSpace contract.
type BaseTenantSpaceCreateTenantIterator struct {
	Event *BaseTenantSpaceCreateTenant // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceCreateTenantIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceCreateTenant)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceCreateTenant)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceCreateTenantIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceCreateTenantIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceCreateTenant represents a CreateTenant event raised by the BaseTenantSpace contract.
type BaseTenantSpaceCreateTenant struct {
	Version [32]byte
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterCreateTenant is a free log retrieval operation binding the contract event 0xc2fe67ac699789805c53a93eea70eb0e316deaf8db4b810382d2412ba4fcb4c8.
//
// Solidity: event CreateTenant(bytes32 version, address owner)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterCreateTenant(opts *bind.FilterOpts) (*BaseTenantSpaceCreateTenantIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "CreateTenant")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceCreateTenantIterator{contract: _BaseTenantSpace.contract, event: "CreateTenant", logs: logs, sub: sub}, nil
}

// WatchCreateTenant is a free log subscription operation binding the contract event 0xc2fe67ac699789805c53a93eea70eb0e316deaf8db4b810382d2412ba4fcb4c8.
//
// Solidity: event CreateTenant(bytes32 version, address owner)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchCreateTenant(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceCreateTenant) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "CreateTenant")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceCreateTenant)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "CreateTenant", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateTenant is a log parse operation binding the contract event 0xc2fe67ac699789805c53a93eea70eb0e316deaf8db4b810382d2412ba4fcb4c8.
//
// Solidity: event CreateTenant(bytes32 version, address owner)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseCreateTenant(log types.Log) (*BaseTenantSpaceCreateTenant, error) {
	event := new(BaseTenantSpaceCreateTenant)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "CreateTenant", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceFunctionsAddedIterator is returned from FilterFunctionsAdded and is used to iterate over the raw logs and unpacked data for FunctionsAdded events raised by the BaseTenantSpace contract.
type BaseTenantSpaceFunctionsAddedIterator struct {
	Event *BaseTenantSpaceFunctionsAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceFunctionsAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceFunctionsAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceFunctionsAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceFunctionsAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceFunctionsAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceFunctionsAdded represents a FunctionsAdded event raised by the BaseTenantSpace contract.
type BaseTenantSpaceFunctionsAdded struct {
	Func4Bytes [][4]byte
	FuncAddr   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterFunctionsAdded is a free log retrieval operation binding the contract event 0x2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de8874266.
//
// Solidity: event FunctionsAdded(bytes4[] func4Bytes, address funcAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterFunctionsAdded(opts *bind.FilterOpts) (*BaseTenantSpaceFunctionsAddedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "FunctionsAdded")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceFunctionsAddedIterator{contract: _BaseTenantSpace.contract, event: "FunctionsAdded", logs: logs, sub: sub}, nil
}

// WatchFunctionsAdded is a free log subscription operation binding the contract event 0x2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de8874266.
//
// Solidity: event FunctionsAdded(bytes4[] func4Bytes, address funcAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchFunctionsAdded(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceFunctionsAdded) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "FunctionsAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceFunctionsAdded)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "FunctionsAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFunctionsAdded is a log parse operation binding the contract event 0x2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de8874266.
//
// Solidity: event FunctionsAdded(bytes4[] func4Bytes, address funcAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseFunctionsAdded(log types.Log) (*BaseTenantSpaceFunctionsAdded, error) {
	event := new(BaseTenantSpaceFunctionsAdded)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "FunctionsAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceGetAccessWalletIterator is returned from FilterGetAccessWallet and is used to iterate over the raw logs and unpacked data for GetAccessWallet events raised by the BaseTenantSpace contract.
type BaseTenantSpaceGetAccessWalletIterator struct {
	Event *BaseTenantSpaceGetAccessWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceGetAccessWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceGetAccessWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceGetAccessWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceGetAccessWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceGetAccessWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceGetAccessWallet represents a GetAccessWallet event raised by the BaseTenantSpace contract.
type BaseTenantSpaceGetAccessWallet struct {
	WalletAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterGetAccessWallet is a free log retrieval operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterGetAccessWallet(opts *bind.FilterOpts) (*BaseTenantSpaceGetAccessWalletIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceGetAccessWalletIterator{contract: _BaseTenantSpace.contract, event: "GetAccessWallet", logs: logs, sub: sub}, nil
}

// WatchGetAccessWallet is a free log subscription operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchGetAccessWallet(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceGetAccessWallet) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceGetAccessWallet)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGetAccessWallet is a log parse operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseGetAccessWallet(log types.Log) (*BaseTenantSpaceGetAccessWallet, error) {
	event := new(BaseTenantSpaceGetAccessWallet)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseTenantSpace contract.
type BaseTenantSpaceObjectMetaChangedIterator struct {
	Event *BaseTenantSpaceObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseTenantSpace contract.
type BaseTenantSpaceObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseTenantSpaceObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceObjectMetaChangedIterator{contract: _BaseTenantSpace.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceObjectMetaChanged)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseObjectMetaChanged(log types.Log) (*BaseTenantSpaceObjectMetaChanged, error) {
	event := new(BaseTenantSpaceObjectMetaChanged)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceRemoveTenantGroupIterator is returned from FilterRemoveTenantGroup and is used to iterate over the raw logs and unpacked data for RemoveTenantGroup events raised by the BaseTenantSpace contract.
type BaseTenantSpaceRemoveTenantGroupIterator struct {
	Event *BaseTenantSpaceRemoveTenantGroup // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceRemoveTenantGroupIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceRemoveTenantGroup)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceRemoveTenantGroup)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceRemoveTenantGroupIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceRemoveTenantGroupIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceRemoveTenantGroup represents a RemoveTenantGroup event raised by the BaseTenantSpace contract.
type BaseTenantSpaceRemoveTenantGroup struct {
	GroupId   [32]byte
	GroupAddr common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoveTenantGroup is a free log retrieval operation binding the contract event 0xa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456.
//
// Solidity: event RemoveTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterRemoveTenantGroup(opts *bind.FilterOpts) (*BaseTenantSpaceRemoveTenantGroupIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "RemoveTenantGroup")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceRemoveTenantGroupIterator{contract: _BaseTenantSpace.contract, event: "RemoveTenantGroup", logs: logs, sub: sub}, nil
}

// WatchRemoveTenantGroup is a free log subscription operation binding the contract event 0xa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456.
//
// Solidity: event RemoveTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchRemoveTenantGroup(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceRemoveTenantGroup) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "RemoveTenantGroup")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceRemoveTenantGroup)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "RemoveTenantGroup", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveTenantGroup is a log parse operation binding the contract event 0xa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456.
//
// Solidity: event RemoveTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseRemoveTenantGroup(log types.Log) (*BaseTenantSpaceRemoveTenantGroup, error) {
	event := new(BaseTenantSpaceRemoveTenantGroup)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "RemoveTenantGroup", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceSetFactoryManagerIterator is returned from FilterSetFactoryManager and is used to iterate over the raw logs and unpacked data for SetFactoryManager events raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetFactoryManagerIterator struct {
	Event *BaseTenantSpaceSetFactoryManager // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceSetFactoryManagerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceSetFactoryManager)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceSetFactoryManager)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceSetFactoryManagerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceSetFactoryManagerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceSetFactoryManager represents a SetFactoryManager event raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetFactoryManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetFactoryManager is a free log retrieval operation binding the contract event 0xfa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f661.
//
// Solidity: event SetFactoryManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterSetFactoryManager(opts *bind.FilterOpts) (*BaseTenantSpaceSetFactoryManagerIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "SetFactoryManager")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceSetFactoryManagerIterator{contract: _BaseTenantSpace.contract, event: "SetFactoryManager", logs: logs, sub: sub}, nil
}

// WatchSetFactoryManager is a free log subscription operation binding the contract event 0xfa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f661.
//
// Solidity: event SetFactoryManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchSetFactoryManager(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceSetFactoryManager) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "SetFactoryManager")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceSetFactoryManager)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "SetFactoryManager", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFactoryManager is a log parse operation binding the contract event 0xfa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f661.
//
// Solidity: event SetFactoryManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseSetFactoryManager(log types.Log) (*BaseTenantSpaceSetFactoryManager, error) {
	event := new(BaseTenantSpaceSetFactoryManager)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "SetFactoryManager", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceSetKmsManagerIterator is returned from FilterSetKmsManager and is used to iterate over the raw logs and unpacked data for SetKmsManager events raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetKmsManagerIterator struct {
	Event *BaseTenantSpaceSetKmsManager // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceSetKmsManagerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceSetKmsManager)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceSetKmsManager)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceSetKmsManagerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceSetKmsManagerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceSetKmsManager represents a SetKmsManager event raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetKmsManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetKmsManager is a free log retrieval operation binding the contract event 0x78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee96477.
//
// Solidity: event SetKmsManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterSetKmsManager(opts *bind.FilterOpts) (*BaseTenantSpaceSetKmsManagerIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "SetKmsManager")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceSetKmsManagerIterator{contract: _BaseTenantSpace.contract, event: "SetKmsManager", logs: logs, sub: sub}, nil
}

// WatchSetKmsManager is a free log subscription operation binding the contract event 0x78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee96477.
//
// Solidity: event SetKmsManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchSetKmsManager(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceSetKmsManager) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "SetKmsManager")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceSetKmsManager)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "SetKmsManager", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetKmsManager is a log parse operation binding the contract event 0x78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee96477.
//
// Solidity: event SetKmsManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseSetKmsManager(log types.Log) (*BaseTenantSpaceSetKmsManager, error) {
	event := new(BaseTenantSpaceSetKmsManager)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "SetKmsManager", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceSetNodeManagerIterator is returned from FilterSetNodeManager and is used to iterate over the raw logs and unpacked data for SetNodeManager events raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetNodeManagerIterator struct {
	Event *BaseTenantSpaceSetNodeManager // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceSetNodeManagerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceSetNodeManager)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceSetNodeManager)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceSetNodeManagerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceSetNodeManagerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceSetNodeManager represents a SetNodeManager event raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetNodeManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetNodeManager is a free log retrieval operation binding the contract event 0x9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b56177.
//
// Solidity: event SetNodeManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterSetNodeManager(opts *bind.FilterOpts) (*BaseTenantSpaceSetNodeManagerIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "SetNodeManager")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceSetNodeManagerIterator{contract: _BaseTenantSpace.contract, event: "SetNodeManager", logs: logs, sub: sub}, nil
}

// WatchSetNodeManager is a free log subscription operation binding the contract event 0x9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b56177.
//
// Solidity: event SetNodeManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchSetNodeManager(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceSetNodeManager) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "SetNodeManager")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceSetNodeManager)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "SetNodeManager", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetNodeManager is a log parse operation binding the contract event 0x9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b56177.
//
// Solidity: event SetNodeManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseSetNodeManager(log types.Log) (*BaseTenantSpaceSetNodeManager, error) {
	event := new(BaseTenantSpaceSetNodeManager)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "SetNodeManager", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceSetUserManagerIterator is returned from FilterSetUserManager and is used to iterate over the raw logs and unpacked data for SetUserManager events raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetUserManagerIterator struct {
	Event *BaseTenantSpaceSetUserManager // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceSetUserManagerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceSetUserManager)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceSetUserManager)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceSetUserManagerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceSetUserManagerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceSetUserManager represents a SetUserManager event raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetUserManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetUserManager is a free log retrieval operation binding the contract event 0xc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce0299.
//
// Solidity: event SetUserManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterSetUserManager(opts *bind.FilterOpts) (*BaseTenantSpaceSetUserManagerIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "SetUserManager")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceSetUserManagerIterator{contract: _BaseTenantSpace.contract, event: "SetUserManager", logs: logs, sub: sub}, nil
}

// WatchSetUserManager is a free log subscription operation binding the contract event 0xc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce0299.
//
// Solidity: event SetUserManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchSetUserManager(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceSetUserManager) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "SetUserManager")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceSetUserManager)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "SetUserManager", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetUserManager is a log parse operation binding the contract event 0xc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce0299.
//
// Solidity: event SetUserManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseSetUserManager(log types.Log) (*BaseTenantSpaceSetUserManager, error) {
	event := new(BaseTenantSpaceSetUserManager)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "SetUserManager", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseTenantSpace contract.
type BaseTenantSpaceUpdateRequestIterator struct {
	Event *BaseTenantSpaceUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceUpdateRequest represents a UpdateRequest event raised by the BaseTenantSpace contract.
type BaseTenantSpaceUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseTenantSpaceUpdateRequestIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceUpdateRequestIterator{contract: _BaseTenantSpace.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceUpdateRequest)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseUpdateRequest(log types.Log) (*BaseTenantSpaceUpdateRequest, error) {
	event := new(BaseTenantSpaceUpdateRequest)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseTenantSpace contract.
type BaseTenantSpaceVersionConfirmIterator struct {
	Event *BaseTenantSpaceVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceVersionConfirm represents a VersionConfirm event raised by the BaseTenantSpace contract.
type BaseTenantSpaceVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseTenantSpaceVersionConfirmIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceVersionConfirmIterator{contract: _BaseTenantSpace.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceVersionConfirm)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseVersionConfirm(log types.Log) (*BaseTenantSpaceVersionConfirm, error) {
	event := new(BaseTenantSpaceVersionConfirm)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseTenantSpace contract.
type BaseTenantSpaceVersionDeleteIterator struct {
	Event *BaseTenantSpaceVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceVersionDelete represents a VersionDelete event raised by the BaseTenantSpace contract.
type BaseTenantSpaceVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseTenantSpaceVersionDeleteIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceVersionDeleteIterator{contract: _BaseTenantSpace.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceVersionDelete)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseVersionDelete(log types.Log) (*BaseTenantSpaceVersionDelete, error) {
	event := new(BaseTenantSpaceVersionDelete)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseTenantSpace contract.
type BaseTenantSpaceVisibilityChangedIterator struct {
	Event *BaseTenantSpaceVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceVisibilityChanged represents a VisibilityChanged event raised by the BaseTenantSpace contract.
type BaseTenantSpaceVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseTenantSpaceVisibilityChangedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceVisibilityChangedIterator{contract: _BaseTenantSpace.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceVisibilityChanged)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseVisibilityChanged(log types.Log) (*BaseTenantSpaceVisibilityChanged, error) {
	event := new(BaseTenantSpaceVisibilityChanged)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceWordGroupDeletedIterator is returned from FilterWordGroupDeleted and is used to iterate over the raw logs and unpacked data for WordGroupDeleted events raised by the BaseTenantSpace contract.
type BaseTenantSpaceWordGroupDeletedIterator struct {
	Event *BaseTenantSpaceWordGroupDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceWordGroupDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceWordGroupDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceWordGroupDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceWordGroupDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceWordGroupDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceWordGroupDeleted represents a WordGroupDeleted event raised by the BaseTenantSpace contract.
type BaseTenantSpaceWordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWordGroupDeleted is a free log retrieval operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterWordGroupDeleted(opts *bind.FilterOpts) (*BaseTenantSpaceWordGroupDeletedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceWordGroupDeletedIterator{contract: _BaseTenantSpace.contract, event: "WordGroupDeleted", logs: logs, sub: sub}, nil
}

// WatchWordGroupDeleted is a free log subscription operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchWordGroupDeleted(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceWordGroupDeleted) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceWordGroupDeleted)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWordGroupDeleted is a log parse operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseWordGroupDeleted(log types.Log) (*BaseTenantSpaceWordGroupDeleted, error) {
	event := new(BaseTenantSpaceWordGroupDeleted)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTypeFactoryABI is the input ABI used to generate the binding from.
const BaseTypeFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createNode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_spaceAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseTypeFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseTypeFactoryFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"b8cfaf05": "createContentType()",
	"5c6dc219": "createNode(address)",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// BaseTypeFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseTypeFactoryBin = "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f42617365466163746f727932303230313132393232333230304d4c000000000060055534801561007c57600080fd5b506040516020806131c78339810180604052602081101561009c57600080fd5b505160028054600160a060020a031990811632179091556003805482163317905560048054600160a060020a03909316929091169190911790556130e2806100e56000396000f3fe6080604052600436106100ae576000357c0100000000000000000000000000000000000000000000000000000000900480636d2e4b1b116100765780636d2e4b1b146101655780638da5cb5b14610198578063af570c04146101ad578063b8cfaf05146101c2578063f2fde38b146101d7576100ae565b806302d05d3f146100b057806341c0e1b5146100e157806354fd4d50146100f65780635c6dc2191461011d5780635f4fcae114610150575b005b3480156100bc57600080fd5b506100c561020a565b60408051600160a060020a039092168252519081900360200190f35b3480156100ed57600080fd5b506100ae610219565b34801561010257600080fd5b5061010b61023e565b60408051918252519081900360200190f35b34801561012957600080fd5b506100c56004803603602081101561014057600080fd5b5035600160a060020a0316610244565b34801561015c57600080fd5b5061010b610318565b34801561017157600080fd5b506100ae6004803603602081101561018857600080fd5b5035600160a060020a031661031e565b3480156101a457600080fd5b506100c5610379565b3480156101b957600080fd5b506100c5610388565b3480156101ce57600080fd5b506100c5610397565b3480156101e357600080fd5b506100ae600480360360208110156101fa57600080fd5b5035600160a060020a03166106ae565b600254600160a060020a031681565b600354600160a060020a0316331461023057600080fd5b600354600160a060020a0316ff5b60055481565b60008060405161025390610865565b604051809103906000f08015801561026f573d6000803e3d6000fd5b50905082600160a060020a031681600160a060020a0316638da5cb5b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156102d157600080fd5b505afa1580156102e5573d6000803e3d6000fd5b505050506040513d60208110156102fb57600080fd5b5051600160a060020a03161461031057600080fd5b90505b919050565b60015481565b600254600160a060020a0316331461033557600080fd5b600160a060020a038116151561034a57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600454600090600160a060020a031633146103b157600080fd5b6000336040516103c090610872565b600160a060020a03909116815260405190819003602001906000f0801580156103ed573d6000803e3d6000fd5b5060048054604080517f63e6ffdd0000000000000000000000000000000000000000000000000000000081523293810193909352519293508392600160a060020a039091169160009183916363e6ffdd916024808301926020929190829003018186803b15801561045d57600080fd5b505afa158015610471573d6000803e3d6000fd5b505050506040513d602081101561048757600080fd5b50519050600061049682610709565b90508015156105a757604080517ff2fde38b00000000000000000000000000000000000000000000000000000000815232600482015290518391600160a060020a0387169163f2fde38b9160248082019260009290919082900301818387803b15801561050257600080fd5b505af1158015610516573d6000803e3d6000fd5b5050604080517f8635adb5000000000000000000000000000000000000000000000000000000008152600160a060020a038a811660048301526000602483018190526002604484015292519086169450638635adb593506064808301939282900301818387803b15801561058957600080fd5b505af115801561059d573d6000803e3d6000fd5b50505050506106a4565b604080517f0fe1b5a2000000000000000000000000000000000000000000000000000000008152326004820152600060248201819052600260448301529151600160a060020a03871692630fe1b5a2926064808201939182900301818387803b15801561061357600080fd5b505af1158015610627573d6000803e3d6000fd5b5050604080517ff2fde38b0000000000000000000000000000000000000000000000000000000081523260048201529051600160a060020a038816935063f2fde38b9250602480830192600092919082900301818387803b15801561068b57600080fd5b505af115801561069f573d6000803e3d6000fd5b505050505b5092935050505090565b600354600160a060020a031633146106c557600080fd5b600160a060020a03811615156106da57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604080517f76657273696f6e415049282900000000000000000000000000000000000000008152815190819003600c018120600482526024820183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909216919091178152915181516000938493606093600160a060020a03881693919290918291908083835b602083106107d45780518252601f1990920191602091820191016107b5565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610834576040519150601f19603f3d011682016040523d82523d6000602084013e610839565b606091505b50909250905081158061084b57508051155b1561085b57600092505050610313565b5060019392505050565b6104fc8061088083390190565b61233b80610d7c8339019056fe60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f4e6f646532303139303331353130353130304d4c00000000000000000000000060055560028054600160a060020a03199081163217909155600380549091163317905561045d8061009f6000396000f3fe6080604052600436106100a3576000357c0100000000000000000000000000000000000000000000000000000000900480635f4fcae1116100765780635f4fcae1146101c55780636d2e4b1b146101da5780638da5cb5b1461020d578063af570c0414610222578063f2fde38b14610237576100a3565b806302d05d3f146100a557806341304fac146100d657806341c0e1b51461018957806354fd4d501461019e575b005b3480156100b157600080fd5b506100ba61026a565b60408051600160a060020a039092168252519081900360200190f35b3480156100e257600080fd5b506100a3600480360360208110156100f957600080fd5b81019060208101813564010000000081111561011457600080fd5b82018360208201111561012657600080fd5b8035906020019184600183028401116401000000008311171561014857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610279945050505050565b34801561019557600080fd5b506100a361032c565b3480156101aa57600080fd5b506101b3610351565b60408051918252519081900360200190f35b3480156101d157600080fd5b506101b3610357565b3480156101e657600080fd5b506100a3600480360360208110156101fd57600080fd5b5035600160a060020a031661035d565b34801561021957600080fd5b506100ba6103b8565b34801561022e57600080fd5b506100ba6103c7565b34801561024357600080fd5b506100a36004803603602081101561025a57600080fd5b5035600160a060020a03166103d6565b600254600160a060020a031681565b600354600160a060020a0316331461029057600080fd5b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab816040518080602001828103825283818151815260200191508051906020019080838360005b838110156102ef5781810151838201526020016102d7565b50505050905090810190601f16801561031c5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b600354600160a060020a0316331461034357600080fd5b600354600160a060020a0316ff5b60055481565b60015481565b600254600160a060020a0316331461037457600080fd5b600160a060020a038116151561038957600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a031633146103ed57600080fd5b600160a060020a038116151561040257600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a72305820c5f2749f44eb25405d211747a93b53c0ff2d4edc1a646c3a77ae52aaf2aaaf570029608060408190527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006005556006805460ff191690911761ff00191690557f4564697461626c653230323030393238313130303030504f00000000000000006007557f42617365436f6e74656e745479706532303230303331363133353130304d4c00600e5560208061233b833981018060405260208110156100ea57600080fd5b50516002805432600160a060020a031991821617909155600380543390831617905560048054909116600160a060020a039092169190911790556006805461ffff19166104001790556121f9806101426000396000f3fe6080604052600436106102075760003560e060020a900480636380501f1161011c57806397ac4fd2116100a4578063c287e0ed11610073578063c287e0ed146107e9578063e02dd9c2146107fe578063e1a7071714610813578063ef1d7dc2146108c6578063f2fde38b146108db57610207565b806397ac4fd2146106df5780639867db74146106f4578063aa024e8b146107a7578063af570c04146107d457610207565b80637886f747116100eb5780637886f7471461062e5780637ca8f6181461065857806381beeb64146106825780638da5cb5b1461069757806395a078e8146106ac57610207565b80636380501f1461059e57806367e5c3bf146105b35780636d2e4b1b146105e65780636e3754271461061957610207565b8063331b86c01161019f578063446e88261161016e578063446e8826146104cd57806354fd4d50146104d55780635f4fcae1146104ea5780635f6a1301146104ff578063628449fd1461051457610207565b8063331b86c014610467578063375a6e7c1461048e57806340b87a26146104a357806341c0e1b5146104b857610207565b806314cfabb3116101db57806314cfabb3146102be5780631bf7a912146102e757806322e564eb1461040e57806329adec141461045257610207565b8062821de31461020957806302d05d3f1461023a5780630fe1b5a21461024f578063100508a214610293575b005b34801561021557600080fd5b5061021e61090e565b60408051600160a060020a039092168252519081900360200190f35b34801561024657600080fd5b5061021e61091e565b34801561025b57600080fd5b506102076004803603606081101561027257600080fd5b50600160a060020a038135169060ff6020820135811691604001351661092d565b34801561029f57600080fd5b506102a8610a0f565b6040805160ff9092168252519081900360200190f35b3480156102ca57600080fd5b506102d3610a14565b604080519115158252519081900360200190f35b6102d3600480360360408110156102fd57600080fd5b81019060208101813564010000000081111561031857600080fd5b82018360208201111561032a57600080fd5b8035906020019184602083028401116401000000008311171561034c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561039c57600080fd5b8201836020820111156103ae57600080fd5b803590602001918460208302840111640100000000831117156103d057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610ab1945050505050565b34801561041a57600080fd5b506102076004803603606081101561043157600080fd5b50600160a060020a038135169060ff60208201358116916040013516610b5a565b34801561045e57600080fd5b506102a861102d565b34801561047357600080fd5b5061047c611036565b60408051918252519081900360200190f35b34801561049a57600080fd5b506102d361103c565b3480156104af57600080fd5b5061047c611045565b3480156104c457600080fd5b5061020761104b565b6102d3611070565b3480156104e157600080fd5b5061047c611274565b3480156104f657600080fd5b5061047c61127a565b34801561050b57600080fd5b50610207611280565b34801561052057600080fd5b506105296112be565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561056357818101518382015260200161054b565b50505050905090810190601f1680156105905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105aa57600080fd5b506102a861134c565b3480156105bf57600080fd5b506102d3600480360360208110156105d657600080fd5b5035600160a060020a031661135a565b3480156105f257600080fd5b506102076004803603602081101561060957600080fd5b5035600160a060020a03166114f2565b34801561062557600080fd5b506102d361154d565b34801561063a57600080fd5b5061047c6004803603602081101561065157600080fd5b503561155c565b34801561066457600080fd5b506105296004803603602081101561067b57600080fd5b503561157b565b34801561068e57600080fd5b506102d36115ef565b3480156106a357600080fd5b5061021e6115fa565b3480156106b857600080fd5b506102d3600480360360208110156106cf57600080fd5b5035600160a060020a0316611609565b3480156106eb57600080fd5b506102a8611763565b34801561070057600080fd5b506102076004803603602081101561071757600080fd5b81019060208101813564010000000081111561073257600080fd5b82018360208201111561074457600080fd5b8035906020019184600183028401116401000000008311171561076657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611768945050505050565b3480156107b357600080fd5b50610207600480360360208110156107ca57600080fd5b503560ff16611895565b3480156107e057600080fd5b5061021e61190f565b3480156107f557600080fd5b5061020761191e565b34801561080a57600080fd5b506105296119e0565b34801561081f57600080fd5b5061047c6004803603602081101561083657600080fd5b81019060208101813564010000000081111561085157600080fd5b82018360208201111561086357600080fd5b8035906020019184600183028401116401000000008311171561088557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611a3b945050505050565b3480156108d257600080fd5b506102a8611eac565b3480156108e757600080fd5b50610207600480360360208110156108fe57600080fd5b5035600160a060020a0316611eb1565b600454600160a060020a03165b90565b600254600160a060020a031681565b6109356115ef565b151561094057600080fd5b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd91602480820192602092909190829003018186803b1580156109af57600080fd5b505afa1580156109c3573d6000803e3d6000fd5b505050506040513d60208110156109d957600080fd5b50519050600160a060020a03811615156109fd576109f8858585610b5a565b610a08565b610a08818585610b5a565b5050505050565b600181565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e1491602480820192602092909190829003018186803b158015610a7f57600080fd5b505afa158015610a93573d6000803e3d6000fd5b505050506040513d6020811015610aa957600080fd5b505191505090565b6000610abc33611609565b1515610ac757600080fd5b604080516c01000000000000000000000000300260208083019190915242603480840182905284518085039091018152605484018086528151919093012090915260006074830181905260948301523360b48301526103e80260d482015290517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360f40190a150600192915050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610b9b57600080fd5b505afa158015610baf573d6000803e3d6000fd5b505050506040513d6020811015610bc557600080fd5b5051600654610100900460ff90811691161415610c6a57604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b158015610c4d57600080fd5b505af1158015610c61573d6000803e3d6000fd5b50505050611027565b80600160a060020a03166312915a306040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610ca657600080fd5b505afa158015610cba573d6000803e3d6000fd5b505050506040513d6020811015610cd057600080fd5b5051600654610100900460ff90811691161415610d5857604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b158015610c4d57600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610d9457600080fd5b505afa158015610da8573d6000803e3d6000fd5b505050506040513d6020811015610dbe57600080fd5b5051600654610100900460ff90811691161415610e4657604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b158015610c4d57600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610e8257600080fd5b505afa158015610e96573d6000803e3d6000fd5b505050506040513d6020811015610eac57600080fd5b5051600654610100900460ff90811691161415610f3457604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b158015610c4d57600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610f7057600080fd5b505afa158015610f84573d6000803e3d6000fd5b505050506040513d6020811015610f9a57600080fd5b5051600654610100900460ff9081169116141561102257604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b158015610c4d57600080fd5b600080fd5b50505050565b60065460ff1681565b600a5490565b600d5460ff1681565b60095481565b600354600160a060020a0316331461106257600080fd5b600354600160a060020a0316ff5b600061107a610a14565b151561108557600080fd5b600d5460ff16151561109657600080fd5b60006008805460018160011615610100020316600290049050111561114557600a805460018181018084556000939093526008805461110c937fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80192600261010091831615919091026000190190911604612010565b5050600954600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901555b600c80546111689160089160026000196101006001841615020190911604612010565b504260095560408051602081019182905260009081905261118b91600c91612095565b50600d805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a03166111cc61090e565b60408051600160a060020a03808516825283166020820152606091810182815260088054600260001961010060018416150201909116049383018490529260808301908490801561125e5780601f106112335761010080835404028352916020019161125e565b820191906000526020600020905b81548152906001019060200180831161124157829003601f168201915b505094505050505060405180910390a150600190565b600e5481565b60015481565b61128861154d565b151561129357600080fd5b6040805160208101918290526000908190526112b191600c91612095565b50600d805460ff19169055565b600c805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156113445780601f1061131957610100808354040283529160200191611344565b820191906000526020600020905b81548152906001019060200180831161132757829003601f168201915b505050505081565b600654610100900460ff1681565b600354600090600160a060020a03838116911614806113815750600654606460ff90911610155b1561138e575060016114ed565b600654600061010090910460ff1611156114e95760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b15801561140e57600080fd5b505afa158015611422573d6000803e3d6000fd5b505050506040513d602081101561143857600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b1580156114b457600080fd5b505afa1580156114c8573d6000803e3d6000fd5b505050506040513d60208110156114de57600080fd5b505191506114ed9050565b5060005b919050565b600254600160a060020a0316331461150957600080fd5b600160a060020a038116151561151e57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60006115576115ef565b905090565b600b80548290811061156a57fe5b600091825260209091200154905081565b600a80548290811061158957fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156113445780601f1061131957610100808354040283529160200191611344565b60006115573361135a565b600354600160a060020a031681565b600354600090600160a060020a03838116911614806116305750600654600a60ff90911610155b1561163d575060016114ed565b600654600061010090910460ff1611156114e95760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b1580156116bd57600080fd5b505afa1580156116d1573d6000803e3d6000fd5b505050506040513d60208110156116e757600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b1580156114b457600080fd5b600a81565b61177061154d565b151561177b57600080fd5b600d5460ff161561178b57600080fd5b805160801161179957600080fd5b80516117ac90600c906020840190612095565b50600d805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a03166117f061090e565b60408051600160a060020a038085168252831660208201526060918101828152600c805460026000196101006001841615020190911604938301849052926080830190849080156118825780601f1061185757610100808354040283529160200191611882565b820191906000526020600020905b81548152906001019060200180831161186557829003601f168201915b505094505050505060405180910390a150565b61189d6115ef565b15156118a857600080fd5b6006805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b600454600160a060020a031681565b6119266115ef565b151561193157600080fd5b60408051602080825260088054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156119d05780601f106119a5576101008083540402835291602001916119d0565b820191906000526020600020905b8154815290600101906020018083116119b357829003601f168201915b50509250505060405180910390a1565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156113445780601f1061131957610100808354040283529160200191611344565b6000611a4561154d565b1515611a5057600080fd5b6000826040516020018082805190602001908083835b60208310611a855780518252601f199092019160209182019101611a66565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050600060086040516020018082805460018160011615610100020316600290048015611b245780601f10611b02576101008083540402835291820191611b24565b820191906000526020600020905b815481529060010190602001808311611b10575b505091505060405160208183030381529060405280519060200120905080821415611cfb57600a541515611b7b57604080516020810191829052600090819052611b7091600891612095565b506000600955611c1f565b600080805b600a54811015611bd35781600b82815481101515611b9a57fe5b90600052602060002001541115611bcb57809250600b81815481101515611bbd57fe5b906000526020600020015491505b600101611b80565b50600a805483908110611be257fe5b9060005260206000200160089080546001816001161561010002031660029004611c0d929190612010565b506009819055611c1c82611f0c565b50505b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168560006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611cb4578181015183820152602001611c9c565b50505050905090810190601f168015611ce15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a16000925050506114ed565b60001960005b600a54811015611dc4576000600a82815481101515611d1c57fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015611d845780601f10611d62576101008083540402835291820191611d84565b820191906000526020600020905b815481529060010190602001808311611d70575b505091505060405160208183030381529060405280519060200120905080851415611dbb57611db282611f0c565b81925050611dc4565b50600101611d01565b50600019811415611dd457600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031686836040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611e68578181015183820152602001611e50565b50505050905090810190601f168015611e955780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1949350505050565b606481565b600354600160a060020a03163314611ec857600080fd5b600160a060020a0381161515611edd57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600a805482908110611f1a57fe5b906000526020600020016000611f309190612103565b600b805482908110611f3e57fe5b6000918252602082200155600a54600019018114611fe457600a80546000198101908110611f6857fe5b90600052602060002001600a82815481101515611f8157fe5b906000526020600020019080546001816001161561010002031660029004611faa929190612010565b50600b80546000198101908110611fbd57fe5b9060005260206000200154600b82815481101515611fd757fe5b6000918252602090912001555b600a805490611ff7906000198301612147565b50600b80549061200b906000198301612170565b505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106120495780548555612085565b8280016001018555821561208557600052602060002091601f016020900482015b8281111561208557825482559160010191906001019061206a565b50612091929150612190565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106120d657805160ff1916838001178555612085565b82800160010185558215612085579182015b828111156120855782518255916020019190600101906120e8565b50805460018160011615610100020316600290046000825580601f10612129575061200d565b601f01602090049060005260206000209081019061200d9190612190565b81548183558181111561216b5760008381526020902061216b9181019083016121aa565b505050565b81548183558181111561216b5760008381526020902061216b9181019083015b61091b91905b808211156120915760008155600101612196565b61091b91905b808211156120915760006121c48282612103565b506001016121b056fea165627a7a72305820e80132cb975259ba4fcf90d2154baf1538e7d2606d636368ec778e9efeea24c20029a165627a7a723058200be212d30e46d387b6c3100d6cf8ec6adc4c9e3645d25accec9eaf6c60077a660029"

// DeployBaseTypeFactory deploys a new Ethereum contract, binding an instance of BaseTypeFactory to it.
func DeployBaseTypeFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _spaceAddr common.Address) (common.Address, *types.Transaction, *BaseTypeFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseTypeFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseTypeFactoryBin), backend, _spaceAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseTypeFactory{BaseTypeFactoryCaller: BaseTypeFactoryCaller{contract: contract}, BaseTypeFactoryTransactor: BaseTypeFactoryTransactor{contract: contract}, BaseTypeFactoryFilterer: BaseTypeFactoryFilterer{contract: contract}}, nil
}

// BaseTypeFactory is an auto generated Go binding around an Ethereum contract.
type BaseTypeFactory struct {
	BaseTypeFactoryCaller     // Read-only binding to the contract
	BaseTypeFactoryTransactor // Write-only binding to the contract
	BaseTypeFactoryFilterer   // Log filterer for contract events
}

// BaseTypeFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseTypeFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTypeFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseTypeFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTypeFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseTypeFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTypeFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseTypeFactorySession struct {
	Contract     *BaseTypeFactory  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseTypeFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseTypeFactoryCallerSession struct {
	Contract *BaseTypeFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// BaseTypeFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseTypeFactoryTransactorSession struct {
	Contract     *BaseTypeFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// BaseTypeFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseTypeFactoryRaw struct {
	Contract *BaseTypeFactory // Generic contract binding to access the raw methods on
}

// BaseTypeFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseTypeFactoryCallerRaw struct {
	Contract *BaseTypeFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseTypeFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseTypeFactoryTransactorRaw struct {
	Contract *BaseTypeFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseTypeFactory creates a new instance of BaseTypeFactory, bound to a specific deployed contract.
func NewBaseTypeFactory(address common.Address, backend bind.ContractBackend) (*BaseTypeFactory, error) {
	contract, err := bindBaseTypeFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseTypeFactory{BaseTypeFactoryCaller: BaseTypeFactoryCaller{contract: contract}, BaseTypeFactoryTransactor: BaseTypeFactoryTransactor{contract: contract}, BaseTypeFactoryFilterer: BaseTypeFactoryFilterer{contract: contract}}, nil
}

// NewBaseTypeFactoryCaller creates a new read-only instance of BaseTypeFactory, bound to a specific deployed contract.
func NewBaseTypeFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseTypeFactoryCaller, error) {
	contract, err := bindBaseTypeFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTypeFactoryCaller{contract: contract}, nil
}

// NewBaseTypeFactoryTransactor creates a new write-only instance of BaseTypeFactory, bound to a specific deployed contract.
func NewBaseTypeFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseTypeFactoryTransactor, error) {
	contract, err := bindBaseTypeFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTypeFactoryTransactor{contract: contract}, nil
}

// NewBaseTypeFactoryFilterer creates a new log filterer instance of BaseTypeFactory, bound to a specific deployed contract.
func NewBaseTypeFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseTypeFactoryFilterer, error) {
	contract, err := bindBaseTypeFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseTypeFactoryFilterer{contract: contract}, nil
}

// bindBaseTypeFactory binds a generic wrapper to an already deployed contract.
func bindBaseTypeFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseTypeFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseTypeFactory *BaseTypeFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseTypeFactory.Contract.BaseTypeFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseTypeFactory *BaseTypeFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTypeFactory.Contract.BaseTypeFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseTypeFactory *BaseTypeFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseTypeFactory.Contract.BaseTypeFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseTypeFactory *BaseTypeFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseTypeFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseTypeFactory *BaseTypeFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTypeFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseTypeFactory *BaseTypeFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseTypeFactory.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseTypeFactory *BaseTypeFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTypeFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseTypeFactory *BaseTypeFactorySession) ContentSpace() (common.Address, error) {
	return _BaseTypeFactory.Contract.ContentSpace(&_BaseTypeFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseTypeFactory *BaseTypeFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseTypeFactory.Contract.ContentSpace(&_BaseTypeFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseTypeFactory *BaseTypeFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTypeFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseTypeFactory *BaseTypeFactorySession) Creator() (common.Address, error) {
	return _BaseTypeFactory.Contract.Creator(&_BaseTypeFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseTypeFactory *BaseTypeFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseTypeFactory.Contract.Creator(&_BaseTypeFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseTypeFactory *BaseTypeFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTypeFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseTypeFactory *BaseTypeFactorySession) Owner() (common.Address, error) {
	return _BaseTypeFactory.Contract.Owner(&_BaseTypeFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseTypeFactory *BaseTypeFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseTypeFactory.Contract.Owner(&_BaseTypeFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseTypeFactory *BaseTypeFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseTypeFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseTypeFactory *BaseTypeFactorySession) Version() ([32]byte, error) {
	return _BaseTypeFactory.Contract.Version(&_BaseTypeFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseTypeFactory *BaseTypeFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseTypeFactory.Contract.Version(&_BaseTypeFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseTypeFactory *BaseTypeFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseTypeFactory.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseTypeFactory *BaseTypeFactorySession) VersionAPI() ([32]byte, error) {
	return _BaseTypeFactory.Contract.VersionAPI(&_BaseTypeFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseTypeFactory *BaseTypeFactoryCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseTypeFactory.Contract.VersionAPI(&_BaseTypeFactory.CallOpts)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseTypeFactory *BaseTypeFactoryTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTypeFactory.contract.Transact(opts, "createContentType")
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseTypeFactory *BaseTypeFactorySession) CreateContentType() (*types.Transaction, error) {
	return _BaseTypeFactory.Contract.CreateContentType(&_BaseTypeFactory.TransactOpts)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseTypeFactory *BaseTypeFactoryTransactorSession) CreateContentType() (*types.Transaction, error) {
	return _BaseTypeFactory.Contract.CreateContentType(&_BaseTypeFactory.TransactOpts)
}

// CreateNode is a paid mutator transaction binding the contract method 0x5c6dc219.
//
// Solidity: function createNode(address _owner) returns(address)
func (_BaseTypeFactory *BaseTypeFactoryTransactor) CreateNode(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _BaseTypeFactory.contract.Transact(opts, "createNode", _owner)
}

// CreateNode is a paid mutator transaction binding the contract method 0x5c6dc219.
//
// Solidity: function createNode(address _owner) returns(address)
func (_BaseTypeFactory *BaseTypeFactorySession) CreateNode(_owner common.Address) (*types.Transaction, error) {
	return _BaseTypeFactory.Contract.CreateNode(&_BaseTypeFactory.TransactOpts, _owner)
}

// CreateNode is a paid mutator transaction binding the contract method 0x5c6dc219.
//
// Solidity: function createNode(address _owner) returns(address)
func (_BaseTypeFactory *BaseTypeFactoryTransactorSession) CreateNode(_owner common.Address) (*types.Transaction, error) {
	return _BaseTypeFactory.Contract.CreateNode(&_BaseTypeFactory.TransactOpts, _owner)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTypeFactory *BaseTypeFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTypeFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTypeFactory *BaseTypeFactorySession) Kill() (*types.Transaction, error) {
	return _BaseTypeFactory.Contract.Kill(&_BaseTypeFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTypeFactory *BaseTypeFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseTypeFactory.Contract.Kill(&_BaseTypeFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTypeFactory *BaseTypeFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseTypeFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTypeFactory *BaseTypeFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseTypeFactory.Contract.TransferCreatorship(&_BaseTypeFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTypeFactory *BaseTypeFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseTypeFactory.Contract.TransferCreatorship(&_BaseTypeFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTypeFactory *BaseTypeFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseTypeFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTypeFactory *BaseTypeFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseTypeFactory.Contract.TransferOwnership(&_BaseTypeFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTypeFactory *BaseTypeFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseTypeFactory.Contract.TransferOwnership(&_BaseTypeFactory.TransactOpts, newOwner)
}

// ContainerABI is the input ABI used to generate the binding from.
const ContainerABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"}]"

// ContainerFuncSigs maps the 4-byte function signature to its string representation.
var ContainerFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"0f58a786": "addContentType(address,address)",
	"32eaf21b": "addressKMS()",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"0eaec2c5": "canContribute(address)",
	"81beeb64": "canEdit()",
	"9b55f901": "canPublish(address)",
	"29d00219": "canReview(address)",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"1cdbee5a": "contentTypeContracts(address)",
	"991a3a7c": "contentTypes(uint256)",
	"c65bcbe2": "contentTypesLength()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"1f2caaec": "findTypeByHash(bytes32)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"6380501f": "indexCategory()",
	"41c0e1b5": "kill()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"2cf99422": "publish(address)",
	"fd089196": "removeContentType(address)",
	"3dd71d99": "requiresReview()",
	"c9e8e72d": "setAddressKMS(address)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"aa024e8b": "setVisibility(uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"29dedde5": "validType(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
	"9cb121ba": "whitelistedType(address)",
}

// ContainerBin is the compiled bytecode used for deploying new contracts.
var ContainerBin = "0x60806040527f4f776e61626c653230323030393238313130303030504f00000000000000000060009081557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006005556006805461ff001960ff199091169092179190911690557f4564697461626c653230323030393238313130303030504f00000000000000006007557f436f6e7461696e657232303230303331363133353330304d4c00000000000000600e5560115560028054600160a060020a031990811632179091556003805490911633179055612b90806101056000396000f3fe6080604052600436106102cc5760003560e060020a90048063628449fd11610179578063991a3a7c116100e0578063c65bcbe211610099578063e1a7071711610073578063e1a7071714610af6578063ef1d7dc214610ba9578063f2fde38b14610bbe578063fd08919614610bf1576102cc565b8063c65bcbe214610a99578063c9e8e72d14610aae578063e02dd9c214610ae1576102cc565b8063991a3a7c146109e55780639b55f901146103145780639cb121ba14610a0f578063aa024e8b14610a42578063af570c0414610a6f578063c287e0ed14610a84576102cc565b80637ca8f618116101325780637ca8f6181461089657806381beeb64146108c05780638da5cb5b146108d557806395a078e8146108ea57806397ac4fd21461091d5780639867db7414610932576102cc565b8063628449fd146107525780636380501f146107dc57806367e5c3bf146107f15780636d2e4b1b146108245780636e375427146108575780637886f7471461086c576102cc565b806329d00219116102385780633dd71d99116101f1578063446e8826116101cb578063446e88261461070b57806354fd4d50146107135780635f4fcae1146107285780635f6a13011461073d576102cc565b80633dd71d991461040557806340b87a26146106e157806341c0e1b5146106f6576102cc565b806329d00219146105f757806329dedde51461062a5780632cf994221461065d57806332eaf21b14610690578063331b86c0146106a5578063375a6e7c146106cc576102cc565b806314cfabb31161028a57806314cfabb3146104055780631bf7a9121461041a5780631cdbee5a146105415780631f2caaec1461057457806322e564eb1461059e57806329adec14146105e2576102cc565b8062821de3146102ce57806302d05d3f146102ff5780630eaec2c5146103145780630f58a7861461035b5780630fe1b5a214610396578063100508a2146103da575b005b3480156102da57600080fd5b506102e3610c24565b60408051600160a060020a039092168252519081900360200190f35b34801561030b57600080fd5b506102e3610c34565b34801561032057600080fd5b506103476004803603602081101561033757600080fd5b5035600160a060020a0316610c43565b604080519115158252519081900360200190f35b34801561036757600080fd5b506102cc6004803603604081101561037e57600080fd5b50600160a060020a0381358116916020013516610c74565b3480156103a257600080fd5b506102cc600480360360608110156103b957600080fd5b50600160a060020a038135169060ff60208201358116916040013516610dd2565b3480156103e657600080fd5b506103ef610eb4565b6040805160ff9092168252519081900360200190f35b34801561041157600080fd5b50610347610eb9565b6103476004803603604081101561043057600080fd5b81019060208101813564010000000081111561044b57600080fd5b82018360208201111561045d57600080fd5b8035906020019184602083028401116401000000008311171561047f57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156104cf57600080fd5b8201836020820111156104e157600080fd5b8035906020019184602083028401116401000000008311171561050357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610ebe945050505050565b34801561054d57600080fd5b506102e36004803603602081101561056457600080fd5b5035600160a060020a0316610f67565b34801561058057600080fd5b506102e36004803603602081101561059757600080fd5b5035610f82565b3480156105aa57600080fd5b506102cc600480360360608110156105c157600080fd5b50600160a060020a038135169060ff60208201358116916040013516611163565b3480156105ee57600080fd5b506103ef611636565b34801561060357600080fd5b506103476004803603602081101561061a57600080fd5b5035600160a060020a031661163f565b34801561063657600080fd5b506103476004803603602081101561064d57600080fd5b5035600160a060020a0316611645565b34801561066957600080fd5b506103476004803603602081101561068057600080fd5b5035600160a060020a0316611663565b34801561069c57600080fd5b506102e3611782565b3480156106b157600080fd5b506106ba611791565b60408051918252519081900360200190f35b3480156106d857600080fd5b50610347611797565b3480156106ed57600080fd5b506106ba6117a0565b34801561070257600080fd5b506102cc6117a6565b6103476117cb565b34801561071f57600080fd5b506106ba6119cf565b34801561073457600080fd5b506106ba6119d5565b34801561074957600080fd5b506102cc6119db565b34801561075e57600080fd5b50610767611a19565b6040805160208082528351818301528351919283929083019185019080838360005b838110156107a1578181015183820152602001610789565b50505050905090810190601f1680156107ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107e857600080fd5b506103ef611aa7565b3480156107fd57600080fd5b506103476004803603602081101561081457600080fd5b5035600160a060020a0316611ab5565b34801561083057600080fd5b506102cc6004803603602081101561084757600080fd5b5035600160a060020a0316611c4c565b34801561086357600080fd5b50610347611c9a565b34801561087857600080fd5b506106ba6004803603602081101561088f57600080fd5b5035611cab565b3480156108a257600080fd5b50610767600480360360208110156108b957600080fd5b5035611cca565b3480156108cc57600080fd5b50610347611d3e565b3480156108e157600080fd5b506102e3611d4e565b3480156108f657600080fd5b506103476004803603602081101561090d57600080fd5b5035600160a060020a0316611d5d565b34801561092957600080fd5b506103ef611eb7565b34801561093e57600080fd5b506102cc6004803603602081101561095557600080fd5b81019060208101813564010000000081111561097057600080fd5b82018360208201111561098257600080fd5b803590602001918460018302840111640100000000831117156109a457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ebc945050505050565b3480156109f157600080fd5b506102e360048036036020811015610a0857600080fd5b5035611fe9565b348015610a1b57600080fd5b5061034760048036036020811015610a3257600080fd5b5035600160a060020a0316612011565b348015610a4e57600080fd5b506102cc60048036036020811015610a6557600080fd5b503560ff16612068565b348015610a7b57600080fd5b506102e36120e2565b348015610a9057600080fd5b506102cc6120f1565b348015610aa557600080fd5b506106ba6121b3565b348015610aba57600080fd5b506102cc60048036036020811015610ad157600080fd5b5035600160a060020a03166121b9565b348015610aed57600080fd5b506107676121f2565b348015610b0257600080fd5b506106ba60048036036020811015610b1957600080fd5b810190602081018135640100000000811115610b3457600080fd5b820183602082011115610b4657600080fd5b80359060200191846001830284011164010000000083111715610b6857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061224d945050505050565b348015610bb557600080fd5b506103ef6126be565b348015610bca57600080fd5b506102cc60048036036020811015610be157600080fd5b5035600160a060020a03166126c3565b348015610bfd57600080fd5b5061034760048036036020811015610c1457600080fd5b5035600160a060020a0316612711565b600454600160a060020a03165b90565b600254600160a060020a031681565b600354600090600160a060020a0383811691161480610c6c5750600354600160a060020a031633145b90505b919050565b600354600160a060020a03163314610c8b57600080fd5b600160a060020a0382811660009081526012602052604090205416158015610cb95750610cb782612011565b155b15610d65576010546011541015610d0f57816010601154815481101515610cdc57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550610d5b565b601080546001810182556000919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672018054600160a060020a031916600160a060020a0384161790555b6011805460010190555b600160a060020a038281166000818152601260209081526040918290208054600160a060020a0319169486169485179055815192835282019290925281517f280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7929181900390910190a15050565b610dda611d3e565b1515610de557600080fd5b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd91602480820192602092909190829003018186803b158015610e5457600080fd5b505afa158015610e68573d6000803e3d6000fd5b505050506040513d6020811015610e7e57600080fd5b50519050600160a060020a0381161515610ea257610e9d858585611163565b610ead565b610ead818585611163565b5050505050565b600181565b600090565b6000610ec933611d5d565b1515610ed457600080fd5b604080516c01000000000000000000000000300260208083019190915242603480840182905284518085039091018152605484018086528151919093012090915260006074830181905260948301523360b48301526103e80260d482015290517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360f40190a150600192915050565b601260205260009081526040902054600160a060020a031681565b6000805b60105481101561115a576000601082815481101515610fa157fe5b600091825260208083209091015460408051808401899052815180820385018152818301808452815191909501207fe02dd9c2000000000000000000000000000000000000000000000000000000009094529051600160a060020a0390921694509192849263e02dd9c29260448083019392829003018186803b15801561102757600080fd5b505afa15801561103b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561106457600080fd5b81019080805164010000000081111561107c57600080fd5b8201602081018481111561108f57600080fd5b81516401000000008111828201871017156110a957600080fd5b50509291905050506040516020018082805190602001908083835b602083106110e35780518252601f1990920191602091820191016110c4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120141561115157601080548390811061113257fe5b600091825260209091200154600160a060020a03169250610c6f915050565b50600101610f86565b50600092915050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156111a457600080fd5b505afa1580156111b8573d6000803e3d6000fd5b505050506040513d60208110156111ce57600080fd5b5051600654610100900460ff9081169116141561127357604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b15801561125657600080fd5b505af115801561126a573d6000803e3d6000fd5b50505050611630565b80600160a060020a03166312915a306040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156112af57600080fd5b505afa1580156112c3573d6000803e3d6000fd5b505050506040513d60208110156112d957600080fd5b5051600654610100900460ff9081169116141561136157604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b15801561125657600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561139d57600080fd5b505afa1580156113b1573d6000803e3d6000fd5b505050506040513d60208110156113c757600080fd5b5051600654610100900460ff9081169116141561144f57604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b15801561125657600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561148b57600080fd5b505afa15801561149f573d6000803e3d6000fd5b505050506040513d60208110156114b557600080fd5b5051600654610100900460ff9081169116141561153d57604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b15801561125657600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561157957600080fd5b505afa15801561158d573d6000803e3d6000fd5b505050506040513d60208110156115a357600080fd5b5051600654610100900460ff9081169116141561162b57604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b15801561125657600080fd5b600080fd5b50505050565b60065460ff1681565b50600090565b60006011546000141561165a57506001610c6f565b610c6c82612011565b600033600160a060020a0383161461167a57600080fd5b600082905080600160a060020a0316638280dd8f60006040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b1580156116c957600080fd5b505af11580156116dd573d6000803e3d6000fd5b505050506040513d60208110156116f357600080fd5b5050604080517f27c1c21d0000000000000000000000000000000000000000000000000000000081529051600160a060020a038316916327c1c21d916004808301926020929190829003018186803b15801561174e57600080fd5b505afa158015611762573d6000803e3d6000fd5b505050506040513d602081101561177857600080fd5b5051159392505050565b600f54600160a060020a031681565b600a5490565b600d5460ff1681565b60095481565b600354600160a060020a031633146117bd57600080fd5b600354600160a060020a0316ff5b60006117d5610eb9565b15156117e057600080fd5b600d5460ff1615156117f157600080fd5b6000600880546001816001161561010002031660029004905011156118a057600a8054600181810180845560009390935260088054611867937fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801926002610100918316159190910260001901909116046129a7565b5050600954600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901555b600c80546118c391600891600260001961010060018416150201909116046129a7565b50426009556040805160208101918290526000908190526118e691600c91612a2c565b50600d805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a0316611927610c24565b60408051600160a060020a0380851682528316602082015260609181018281526008805460026000196101006001841615020190911604938301849052926080830190849080156119b95780601f1061198e576101008083540402835291602001916119b9565b820191906000526020600020905b81548152906001019060200180831161199c57829003601f168201915b505094505050505060405180910390a150600190565b600e5481565b60015481565b6119e3611c9a565b15156119ee57600080fd5b604080516020810191829052600090819052611a0c91600c91612a2c565b50600d805460ff19169055565b600c805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611a9f5780601f10611a7457610100808354040283529160200191611a9f565b820191906000526020600020905b815481529060010190602001808311611a8257829003601f168201915b505050505081565b600654610100900460ff1681565b600354600090600160a060020a0383811691161480611adc5750600654606460ff90911610155b15611ae957506001610c6f565b600654600061010090910460ff161115611c445760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b158015611b6957600080fd5b505afa158015611b7d573d6000803e3d6000fd5b505050506040513d6020811015611b9357600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b158015611c0f57600080fd5b505afa158015611c23573d6000803e3d6000fd5b505050506040513d6020811015611c3957600080fd5b50519150610c6f9050565b506000610c6f565b600254600160a060020a03163314611c6357600080fd5b600160a060020a0381161515611c7857600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a0316331490565b600b805482908110611cb957fe5b600091825260209091200154905081565b600a805482908110611cd857fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815293509091830182828015611a9f5780601f10611a7457610100808354040283529160200191611a9f565b6000611d4933611ab5565b905090565b600354600160a060020a031681565b600354600090600160a060020a0383811691161480611d845750600654600a60ff90911610155b15611d9157506001610c6f565b600654600061010090910460ff161115611c445760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b158015611e1157600080fd5b505afa158015611e25573d6000803e3d6000fd5b505050506040513d6020811015611e3b57600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b158015611c0f57600080fd5b600a81565b611ec4611c9a565b1515611ecf57600080fd5b600d5460ff1615611edf57600080fd5b8051608011611eed57600080fd5b8051611f0090600c906020840190612a2c565b50600d805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316611f44610c24565b60408051600160a060020a038085168252831660208201526060918101828152600c80546002600019610100600184161502019091160493830184905292608083019084908015611fd65780601f10611fab57610100808354040283529160200191611fd6565b820191906000526020600020905b815481529060010190602001808311611fb957829003601f168201915b505094505050505060405180910390a150565b6010805482908110611ff757fe5b600091825260209091200154600160a060020a0316905081565b600080805b6011548110156120615783600160a060020a031660108281548110151561203957fe5b600091825260209091200154600160a060020a0316141561205957600191505b600101612016565b5092915050565b612070611d3e565b151561207b57600080fd5b6006805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b600454600160a060020a031681565b6120f9611d3e565b151561210457600080fd5b60408051602080825260088054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156121a35780601f10612178576101008083540402835291602001916121a3565b820191906000526020600020905b81548152906001019060200180831161218657829003601f168201915b50509250505060405180910390a1565b60115481565b600354600160a060020a031633146121d057600080fd5b600f8054600160a060020a031916600160a060020a0392909216919091179055565b6008805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611a9f5780601f10611a7457610100808354040283529160200191611a9f565b6000612257611c9a565b151561226257600080fd5b6000826040516020018082805190602001908083835b602083106122975780518252601f199092019160209182019101612278565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090506000600860405160200180828054600181600116156101000203166002900480156123365780601f10612314576101008083540402835291820191612336565b820191906000526020600020905b815481529060010190602001808311612322575b50509150506040516020818303038152906040528051906020012090508082141561250d57600a54151561238d5760408051602081019182905260009081905261238291600891612a2c565b506000600955612431565b600080805b600a548110156123e55781600b828154811015156123ac57fe5b906000526020600020015411156123dd57809250600b818154811015156123cf57fe5b906000526020600020015491505b600101612392565b50600a8054839081106123f457fe5b906000526020600020016008908054600181600116156101000203166002900461241f9291906129a7565b50600981905561242e826128a3565b50505b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168560006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156124c65781810151838201526020016124ae565b50505050905090810190601f1680156124f35780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600092505050610c6f565b60001960005b600a548110156125d6576000600a8281548110151561252e57fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156125965780601f10612574576101008083540402835291820191612596565b820191906000526020600020905b815481529060010190602001808311612582575b5050915050604051602081830303815290604052805190602001209050808514156125cd576125c4826128a3565b819250506125d6565b50600101612513565b506000198114156125e657600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031686836040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561267a578181015183820152602001612662565b50505050905090810190601f1680156126a75780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1949350505050565b606481565b600354600160a060020a031633146126da57600080fd5b600160a060020a03811615156126ef57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600354600090600160a060020a0316331461272b57600080fd5b6011546000190160005b6011548110156128995783600160a060020a031660108281548110151561275857fe5b600091825260209091200154600160a060020a0316141561289157601080548290811061278157fe5b60009182526020909120018054600160a060020a03191690558082146128265760108054839081106127af57fe5b60009182526020909120015460108054600160a060020a0390921691839081106127d557fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055601080548390811061280c57fe5b60009182526020909120018054600160a060020a03191690555b6011829055600160a060020a0384166000818152601260209081526040918290208054600160a060020a0319169055815192835290517fd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e29281900390910190a1600192505050610c6f565b600101612735565b5060009392505050565b600a8054829081106128b157fe5b9060005260206000200160006128c79190612a9a565b600b8054829081106128d557fe5b6000918252602082200155600a5460001901811461297b57600a805460001981019081106128ff57fe5b90600052602060002001600a8281548110151561291857fe5b9060005260206000200190805460018160011615610100020316600290046129419291906129a7565b50600b8054600019810190811061295457fe5b9060005260206000200154600b8281548110151561296e57fe5b6000918252602090912001555b600a80549061298e906000198301612ade565b50600b8054906129a2906000198301612b07565b505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106129e05780548555612a1c565b82800160010185558215612a1c57600052602060002091601f016020900482015b82811115612a1c578254825591600101919060010190612a01565b50612a28929150612b27565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a6d57805160ff1916838001178555612a1c565b82800160010185558215612a1c579182015b82811115612a1c578251825591602001919060010190612a7f565b50805460018160011615610100020316600290046000825580601f10612ac057506129a4565b601f0160209004906000526020600020908101906129a49190612b27565b815481835581811115612b0257600083815260209020612b02918101908301612b41565b505050565b815481835581811115612b0257600083815260209020612b029181019083015b610c3191905b80821115612a285760008155600101612b2d565b610c3191905b80821115612a28576000612b5b8282612a9a565b50600101612b4756fea165627a7a72305820dc05aa08c4808b2e5ac37a728b5731cb43cc681b3fed396b769272266ff1bf710029"

// DeployContainer deploys a new Ethereum contract, binding an instance of Container to it.
func DeployContainer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Container, error) {
	parsed, err := abi.JSON(strings.NewReader(ContainerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ContainerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Container{ContainerCaller: ContainerCaller{contract: contract}, ContainerTransactor: ContainerTransactor{contract: contract}, ContainerFilterer: ContainerFilterer{contract: contract}}, nil
}

// Container is an auto generated Go binding around an Ethereum contract.
type Container struct {
	ContainerCaller     // Read-only binding to the contract
	ContainerTransactor // Write-only binding to the contract
	ContainerFilterer   // Log filterer for contract events
}

// ContainerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContainerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContainerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContainerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContainerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContainerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContainerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContainerSession struct {
	Contract     *Container        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContainerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContainerCallerSession struct {
	Contract *ContainerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ContainerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContainerTransactorSession struct {
	Contract     *ContainerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ContainerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContainerRaw struct {
	Contract *Container // Generic contract binding to access the raw methods on
}

// ContainerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContainerCallerRaw struct {
	Contract *ContainerCaller // Generic read-only contract binding to access the raw methods on
}

// ContainerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContainerTransactorRaw struct {
	Contract *ContainerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContainer creates a new instance of Container, bound to a specific deployed contract.
func NewContainer(address common.Address, backend bind.ContractBackend) (*Container, error) {
	contract, err := bindContainer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Container{ContainerCaller: ContainerCaller{contract: contract}, ContainerTransactor: ContainerTransactor{contract: contract}, ContainerFilterer: ContainerFilterer{contract: contract}}, nil
}

// NewContainerCaller creates a new read-only instance of Container, bound to a specific deployed contract.
func NewContainerCaller(address common.Address, caller bind.ContractCaller) (*ContainerCaller, error) {
	contract, err := bindContainer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContainerCaller{contract: contract}, nil
}

// NewContainerTransactor creates a new write-only instance of Container, bound to a specific deployed contract.
func NewContainerTransactor(address common.Address, transactor bind.ContractTransactor) (*ContainerTransactor, error) {
	contract, err := bindContainer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContainerTransactor{contract: contract}, nil
}

// NewContainerFilterer creates a new log filterer instance of Container, bound to a specific deployed contract.
func NewContainerFilterer(address common.Address, filterer bind.ContractFilterer) (*ContainerFilterer, error) {
	contract, err := bindContainer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContainerFilterer{contract: contract}, nil
}

// bindContainer binds a generic wrapper to an already deployed contract.
func bindContainer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContainerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Container *ContainerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Container.Contract.ContainerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Container *ContainerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.Contract.ContainerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Container *ContainerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Container.Contract.ContainerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Container *ContainerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Container.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Container *ContainerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Container *ContainerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Container.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Container *ContainerCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Container *ContainerSession) CANACCESS() (uint8, error) {
	return _Container.Contract.CANACCESS(&_Container.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Container *ContainerCallerSession) CANACCESS() (uint8, error) {
	return _Container.Contract.CANACCESS(&_Container.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Container *ContainerCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Container *ContainerSession) CANEDIT() (uint8, error) {
	return _Container.Contract.CANEDIT(&_Container.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Container *ContainerCallerSession) CANEDIT() (uint8, error) {
	return _Container.Contract.CANEDIT(&_Container.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Container *ContainerCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Container *ContainerSession) CANSEE() (uint8, error) {
	return _Container.Contract.CANSEE(&_Container.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Container *ContainerCallerSession) CANSEE() (uint8, error) {
	return _Container.Contract.CANSEE(&_Container.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_Container *ContainerCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_Container *ContainerSession) AddressKMS() (common.Address, error) {
	return _Container.Contract.AddressKMS(&_Container.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_Container *ContainerCallerSession) AddressKMS() (common.Address, error) {
	return _Container.Contract.AddressKMS(&_Container.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Container *ContainerCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Container *ContainerSession) CanCommit() (bool, error) {
	return _Container.Contract.CanCommit(&_Container.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Container *ContainerCallerSession) CanCommit() (bool, error) {
	return _Container.Contract.CanCommit(&_Container.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Container *ContainerCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Container *ContainerSession) CanConfirm() (bool, error) {
	return _Container.Contract.CanConfirm(&_Container.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Container *ContainerCallerSession) CanConfirm() (bool, error) {
	return _Container.Contract.CanConfirm(&_Container.CallOpts)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_Container *ContainerCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canContribute", _candidate)
	return *ret0, err
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_Container *ContainerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _Container.Contract.CanContribute(&_Container.CallOpts, _candidate)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_Container *ContainerCallerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _Container.Contract.CanContribute(&_Container.CallOpts, _candidate)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_Container *ContainerCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_Container *ContainerSession) CanEdit() (bool, error) {
	return _Container.Contract.CanEdit(&_Container.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_Container *ContainerCallerSession) CanEdit() (bool, error) {
	return _Container.Contract.CanEdit(&_Container.CallOpts)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_Container *ContainerCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canPublish", _candidate)
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_Container *ContainerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _Container.Contract.CanPublish(&_Container.CallOpts, _candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_Container *ContainerCallerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _Container.Contract.CanPublish(&_Container.CallOpts, _candidate)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_Container *ContainerCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canReview", arg0)
	return *ret0, err
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_Container *ContainerSession) CanReview(arg0 common.Address) (bool, error) {
	return _Container.Contract.CanReview(&_Container.CallOpts, arg0)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_Container *ContainerCallerSession) CanReview(arg0 common.Address) (bool, error) {
	return _Container.Contract.CanReview(&_Container.CallOpts, arg0)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Container *ContainerCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Container *ContainerSession) CommitPending() (bool, error) {
	return _Container.Contract.CommitPending(&_Container.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Container *ContainerCallerSession) CommitPending() (bool, error) {
	return _Container.Contract.CommitPending(&_Container.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Container *ContainerCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Container *ContainerSession) ContentSpace() (common.Address, error) {
	return _Container.Contract.ContentSpace(&_Container.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Container *ContainerCallerSession) ContentSpace() (common.Address, error) {
	return _Container.Contract.ContentSpace(&_Container.CallOpts)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_Container *ContainerCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "contentTypeContracts", arg0)
	return *ret0, err
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_Container *ContainerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _Container.Contract.ContentTypeContracts(&_Container.CallOpts, arg0)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_Container *ContainerCallerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _Container.Contract.ContentTypeContracts(&_Container.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_Container *ContainerCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "contentTypes", arg0)
	return *ret0, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_Container *ContainerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _Container.Contract.ContentTypes(&_Container.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_Container *ContainerCallerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _Container.Contract.ContentTypes(&_Container.CallOpts, arg0)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_Container *ContainerCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "contentTypesLength")
	return *ret0, err
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_Container *ContainerSession) ContentTypesLength() (*big.Int, error) {
	return _Container.Contract.ContentTypesLength(&_Container.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_Container *ContainerCallerSession) ContentTypesLength() (*big.Int, error) {
	return _Container.Contract.ContentTypesLength(&_Container.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Container *ContainerCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Container *ContainerSession) CountVersionHashes() (*big.Int, error) {
	return _Container.Contract.CountVersionHashes(&_Container.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Container *ContainerCallerSession) CountVersionHashes() (*big.Int, error) {
	return _Container.Contract.CountVersionHashes(&_Container.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Container *ContainerCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Container *ContainerSession) Creator() (common.Address, error) {
	return _Container.Contract.Creator(&_Container.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Container *ContainerCallerSession) Creator() (common.Address, error) {
	return _Container.Contract.Creator(&_Container.CallOpts)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_Container *ContainerCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "findTypeByHash", typeHash)
	return *ret0, err
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_Container *ContainerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _Container.Contract.FindTypeByHash(&_Container.CallOpts, typeHash)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_Container *ContainerCallerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _Container.Contract.FindTypeByHash(&_Container.CallOpts, typeHash)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Container *ContainerCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Container *ContainerSession) HasAccess(candidate common.Address) (bool, error) {
	return _Container.Contract.HasAccess(&_Container.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Container *ContainerCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _Container.Contract.HasAccess(&_Container.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_Container *ContainerCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_Container *ContainerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _Container.Contract.HasEditorRight(&_Container.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_Container *ContainerCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _Container.Contract.HasEditorRight(&_Container.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Container *ContainerCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Container *ContainerSession) IndexCategory() (uint8, error) {
	return _Container.Contract.IndexCategory(&_Container.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Container *ContainerCallerSession) IndexCategory() (uint8, error) {
	return _Container.Contract.IndexCategory(&_Container.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Container *ContainerCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Container *ContainerSession) ObjectHash() (string, error) {
	return _Container.Contract.ObjectHash(&_Container.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Container *ContainerCallerSession) ObjectHash() (string, error) {
	return _Container.Contract.ObjectHash(&_Container.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_Container *ContainerCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_Container *ContainerSession) ObjectTimestamp() (*big.Int, error) {
	return _Container.Contract.ObjectTimestamp(&_Container.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_Container *ContainerCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _Container.Contract.ObjectTimestamp(&_Container.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Container *ContainerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Container *ContainerSession) Owner() (common.Address, error) {
	return _Container.Contract.Owner(&_Container.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Container *ContainerCallerSession) Owner() (common.Address, error) {
	return _Container.Contract.Owner(&_Container.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Container *ContainerCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Container *ContainerSession) ParentAddress() (common.Address, error) {
	return _Container.Contract.ParentAddress(&_Container.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Container *ContainerCallerSession) ParentAddress() (common.Address, error) {
	return _Container.Contract.ParentAddress(&_Container.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Container *ContainerCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Container *ContainerSession) PendingHash() (string, error) {
	return _Container.Contract.PendingHash(&_Container.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Container *ContainerCallerSession) PendingHash() (string, error) {
	return _Container.Contract.PendingHash(&_Container.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_Container *ContainerCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "requiresReview")
	return *ret0, err
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_Container *ContainerSession) RequiresReview() (bool, error) {
	return _Container.Contract.RequiresReview(&_Container.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_Container *ContainerCallerSession) RequiresReview() (bool, error) {
	return _Container.Contract.RequiresReview(&_Container.CallOpts)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_Container *ContainerCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "validType", content_type)
	return *ret0, err
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_Container *ContainerSession) ValidType(content_type common.Address) (bool, error) {
	return _Container.Contract.ValidType(&_Container.CallOpts, content_type)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_Container *ContainerCallerSession) ValidType(content_type common.Address) (bool, error) {
	return _Container.Contract.ValidType(&_Container.CallOpts, content_type)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Container *ContainerCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Container *ContainerSession) Version() ([32]byte, error) {
	return _Container.Contract.Version(&_Container.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Container *ContainerCallerSession) Version() ([32]byte, error) {
	return _Container.Contract.Version(&_Container.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Container *ContainerCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Container *ContainerSession) VersionAPI() ([32]byte, error) {
	return _Container.Contract.VersionAPI(&_Container.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Container *ContainerCallerSession) VersionAPI() ([32]byte, error) {
	return _Container.Contract.VersionAPI(&_Container.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Container *ContainerCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Container *ContainerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _Container.Contract.VersionHashes(&_Container.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Container *ContainerCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _Container.Contract.VersionHashes(&_Container.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Container *ContainerCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Container *ContainerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _Container.Contract.VersionTimestamp(&_Container.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Container *ContainerCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _Container.Contract.VersionTimestamp(&_Container.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Container *ContainerCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Container *ContainerSession) Visibility() (uint8, error) {
	return _Container.Contract.Visibility(&_Container.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Container *ContainerCallerSession) Visibility() (uint8, error) {
	return _Container.Contract.Visibility(&_Container.CallOpts)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_Container *ContainerCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "whitelistedType", content_type)
	return *ret0, err
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_Container *ContainerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _Container.Contract.WhitelistedType(&_Container.CallOpts, content_type)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_Container *ContainerCallerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _Container.Contract.WhitelistedType(&_Container.CallOpts, content_type)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_Container *ContainerTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_Container *ContainerSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _Container.Contract.AccessRequestV3(&_Container.TransactOpts, arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_Container *ContainerTransactorSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _Container.Contract.AccessRequestV3(&_Container.TransactOpts, arg0, arg1)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_Container *ContainerTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_Container *ContainerSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _Container.Contract.AddContentType(&_Container.TransactOpts, content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_Container *ContainerTransactorSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _Container.Contract.AddContentType(&_Container.TransactOpts, content_type, content_contract)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Container *ContainerTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Container *ContainerSession) ClearPending() (*types.Transaction, error) {
	return _Container.Contract.ClearPending(&_Container.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Container *ContainerTransactorSession) ClearPending() (*types.Transaction, error) {
	return _Container.Contract.ClearPending(&_Container.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Container *ContainerTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Container *ContainerSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _Container.Contract.Commit(&_Container.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Container *ContainerTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _Container.Contract.Commit(&_Container.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Container *ContainerTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Container *ContainerSession) ConfirmCommit() (*types.Transaction, error) {
	return _Container.Contract.ConfirmCommit(&_Container.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Container *ContainerTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _Container.Contract.ConfirmCommit(&_Container.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Container *ContainerTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Container *ContainerSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _Container.Contract.DeleteVersion(&_Container.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Container *ContainerTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _Container.Contract.DeleteVersion(&_Container.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Container *ContainerTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Container *ContainerSession) Kill() (*types.Transaction, error) {
	return _Container.Contract.Kill(&_Container.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Container *ContainerTransactorSession) Kill() (*types.Transaction, error) {
	return _Container.Contract.Kill(&_Container.TransactOpts)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_Container *ContainerTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "publish", contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_Container *ContainerSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _Container.Contract.Publish(&_Container.TransactOpts, contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_Container *ContainerTransactorSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _Container.Contract.Publish(&_Container.TransactOpts, contentObj)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_Container *ContainerTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_Container *ContainerSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _Container.Contract.RemoveContentType(&_Container.TransactOpts, content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_Container *ContainerTransactorSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _Container.Contract.RemoveContentType(&_Container.TransactOpts, content_type)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_Container *ContainerTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_Container *ContainerSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _Container.Contract.SetAddressKMS(&_Container.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_Container *ContainerTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _Container.Contract.SetAddressKMS(&_Container.TransactOpts, address_KMS)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_Container *ContainerTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_Container *ContainerSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Container.Contract.SetGroupRights(&_Container.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_Container *ContainerTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Container.Contract.SetGroupRights(&_Container.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_Container *ContainerTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_Container *ContainerSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Container.Contract.SetRights(&_Container.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_Container *ContainerTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Container.Contract.SetRights(&_Container.TransactOpts, stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Container *ContainerTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Container *ContainerSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _Container.Contract.SetVisibility(&_Container.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Container *ContainerTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _Container.Contract.SetVisibility(&_Container.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Container *ContainerTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Container *ContainerSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Container.Contract.TransferCreatorship(&_Container.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Container *ContainerTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Container.Contract.TransferCreatorship(&_Container.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Container *ContainerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Container *ContainerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Container.Contract.TransferOwnership(&_Container.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Container *ContainerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Container.Contract.TransferOwnership(&_Container.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Container *ContainerTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Container *ContainerSession) UpdateRequest() (*types.Transaction, error) {
	return _Container.Contract.UpdateRequest(&_Container.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Container *ContainerTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _Container.Contract.UpdateRequest(&_Container.TransactOpts)
}

// ContainerAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the Container contract.
type ContainerAccessRequestV3Iterator struct {
	Event *ContainerAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerAccessRequestV3 represents a AccessRequestV3 event raised by the Container contract.
type ContainerAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Container *ContainerFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*ContainerAccessRequestV3Iterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &ContainerAccessRequestV3Iterator{contract: _Container.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Container *ContainerFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *ContainerAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerAccessRequestV3)
				if err := _Container.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Container *ContainerFilterer) ParseAccessRequestV3(log types.Log) (*ContainerAccessRequestV3, error) {
	event := new(ContainerAccessRequestV3)
	if err := _Container.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the Container contract.
type ContainerCommitPendingIterator struct {
	Event *ContainerCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerCommitPending represents a CommitPending event raised by the Container contract.
type ContainerCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) FilterCommitPending(opts *bind.FilterOpts) (*ContainerCommitPendingIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &ContainerCommitPendingIterator{contract: _Container.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *ContainerCommitPending) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerCommitPending)
				if err := _Container.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) ParseCommitPending(log types.Log) (*ContainerCommitPending, error) {
	event := new(ContainerCommitPending)
	if err := _Container.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the Container contract.
type ContainerContentTypeAddedIterator struct {
	Event *ContainerContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerContentTypeAdded represents a ContentTypeAdded event raised by the Container contract.
type ContainerContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*ContainerContentTypeAddedIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &ContainerContentTypeAddedIterator{contract: _Container.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *ContainerContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerContentTypeAdded)
				if err := _Container.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) ParseContentTypeAdded(log types.Log) (*ContainerContentTypeAdded, error) {
	event := new(ContainerContentTypeAdded)
	if err := _Container.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the Container contract.
type ContainerContentTypeRemovedIterator struct {
	Event *ContainerContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerContentTypeRemoved represents a ContentTypeRemoved event raised by the Container contract.
type ContainerContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*ContainerContentTypeRemovedIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &ContainerContentTypeRemovedIterator{contract: _Container.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *ContainerContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerContentTypeRemoved)
				if err := _Container.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) ParseContentTypeRemoved(log types.Log) (*ContainerContentTypeRemoved, error) {
	event := new(ContainerContentTypeRemoved)
	if err := _Container.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the Container contract.
type ContainerUpdateRequestIterator struct {
	Event *ContainerUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerUpdateRequest represents a UpdateRequest event raised by the Container contract.
type ContainerUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*ContainerUpdateRequestIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &ContainerUpdateRequestIterator{contract: _Container.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *ContainerUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerUpdateRequest)
				if err := _Container.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) ParseUpdateRequest(log types.Log) (*ContainerUpdateRequest, error) {
	event := new(ContainerUpdateRequest)
	if err := _Container.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the Container contract.
type ContainerVersionConfirmIterator struct {
	Event *ContainerVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerVersionConfirm represents a VersionConfirm event raised by the Container contract.
type ContainerVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*ContainerVersionConfirmIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &ContainerVersionConfirmIterator{contract: _Container.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *ContainerVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerVersionConfirm)
				if err := _Container.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) ParseVersionConfirm(log types.Log) (*ContainerVersionConfirm, error) {
	event := new(ContainerVersionConfirm)
	if err := _Container.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the Container contract.
type ContainerVersionDeleteIterator struct {
	Event *ContainerVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerVersionDelete represents a VersionDelete event raised by the Container contract.
type ContainerVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*ContainerVersionDeleteIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &ContainerVersionDeleteIterator{contract: _Container.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *ContainerVersionDelete) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerVersionDelete)
				if err := _Container.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) ParseVersionDelete(log types.Log) (*ContainerVersionDelete, error) {
	event := new(ContainerVersionDelete)
	if err := _Container.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the Container contract.
type ContainerVisibilityChangedIterator struct {
	Event *ContainerVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerVisibilityChanged represents a VisibilityChanged event raised by the Container contract.
type ContainerVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Container *ContainerFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*ContainerVisibilityChangedIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &ContainerVisibilityChangedIterator{contract: _Container.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Container *ContainerFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *ContainerVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerVisibilityChanged)
				if err := _Container.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Container *ContainerFilterer) ParseVisibilityChanged(log types.Log) (*ContainerVisibilityChanged, error) {
	event := new(ContainerVisibilityChanged)
	if err := _Container.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentABI is the input ABI used to generate the binding from.
const ContentABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"runFinalize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commandKill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposed_status_code\",\"type\":\"int256\"}],\"name\":\"runStatusChange\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"runDescribeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"runAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runKillExt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runKill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_CHARGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"runAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposedStatusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"returnStatusCode\",\"type\":\"int256\"}],\"name\":\"RunStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"calculatedAccessCharge\",\"type\":\"int256\"}],\"name\":\"RunAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunFinalize\",\"type\":\"event\"}]"

// ContentFuncSigs maps the 4-byte function signature to its string representation.
var ContentFuncSigs = map[string]string{
	"6af27417": "DEFAULT_ACCESS()",
	"f185db0c": "DEFAULT_CHARGE()",
	"b535b03e": "DEFAULT_SEE()",
	"2de3ecd1": "commandKill()",
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"f9b4aa02": "runAccess(uint256,bytes32[],address[],address)",
	"74ba4609": "runAccessInfo(bytes32[],address[],address)",
	"7b1cdb3e": "runCreate()",
	"45080442": "runDescribeStatus(int256)",
	"c9f3d94c": "runEdit()",
	"1a485ccd": "runFinalize(uint256,bytes32[],address[],address)",
	"9e99bbea": "runKill()",
	"860b2492": "runKillExt()",
	"3513a805": "runStatusChange(int256)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// ContentBin is the compiled bytecode used for deploying new contracts.
var ContentBin = "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f436f6e74656e7432303230303231303136343130304d4c00000000000000000060055560028054600160a060020a0319908116321790915560038054909116331790556108768061009f6000396000f3fe608060405260043610610147576000357c01000000000000000000000000000000000000000000000000000000009004806374ba4609116100c8578063af570c041161008c578063af570c0414610551578063b535b03e14610566578063c9f3d94c1461057b578063f185db0c14610590578063f2fde38b146105a5578063f9b4aa021461017a57610147565b806374ba4609146103be5780637b1cdb3e1461052c578063860b2492146105345780638da5cb5b1461053c5780639e99bbea1461052c57610147565b8063450804421161010f578063450804421461030c57806354fd4d50146103365780635f4fcae11461034b5780636af27417146103605780636d2e4b1b1461038b57610147565b806302d05d3f146101495780631a485ccd1461017a5780632de3ecd1146102c55780633513a805146102da57806341c0e1b5146102f7575b005b34801561015557600080fd5b5061015e6105d8565b60408051600160a060020a039092168252519081900360200190f35b6102b36004803603608081101561019057600080fd5b813591908101906040810160208201356401000000008111156101b257600080fd5b8201836020820111156101c457600080fd5b803590602001918460208302840111640100000000831117156101e657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561023657600080fd5b82018360208201111561024857600080fd5b8035906020019184602083028401116401000000008311171561026a57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050509035600160a060020a031691506105e79050565b60408051918252519081900360200190f35b3480156102d157600080fd5b506101476105f1565b6102b3600480360360208110156102f057600080fd5b50356106b9565b34801561030357600080fd5b506101476106bc565b34801561031857600080fd5b506102b36004803603602081101561032f57600080fd5b50356106d3565b34801561034257600080fd5b506102b36106d9565b34801561035757600080fd5b506102b36106df565b34801561036c57600080fd5b506103756106e5565b6040805160ff9092168252519081900360200190f35b34801561039757600080fd5b50610147600480360360208110156103ae57600080fd5b5035600160a060020a03166106ea565b3480156103ca57600080fd5b506104fd600480360360608110156103e157600080fd5b8101906020810181356401000000008111156103fc57600080fd5b82018360208201111561040e57600080fd5b8035906020019184602083028401116401000000008311171561043057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561048057600080fd5b82018360208201111561049257600080fd5b803590602001918460208302840111640100000000831117156104b457600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050509035600160a060020a031691506107459050565b6040805160ff958616815293851660208501529190931682820152606082019290925290519081900360800190f35b6102b3610754565b6102b3610759565b34801561054857600080fd5b5061015e6107c2565b34801561055d57600080fd5b5061015e6107d1565b34801561057257600080fd5b506103756107e0565b34801561058757600080fd5b506102b36107e5565b34801561059c57600080fd5b506103756107ea565b3480156105b157600080fd5b50610147600480360360208110156105c857600080fd5b5035600160a060020a03166107ef565b600254600160a060020a031681565b6000949350505050565b600654600160a060020a0316331461060857600080fd5b600033905030600160a060020a031681600160a060020a0316632310167f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561066c57600080fd5b505afa158015610680573d6000803e3d6000fd5b505050506040513d602081101561069657600080fd5b5051600160a060020a0316146106ab57600080fd5b600354600160a060020a0316ff5b90565b600354600160a060020a031633146106ab57600080fd5b50600090565b60055481565b60015481565b600281565b600254600160a060020a0316331461070157600080fd5b600160a060020a038116151561071657600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60076000808093509350935093565b600090565b600080610764610754565b9050806064148061077657508061044c145b1561079f576006805473ffffffffffffffffffffffffffffffffffffffff1916331790556107bd565b6006805473ffffffffffffffffffffffffffffffffffffffff191690555b905090565b600354600160a060020a031681565b600454600160a060020a031681565b600181565b606490565b600481565b600354600160a060020a0316331461080657600080fd5b600160a060020a038116151561081b57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a723058206bd5e3da594592b23c146ffd9dba9bd39c27e9bc54f4eb197243d74e58f444fa0029"

// DeployContent deploys a new Ethereum contract, binding an instance of Content to it.
func DeployContent(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Content, error) {
	parsed, err := abi.JSON(strings.NewReader(ContentABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ContentBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Content{ContentCaller: ContentCaller{contract: contract}, ContentTransactor: ContentTransactor{contract: contract}, ContentFilterer: ContentFilterer{contract: contract}}, nil
}

// Content is an auto generated Go binding around an Ethereum contract.
type Content struct {
	ContentCaller     // Read-only binding to the contract
	ContentTransactor // Write-only binding to the contract
	ContentFilterer   // Log filterer for contract events
}

// ContentCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContentSession struct {
	Contract     *Content          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContentCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContentCallerSession struct {
	Contract *ContentCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ContentTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContentTransactorSession struct {
	Contract     *ContentTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ContentRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContentRaw struct {
	Contract *Content // Generic contract binding to access the raw methods on
}

// ContentCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContentCallerRaw struct {
	Contract *ContentCaller // Generic read-only contract binding to access the raw methods on
}

// ContentTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContentTransactorRaw struct {
	Contract *ContentTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContent creates a new instance of Content, bound to a specific deployed contract.
func NewContent(address common.Address, backend bind.ContractBackend) (*Content, error) {
	contract, err := bindContent(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Content{ContentCaller: ContentCaller{contract: contract}, ContentTransactor: ContentTransactor{contract: contract}, ContentFilterer: ContentFilterer{contract: contract}}, nil
}

// NewContentCaller creates a new read-only instance of Content, bound to a specific deployed contract.
func NewContentCaller(address common.Address, caller bind.ContractCaller) (*ContentCaller, error) {
	contract, err := bindContent(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContentCaller{contract: contract}, nil
}

// NewContentTransactor creates a new write-only instance of Content, bound to a specific deployed contract.
func NewContentTransactor(address common.Address, transactor bind.ContractTransactor) (*ContentTransactor, error) {
	contract, err := bindContent(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContentTransactor{contract: contract}, nil
}

// NewContentFilterer creates a new log filterer instance of Content, bound to a specific deployed contract.
func NewContentFilterer(address common.Address, filterer bind.ContractFilterer) (*ContentFilterer, error) {
	contract, err := bindContent(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContentFilterer{contract: contract}, nil
}

// bindContent binds a generic wrapper to an already deployed contract.
func bindContent(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContentABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Content *ContentRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Content.Contract.ContentCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Content *ContentRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.Contract.ContentTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Content *ContentRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Content.Contract.ContentTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Content *ContentCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Content.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Content *ContentTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Content *ContentTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Content.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_Content *ContentCaller) DEFAULTACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "DEFAULT_ACCESS")
	return *ret0, err
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_Content *ContentSession) DEFAULTACCESS() (uint8, error) {
	return _Content.Contract.DEFAULTACCESS(&_Content.CallOpts)
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_Content *ContentCallerSession) DEFAULTACCESS() (uint8, error) {
	return _Content.Contract.DEFAULTACCESS(&_Content.CallOpts)
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_Content *ContentCaller) DEFAULTCHARGE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "DEFAULT_CHARGE")
	return *ret0, err
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_Content *ContentSession) DEFAULTCHARGE() (uint8, error) {
	return _Content.Contract.DEFAULTCHARGE(&_Content.CallOpts)
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_Content *ContentCallerSession) DEFAULTCHARGE() (uint8, error) {
	return _Content.Contract.DEFAULTCHARGE(&_Content.CallOpts)
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_Content *ContentCaller) DEFAULTSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "DEFAULT_SEE")
	return *ret0, err
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_Content *ContentSession) DEFAULTSEE() (uint8, error) {
	return _Content.Contract.DEFAULTSEE(&_Content.CallOpts)
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_Content *ContentCallerSession) DEFAULTSEE() (uint8, error) {
	return _Content.Contract.DEFAULTSEE(&_Content.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Content *ContentCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Content *ContentSession) ContentSpace() (common.Address, error) {
	return _Content.Contract.ContentSpace(&_Content.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Content *ContentCallerSession) ContentSpace() (common.Address, error) {
	return _Content.Contract.ContentSpace(&_Content.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Content *ContentCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Content *ContentSession) Creator() (common.Address, error) {
	return _Content.Contract.Creator(&_Content.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Content *ContentCallerSession) Creator() (common.Address, error) {
	return _Content.Contract.Creator(&_Content.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Content *ContentCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Content *ContentSession) Owner() (common.Address, error) {
	return _Content.Contract.Owner(&_Content.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Content *ContentCallerSession) Owner() (common.Address, error) {
	return _Content.Contract.Owner(&_Content.CallOpts)
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x74ba4609.
//
// Solidity: function runAccessInfo(bytes32[] , address[] , address ) constant returns(uint8, uint8, uint8, uint256)
func (_Content *ContentCaller) RunAccessInfo(opts *bind.CallOpts, arg0 [][32]byte, arg1 []common.Address, arg2 common.Address) (uint8, uint8, uint8, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(uint8)
		ret3 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Content.contract.Call(opts, out, "runAccessInfo", arg0, arg1, arg2)
	return *ret0, *ret1, *ret2, *ret3, err
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x74ba4609.
//
// Solidity: function runAccessInfo(bytes32[] , address[] , address ) constant returns(uint8, uint8, uint8, uint256)
func (_Content *ContentSession) RunAccessInfo(arg0 [][32]byte, arg1 []common.Address, arg2 common.Address) (uint8, uint8, uint8, *big.Int, error) {
	return _Content.Contract.RunAccessInfo(&_Content.CallOpts, arg0, arg1, arg2)
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x74ba4609.
//
// Solidity: function runAccessInfo(bytes32[] , address[] , address ) constant returns(uint8, uint8, uint8, uint256)
func (_Content *ContentCallerSession) RunAccessInfo(arg0 [][32]byte, arg1 []common.Address, arg2 common.Address) (uint8, uint8, uint8, *big.Int, error) {
	return _Content.Contract.RunAccessInfo(&_Content.CallOpts, arg0, arg1, arg2)
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_Content *ContentCaller) RunDescribeStatus(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "runDescribeStatus", arg0)
	return *ret0, err
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_Content *ContentSession) RunDescribeStatus(arg0 *big.Int) ([32]byte, error) {
	return _Content.Contract.RunDescribeStatus(&_Content.CallOpts, arg0)
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_Content *ContentCallerSession) RunDescribeStatus(arg0 *big.Int) ([32]byte, error) {
	return _Content.Contract.RunDescribeStatus(&_Content.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Content *ContentCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Content *ContentSession) Version() ([32]byte, error) {
	return _Content.Contract.Version(&_Content.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Content *ContentCallerSession) Version() ([32]byte, error) {
	return _Content.Contract.Version(&_Content.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Content *ContentCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Content *ContentSession) VersionAPI() ([32]byte, error) {
	return _Content.Contract.VersionAPI(&_Content.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Content *ContentCallerSession) VersionAPI() ([32]byte, error) {
	return _Content.Contract.VersionAPI(&_Content.CallOpts)
}

// CommandKill is a paid mutator transaction binding the contract method 0x2de3ecd1.
//
// Solidity: function commandKill() returns()
func (_Content *ContentTransactor) CommandKill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "commandKill")
}

// CommandKill is a paid mutator transaction binding the contract method 0x2de3ecd1.
//
// Solidity: function commandKill() returns()
func (_Content *ContentSession) CommandKill() (*types.Transaction, error) {
	return _Content.Contract.CommandKill(&_Content.TransactOpts)
}

// CommandKill is a paid mutator transaction binding the contract method 0x2de3ecd1.
//
// Solidity: function commandKill() returns()
func (_Content *ContentTransactorSession) CommandKill() (*types.Transaction, error) {
	return _Content.Contract.CommandKill(&_Content.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Content *ContentTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Content *ContentSession) Kill() (*types.Transaction, error) {
	return _Content.Contract.Kill(&_Content.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Content *ContentTransactorSession) Kill() (*types.Transaction, error) {
	return _Content.Contract.Kill(&_Content.TransactOpts)
}

// RunAccess is a paid mutator transaction binding the contract method 0xf9b4aa02.
//
// Solidity: function runAccess(uint256 , bytes32[] , address[] , address ) returns(uint256)
func (_Content *ContentTransactor) RunAccess(opts *bind.TransactOpts, arg0 *big.Int, arg1 [][32]byte, arg2 []common.Address, arg3 common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runAccess", arg0, arg1, arg2, arg3)
}

// RunAccess is a paid mutator transaction binding the contract method 0xf9b4aa02.
//
// Solidity: function runAccess(uint256 , bytes32[] , address[] , address ) returns(uint256)
func (_Content *ContentSession) RunAccess(arg0 *big.Int, arg1 [][32]byte, arg2 []common.Address, arg3 common.Address) (*types.Transaction, error) {
	return _Content.Contract.RunAccess(&_Content.TransactOpts, arg0, arg1, arg2, arg3)
}

// RunAccess is a paid mutator transaction binding the contract method 0xf9b4aa02.
//
// Solidity: function runAccess(uint256 , bytes32[] , address[] , address ) returns(uint256)
func (_Content *ContentTransactorSession) RunAccess(arg0 *big.Int, arg1 [][32]byte, arg2 []common.Address, arg3 common.Address) (*types.Transaction, error) {
	return _Content.Contract.RunAccess(&_Content.TransactOpts, arg0, arg1, arg2, arg3)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_Content *ContentTransactor) RunCreate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runCreate")
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_Content *ContentSession) RunCreate() (*types.Transaction, error) {
	return _Content.Contract.RunCreate(&_Content.TransactOpts)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_Content *ContentTransactorSession) RunCreate() (*types.Transaction, error) {
	return _Content.Contract.RunCreate(&_Content.TransactOpts)
}

// RunEdit is a paid mutator transaction binding the contract method 0xc9f3d94c.
//
// Solidity: function runEdit() returns(uint256)
func (_Content *ContentTransactor) RunEdit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runEdit")
}

// RunEdit is a paid mutator transaction binding the contract method 0xc9f3d94c.
//
// Solidity: function runEdit() returns(uint256)
func (_Content *ContentSession) RunEdit() (*types.Transaction, error) {
	return _Content.Contract.RunEdit(&_Content.TransactOpts)
}

// RunEdit is a paid mutator transaction binding the contract method 0xc9f3d94c.
//
// Solidity: function runEdit() returns(uint256)
func (_Content *ContentTransactorSession) RunEdit() (*types.Transaction, error) {
	return _Content.Contract.RunEdit(&_Content.TransactOpts)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x1a485ccd.
//
// Solidity: function runFinalize(uint256 , bytes32[] , address[] , address ) returns(uint256)
func (_Content *ContentTransactor) RunFinalize(opts *bind.TransactOpts, arg0 *big.Int, arg1 [][32]byte, arg2 []common.Address, arg3 common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runFinalize", arg0, arg1, arg2, arg3)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x1a485ccd.
//
// Solidity: function runFinalize(uint256 , bytes32[] , address[] , address ) returns(uint256)
func (_Content *ContentSession) RunFinalize(arg0 *big.Int, arg1 [][32]byte, arg2 []common.Address, arg3 common.Address) (*types.Transaction, error) {
	return _Content.Contract.RunFinalize(&_Content.TransactOpts, arg0, arg1, arg2, arg3)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x1a485ccd.
//
// Solidity: function runFinalize(uint256 , bytes32[] , address[] , address ) returns(uint256)
func (_Content *ContentTransactorSession) RunFinalize(arg0 *big.Int, arg1 [][32]byte, arg2 []common.Address, arg3 common.Address) (*types.Transaction, error) {
	return _Content.Contract.RunFinalize(&_Content.TransactOpts, arg0, arg1, arg2, arg3)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_Content *ContentTransactor) RunKill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runKill")
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_Content *ContentSession) RunKill() (*types.Transaction, error) {
	return _Content.Contract.RunKill(&_Content.TransactOpts)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_Content *ContentTransactorSession) RunKill() (*types.Transaction, error) {
	return _Content.Contract.RunKill(&_Content.TransactOpts)
}

// RunKillExt is a paid mutator transaction binding the contract method 0x860b2492.
//
// Solidity: function runKillExt() returns(uint256)
func (_Content *ContentTransactor) RunKillExt(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runKillExt")
}

// RunKillExt is a paid mutator transaction binding the contract method 0x860b2492.
//
// Solidity: function runKillExt() returns(uint256)
func (_Content *ContentSession) RunKillExt() (*types.Transaction, error) {
	return _Content.Contract.RunKillExt(&_Content.TransactOpts)
}

// RunKillExt is a paid mutator transaction binding the contract method 0x860b2492.
//
// Solidity: function runKillExt() returns(uint256)
func (_Content *ContentTransactorSession) RunKillExt() (*types.Transaction, error) {
	return _Content.Contract.RunKillExt(&_Content.TransactOpts)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_Content *ContentTransactor) RunStatusChange(opts *bind.TransactOpts, proposed_status_code *big.Int) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runStatusChange", proposed_status_code)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_Content *ContentSession) RunStatusChange(proposed_status_code *big.Int) (*types.Transaction, error) {
	return _Content.Contract.RunStatusChange(&_Content.TransactOpts, proposed_status_code)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_Content *ContentTransactorSession) RunStatusChange(proposed_status_code *big.Int) (*types.Transaction, error) {
	return _Content.Contract.RunStatusChange(&_Content.TransactOpts, proposed_status_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Content *ContentTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Content *ContentSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Content.Contract.TransferCreatorship(&_Content.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Content *ContentTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Content.Contract.TransferCreatorship(&_Content.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Content *ContentTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Content *ContentSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Content.Contract.TransferOwnership(&_Content.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Content *ContentTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Content.Contract.TransferOwnership(&_Content.TransactOpts, newOwner)
}

// ContentLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the Content contract.
type ContentLogIterator struct {
	Event *ContentLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLog represents a Log event raised by the Content contract.
type ContentLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) FilterLog(opts *bind.FilterOpts) (*ContentLogIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &ContentLogIterator{contract: _Content.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *ContentLog) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLog)
				if err := _Content.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) ParseLog(log types.Log) (*ContentLog, error) {
	event := new(ContentLog)
	if err := _Content.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the Content contract.
type ContentLogAddressIterator struct {
	Event *ContentLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogAddress represents a LogAddress event raised by the Content contract.
type ContentLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) FilterLogAddress(opts *bind.FilterOpts) (*ContentLogAddressIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &ContentLogAddressIterator{contract: _Content.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *ContentLogAddress) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogAddress)
				if err := _Content.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) ParseLogAddress(log types.Log) (*ContentLogAddress, error) {
	event := new(ContentLogAddress)
	if err := _Content.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the Content contract.
type ContentLogBoolIterator struct {
	Event *ContentLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogBool represents a LogBool event raised by the Content contract.
type ContentLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) FilterLogBool(opts *bind.FilterOpts) (*ContentLogBoolIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &ContentLogBoolIterator{contract: _Content.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *ContentLogBool) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogBool)
				if err := _Content.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) ParseLogBool(log types.Log) (*ContentLogBool, error) {
	event := new(ContentLogBool)
	if err := _Content.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the Content contract.
type ContentLogBytes32Iterator struct {
	Event *ContentLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogBytes32 represents a LogBytes32 event raised by the Content contract.
type ContentLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*ContentLogBytes32Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &ContentLogBytes32Iterator{contract: _Content.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *ContentLogBytes32) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogBytes32)
				if err := _Content.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) ParseLogBytes32(log types.Log) (*ContentLogBytes32, error) {
	event := new(ContentLogBytes32)
	if err := _Content.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the Content contract.
type ContentLogInt256Iterator struct {
	Event *ContentLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogInt256 represents a LogInt256 event raised by the Content contract.
type ContentLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) FilterLogInt256(opts *bind.FilterOpts) (*ContentLogInt256Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &ContentLogInt256Iterator{contract: _Content.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *ContentLogInt256) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogInt256)
				if err := _Content.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) ParseLogInt256(log types.Log) (*ContentLogInt256, error) {
	event := new(ContentLogInt256)
	if err := _Content.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the Content contract.
type ContentLogPaymentIterator struct {
	Event *ContentLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogPayment represents a LogPayment event raised by the Content contract.
type ContentLogPayment struct {
	Label  string
	Payee  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) FilterLogPayment(opts *bind.FilterOpts) (*ContentLogPaymentIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &ContentLogPaymentIterator{contract: _Content.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *ContentLogPayment) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogPayment)
				if err := _Content.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) ParseLogPayment(log types.Log) (*ContentLogPayment, error) {
	event := new(ContentLogPayment)
	if err := _Content.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the Content contract.
type ContentLogUint256Iterator struct {
	Event *ContentLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogUint256 represents a LogUint256 event raised by the Content contract.
type ContentLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) FilterLogUint256(opts *bind.FilterOpts) (*ContentLogUint256Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &ContentLogUint256Iterator{contract: _Content.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *ContentLogUint256) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogUint256)
				if err := _Content.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) ParseLogUint256(log types.Log) (*ContentLogUint256, error) {
	event := new(ContentLogUint256)
	if err := _Content.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunAccessIterator is returned from FilterRunAccess and is used to iterate over the raw logs and unpacked data for RunAccess events raised by the Content contract.
type ContentRunAccessIterator struct {
	Event *ContentRunAccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunAccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunAccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunAccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunAccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunAccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunAccess represents a RunAccess event raised by the Content contract.
type ContentRunAccess struct {
	RequestNonce *big.Int
	Result       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRunAccess is a free log retrieval operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) FilterRunAccess(opts *bind.FilterOpts) (*ContentRunAccessIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return &ContentRunAccessIterator{contract: _Content.contract, event: "RunAccess", logs: logs, sub: sub}, nil
}

// WatchRunAccess is a free log subscription operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) WatchRunAccess(opts *bind.WatchOpts, sink chan<- *ContentRunAccess) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunAccess)
				if err := _Content.contract.UnpackLog(event, "RunAccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccess is a log parse operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) ParseRunAccess(log types.Log) (*ContentRunAccess, error) {
	event := new(ContentRunAccess)
	if err := _Content.contract.UnpackLog(event, "RunAccess", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunAccessChargeIterator is returned from FilterRunAccessCharge and is used to iterate over the raw logs and unpacked data for RunAccessCharge events raised by the Content contract.
type ContentRunAccessChargeIterator struct {
	Event *ContentRunAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunAccessCharge represents a RunAccessCharge event raised by the Content contract.
type ContentRunAccessCharge struct {
	CalculatedAccessCharge *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRunAccessCharge is a free log retrieval operation binding the contract event 0xe1f170f83120da6c17cd0ed37a683fc996637c63d2c94a60c806d4cb7466f47b.
//
// Solidity: event RunAccessCharge(int256 calculatedAccessCharge)
func (_Content *ContentFilterer) FilterRunAccessCharge(opts *bind.FilterOpts) (*ContentRunAccessChargeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return &ContentRunAccessChargeIterator{contract: _Content.contract, event: "RunAccessCharge", logs: logs, sub: sub}, nil
}

// WatchRunAccessCharge is a free log subscription operation binding the contract event 0xe1f170f83120da6c17cd0ed37a683fc996637c63d2c94a60c806d4cb7466f47b.
//
// Solidity: event RunAccessCharge(int256 calculatedAccessCharge)
func (_Content *ContentFilterer) WatchRunAccessCharge(opts *bind.WatchOpts, sink chan<- *ContentRunAccessCharge) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunAccessCharge)
				if err := _Content.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccessCharge is a log parse operation binding the contract event 0xe1f170f83120da6c17cd0ed37a683fc996637c63d2c94a60c806d4cb7466f47b.
//
// Solidity: event RunAccessCharge(int256 calculatedAccessCharge)
func (_Content *ContentFilterer) ParseRunAccessCharge(log types.Log) (*ContentRunAccessCharge, error) {
	event := new(ContentRunAccessCharge)
	if err := _Content.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunCreateIterator is returned from FilterRunCreate and is used to iterate over the raw logs and unpacked data for RunCreate events raised by the Content contract.
type ContentRunCreateIterator struct {
	Event *ContentRunCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunCreate represents a RunCreate event raised by the Content contract.
type ContentRunCreate struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunCreate is a free log retrieval operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) FilterRunCreate(opts *bind.FilterOpts) (*ContentRunCreateIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return &ContentRunCreateIterator{contract: _Content.contract, event: "RunCreate", logs: logs, sub: sub}, nil
}

// WatchRunCreate is a free log subscription operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) WatchRunCreate(opts *bind.WatchOpts, sink chan<- *ContentRunCreate) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunCreate)
				if err := _Content.contract.UnpackLog(event, "RunCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunCreate is a log parse operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) ParseRunCreate(log types.Log) (*ContentRunCreate, error) {
	event := new(ContentRunCreate)
	if err := _Content.contract.UnpackLog(event, "RunCreate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunFinalizeIterator is returned from FilterRunFinalize and is used to iterate over the raw logs and unpacked data for RunFinalize events raised by the Content contract.
type ContentRunFinalizeIterator struct {
	Event *ContentRunFinalize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunFinalizeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunFinalize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunFinalize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunFinalizeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunFinalizeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunFinalize represents a RunFinalize event raised by the Content contract.
type ContentRunFinalize struct {
	RequestNonce *big.Int
	Result       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRunFinalize is a free log retrieval operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) FilterRunFinalize(opts *bind.FilterOpts) (*ContentRunFinalizeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return &ContentRunFinalizeIterator{contract: _Content.contract, event: "RunFinalize", logs: logs, sub: sub}, nil
}

// WatchRunFinalize is a free log subscription operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) WatchRunFinalize(opts *bind.WatchOpts, sink chan<- *ContentRunFinalize) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunFinalize)
				if err := _Content.contract.UnpackLog(event, "RunFinalize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunFinalize is a log parse operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) ParseRunFinalize(log types.Log) (*ContentRunFinalize, error) {
	event := new(ContentRunFinalize)
	if err := _Content.contract.UnpackLog(event, "RunFinalize", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunKillIterator is returned from FilterRunKill and is used to iterate over the raw logs and unpacked data for RunKill events raised by the Content contract.
type ContentRunKillIterator struct {
	Event *ContentRunKill // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunKillIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunKill)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunKill)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunKillIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunKillIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunKill represents a RunKill event raised by the Content contract.
type ContentRunKill struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunKill is a free log retrieval operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) FilterRunKill(opts *bind.FilterOpts) (*ContentRunKillIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return &ContentRunKillIterator{contract: _Content.contract, event: "RunKill", logs: logs, sub: sub}, nil
}

// WatchRunKill is a free log subscription operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) WatchRunKill(opts *bind.WatchOpts, sink chan<- *ContentRunKill) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunKill)
				if err := _Content.contract.UnpackLog(event, "RunKill", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunKill is a log parse operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) ParseRunKill(log types.Log) (*ContentRunKill, error) {
	event := new(ContentRunKill)
	if err := _Content.contract.UnpackLog(event, "RunKill", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunStatusChangeIterator is returned from FilterRunStatusChange and is used to iterate over the raw logs and unpacked data for RunStatusChange events raised by the Content contract.
type ContentRunStatusChangeIterator struct {
	Event *ContentRunStatusChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunStatusChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunStatusChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunStatusChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunStatusChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunStatusChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunStatusChange represents a RunStatusChange event raised by the Content contract.
type ContentRunStatusChange struct {
	ProposedStatusCode *big.Int
	ReturnStatusCode   *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRunStatusChange is a free log retrieval operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) FilterRunStatusChange(opts *bind.FilterOpts) (*ContentRunStatusChangeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return &ContentRunStatusChangeIterator{contract: _Content.contract, event: "RunStatusChange", logs: logs, sub: sub}, nil
}

// WatchRunStatusChange is a free log subscription operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) WatchRunStatusChange(opts *bind.WatchOpts, sink chan<- *ContentRunStatusChange) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunStatusChange)
				if err := _Content.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunStatusChange is a log parse operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) ParseRunStatusChange(log types.Log) (*ContentRunStatusChange, error) {
	event := new(ContentRunStatusChange)
	if err := _Content.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentFactoryHelperABI is the input ABI used to generate the binding from.
const ContentFactoryHelperABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectBin\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// ContentFactoryHelperFuncSigs maps the 4-byte function signature to its string representation.
var ContentFactoryHelperFuncSigs = map[string]string{
	"0b9b0870": "getContentObjectBin()",
}

// ContentFactoryHelperBin is the compiled bytecode used for deploying new contracts.
var ContentFactoryHelperBin = ""

// DeployContentFactoryHelper deploys a new Ethereum contract, binding an instance of ContentFactoryHelper to it.
func DeployContentFactoryHelper(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ContentFactoryHelper, error) {
	parsed, err := abi.JSON(strings.NewReader(ContentFactoryHelperABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ContentFactoryHelperBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContentFactoryHelper{ContentFactoryHelperCaller: ContentFactoryHelperCaller{contract: contract}, ContentFactoryHelperTransactor: ContentFactoryHelperTransactor{contract: contract}, ContentFactoryHelperFilterer: ContentFactoryHelperFilterer{contract: contract}}, nil
}

// ContentFactoryHelper is an auto generated Go binding around an Ethereum contract.
type ContentFactoryHelper struct {
	ContentFactoryHelperCaller     // Read-only binding to the contract
	ContentFactoryHelperTransactor // Write-only binding to the contract
	ContentFactoryHelperFilterer   // Log filterer for contract events
}

// ContentFactoryHelperCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContentFactoryHelperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentFactoryHelperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContentFactoryHelperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentFactoryHelperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContentFactoryHelperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentFactoryHelperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContentFactoryHelperSession struct {
	Contract     *ContentFactoryHelper // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ContentFactoryHelperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContentFactoryHelperCallerSession struct {
	Contract *ContentFactoryHelperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// ContentFactoryHelperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContentFactoryHelperTransactorSession struct {
	Contract     *ContentFactoryHelperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// ContentFactoryHelperRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContentFactoryHelperRaw struct {
	Contract *ContentFactoryHelper // Generic contract binding to access the raw methods on
}

// ContentFactoryHelperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContentFactoryHelperCallerRaw struct {
	Contract *ContentFactoryHelperCaller // Generic read-only contract binding to access the raw methods on
}

// ContentFactoryHelperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContentFactoryHelperTransactorRaw struct {
	Contract *ContentFactoryHelperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContentFactoryHelper creates a new instance of ContentFactoryHelper, bound to a specific deployed contract.
func NewContentFactoryHelper(address common.Address, backend bind.ContractBackend) (*ContentFactoryHelper, error) {
	contract, err := bindContentFactoryHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContentFactoryHelper{ContentFactoryHelperCaller: ContentFactoryHelperCaller{contract: contract}, ContentFactoryHelperTransactor: ContentFactoryHelperTransactor{contract: contract}, ContentFactoryHelperFilterer: ContentFactoryHelperFilterer{contract: contract}}, nil
}

// NewContentFactoryHelperCaller creates a new read-only instance of ContentFactoryHelper, bound to a specific deployed contract.
func NewContentFactoryHelperCaller(address common.Address, caller bind.ContractCaller) (*ContentFactoryHelperCaller, error) {
	contract, err := bindContentFactoryHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContentFactoryHelperCaller{contract: contract}, nil
}

// NewContentFactoryHelperTransactor creates a new write-only instance of ContentFactoryHelper, bound to a specific deployed contract.
func NewContentFactoryHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*ContentFactoryHelperTransactor, error) {
	contract, err := bindContentFactoryHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContentFactoryHelperTransactor{contract: contract}, nil
}

// NewContentFactoryHelperFilterer creates a new log filterer instance of ContentFactoryHelper, bound to a specific deployed contract.
func NewContentFactoryHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*ContentFactoryHelperFilterer, error) {
	contract, err := bindContentFactoryHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContentFactoryHelperFilterer{contract: contract}, nil
}

// bindContentFactoryHelper binds a generic wrapper to an already deployed contract.
func bindContentFactoryHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContentFactoryHelperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContentFactoryHelper *ContentFactoryHelperRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ContentFactoryHelper.Contract.ContentFactoryHelperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContentFactoryHelper *ContentFactoryHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContentFactoryHelper.Contract.ContentFactoryHelperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContentFactoryHelper *ContentFactoryHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContentFactoryHelper.Contract.ContentFactoryHelperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContentFactoryHelper *ContentFactoryHelperCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ContentFactoryHelper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContentFactoryHelper *ContentFactoryHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContentFactoryHelper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContentFactoryHelper *ContentFactoryHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContentFactoryHelper.Contract.contract.Transact(opts, method, params...)
}

// GetContentObjectBin is a free data retrieval call binding the contract method 0x0b9b0870.
//
// Solidity: function getContentObjectBin() constant returns(bytes)
func (_ContentFactoryHelper *ContentFactoryHelperCaller) GetContentObjectBin(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _ContentFactoryHelper.contract.Call(opts, out, "getContentObjectBin")
	return *ret0, err
}

// GetContentObjectBin is a free data retrieval call binding the contract method 0x0b9b0870.
//
// Solidity: function getContentObjectBin() constant returns(bytes)
func (_ContentFactoryHelper *ContentFactoryHelperSession) GetContentObjectBin() ([]byte, error) {
	return _ContentFactoryHelper.Contract.GetContentObjectBin(&_ContentFactoryHelper.CallOpts)
}

// GetContentObjectBin is a free data retrieval call binding the contract method 0x0b9b0870.
//
// Solidity: function getContentObjectBin() constant returns(bytes)
func (_ContentFactoryHelper *ContentFactoryHelperCallerSession) GetContentObjectBin() ([]byte, error) {
	return _ContentFactoryHelper.Contract.GetContentObjectBin(&_ContentFactoryHelper.CallOpts)
}

// CounterObjectABI is the input ABI used to generate the binding from.
const CounterObjectABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint32\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ord\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"prev\",\"type\":\"bool\"}],\"name\":\"BitSetAndGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"}],\"name\":\"WordGroupDeleted\",\"type\":\"event\"}]"

// CounterObjectFuncSigs maps the 4-byte function signature to its string representation.
var CounterObjectFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"e57097c9": "deleteGroup(bytes32)",
	"30f846a2": "getBit(bytes32,uint8)",
	"e1954b61": "getCounter(bytes32,uint8)",
	"7558cbf0": "incrementCounter(bytes32,uint8)",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"24d7c18d": "setAndGetBit(bytes32,uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// CounterObjectBin is the compiled bytecode used for deploying new contracts.
var CounterObjectBin = "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060015560028054600160a060020a03199081163217909155600380549091163317905561082e8061007b6000396000f3fe6080604052600436106100fa576000357c0100000000000000000000000000000000000000000000000000000000900480636d2e4b1b1161009c578063af570c0411610076578063af570c04146102a6578063e1954b61146102bb578063e57097c914610307578063f2fde38b14610331576100fa565b80636d2e4b1b1461022b5780637558cbf01461025e5780638da5cb5b14610291576100fa565b806330f846a2116100d857806330f846a2146101a757806341c0e1b5146101da57806354fd4d50146101ef5780635f4fcae114610216576100fa565b806302d05d3f146100fc57806324d7806c1461012d57806324d7c18d14610174575b005b34801561010857600080fd5b50610111610364565b60408051600160a060020a039092168252519081900360200190f35b34801561013957600080fd5b506101606004803603602081101561015057600080fd5b5035600160a060020a0316610373565b604080519115158252519081900360200190f35b34801561018057600080fd5b506101606004803603604081101561019757600080fd5b508035906020013560ff1661039d565b3480156101b357600080fd5b50610160600480360360408110156101ca57600080fd5b508035906020013560ff166103c4565b3480156101e657600080fd5b506100fa610432565b3480156101fb57600080fd5b50610204610457565b60408051918252519081900360200190f35b34801561022257600080fd5b5061020461045d565b34801561023757600080fd5b506100fa6004803603602081101561024e57600080fd5b5035600160a060020a0316610463565b34801561026a57600080fd5b506100fa6004803603604081101561028157600080fd5b508035906020013560ff166104be565b34801561029d57600080fd5b506101116105bf565b3480156102b257600080fd5b506101116105ce565b3480156102c757600080fd5b506102ee600480360360408110156102de57600080fd5b508035906020013560ff166105dd565b6040805163ffffffff9092168252519081900360200190f35b34801561031357600080fd5b506100fa6004803603602081101561032a57600080fd5b503561062f565b34801561033d57600080fd5b506100fa6004803603602081101561035457600080fd5b5035600160a060020a0316610694565b600254600160a060020a031681565b600354600090600160a060020a038381169116141561039457506001610398565b5060005b919050565b60006103a833610373565b15156103b357600080fd5b6103bd83836106ef565b9392505050565b6000828152600560209081526040822060ff8481169290920490911690601f841690600282900a90819084600881106103f957fe5b600881049091015460046007909216919091026101000a90041663ffffffff1615610425576001610428565b60005b9695505050505050565b600354600160a060020a0316331461044957600080fd5b600354600160a060020a0316ff5b60005481565b60015481565b600254600160a060020a0316331461047a57600080fd5b600160a060020a038116151561048f57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6104c733610373565b15156104d257600080fd5b600860ff8216106104e257600080fd5b600082815260056020526040812060ff8316600881106104fe57fe5b600891828204019190066004029054906101000a900463ffffffff169050600560008481526020019081526020016000206000018260ff1660088110151561054257fe5b600881049091018054600163ffffffff60046007909516949094026101000a80830485169190910184168102908402199091161790556040805185815260ff8516602082015291831682820152517f77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f9181900360600190a1505050565b600354600160a060020a031681565b600454600160a060020a031681565b6000600860ff8316106105ef57600080fd5b600083815260056020526040902060ff83166008811061060b57fe5b600891828204019190066004029054906101000a900463ffffffff16905092915050565b61063833610373565b151561064357600080fd5b60008181526005602052604081209061065c82826107fb565b50506040805182815290517f87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f9181900360200190a150565b600354600160a060020a031633146106ab57600080fd5b600160a060020a03811615156106c057600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828152600560209081526040822060ff8481169290920490911690601f841690600282900a9084908290856008811061072657fe5b600881049091015460046007909216919091026101000a90041663ffffffff1615610752576001610755565b60005b90508015156107ae5760008781526005602052604090208290856008811061077957fe5b60088104909101805463ffffffff60046007909416939093026101000a80820484169094178316840292909302199092161790555b6040805188815260ff881660208201528215158183015290517f4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d9181900360600190a19695505050505050565b506000905556fea165627a7a72305820a7f7688a69c1cab3bf350b2a6b62c0089f20eb1bf511a6f6c8278b7e78c430c70029"

// DeployCounterObject deploys a new Ethereum contract, binding an instance of CounterObject to it.
func DeployCounterObject(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CounterObject, error) {
	parsed, err := abi.JSON(strings.NewReader(CounterObjectABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CounterObjectBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CounterObject{CounterObjectCaller: CounterObjectCaller{contract: contract}, CounterObjectTransactor: CounterObjectTransactor{contract: contract}, CounterObjectFilterer: CounterObjectFilterer{contract: contract}}, nil
}

// CounterObject is an auto generated Go binding around an Ethereum contract.
type CounterObject struct {
	CounterObjectCaller     // Read-only binding to the contract
	CounterObjectTransactor // Write-only binding to the contract
	CounterObjectFilterer   // Log filterer for contract events
}

// CounterObjectCaller is an auto generated read-only Go binding around an Ethereum contract.
type CounterObjectCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CounterObjectTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CounterObjectTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CounterObjectFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CounterObjectFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CounterObjectSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CounterObjectSession struct {
	Contract     *CounterObject    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CounterObjectCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CounterObjectCallerSession struct {
	Contract *CounterObjectCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// CounterObjectTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CounterObjectTransactorSession struct {
	Contract     *CounterObjectTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// CounterObjectRaw is an auto generated low-level Go binding around an Ethereum contract.
type CounterObjectRaw struct {
	Contract *CounterObject // Generic contract binding to access the raw methods on
}

// CounterObjectCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CounterObjectCallerRaw struct {
	Contract *CounterObjectCaller // Generic read-only contract binding to access the raw methods on
}

// CounterObjectTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CounterObjectTransactorRaw struct {
	Contract *CounterObjectTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCounterObject creates a new instance of CounterObject, bound to a specific deployed contract.
func NewCounterObject(address common.Address, backend bind.ContractBackend) (*CounterObject, error) {
	contract, err := bindCounterObject(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CounterObject{CounterObjectCaller: CounterObjectCaller{contract: contract}, CounterObjectTransactor: CounterObjectTransactor{contract: contract}, CounterObjectFilterer: CounterObjectFilterer{contract: contract}}, nil
}

// NewCounterObjectCaller creates a new read-only instance of CounterObject, bound to a specific deployed contract.
func NewCounterObjectCaller(address common.Address, caller bind.ContractCaller) (*CounterObjectCaller, error) {
	contract, err := bindCounterObject(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CounterObjectCaller{contract: contract}, nil
}

// NewCounterObjectTransactor creates a new write-only instance of CounterObject, bound to a specific deployed contract.
func NewCounterObjectTransactor(address common.Address, transactor bind.ContractTransactor) (*CounterObjectTransactor, error) {
	contract, err := bindCounterObject(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CounterObjectTransactor{contract: contract}, nil
}

// NewCounterObjectFilterer creates a new log filterer instance of CounterObject, bound to a specific deployed contract.
func NewCounterObjectFilterer(address common.Address, filterer bind.ContractFilterer) (*CounterObjectFilterer, error) {
	contract, err := bindCounterObject(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CounterObjectFilterer{contract: contract}, nil
}

// bindCounterObject binds a generic wrapper to an already deployed contract.
func bindCounterObject(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CounterObjectABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CounterObject *CounterObjectRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CounterObject.Contract.CounterObjectCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CounterObject *CounterObjectRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CounterObject.Contract.CounterObjectTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CounterObject *CounterObjectRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CounterObject.Contract.CounterObjectTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CounterObject *CounterObjectCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CounterObject.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CounterObject *CounterObjectTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CounterObject.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CounterObject *CounterObjectTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CounterObject.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_CounterObject *CounterObjectCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_CounterObject *CounterObjectSession) ContentSpace() (common.Address, error) {
	return _CounterObject.Contract.ContentSpace(&_CounterObject.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_CounterObject *CounterObjectCallerSession) ContentSpace() (common.Address, error) {
	return _CounterObject.Contract.ContentSpace(&_CounterObject.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_CounterObject *CounterObjectCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_CounterObject *CounterObjectSession) Creator() (common.Address, error) {
	return _CounterObject.Contract.Creator(&_CounterObject.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_CounterObject *CounterObjectCallerSession) Creator() (common.Address, error) {
	return _CounterObject.Contract.Creator(&_CounterObject.CallOpts)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_CounterObject *CounterObjectCaller) GetBit(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "getBit", _ident, _ord)
	return *ret0, err
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_CounterObject *CounterObjectSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _CounterObject.Contract.GetBit(&_CounterObject.CallOpts, _ident, _ord)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_CounterObject *CounterObjectCallerSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _CounterObject.Contract.GetBit(&_CounterObject.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_CounterObject *CounterObjectCaller) GetCounter(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "getCounter", _ident, _ord)
	return *ret0, err
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_CounterObject *CounterObjectSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _CounterObject.Contract.GetCounter(&_CounterObject.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_CounterObject *CounterObjectCallerSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _CounterObject.Contract.GetCounter(&_CounterObject.CallOpts, _ident, _ord)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_CounterObject *CounterObjectCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_CounterObject *CounterObjectSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _CounterObject.Contract.IsAdmin(&_CounterObject.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_CounterObject *CounterObjectCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _CounterObject.Contract.IsAdmin(&_CounterObject.CallOpts, _candidate)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_CounterObject *CounterObjectCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_CounterObject *CounterObjectSession) Owner() (common.Address, error) {
	return _CounterObject.Contract.Owner(&_CounterObject.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_CounterObject *CounterObjectCallerSession) Owner() (common.Address, error) {
	return _CounterObject.Contract.Owner(&_CounterObject.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_CounterObject *CounterObjectCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_CounterObject *CounterObjectSession) Version() ([32]byte, error) {
	return _CounterObject.Contract.Version(&_CounterObject.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_CounterObject *CounterObjectCallerSession) Version() ([32]byte, error) {
	return _CounterObject.Contract.Version(&_CounterObject.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_CounterObject *CounterObjectCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_CounterObject *CounterObjectSession) VersionAPI() ([32]byte, error) {
	return _CounterObject.Contract.VersionAPI(&_CounterObject.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_CounterObject *CounterObjectCallerSession) VersionAPI() ([32]byte, error) {
	return _CounterObject.Contract.VersionAPI(&_CounterObject.CallOpts)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_CounterObject *CounterObjectTransactor) DeleteGroup(opts *bind.TransactOpts, _ident [32]byte) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "deleteGroup", _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_CounterObject *CounterObjectSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _CounterObject.Contract.DeleteGroup(&_CounterObject.TransactOpts, _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_CounterObject *CounterObjectTransactorSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _CounterObject.Contract.DeleteGroup(&_CounterObject.TransactOpts, _ident)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_CounterObject *CounterObjectTransactor) IncrementCounter(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "incrementCounter", _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_CounterObject *CounterObjectSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.Contract.IncrementCounter(&_CounterObject.TransactOpts, _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_CounterObject *CounterObjectTransactorSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.Contract.IncrementCounter(&_CounterObject.TransactOpts, _ident, _ord)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_CounterObject *CounterObjectTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_CounterObject *CounterObjectSession) Kill() (*types.Transaction, error) {
	return _CounterObject.Contract.Kill(&_CounterObject.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_CounterObject *CounterObjectTransactorSession) Kill() (*types.Transaction, error) {
	return _CounterObject.Contract.Kill(&_CounterObject.TransactOpts)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_CounterObject *CounterObjectTransactor) SetAndGetBit(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "setAndGetBit", _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_CounterObject *CounterObjectSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.Contract.SetAndGetBit(&_CounterObject.TransactOpts, _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_CounterObject *CounterObjectTransactorSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.Contract.SetAndGetBit(&_CounterObject.TransactOpts, _ident, _ord)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_CounterObject *CounterObjectTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_CounterObject *CounterObjectSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _CounterObject.Contract.TransferCreatorship(&_CounterObject.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_CounterObject *CounterObjectTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _CounterObject.Contract.TransferCreatorship(&_CounterObject.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CounterObject *CounterObjectTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CounterObject *CounterObjectSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CounterObject.Contract.TransferOwnership(&_CounterObject.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CounterObject *CounterObjectTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CounterObject.Contract.TransferOwnership(&_CounterObject.TransactOpts, newOwner)
}

// CounterObjectBitSetAndGetIterator is returned from FilterBitSetAndGet and is used to iterate over the raw logs and unpacked data for BitSetAndGet events raised by the CounterObject contract.
type CounterObjectBitSetAndGetIterator struct {
	Event *CounterObjectBitSetAndGet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CounterObjectBitSetAndGetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CounterObjectBitSetAndGet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CounterObjectBitSetAndGet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CounterObjectBitSetAndGetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CounterObjectBitSetAndGetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CounterObjectBitSetAndGet represents a BitSetAndGet event raised by the CounterObject contract.
type CounterObjectBitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBitSetAndGet is a free log retrieval operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_CounterObject *CounterObjectFilterer) FilterBitSetAndGet(opts *bind.FilterOpts) (*CounterObjectBitSetAndGetIterator, error) {

	logs, sub, err := _CounterObject.contract.FilterLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return &CounterObjectBitSetAndGetIterator{contract: _CounterObject.contract, event: "BitSetAndGet", logs: logs, sub: sub}, nil
}

// WatchBitSetAndGet is a free log subscription operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_CounterObject *CounterObjectFilterer) WatchBitSetAndGet(opts *bind.WatchOpts, sink chan<- *CounterObjectBitSetAndGet) (event.Subscription, error) {

	logs, sub, err := _CounterObject.contract.WatchLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CounterObjectBitSetAndGet)
				if err := _CounterObject.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitSetAndGet is a log parse operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_CounterObject *CounterObjectFilterer) ParseBitSetAndGet(log types.Log) (*CounterObjectBitSetAndGet, error) {
	event := new(CounterObjectBitSetAndGet)
	if err := _CounterObject.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// CounterObjectCounterIncrementedIterator is returned from FilterCounterIncremented and is used to iterate over the raw logs and unpacked data for CounterIncremented events raised by the CounterObject contract.
type CounterObjectCounterIncrementedIterator struct {
	Event *CounterObjectCounterIncremented // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CounterObjectCounterIncrementedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CounterObjectCounterIncremented)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CounterObjectCounterIncremented)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CounterObjectCounterIncrementedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CounterObjectCounterIncrementedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CounterObjectCounterIncremented represents a CounterIncremented event raised by the CounterObject contract.
type CounterObjectCounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterIncremented is a free log retrieval operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_CounterObject *CounterObjectFilterer) FilterCounterIncremented(opts *bind.FilterOpts) (*CounterObjectCounterIncrementedIterator, error) {

	logs, sub, err := _CounterObject.contract.FilterLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return &CounterObjectCounterIncrementedIterator{contract: _CounterObject.contract, event: "CounterIncremented", logs: logs, sub: sub}, nil
}

// WatchCounterIncremented is a free log subscription operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_CounterObject *CounterObjectFilterer) WatchCounterIncremented(opts *bind.WatchOpts, sink chan<- *CounterObjectCounterIncremented) (event.Subscription, error) {

	logs, sub, err := _CounterObject.contract.WatchLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CounterObjectCounterIncremented)
				if err := _CounterObject.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterIncremented is a log parse operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_CounterObject *CounterObjectFilterer) ParseCounterIncremented(log types.Log) (*CounterObjectCounterIncremented, error) {
	event := new(CounterObjectCounterIncremented)
	if err := _CounterObject.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
		return nil, err
	}
	return event, nil
}

// CounterObjectWordGroupDeletedIterator is returned from FilterWordGroupDeleted and is used to iterate over the raw logs and unpacked data for WordGroupDeleted events raised by the CounterObject contract.
type CounterObjectWordGroupDeletedIterator struct {
	Event *CounterObjectWordGroupDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CounterObjectWordGroupDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CounterObjectWordGroupDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CounterObjectWordGroupDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CounterObjectWordGroupDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CounterObjectWordGroupDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CounterObjectWordGroupDeleted represents a WordGroupDeleted event raised by the CounterObject contract.
type CounterObjectWordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWordGroupDeleted is a free log retrieval operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_CounterObject *CounterObjectFilterer) FilterWordGroupDeleted(opts *bind.FilterOpts) (*CounterObjectWordGroupDeletedIterator, error) {

	logs, sub, err := _CounterObject.contract.FilterLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return &CounterObjectWordGroupDeletedIterator{contract: _CounterObject.contract, event: "WordGroupDeleted", logs: logs, sub: sub}, nil
}

// WatchWordGroupDeleted is a free log subscription operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_CounterObject *CounterObjectFilterer) WatchWordGroupDeleted(opts *bind.WatchOpts, sink chan<- *CounterObjectWordGroupDeleted) (event.Subscription, error) {

	logs, sub, err := _CounterObject.contract.WatchLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CounterObjectWordGroupDeleted)
				if err := _CounterObject.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWordGroupDeleted is a log parse operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_CounterObject *CounterObjectFilterer) ParseWordGroupDeleted(log types.Log) (*CounterObjectWordGroupDeleted, error) {
	event := new(CounterObjectWordGroupDeleted)
	if err := _CounterObject.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC721ProxyABI is the input ABI used to generate the binding from.
const ERC721ProxyABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_extAddr\",\"type\":\"address\"},{\"name\":\"_configName\",\"type\":\"string\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]"

// ERC721ProxyFuncSigs maps the 4-byte function signature to its string representation.
var ERC721ProxyFuncSigs = map[string]string{
	"70a08231": "balanceOf(address)",
	"7bed7493": "configName()",
	"e70347bb": "externalAddress()",
	"54fd4d50": "version()",
}

// ERC721ProxyBin is the compiled bytecode used for deploying new contracts.
var ERC721ProxyBin = "0x60806040527f544f444f000000000000000000000000000000000000000000000000000000006000556040516105c83803806105c88339810180604052604081101561004a57600080fd5b81516020830180519193928301929164010000000081111561006b57600080fd5b8201602081018481111561007e57600080fd5b815164010000000081118282018710171561009857600080fd5b505060018054600160a060020a031916600160a060020a03871617905580519093506100cd92506002915060208401906100d5565b505050610170565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011657805160ff1916838001178555610143565b82800160010185558215610143579182015b82811115610143578251825591602001919060010190610128565b5061014f929150610153565b5090565b61016d91905b8082111561014f5760008155600101610159565b90565b6104498061017f6000396000f3fe608060405234801561001057600080fd5b5060043610610068577c0100000000000000000000000000000000000000000000000000000000600035046354fd4d50811461006d57806370a08231146100875780637bed7493146100ba578063e70347bb14610137575b600080fd5b610075610168565b60408051918252519081900360200190f35b6100756004803603602081101561009d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661016e565b6100c26102c6565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100fc5781810151838201526020016100e4565b50505050905090810190601f1680156101295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61013f610351565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60005481565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181526000936102c093919290918301828280156101fa5780601f106101cf576101008083540402835291602001916101fa565b820191906000526020600020905b8154815290600101906020018083116101dd57829003601f168201915b5050600154604080517f62616c616e63654f6628616464726573732900000000000000000000000000008152815190819003601201812073ffffffffffffffffffffffffffffffffffffffff8b81166024808501919091528451808503909101815260449093019093526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090921691909117905291169350439250905061036d565b92915050565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103495780601f1061031e57610100808354040283529160200191610349565b820191906000526020600020905b81548152906001019060200180831161032c57829003601f168201915b505050505081565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60008060405180806103f860269139604051908190036026018120855181835260208a015160048401819052602484018a90526044840189905291945060fd93509091606482019060005b838110156103d5576020818a0181015160648484010152016103b8565b506020818383886000fa808015610068575050519a995050505050505050505056fe63616c6c55696e7428737472696e672c616464726573732c75696e743235362c627974657329a165627a7a72305820581748c77bf1a4e076cf3ae8ab0ebc9efa0863aac765f1401562c9e0ebf8561b0029"

// DeployERC721Proxy deploys a new Ethereum contract, binding an instance of ERC721Proxy to it.
func DeployERC721Proxy(auth *bind.TransactOpts, backend bind.ContractBackend, _extAddr common.Address, _configName string) (common.Address, *types.Transaction, *ERC721Proxy, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC721ProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ERC721ProxyBin), backend, _extAddr, _configName)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC721Proxy{ERC721ProxyCaller: ERC721ProxyCaller{contract: contract}, ERC721ProxyTransactor: ERC721ProxyTransactor{contract: contract}, ERC721ProxyFilterer: ERC721ProxyFilterer{contract: contract}}, nil
}

// ERC721Proxy is an auto generated Go binding around an Ethereum contract.
type ERC721Proxy struct {
	ERC721ProxyCaller     // Read-only binding to the contract
	ERC721ProxyTransactor // Write-only binding to the contract
	ERC721ProxyFilterer   // Log filterer for contract events
}

// ERC721ProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC721ProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721ProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC721ProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721ProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC721ProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721ProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC721ProxySession struct {
	Contract     *ERC721Proxy      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC721ProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC721ProxyCallerSession struct {
	Contract *ERC721ProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// ERC721ProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC721ProxyTransactorSession struct {
	Contract     *ERC721ProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ERC721ProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC721ProxyRaw struct {
	Contract *ERC721Proxy // Generic contract binding to access the raw methods on
}

// ERC721ProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC721ProxyCallerRaw struct {
	Contract *ERC721ProxyCaller // Generic read-only contract binding to access the raw methods on
}

// ERC721ProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC721ProxyTransactorRaw struct {
	Contract *ERC721ProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC721Proxy creates a new instance of ERC721Proxy, bound to a specific deployed contract.
func NewERC721Proxy(address common.Address, backend bind.ContractBackend) (*ERC721Proxy, error) {
	contract, err := bindERC721Proxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC721Proxy{ERC721ProxyCaller: ERC721ProxyCaller{contract: contract}, ERC721ProxyTransactor: ERC721ProxyTransactor{contract: contract}, ERC721ProxyFilterer: ERC721ProxyFilterer{contract: contract}}, nil
}

// NewERC721ProxyCaller creates a new read-only instance of ERC721Proxy, bound to a specific deployed contract.
func NewERC721ProxyCaller(address common.Address, caller bind.ContractCaller) (*ERC721ProxyCaller, error) {
	contract, err := bindERC721Proxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721ProxyCaller{contract: contract}, nil
}

// NewERC721ProxyTransactor creates a new write-only instance of ERC721Proxy, bound to a specific deployed contract.
func NewERC721ProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC721ProxyTransactor, error) {
	contract, err := bindERC721Proxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721ProxyTransactor{contract: contract}, nil
}

// NewERC721ProxyFilterer creates a new log filterer instance of ERC721Proxy, bound to a specific deployed contract.
func NewERC721ProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC721ProxyFilterer, error) {
	contract, err := bindERC721Proxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC721ProxyFilterer{contract: contract}, nil
}

// bindERC721Proxy binds a generic wrapper to an already deployed contract.
func bindERC721Proxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC721ProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721Proxy *ERC721ProxyRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC721Proxy.Contract.ERC721ProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721Proxy *ERC721ProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721Proxy.Contract.ERC721ProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721Proxy *ERC721ProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721Proxy.Contract.ERC721ProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721Proxy *ERC721ProxyCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC721Proxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721Proxy *ERC721ProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721Proxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721Proxy *ERC721ProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721Proxy.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) constant returns(uint256 balance)
func (_ERC721Proxy *ERC721ProxyCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC721Proxy.contract.Call(opts, out, "balanceOf", owner)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) constant returns(uint256 balance)
func (_ERC721Proxy *ERC721ProxySession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ERC721Proxy.Contract.BalanceOf(&_ERC721Proxy.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) constant returns(uint256 balance)
func (_ERC721Proxy *ERC721ProxyCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ERC721Proxy.Contract.BalanceOf(&_ERC721Proxy.CallOpts, owner)
}

// ConfigName is a free data retrieval call binding the contract method 0x7bed7493.
//
// Solidity: function configName() constant returns(string)
func (_ERC721Proxy *ERC721ProxyCaller) ConfigName(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ERC721Proxy.contract.Call(opts, out, "configName")
	return *ret0, err
}

// ConfigName is a free data retrieval call binding the contract method 0x7bed7493.
//
// Solidity: function configName() constant returns(string)
func (_ERC721Proxy *ERC721ProxySession) ConfigName() (string, error) {
	return _ERC721Proxy.Contract.ConfigName(&_ERC721Proxy.CallOpts)
}

// ConfigName is a free data retrieval call binding the contract method 0x7bed7493.
//
// Solidity: function configName() constant returns(string)
func (_ERC721Proxy *ERC721ProxyCallerSession) ConfigName() (string, error) {
	return _ERC721Proxy.Contract.ConfigName(&_ERC721Proxy.CallOpts)
}

// ExternalAddress is a free data retrieval call binding the contract method 0xe70347bb.
//
// Solidity: function externalAddress() constant returns(address)
func (_ERC721Proxy *ERC721ProxyCaller) ExternalAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ERC721Proxy.contract.Call(opts, out, "externalAddress")
	return *ret0, err
}

// ExternalAddress is a free data retrieval call binding the contract method 0xe70347bb.
//
// Solidity: function externalAddress() constant returns(address)
func (_ERC721Proxy *ERC721ProxySession) ExternalAddress() (common.Address, error) {
	return _ERC721Proxy.Contract.ExternalAddress(&_ERC721Proxy.CallOpts)
}

// ExternalAddress is a free data retrieval call binding the contract method 0xe70347bb.
//
// Solidity: function externalAddress() constant returns(address)
func (_ERC721Proxy *ERC721ProxyCallerSession) ExternalAddress() (common.Address, error) {
	return _ERC721Proxy.Contract.ExternalAddress(&_ERC721Proxy.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_ERC721Proxy *ERC721ProxyCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _ERC721Proxy.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_ERC721Proxy *ERC721ProxySession) Version() ([32]byte, error) {
	return _ERC721Proxy.Contract.Version(&_ERC721Proxy.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_ERC721Proxy *ERC721ProxyCallerSession) Version() ([32]byte, error) {
	return _ERC721Proxy.Contract.Version(&_ERC721Proxy.CallOpts)
}

// EditableABI is the input ABI used to generate the binding from.
const EditableABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"}]"

// EditableFuncSigs maps the 4-byte function signature to its string representation.
var EditableFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"81beeb64": "canEdit()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"6380501f": "indexCategory()",
	"41c0e1b5": "kill()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"aa024e8b": "setVisibility(uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
}

// EditableBin is the compiled bytecode used for deploying new contracts.
var EditableBin = ""

// DeployEditable deploys a new Ethereum contract, binding an instance of Editable to it.
func DeployEditable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Editable, error) {
	parsed, err := abi.JSON(strings.NewReader(EditableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(EditableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Editable{EditableCaller: EditableCaller{contract: contract}, EditableTransactor: EditableTransactor{contract: contract}, EditableFilterer: EditableFilterer{contract: contract}}, nil
}

// Editable is an auto generated Go binding around an Ethereum contract.
type Editable struct {
	EditableCaller     // Read-only binding to the contract
	EditableTransactor // Write-only binding to the contract
	EditableFilterer   // Log filterer for contract events
}

// EditableCaller is an auto generated read-only Go binding around an Ethereum contract.
type EditableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EditableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EditableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EditableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EditableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EditableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EditableSession struct {
	Contract     *Editable         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EditableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EditableCallerSession struct {
	Contract *EditableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// EditableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EditableTransactorSession struct {
	Contract     *EditableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// EditableRaw is an auto generated low-level Go binding around an Ethereum contract.
type EditableRaw struct {
	Contract *Editable // Generic contract binding to access the raw methods on
}

// EditableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EditableCallerRaw struct {
	Contract *EditableCaller // Generic read-only contract binding to access the raw methods on
}

// EditableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EditableTransactorRaw struct {
	Contract *EditableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEditable creates a new instance of Editable, bound to a specific deployed contract.
func NewEditable(address common.Address, backend bind.ContractBackend) (*Editable, error) {
	contract, err := bindEditable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Editable{EditableCaller: EditableCaller{contract: contract}, EditableTransactor: EditableTransactor{contract: contract}, EditableFilterer: EditableFilterer{contract: contract}}, nil
}

// NewEditableCaller creates a new read-only instance of Editable, bound to a specific deployed contract.
func NewEditableCaller(address common.Address, caller bind.ContractCaller) (*EditableCaller, error) {
	contract, err := bindEditable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EditableCaller{contract: contract}, nil
}

// NewEditableTransactor creates a new write-only instance of Editable, bound to a specific deployed contract.
func NewEditableTransactor(address common.Address, transactor bind.ContractTransactor) (*EditableTransactor, error) {
	contract, err := bindEditable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EditableTransactor{contract: contract}, nil
}

// NewEditableFilterer creates a new log filterer instance of Editable, bound to a specific deployed contract.
func NewEditableFilterer(address common.Address, filterer bind.ContractFilterer) (*EditableFilterer, error) {
	contract, err := bindEditable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EditableFilterer{contract: contract}, nil
}

// bindEditable binds a generic wrapper to an already deployed contract.
func bindEditable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EditableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Editable *EditableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Editable.Contract.EditableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Editable *EditableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.Contract.EditableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Editable *EditableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Editable.Contract.EditableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Editable *EditableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Editable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Editable *EditableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Editable *EditableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Editable.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Editable *EditableCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Editable *EditableSession) CANACCESS() (uint8, error) {
	return _Editable.Contract.CANACCESS(&_Editable.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Editable *EditableCallerSession) CANACCESS() (uint8, error) {
	return _Editable.Contract.CANACCESS(&_Editable.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Editable *EditableCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Editable *EditableSession) CANEDIT() (uint8, error) {
	return _Editable.Contract.CANEDIT(&_Editable.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Editable *EditableCallerSession) CANEDIT() (uint8, error) {
	return _Editable.Contract.CANEDIT(&_Editable.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Editable *EditableCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Editable *EditableSession) CANSEE() (uint8, error) {
	return _Editable.Contract.CANSEE(&_Editable.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Editable *EditableCallerSession) CANSEE() (uint8, error) {
	return _Editable.Contract.CANSEE(&_Editable.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Editable *EditableCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Editable *EditableSession) CanCommit() (bool, error) {
	return _Editable.Contract.CanCommit(&_Editable.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Editable *EditableCallerSession) CanCommit() (bool, error) {
	return _Editable.Contract.CanCommit(&_Editable.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Editable *EditableCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Editable *EditableSession) CanConfirm() (bool, error) {
	return _Editable.Contract.CanConfirm(&_Editable.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Editable *EditableCallerSession) CanConfirm() (bool, error) {
	return _Editable.Contract.CanConfirm(&_Editable.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_Editable *EditableCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_Editable *EditableSession) CanEdit() (bool, error) {
	return _Editable.Contract.CanEdit(&_Editable.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_Editable *EditableCallerSession) CanEdit() (bool, error) {
	return _Editable.Contract.CanEdit(&_Editable.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Editable *EditableCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Editable *EditableSession) CommitPending() (bool, error) {
	return _Editable.Contract.CommitPending(&_Editable.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Editable *EditableCallerSession) CommitPending() (bool, error) {
	return _Editable.Contract.CommitPending(&_Editable.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Editable *EditableCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Editable *EditableSession) ContentSpace() (common.Address, error) {
	return _Editable.Contract.ContentSpace(&_Editable.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Editable *EditableCallerSession) ContentSpace() (common.Address, error) {
	return _Editable.Contract.ContentSpace(&_Editable.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Editable *EditableCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Editable *EditableSession) CountVersionHashes() (*big.Int, error) {
	return _Editable.Contract.CountVersionHashes(&_Editable.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Editable *EditableCallerSession) CountVersionHashes() (*big.Int, error) {
	return _Editable.Contract.CountVersionHashes(&_Editable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Editable *EditableCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Editable *EditableSession) Creator() (common.Address, error) {
	return _Editable.Contract.Creator(&_Editable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Editable *EditableCallerSession) Creator() (common.Address, error) {
	return _Editable.Contract.Creator(&_Editable.CallOpts)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Editable *EditableCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Editable *EditableSession) HasAccess(candidate common.Address) (bool, error) {
	return _Editable.Contract.HasAccess(&_Editable.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Editable *EditableCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _Editable.Contract.HasAccess(&_Editable.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_Editable *EditableCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_Editable *EditableSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _Editable.Contract.HasEditorRight(&_Editable.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_Editable *EditableCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _Editable.Contract.HasEditorRight(&_Editable.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Editable *EditableCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Editable *EditableSession) IndexCategory() (uint8, error) {
	return _Editable.Contract.IndexCategory(&_Editable.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Editable *EditableCallerSession) IndexCategory() (uint8, error) {
	return _Editable.Contract.IndexCategory(&_Editable.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Editable *EditableCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Editable *EditableSession) ObjectHash() (string, error) {
	return _Editable.Contract.ObjectHash(&_Editable.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Editable *EditableCallerSession) ObjectHash() (string, error) {
	return _Editable.Contract.ObjectHash(&_Editable.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_Editable *EditableCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_Editable *EditableSession) ObjectTimestamp() (*big.Int, error) {
	return _Editable.Contract.ObjectTimestamp(&_Editable.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_Editable *EditableCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _Editable.Contract.ObjectTimestamp(&_Editable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Editable *EditableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Editable *EditableSession) Owner() (common.Address, error) {
	return _Editable.Contract.Owner(&_Editable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Editable *EditableCallerSession) Owner() (common.Address, error) {
	return _Editable.Contract.Owner(&_Editable.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Editable *EditableCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Editable *EditableSession) ParentAddress() (common.Address, error) {
	return _Editable.Contract.ParentAddress(&_Editable.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Editable *EditableCallerSession) ParentAddress() (common.Address, error) {
	return _Editable.Contract.ParentAddress(&_Editable.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Editable *EditableCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Editable *EditableSession) PendingHash() (string, error) {
	return _Editable.Contract.PendingHash(&_Editable.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Editable *EditableCallerSession) PendingHash() (string, error) {
	return _Editable.Contract.PendingHash(&_Editable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Editable *EditableCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Editable *EditableSession) Version() ([32]byte, error) {
	return _Editable.Contract.Version(&_Editable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Editable *EditableCallerSession) Version() ([32]byte, error) {
	return _Editable.Contract.Version(&_Editable.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Editable *EditableCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Editable *EditableSession) VersionAPI() ([32]byte, error) {
	return _Editable.Contract.VersionAPI(&_Editable.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Editable *EditableCallerSession) VersionAPI() ([32]byte, error) {
	return _Editable.Contract.VersionAPI(&_Editable.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Editable *EditableCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Editable *EditableSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _Editable.Contract.VersionHashes(&_Editable.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Editable *EditableCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _Editable.Contract.VersionHashes(&_Editable.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Editable *EditableCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Editable *EditableSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _Editable.Contract.VersionTimestamp(&_Editable.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Editable *EditableCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _Editable.Contract.VersionTimestamp(&_Editable.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Editable *EditableCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Editable *EditableSession) Visibility() (uint8, error) {
	return _Editable.Contract.Visibility(&_Editable.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Editable *EditableCallerSession) Visibility() (uint8, error) {
	return _Editable.Contract.Visibility(&_Editable.CallOpts)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_Editable *EditableTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_Editable *EditableSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _Editable.Contract.AccessRequestV3(&_Editable.TransactOpts, arg0, arg1)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) returns(bool)
func (_Editable *EditableTransactorSession) AccessRequestV3(arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _Editable.Contract.AccessRequestV3(&_Editable.TransactOpts, arg0, arg1)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Editable *EditableTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Editable *EditableSession) ClearPending() (*types.Transaction, error) {
	return _Editable.Contract.ClearPending(&_Editable.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Editable *EditableTransactorSession) ClearPending() (*types.Transaction, error) {
	return _Editable.Contract.ClearPending(&_Editable.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Editable *EditableTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Editable *EditableSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _Editable.Contract.Commit(&_Editable.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Editable *EditableTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _Editable.Contract.Commit(&_Editable.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Editable *EditableTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Editable *EditableSession) ConfirmCommit() (*types.Transaction, error) {
	return _Editable.Contract.ConfirmCommit(&_Editable.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Editable *EditableTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _Editable.Contract.ConfirmCommit(&_Editable.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Editable *EditableTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Editable *EditableSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _Editable.Contract.DeleteVersion(&_Editable.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Editable *EditableTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _Editable.Contract.DeleteVersion(&_Editable.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Editable *EditableTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Editable *EditableSession) Kill() (*types.Transaction, error) {
	return _Editable.Contract.Kill(&_Editable.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Editable *EditableTransactorSession) Kill() (*types.Transaction, error) {
	return _Editable.Contract.Kill(&_Editable.TransactOpts)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_Editable *EditableTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_Editable *EditableSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Editable.Contract.SetGroupRights(&_Editable.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_Editable *EditableTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Editable.Contract.SetGroupRights(&_Editable.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_Editable *EditableTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_Editable *EditableSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Editable.Contract.SetRights(&_Editable.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_Editable *EditableTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Editable.Contract.SetRights(&_Editable.TransactOpts, stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Editable *EditableTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Editable *EditableSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _Editable.Contract.SetVisibility(&_Editable.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Editable *EditableTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _Editable.Contract.SetVisibility(&_Editable.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Editable *EditableTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Editable *EditableSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Editable.Contract.TransferCreatorship(&_Editable.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Editable *EditableTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Editable.Contract.TransferCreatorship(&_Editable.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Editable *EditableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Editable *EditableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Editable.Contract.TransferOwnership(&_Editable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Editable *EditableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Editable.Contract.TransferOwnership(&_Editable.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Editable *EditableTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Editable *EditableSession) UpdateRequest() (*types.Transaction, error) {
	return _Editable.Contract.UpdateRequest(&_Editable.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Editable *EditableTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _Editable.Contract.UpdateRequest(&_Editable.TransactOpts)
}

// EditableAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the Editable contract.
type EditableAccessRequestV3Iterator struct {
	Event *EditableAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableAccessRequestV3 represents a AccessRequestV3 event raised by the Editable contract.
type EditableAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Editable *EditableFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*EditableAccessRequestV3Iterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &EditableAccessRequestV3Iterator{contract: _Editable.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Editable *EditableFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *EditableAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableAccessRequestV3)
				if err := _Editable.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Editable *EditableFilterer) ParseAccessRequestV3(log types.Log) (*EditableAccessRequestV3, error) {
	event := new(EditableAccessRequestV3)
	if err := _Editable.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the Editable contract.
type EditableCommitPendingIterator struct {
	Event *EditableCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableCommitPending represents a CommitPending event raised by the Editable contract.
type EditableCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) FilterCommitPending(opts *bind.FilterOpts) (*EditableCommitPendingIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &EditableCommitPendingIterator{contract: _Editable.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *EditableCommitPending) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableCommitPending)
				if err := _Editable.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) ParseCommitPending(log types.Log) (*EditableCommitPending, error) {
	event := new(EditableCommitPending)
	if err := _Editable.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the Editable contract.
type EditableUpdateRequestIterator struct {
	Event *EditableUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableUpdateRequest represents a UpdateRequest event raised by the Editable contract.
type EditableUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*EditableUpdateRequestIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &EditableUpdateRequestIterator{contract: _Editable.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *EditableUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableUpdateRequest)
				if err := _Editable.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) ParseUpdateRequest(log types.Log) (*EditableUpdateRequest, error) {
	event := new(EditableUpdateRequest)
	if err := _Editable.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the Editable contract.
type EditableVersionConfirmIterator struct {
	Event *EditableVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableVersionConfirm represents a VersionConfirm event raised by the Editable contract.
type EditableVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*EditableVersionConfirmIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &EditableVersionConfirmIterator{contract: _Editable.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *EditableVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableVersionConfirm)
				if err := _Editable.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) ParseVersionConfirm(log types.Log) (*EditableVersionConfirm, error) {
	event := new(EditableVersionConfirm)
	if err := _Editable.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the Editable contract.
type EditableVersionDeleteIterator struct {
	Event *EditableVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableVersionDelete represents a VersionDelete event raised by the Editable contract.
type EditableVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*EditableVersionDeleteIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &EditableVersionDeleteIterator{contract: _Editable.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *EditableVersionDelete) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableVersionDelete)
				if err := _Editable.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) ParseVersionDelete(log types.Log) (*EditableVersionDelete, error) {
	event := new(EditableVersionDelete)
	if err := _Editable.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the Editable contract.
type EditableVisibilityChangedIterator struct {
	Event *EditableVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableVisibilityChanged represents a VisibilityChanged event raised by the Editable contract.
type EditableVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Editable *EditableFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*EditableVisibilityChangedIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &EditableVisibilityChangedIterator{contract: _Editable.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Editable *EditableFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *EditableVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableVisibilityChanged)
				if err := _Editable.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Editable *EditableFilterer) ParseVisibilityChanged(log types.Log) (*EditableVisibilityChanged, error) {
	event := new(EditableVisibilityChanged)
	if err := _Editable.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EncTokenABI is the input ABI used to generate the binding from.
const EncTokenABI = "[]"

// EncTokenBin is the compiled bytecode used for deploying new contracts.
var EncTokenBin = "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a7230582019860951bb9701ef9cc342aafe6cf4681137a7128df73c1b9477717f67d384550029"

// DeployEncToken deploys a new Ethereum contract, binding an instance of EncToken to it.
func DeployEncToken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EncToken, error) {
	parsed, err := abi.JSON(strings.NewReader(EncTokenABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(EncTokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EncToken{EncTokenCaller: EncTokenCaller{contract: contract}, EncTokenTransactor: EncTokenTransactor{contract: contract}, EncTokenFilterer: EncTokenFilterer{contract: contract}}, nil
}

// EncToken is an auto generated Go binding around an Ethereum contract.
type EncToken struct {
	EncTokenCaller     // Read-only binding to the contract
	EncTokenTransactor // Write-only binding to the contract
	EncTokenFilterer   // Log filterer for contract events
}

// EncTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type EncTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EncTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EncTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EncTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EncTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EncTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EncTokenSession struct {
	Contract     *EncToken         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EncTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EncTokenCallerSession struct {
	Contract *EncTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// EncTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EncTokenTransactorSession struct {
	Contract     *EncTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// EncTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type EncTokenRaw struct {
	Contract *EncToken // Generic contract binding to access the raw methods on
}

// EncTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EncTokenCallerRaw struct {
	Contract *EncTokenCaller // Generic read-only contract binding to access the raw methods on
}

// EncTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EncTokenTransactorRaw struct {
	Contract *EncTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEncToken creates a new instance of EncToken, bound to a specific deployed contract.
func NewEncToken(address common.Address, backend bind.ContractBackend) (*EncToken, error) {
	contract, err := bindEncToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EncToken{EncTokenCaller: EncTokenCaller{contract: contract}, EncTokenTransactor: EncTokenTransactor{contract: contract}, EncTokenFilterer: EncTokenFilterer{contract: contract}}, nil
}

// NewEncTokenCaller creates a new read-only instance of EncToken, bound to a specific deployed contract.
func NewEncTokenCaller(address common.Address, caller bind.ContractCaller) (*EncTokenCaller, error) {
	contract, err := bindEncToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EncTokenCaller{contract: contract}, nil
}

// NewEncTokenTransactor creates a new write-only instance of EncToken, bound to a specific deployed contract.
func NewEncTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*EncTokenTransactor, error) {
	contract, err := bindEncToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EncTokenTransactor{contract: contract}, nil
}

// NewEncTokenFilterer creates a new log filterer instance of EncToken, bound to a specific deployed contract.
func NewEncTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*EncTokenFilterer, error) {
	contract, err := bindEncToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EncTokenFilterer{contract: contract}, nil
}

// bindEncToken binds a generic wrapper to an already deployed contract.
func bindEncToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EncTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EncToken *EncTokenRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _EncToken.Contract.EncTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EncToken *EncTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EncToken.Contract.EncTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EncToken *EncTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EncToken.Contract.EncTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EncToken *EncTokenCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _EncToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EncToken *EncTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EncToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EncToken *EncTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EncToken.Contract.contract.Transact(opts, method, params...)
}

// ExternalCallABI is the input ABI used to generate the binding from.
const ExternalCallABI = "[]"

// ExternalCallBin is the compiled bytecode used for deploying new contracts.
var ExternalCallBin = "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820279cafd7c884694ecea0666e3aeae12911dfb4cdfff1be61bcbeada3f05f1b3f0029"

// DeployExternalCall deploys a new Ethereum contract, binding an instance of ExternalCall to it.
func DeployExternalCall(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ExternalCall, error) {
	parsed, err := abi.JSON(strings.NewReader(ExternalCallABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ExternalCallBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ExternalCall{ExternalCallCaller: ExternalCallCaller{contract: contract}, ExternalCallTransactor: ExternalCallTransactor{contract: contract}, ExternalCallFilterer: ExternalCallFilterer{contract: contract}}, nil
}

// ExternalCall is an auto generated Go binding around an Ethereum contract.
type ExternalCall struct {
	ExternalCallCaller     // Read-only binding to the contract
	ExternalCallTransactor // Write-only binding to the contract
	ExternalCallFilterer   // Log filterer for contract events
}

// ExternalCallCaller is an auto generated read-only Go binding around an Ethereum contract.
type ExternalCallCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExternalCallTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ExternalCallTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExternalCallFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ExternalCallFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExternalCallSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ExternalCallSession struct {
	Contract     *ExternalCall     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ExternalCallCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ExternalCallCallerSession struct {
	Contract *ExternalCallCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ExternalCallTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ExternalCallTransactorSession struct {
	Contract     *ExternalCallTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ExternalCallRaw is an auto generated low-level Go binding around an Ethereum contract.
type ExternalCallRaw struct {
	Contract *ExternalCall // Generic contract binding to access the raw methods on
}

// ExternalCallCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ExternalCallCallerRaw struct {
	Contract *ExternalCallCaller // Generic read-only contract binding to access the raw methods on
}

// ExternalCallTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ExternalCallTransactorRaw struct {
	Contract *ExternalCallTransactor // Generic write-only contract binding to access the raw methods on
}

// NewExternalCall creates a new instance of ExternalCall, bound to a specific deployed contract.
func NewExternalCall(address common.Address, backend bind.ContractBackend) (*ExternalCall, error) {
	contract, err := bindExternalCall(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ExternalCall{ExternalCallCaller: ExternalCallCaller{contract: contract}, ExternalCallTransactor: ExternalCallTransactor{contract: contract}, ExternalCallFilterer: ExternalCallFilterer{contract: contract}}, nil
}

// NewExternalCallCaller creates a new read-only instance of ExternalCall, bound to a specific deployed contract.
func NewExternalCallCaller(address common.Address, caller bind.ContractCaller) (*ExternalCallCaller, error) {
	contract, err := bindExternalCall(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ExternalCallCaller{contract: contract}, nil
}

// NewExternalCallTransactor creates a new write-only instance of ExternalCall, bound to a specific deployed contract.
func NewExternalCallTransactor(address common.Address, transactor bind.ContractTransactor) (*ExternalCallTransactor, error) {
	contract, err := bindExternalCall(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ExternalCallTransactor{contract: contract}, nil
}

// NewExternalCallFilterer creates a new log filterer instance of ExternalCall, bound to a specific deployed contract.
func NewExternalCallFilterer(address common.Address, filterer bind.ContractFilterer) (*ExternalCallFilterer, error) {
	contract, err := bindExternalCall(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ExternalCallFilterer{contract: contract}, nil
}

// bindExternalCall binds a generic wrapper to an already deployed contract.
func bindExternalCall(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ExternalCallABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExternalCall *ExternalCallRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExternalCall.Contract.ExternalCallCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExternalCall *ExternalCallRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExternalCall.Contract.ExternalCallTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExternalCall *ExternalCallRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExternalCall.Contract.ExternalCallTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExternalCall *ExternalCallCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExternalCall.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExternalCall *ExternalCallTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExternalCall.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExternalCall *ExternalCallTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExternalCall.Contract.contract.Transact(opts, method, params...)
}

// IAdminABI is the input ABI used to generate the binding from.
const IAdminABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_adminAddr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IAdminFuncSigs maps the 4-byte function signature to its string representation.
var IAdminFuncSigs = map[string]string{
	"24d7806c": "isAdmin(address)",
}

// IAdmin is an auto generated Go binding around an Ethereum contract.
type IAdmin struct {
	IAdminCaller     // Read-only binding to the contract
	IAdminTransactor // Write-only binding to the contract
	IAdminFilterer   // Log filterer for contract events
}

// IAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type IAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IAdminSession struct {
	Contract     *IAdmin           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IAdminCallerSession struct {
	Contract *IAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IAdminTransactorSession struct {
	Contract     *IAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type IAdminRaw struct {
	Contract *IAdmin // Generic contract binding to access the raw methods on
}

// IAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IAdminCallerRaw struct {
	Contract *IAdminCaller // Generic read-only contract binding to access the raw methods on
}

// IAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IAdminTransactorRaw struct {
	Contract *IAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIAdmin creates a new instance of IAdmin, bound to a specific deployed contract.
func NewIAdmin(address common.Address, backend bind.ContractBackend) (*IAdmin, error) {
	contract, err := bindIAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IAdmin{IAdminCaller: IAdminCaller{contract: contract}, IAdminTransactor: IAdminTransactor{contract: contract}, IAdminFilterer: IAdminFilterer{contract: contract}}, nil
}

// NewIAdminCaller creates a new read-only instance of IAdmin, bound to a specific deployed contract.
func NewIAdminCaller(address common.Address, caller bind.ContractCaller) (*IAdminCaller, error) {
	contract, err := bindIAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IAdminCaller{contract: contract}, nil
}

// NewIAdminTransactor creates a new write-only instance of IAdmin, bound to a specific deployed contract.
func NewIAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*IAdminTransactor, error) {
	contract, err := bindIAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IAdminTransactor{contract: contract}, nil
}

// NewIAdminFilterer creates a new log filterer instance of IAdmin, bound to a specific deployed contract.
func NewIAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*IAdminFilterer, error) {
	contract, err := bindIAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IAdminFilterer{contract: contract}, nil
}

// bindIAdmin binds a generic wrapper to an already deployed contract.
func bindIAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IAdminABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAdmin *IAdminRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IAdmin.Contract.IAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAdmin *IAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAdmin.Contract.IAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAdmin *IAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAdmin.Contract.IAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAdmin *IAdminCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAdmin *IAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAdmin *IAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAdmin.Contract.contract.Transact(opts, method, params...)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _adminAddr) constant returns(bool)
func (_IAdmin *IAdminCaller) IsAdmin(opts *bind.CallOpts, _adminAddr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _IAdmin.contract.Call(opts, out, "isAdmin", _adminAddr)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _adminAddr) constant returns(bool)
func (_IAdmin *IAdminSession) IsAdmin(_adminAddr common.Address) (bool, error) {
	return _IAdmin.Contract.IsAdmin(&_IAdmin.CallOpts, _adminAddr)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _adminAddr) constant returns(bool)
func (_IAdmin *IAdminCallerSession) IsAdmin(_adminAddr common.Address) (bool, error) {
	return _IAdmin.Contract.IsAdmin(&_IAdmin.CallOpts, _adminAddr)
}

// ICheckAccessABI is the input ABI used to generate the binding from.
const ICheckAccessABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ICheckAccessFuncSigs maps the 4-byte function signature to its string representation.
var ICheckAccessFuncSigs = map[string]string{
	"95a078e8": "hasAccess(address)",
}

// ICheckAccess is an auto generated Go binding around an Ethereum contract.
type ICheckAccess struct {
	ICheckAccessCaller     // Read-only binding to the contract
	ICheckAccessTransactor // Write-only binding to the contract
	ICheckAccessFilterer   // Log filterer for contract events
}

// ICheckAccessCaller is an auto generated read-only Go binding around an Ethereum contract.
type ICheckAccessCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICheckAccessTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ICheckAccessTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICheckAccessFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ICheckAccessFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICheckAccessSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ICheckAccessSession struct {
	Contract     *ICheckAccess     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ICheckAccessCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ICheckAccessCallerSession struct {
	Contract *ICheckAccessCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ICheckAccessTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ICheckAccessTransactorSession struct {
	Contract     *ICheckAccessTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ICheckAccessRaw is an auto generated low-level Go binding around an Ethereum contract.
type ICheckAccessRaw struct {
	Contract *ICheckAccess // Generic contract binding to access the raw methods on
}

// ICheckAccessCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ICheckAccessCallerRaw struct {
	Contract *ICheckAccessCaller // Generic read-only contract binding to access the raw methods on
}

// ICheckAccessTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ICheckAccessTransactorRaw struct {
	Contract *ICheckAccessTransactor // Generic write-only contract binding to access the raw methods on
}

// NewICheckAccess creates a new instance of ICheckAccess, bound to a specific deployed contract.
func NewICheckAccess(address common.Address, backend bind.ContractBackend) (*ICheckAccess, error) {
	contract, err := bindICheckAccess(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ICheckAccess{ICheckAccessCaller: ICheckAccessCaller{contract: contract}, ICheckAccessTransactor: ICheckAccessTransactor{contract: contract}, ICheckAccessFilterer: ICheckAccessFilterer{contract: contract}}, nil
}

// NewICheckAccessCaller creates a new read-only instance of ICheckAccess, bound to a specific deployed contract.
func NewICheckAccessCaller(address common.Address, caller bind.ContractCaller) (*ICheckAccessCaller, error) {
	contract, err := bindICheckAccess(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ICheckAccessCaller{contract: contract}, nil
}

// NewICheckAccessTransactor creates a new write-only instance of ICheckAccess, bound to a specific deployed contract.
func NewICheckAccessTransactor(address common.Address, transactor bind.ContractTransactor) (*ICheckAccessTransactor, error) {
	contract, err := bindICheckAccess(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ICheckAccessTransactor{contract: contract}, nil
}

// NewICheckAccessFilterer creates a new log filterer instance of ICheckAccess, bound to a specific deployed contract.
func NewICheckAccessFilterer(address common.Address, filterer bind.ContractFilterer) (*ICheckAccessFilterer, error) {
	contract, err := bindICheckAccess(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ICheckAccessFilterer{contract: contract}, nil
}

// bindICheckAccess binds a generic wrapper to an already deployed contract.
func bindICheckAccess(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ICheckAccessABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICheckAccess *ICheckAccessRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ICheckAccess.Contract.ICheckAccessCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICheckAccess *ICheckAccessRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICheckAccess.Contract.ICheckAccessTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICheckAccess *ICheckAccessRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICheckAccess.Contract.ICheckAccessTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICheckAccess *ICheckAccessCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ICheckAccess.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICheckAccess *ICheckAccessTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICheckAccess.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICheckAccess *ICheckAccessTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICheckAccess.Contract.contract.Transact(opts, method, params...)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_ICheckAccess *ICheckAccessCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ICheckAccess.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_ICheckAccess *ICheckAccessSession) HasAccess(candidate common.Address) (bool, error) {
	return _ICheckAccess.Contract.HasAccess(&_ICheckAccess.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_ICheckAccess *ICheckAccessCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _ICheckAccess.Contract.HasAccess(&_ICheckAccess.CallOpts, candidate)
}

// IFactorySpaceABI is the input ABI used to generate the binding from.
const IFactorySpaceABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IFactorySpaceFuncSigs maps the 4-byte function signature to its string representation.
var IFactorySpaceFuncSigs = map[string]string{
	"bf4e088f": "createContent(address,address)",
	"b8cfaf05": "createContentType()",
	"575185ed": "createGroup()",
	"40b89f06": "createLibrary(address)",
}

// IFactorySpace is an auto generated Go binding around an Ethereum contract.
type IFactorySpace struct {
	IFactorySpaceCaller     // Read-only binding to the contract
	IFactorySpaceTransactor // Write-only binding to the contract
	IFactorySpaceFilterer   // Log filterer for contract events
}

// IFactorySpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type IFactorySpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFactorySpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IFactorySpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFactorySpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IFactorySpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFactorySpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IFactorySpaceSession struct {
	Contract     *IFactorySpace    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IFactorySpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IFactorySpaceCallerSession struct {
	Contract *IFactorySpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IFactorySpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IFactorySpaceTransactorSession struct {
	Contract     *IFactorySpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IFactorySpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type IFactorySpaceRaw struct {
	Contract *IFactorySpace // Generic contract binding to access the raw methods on
}

// IFactorySpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IFactorySpaceCallerRaw struct {
	Contract *IFactorySpaceCaller // Generic read-only contract binding to access the raw methods on
}

// IFactorySpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IFactorySpaceTransactorRaw struct {
	Contract *IFactorySpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIFactorySpace creates a new instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpace(address common.Address, backend bind.ContractBackend) (*IFactorySpace, error) {
	contract, err := bindIFactorySpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IFactorySpace{IFactorySpaceCaller: IFactorySpaceCaller{contract: contract}, IFactorySpaceTransactor: IFactorySpaceTransactor{contract: contract}, IFactorySpaceFilterer: IFactorySpaceFilterer{contract: contract}}, nil
}

// NewIFactorySpaceCaller creates a new read-only instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpaceCaller(address common.Address, caller bind.ContractCaller) (*IFactorySpaceCaller, error) {
	contract, err := bindIFactorySpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IFactorySpaceCaller{contract: contract}, nil
}

// NewIFactorySpaceTransactor creates a new write-only instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*IFactorySpaceTransactor, error) {
	contract, err := bindIFactorySpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IFactorySpaceTransactor{contract: contract}, nil
}

// NewIFactorySpaceFilterer creates a new log filterer instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*IFactorySpaceFilterer, error) {
	contract, err := bindIFactorySpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IFactorySpaceFilterer{contract: contract}, nil
}

// bindIFactorySpace binds a generic wrapper to an already deployed contract.
func bindIFactorySpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IFactorySpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFactorySpace *IFactorySpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IFactorySpace.Contract.IFactorySpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFactorySpace *IFactorySpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFactorySpace.Contract.IFactorySpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFactorySpace *IFactorySpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFactorySpace.Contract.IFactorySpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFactorySpace *IFactorySpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IFactorySpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFactorySpace *IFactorySpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFactorySpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFactorySpace *IFactorySpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFactorySpace.Contract.contract.Transact(opts, method, params...)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createContent", lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_IFactorySpace *IFactorySpaceSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateContent(&_IFactorySpace.TransactOpts, lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_IFactorySpace *IFactorySpaceTransactorSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateContent(&_IFactorySpace.TransactOpts, lib, content_type)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createContentType")
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_IFactorySpace *IFactorySpaceSession) CreateContentType() (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateContentType(&_IFactorySpace.TransactOpts)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_IFactorySpace *IFactorySpaceTransactorSession) CreateContentType() (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateContentType(&_IFactorySpace.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createGroup")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_IFactorySpace *IFactorySpaceSession) CreateGroup() (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateGroup(&_IFactorySpace.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_IFactorySpace *IFactorySpaceTransactorSession) CreateGroup() (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateGroup(&_IFactorySpace.TransactOpts)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateLibrary(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createLibrary", address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_IFactorySpace *IFactorySpaceSession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateLibrary(&_IFactorySpace.TransactOpts, address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_IFactorySpace *IFactorySpaceTransactorSession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateLibrary(&_IFactorySpace.TransactOpts, address_KMS)
}

// IKmsSpaceABI is the input ABI used to generate the binding from.
const IKmsSpaceABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"getKMSID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsIdStr\",\"type\":\"string\"}],\"name\":\"checkKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"checkKMSAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IKmsSpaceFuncSigs maps the 4-byte function signature to its string representation.
var IKmsSpaceFuncSigs = map[string]string{
	"8d2a23db": "checkKMS(string)",
	"d6be0f49": "checkKMSAddr(address)",
	"589aafc1": "getKMSID(address)",
	"268bfac4": "getKMSInfo(string,bytes)",
}

// IKmsSpace is an auto generated Go binding around an Ethereum contract.
type IKmsSpace struct {
	IKmsSpaceCaller     // Read-only binding to the contract
	IKmsSpaceTransactor // Write-only binding to the contract
	IKmsSpaceFilterer   // Log filterer for contract events
}

// IKmsSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type IKmsSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IKmsSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IKmsSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IKmsSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IKmsSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IKmsSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IKmsSpaceSession struct {
	Contract     *IKmsSpace        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IKmsSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IKmsSpaceCallerSession struct {
	Contract *IKmsSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// IKmsSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IKmsSpaceTransactorSession struct {
	Contract     *IKmsSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IKmsSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type IKmsSpaceRaw struct {
	Contract *IKmsSpace // Generic contract binding to access the raw methods on
}

// IKmsSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IKmsSpaceCallerRaw struct {
	Contract *IKmsSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// IKmsSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IKmsSpaceTransactorRaw struct {
	Contract *IKmsSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIKmsSpace creates a new instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpace(address common.Address, backend bind.ContractBackend) (*IKmsSpace, error) {
	contract, err := bindIKmsSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IKmsSpace{IKmsSpaceCaller: IKmsSpaceCaller{contract: contract}, IKmsSpaceTransactor: IKmsSpaceTransactor{contract: contract}, IKmsSpaceFilterer: IKmsSpaceFilterer{contract: contract}}, nil
}

// NewIKmsSpaceCaller creates a new read-only instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpaceCaller(address common.Address, caller bind.ContractCaller) (*IKmsSpaceCaller, error) {
	contract, err := bindIKmsSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IKmsSpaceCaller{contract: contract}, nil
}

// NewIKmsSpaceTransactor creates a new write-only instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*IKmsSpaceTransactor, error) {
	contract, err := bindIKmsSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IKmsSpaceTransactor{contract: contract}, nil
}

// NewIKmsSpaceFilterer creates a new log filterer instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*IKmsSpaceFilterer, error) {
	contract, err := bindIKmsSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IKmsSpaceFilterer{contract: contract}, nil
}

// bindIKmsSpace binds a generic wrapper to an already deployed contract.
func bindIKmsSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IKmsSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IKmsSpace *IKmsSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IKmsSpace.Contract.IKmsSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IKmsSpace *IKmsSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IKmsSpace.Contract.IKmsSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IKmsSpace *IKmsSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IKmsSpace.Contract.IKmsSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IKmsSpace *IKmsSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IKmsSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IKmsSpace *IKmsSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IKmsSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IKmsSpace *IKmsSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IKmsSpace.Contract.contract.Transact(opts, method, params...)
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_IKmsSpace *IKmsSpaceCaller) CheckKMS(opts *bind.CallOpts, _kmsIdStr string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IKmsSpace.contract.Call(opts, out, "checkKMS", _kmsIdStr)
	return *ret0, err
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_IKmsSpace *IKmsSpaceSession) CheckKMS(_kmsIdStr string) (*big.Int, error) {
	return _IKmsSpace.Contract.CheckKMS(&_IKmsSpace.CallOpts, _kmsIdStr)
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_IKmsSpace *IKmsSpaceCallerSession) CheckKMS(_kmsIdStr string) (*big.Int, error) {
	return _IKmsSpace.Contract.CheckKMS(&_IKmsSpace.CallOpts, _kmsIdStr)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_IKmsSpace *IKmsSpaceCaller) CheckKMSAddr(opts *bind.CallOpts, _kmsAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IKmsSpace.contract.Call(opts, out, "checkKMSAddr", _kmsAddr)
	return *ret0, err
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_IKmsSpace *IKmsSpaceSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _IKmsSpace.Contract.CheckKMSAddr(&_IKmsSpace.CallOpts, _kmsAddr)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_IKmsSpace *IKmsSpaceCallerSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _IKmsSpace.Contract.CheckKMSAddr(&_IKmsSpace.CallOpts, _kmsAddr)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_IKmsSpace *IKmsSpaceCaller) GetKMSID(opts *bind.CallOpts, _kmsAddr common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _IKmsSpace.contract.Call(opts, out, "getKMSID", _kmsAddr)
	return *ret0, err
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_IKmsSpace *IKmsSpaceSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _IKmsSpace.Contract.GetKMSID(&_IKmsSpace.CallOpts, _kmsAddr)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_IKmsSpace *IKmsSpaceCallerSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _IKmsSpace.Contract.GetKMSID(&_IKmsSpace.CallOpts, _kmsAddr)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_IKmsSpace *IKmsSpaceCaller) GetKMSInfo(opts *bind.CallOpts, _kmsID string, prefix []byte) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _IKmsSpace.contract.Call(opts, out, "getKMSInfo", _kmsID, prefix)
	return *ret0, *ret1, err
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_IKmsSpace *IKmsSpaceSession) GetKMSInfo(_kmsID string, prefix []byte) (string, string, error) {
	return _IKmsSpace.Contract.GetKMSInfo(&_IKmsSpace.CallOpts, _kmsID, prefix)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_IKmsSpace *IKmsSpaceCallerSession) GetKMSInfo(_kmsID string, prefix []byte) (string, string, error) {
	return _IKmsSpace.Contract.GetKMSInfo(&_IKmsSpace.CallOpts, _kmsID, prefix)
}

// INodeSpaceABI is the input ABI used to generate the binding from.
const INodeSpaceABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// INodeSpaceFuncSigs maps the 4-byte function signature to its string representation.
var INodeSpaceFuncSigs = map[string]string{
	"26683e14": "canNodePublish(address)",
}

// INodeSpace is an auto generated Go binding around an Ethereum contract.
type INodeSpace struct {
	INodeSpaceCaller     // Read-only binding to the contract
	INodeSpaceTransactor // Write-only binding to the contract
	INodeSpaceFilterer   // Log filterer for contract events
}

// INodeSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type INodeSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INodeSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type INodeSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INodeSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type INodeSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INodeSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type INodeSpaceSession struct {
	Contract     *INodeSpace       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// INodeSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type INodeSpaceCallerSession struct {
	Contract *INodeSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// INodeSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type INodeSpaceTransactorSession struct {
	Contract     *INodeSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// INodeSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type INodeSpaceRaw struct {
	Contract *INodeSpace // Generic contract binding to access the raw methods on
}

// INodeSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type INodeSpaceCallerRaw struct {
	Contract *INodeSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// INodeSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type INodeSpaceTransactorRaw struct {
	Contract *INodeSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewINodeSpace creates a new instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpace(address common.Address, backend bind.ContractBackend) (*INodeSpace, error) {
	contract, err := bindINodeSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &INodeSpace{INodeSpaceCaller: INodeSpaceCaller{contract: contract}, INodeSpaceTransactor: INodeSpaceTransactor{contract: contract}, INodeSpaceFilterer: INodeSpaceFilterer{contract: contract}}, nil
}

// NewINodeSpaceCaller creates a new read-only instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpaceCaller(address common.Address, caller bind.ContractCaller) (*INodeSpaceCaller, error) {
	contract, err := bindINodeSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &INodeSpaceCaller{contract: contract}, nil
}

// NewINodeSpaceTransactor creates a new write-only instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*INodeSpaceTransactor, error) {
	contract, err := bindINodeSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &INodeSpaceTransactor{contract: contract}, nil
}

// NewINodeSpaceFilterer creates a new log filterer instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*INodeSpaceFilterer, error) {
	contract, err := bindINodeSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &INodeSpaceFilterer{contract: contract}, nil
}

// bindINodeSpace binds a generic wrapper to an already deployed contract.
func bindINodeSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(INodeSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_INodeSpace *INodeSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _INodeSpace.Contract.INodeSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_INodeSpace *INodeSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _INodeSpace.Contract.INodeSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_INodeSpace *INodeSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _INodeSpace.Contract.INodeSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_INodeSpace *INodeSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _INodeSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_INodeSpace *INodeSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _INodeSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_INodeSpace *INodeSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _INodeSpace.Contract.contract.Transact(opts, method, params...)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_INodeSpace *INodeSpaceCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _INodeSpace.contract.Call(opts, out, "canNodePublish", candidate)
	return *ret0, err
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_INodeSpace *INodeSpaceSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _INodeSpace.Contract.CanNodePublish(&_INodeSpace.CallOpts, candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_INodeSpace *INodeSpaceCallerSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _INodeSpace.Contract.CanNodePublish(&_INodeSpace.CallOpts, candidate)
}

// IUserSpaceABI is the input ABI used to generate the binding from.
const IUserSpaceABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"createUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IUserSpaceFuncSigs maps the 4-byte function signature to its string representation.
var IUserSpaceFuncSigs = map[string]string{
	"e7cf0c66": "createUserWallet(address)",
	"63e6ffdd": "userWallets(address)",
}

// IUserSpace is an auto generated Go binding around an Ethereum contract.
type IUserSpace struct {
	IUserSpaceCaller     // Read-only binding to the contract
	IUserSpaceTransactor // Write-only binding to the contract
	IUserSpaceFilterer   // Log filterer for contract events
}

// IUserSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type IUserSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUserSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IUserSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUserSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IUserSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUserSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IUserSpaceSession struct {
	Contract     *IUserSpace       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IUserSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IUserSpaceCallerSession struct {
	Contract *IUserSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// IUserSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IUserSpaceTransactorSession struct {
	Contract     *IUserSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IUserSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type IUserSpaceRaw struct {
	Contract *IUserSpace // Generic contract binding to access the raw methods on
}

// IUserSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IUserSpaceCallerRaw struct {
	Contract *IUserSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// IUserSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IUserSpaceTransactorRaw struct {
	Contract *IUserSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIUserSpace creates a new instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpace(address common.Address, backend bind.ContractBackend) (*IUserSpace, error) {
	contract, err := bindIUserSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IUserSpace{IUserSpaceCaller: IUserSpaceCaller{contract: contract}, IUserSpaceTransactor: IUserSpaceTransactor{contract: contract}, IUserSpaceFilterer: IUserSpaceFilterer{contract: contract}}, nil
}

// NewIUserSpaceCaller creates a new read-only instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpaceCaller(address common.Address, caller bind.ContractCaller) (*IUserSpaceCaller, error) {
	contract, err := bindIUserSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IUserSpaceCaller{contract: contract}, nil
}

// NewIUserSpaceTransactor creates a new write-only instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*IUserSpaceTransactor, error) {
	contract, err := bindIUserSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IUserSpaceTransactor{contract: contract}, nil
}

// NewIUserSpaceFilterer creates a new log filterer instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*IUserSpaceFilterer, error) {
	contract, err := bindIUserSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IUserSpaceFilterer{contract: contract}, nil
}

// bindIUserSpace binds a generic wrapper to an already deployed contract.
func bindIUserSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IUserSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IUserSpace *IUserSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IUserSpace.Contract.IUserSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IUserSpace *IUserSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IUserSpace.Contract.IUserSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IUserSpace *IUserSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IUserSpace.Contract.IUserSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IUserSpace *IUserSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IUserSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IUserSpace *IUserSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IUserSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IUserSpace *IUserSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IUserSpace.Contract.contract.Transact(opts, method, params...)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_IUserSpace *IUserSpaceCaller) UserWallets(opts *bind.CallOpts, _userAddr common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _IUserSpace.contract.Call(opts, out, "userWallets", _userAddr)
	return *ret0, err
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_IUserSpace *IUserSpaceSession) UserWallets(_userAddr common.Address) (common.Address, error) {
	return _IUserSpace.Contract.UserWallets(&_IUserSpace.CallOpts, _userAddr)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_IUserSpace *IUserSpaceCallerSession) UserWallets(_userAddr common.Address) (common.Address, error) {
	return _IUserSpace.Contract.UserWallets(&_IUserSpace.CallOpts, _userAddr)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_IUserSpace *IUserSpaceTransactor) CreateUserWallet(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _IUserSpace.contract.Transact(opts, "createUserWallet", _user)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_IUserSpace *IUserSpaceSession) CreateUserWallet(_user common.Address) (*types.Transaction, error) {
	return _IUserSpace.Contract.CreateUserWallet(&_IUserSpace.TransactOpts, _user)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_IUserSpace *IUserSpaceTransactorSession) CreateUserWallet(_user common.Address) (*types.Transaction, error) {
	return _IUserSpace.Contract.CreateUserWallet(&_IUserSpace.TransactOpts, _user)
}

// KmsManagerABI is the input ABI used to generate the binding from.
const KmsManagerABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"getKMSID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addKMSLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsIdStr\",\"type\":\"string\"}],\"name\":\"checkKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_pubKey\",\"type\":\"string\"}],\"name\":\"setKMSPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"checkKMSAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"removeKMSLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"AddKMSLocator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"RemoveKMSLocator\",\"type\":\"event\"}]"

// KmsManagerFuncSigs maps the 4-byte function signature to its string representation.
var KmsManagerFuncSigs = map[string]string{
	"653a92f6": "addKMSLocator(string,bytes)",
	"8d2a23db": "checkKMS(string)",
	"d6be0f49": "checkKMSAddr(address)",
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"589aafc1": "getKMSID(address)",
	"268bfac4": "getKMSInfo(string,bytes)",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"fe7ac19f": "removeKMSLocator(string,bytes)",
	"a69cb734": "setKMSPublicKey(string,string)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// KmsManagerBin is the compiled bytecode used for deploying new contracts.
var KmsManagerBin = ""

// DeployKmsManager deploys a new Ethereum contract, binding an instance of KmsManager to it.
func DeployKmsManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *KmsManager, error) {
	parsed, err := abi.JSON(strings.NewReader(KmsManagerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(KmsManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &KmsManager{KmsManagerCaller: KmsManagerCaller{contract: contract}, KmsManagerTransactor: KmsManagerTransactor{contract: contract}, KmsManagerFilterer: KmsManagerFilterer{contract: contract}}, nil
}

// KmsManager is an auto generated Go binding around an Ethereum contract.
type KmsManager struct {
	KmsManagerCaller     // Read-only binding to the contract
	KmsManagerTransactor // Write-only binding to the contract
	KmsManagerFilterer   // Log filterer for contract events
}

// KmsManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type KmsManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KmsManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KmsManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KmsManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KmsManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KmsManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KmsManagerSession struct {
	Contract     *KmsManager       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KmsManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KmsManagerCallerSession struct {
	Contract *KmsManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// KmsManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KmsManagerTransactorSession struct {
	Contract     *KmsManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// KmsManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type KmsManagerRaw struct {
	Contract *KmsManager // Generic contract binding to access the raw methods on
}

// KmsManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KmsManagerCallerRaw struct {
	Contract *KmsManagerCaller // Generic read-only contract binding to access the raw methods on
}

// KmsManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KmsManagerTransactorRaw struct {
	Contract *KmsManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKmsManager creates a new instance of KmsManager, bound to a specific deployed contract.
func NewKmsManager(address common.Address, backend bind.ContractBackend) (*KmsManager, error) {
	contract, err := bindKmsManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KmsManager{KmsManagerCaller: KmsManagerCaller{contract: contract}, KmsManagerTransactor: KmsManagerTransactor{contract: contract}, KmsManagerFilterer: KmsManagerFilterer{contract: contract}}, nil
}

// NewKmsManagerCaller creates a new read-only instance of KmsManager, bound to a specific deployed contract.
func NewKmsManagerCaller(address common.Address, caller bind.ContractCaller) (*KmsManagerCaller, error) {
	contract, err := bindKmsManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KmsManagerCaller{contract: contract}, nil
}

// NewKmsManagerTransactor creates a new write-only instance of KmsManager, bound to a specific deployed contract.
func NewKmsManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*KmsManagerTransactor, error) {
	contract, err := bindKmsManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KmsManagerTransactor{contract: contract}, nil
}

// NewKmsManagerFilterer creates a new log filterer instance of KmsManager, bound to a specific deployed contract.
func NewKmsManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*KmsManagerFilterer, error) {
	contract, err := bindKmsManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KmsManagerFilterer{contract: contract}, nil
}

// bindKmsManager binds a generic wrapper to an already deployed contract.
func bindKmsManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(KmsManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KmsManager *KmsManagerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _KmsManager.Contract.KmsManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KmsManager *KmsManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KmsManager.Contract.KmsManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KmsManager *KmsManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KmsManager.Contract.KmsManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KmsManager *KmsManagerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _KmsManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KmsManager *KmsManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KmsManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KmsManager *KmsManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KmsManager.Contract.contract.Transact(opts, method, params...)
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_KmsManager *KmsManagerCaller) CheckKMS(opts *bind.CallOpts, _kmsIdStr string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _KmsManager.contract.Call(opts, out, "checkKMS", _kmsIdStr)
	return *ret0, err
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_KmsManager *KmsManagerSession) CheckKMS(_kmsIdStr string) (*big.Int, error) {
	return _KmsManager.Contract.CheckKMS(&_KmsManager.CallOpts, _kmsIdStr)
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_KmsManager *KmsManagerCallerSession) CheckKMS(_kmsIdStr string) (*big.Int, error) {
	return _KmsManager.Contract.CheckKMS(&_KmsManager.CallOpts, _kmsIdStr)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_KmsManager *KmsManagerCaller) CheckKMSAddr(opts *bind.CallOpts, _kmsAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _KmsManager.contract.Call(opts, out, "checkKMSAddr", _kmsAddr)
	return *ret0, err
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_KmsManager *KmsManagerSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _KmsManager.Contract.CheckKMSAddr(&_KmsManager.CallOpts, _kmsAddr)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_KmsManager *KmsManagerCallerSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _KmsManager.Contract.CheckKMSAddr(&_KmsManager.CallOpts, _kmsAddr)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_KmsManager *KmsManagerCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _KmsManager.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_KmsManager *KmsManagerSession) ContentSpace() (common.Address, error) {
	return _KmsManager.Contract.ContentSpace(&_KmsManager.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_KmsManager *KmsManagerCallerSession) ContentSpace() (common.Address, error) {
	return _KmsManager.Contract.ContentSpace(&_KmsManager.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_KmsManager *KmsManagerCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _KmsManager.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_KmsManager *KmsManagerSession) Creator() (common.Address, error) {
	return _KmsManager.Contract.Creator(&_KmsManager.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_KmsManager *KmsManagerCallerSession) Creator() (common.Address, error) {
	return _KmsManager.Contract.Creator(&_KmsManager.CallOpts)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_KmsManager *KmsManagerCaller) GetKMSID(opts *bind.CallOpts, _kmsAddr common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _KmsManager.contract.Call(opts, out, "getKMSID", _kmsAddr)
	return *ret0, err
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_KmsManager *KmsManagerSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _KmsManager.Contract.GetKMSID(&_KmsManager.CallOpts, _kmsAddr)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_KmsManager *KmsManagerCallerSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _KmsManager.Contract.GetKMSID(&_KmsManager.CallOpts, _kmsAddr)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_KmsManager *KmsManagerCaller) GetKMSInfo(opts *bind.CallOpts, _kmsID string, prefix []byte) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _KmsManager.contract.Call(opts, out, "getKMSInfo", _kmsID, prefix)
	return *ret0, *ret1, err
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_KmsManager *KmsManagerSession) GetKMSInfo(_kmsID string, prefix []byte) (string, string, error) {
	return _KmsManager.Contract.GetKMSInfo(&_KmsManager.CallOpts, _kmsID, prefix)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_KmsManager *KmsManagerCallerSession) GetKMSInfo(_kmsID string, prefix []byte) (string, string, error) {
	return _KmsManager.Contract.GetKMSInfo(&_KmsManager.CallOpts, _kmsID, prefix)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_KmsManager *KmsManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _KmsManager.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_KmsManager *KmsManagerSession) Owner() (common.Address, error) {
	return _KmsManager.Contract.Owner(&_KmsManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_KmsManager *KmsManagerCallerSession) Owner() (common.Address, error) {
	return _KmsManager.Contract.Owner(&_KmsManager.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_KmsManager *KmsManagerCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _KmsManager.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_KmsManager *KmsManagerSession) Version() ([32]byte, error) {
	return _KmsManager.Contract.Version(&_KmsManager.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_KmsManager *KmsManagerCallerSession) Version() ([32]byte, error) {
	return _KmsManager.Contract.Version(&_KmsManager.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_KmsManager *KmsManagerCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _KmsManager.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_KmsManager *KmsManagerSession) VersionAPI() ([32]byte, error) {
	return _KmsManager.Contract.VersionAPI(&_KmsManager.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_KmsManager *KmsManagerCallerSession) VersionAPI() ([32]byte, error) {
	return _KmsManager.Contract.VersionAPI(&_KmsManager.CallOpts)
}

// AddKMSLocator is a paid mutator transaction binding the contract method 0x653a92f6.
//
// Solidity: function addKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_KmsManager *KmsManagerTransactor) AddKMSLocator(opts *bind.TransactOpts, _kmsID string, _locator []byte) (*types.Transaction, error) {
	return _KmsManager.contract.Transact(opts, "addKMSLocator", _kmsID, _locator)
}

// AddKMSLocator is a paid mutator transaction binding the contract method 0x653a92f6.
//
// Solidity: function addKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_KmsManager *KmsManagerSession) AddKMSLocator(_kmsID string, _locator []byte) (*types.Transaction, error) {
	return _KmsManager.Contract.AddKMSLocator(&_KmsManager.TransactOpts, _kmsID, _locator)
}

// AddKMSLocator is a paid mutator transaction binding the contract method 0x653a92f6.
//
// Solidity: function addKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_KmsManager *KmsManagerTransactorSession) AddKMSLocator(_kmsID string, _locator []byte) (*types.Transaction, error) {
	return _KmsManager.Contract.AddKMSLocator(&_KmsManager.TransactOpts, _kmsID, _locator)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_KmsManager *KmsManagerTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KmsManager.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_KmsManager *KmsManagerSession) Kill() (*types.Transaction, error) {
	return _KmsManager.Contract.Kill(&_KmsManager.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_KmsManager *KmsManagerTransactorSession) Kill() (*types.Transaction, error) {
	return _KmsManager.Contract.Kill(&_KmsManager.TransactOpts)
}

// RemoveKMSLocator is a paid mutator transaction binding the contract method 0xfe7ac19f.
//
// Solidity: function removeKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_KmsManager *KmsManagerTransactor) RemoveKMSLocator(opts *bind.TransactOpts, _kmsID string, _locator []byte) (*types.Transaction, error) {
	return _KmsManager.contract.Transact(opts, "removeKMSLocator", _kmsID, _locator)
}

// RemoveKMSLocator is a paid mutator transaction binding the contract method 0xfe7ac19f.
//
// Solidity: function removeKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_KmsManager *KmsManagerSession) RemoveKMSLocator(_kmsID string, _locator []byte) (*types.Transaction, error) {
	return _KmsManager.Contract.RemoveKMSLocator(&_KmsManager.TransactOpts, _kmsID, _locator)
}

// RemoveKMSLocator is a paid mutator transaction binding the contract method 0xfe7ac19f.
//
// Solidity: function removeKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_KmsManager *KmsManagerTransactorSession) RemoveKMSLocator(_kmsID string, _locator []byte) (*types.Transaction, error) {
	return _KmsManager.Contract.RemoveKMSLocator(&_KmsManager.TransactOpts, _kmsID, _locator)
}

// SetKMSPublicKey is a paid mutator transaction binding the contract method 0xa69cb734.
//
// Solidity: function setKMSPublicKey(string _kmsID, string _pubKey) returns()
func (_KmsManager *KmsManagerTransactor) SetKMSPublicKey(opts *bind.TransactOpts, _kmsID string, _pubKey string) (*types.Transaction, error) {
	return _KmsManager.contract.Transact(opts, "setKMSPublicKey", _kmsID, _pubKey)
}

// SetKMSPublicKey is a paid mutator transaction binding the contract method 0xa69cb734.
//
// Solidity: function setKMSPublicKey(string _kmsID, string _pubKey) returns()
func (_KmsManager *KmsManagerSession) SetKMSPublicKey(_kmsID string, _pubKey string) (*types.Transaction, error) {
	return _KmsManager.Contract.SetKMSPublicKey(&_KmsManager.TransactOpts, _kmsID, _pubKey)
}

// SetKMSPublicKey is a paid mutator transaction binding the contract method 0xa69cb734.
//
// Solidity: function setKMSPublicKey(string _kmsID, string _pubKey) returns()
func (_KmsManager *KmsManagerTransactorSession) SetKMSPublicKey(_kmsID string, _pubKey string) (*types.Transaction, error) {
	return _KmsManager.Contract.SetKMSPublicKey(&_KmsManager.TransactOpts, _kmsID, _pubKey)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_KmsManager *KmsManagerTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _KmsManager.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_KmsManager *KmsManagerSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _KmsManager.Contract.TransferCreatorship(&_KmsManager.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_KmsManager *KmsManagerTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _KmsManager.Contract.TransferCreatorship(&_KmsManager.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_KmsManager *KmsManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _KmsManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_KmsManager *KmsManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _KmsManager.Contract.TransferOwnership(&_KmsManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_KmsManager *KmsManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _KmsManager.Contract.TransferOwnership(&_KmsManager.TransactOpts, newOwner)
}

// KmsManagerAddKMSLocatorIterator is returned from FilterAddKMSLocator and is used to iterate over the raw logs and unpacked data for AddKMSLocator events raised by the KmsManager contract.
type KmsManagerAddKMSLocatorIterator struct {
	Event *KmsManagerAddKMSLocator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsManagerAddKMSLocatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsManagerAddKMSLocator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsManagerAddKMSLocator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsManagerAddKMSLocatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsManagerAddKMSLocatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsManagerAddKMSLocator represents a AddKMSLocator event raised by the KmsManager contract.
type KmsManagerAddKMSLocator struct {
	Sender common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterAddKMSLocator is a free log retrieval operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_KmsManager *KmsManagerFilterer) FilterAddKMSLocator(opts *bind.FilterOpts) (*KmsManagerAddKMSLocatorIterator, error) {

	logs, sub, err := _KmsManager.contract.FilterLogs(opts, "AddKMSLocator")
	if err != nil {
		return nil, err
	}
	return &KmsManagerAddKMSLocatorIterator{contract: _KmsManager.contract, event: "AddKMSLocator", logs: logs, sub: sub}, nil
}

// WatchAddKMSLocator is a free log subscription operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_KmsManager *KmsManagerFilterer) WatchAddKMSLocator(opts *bind.WatchOpts, sink chan<- *KmsManagerAddKMSLocator) (event.Subscription, error) {

	logs, sub, err := _KmsManager.contract.WatchLogs(opts, "AddKMSLocator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsManagerAddKMSLocator)
				if err := _KmsManager.contract.UnpackLog(event, "AddKMSLocator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddKMSLocator is a log parse operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_KmsManager *KmsManagerFilterer) ParseAddKMSLocator(log types.Log) (*KmsManagerAddKMSLocator, error) {
	event := new(KmsManagerAddKMSLocator)
	if err := _KmsManager.contract.UnpackLog(event, "AddKMSLocator", log); err != nil {
		return nil, err
	}
	return event, nil
}

// KmsManagerRemoveKMSLocatorIterator is returned from FilterRemoveKMSLocator and is used to iterate over the raw logs and unpacked data for RemoveKMSLocator events raised by the KmsManager contract.
type KmsManagerRemoveKMSLocatorIterator struct {
	Event *KmsManagerRemoveKMSLocator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsManagerRemoveKMSLocatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsManagerRemoveKMSLocator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsManagerRemoveKMSLocator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsManagerRemoveKMSLocatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsManagerRemoveKMSLocatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsManagerRemoveKMSLocator represents a RemoveKMSLocator event raised by the KmsManager contract.
type KmsManagerRemoveKMSLocator struct {
	Sender common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRemoveKMSLocator is a free log retrieval operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_KmsManager *KmsManagerFilterer) FilterRemoveKMSLocator(opts *bind.FilterOpts) (*KmsManagerRemoveKMSLocatorIterator, error) {

	logs, sub, err := _KmsManager.contract.FilterLogs(opts, "RemoveKMSLocator")
	if err != nil {
		return nil, err
	}
	return &KmsManagerRemoveKMSLocatorIterator{contract: _KmsManager.contract, event: "RemoveKMSLocator", logs: logs, sub: sub}, nil
}

// WatchRemoveKMSLocator is a free log subscription operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_KmsManager *KmsManagerFilterer) WatchRemoveKMSLocator(opts *bind.WatchOpts, sink chan<- *KmsManagerRemoveKMSLocator) (event.Subscription, error) {

	logs, sub, err := _KmsManager.contract.WatchLogs(opts, "RemoveKMSLocator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsManagerRemoveKMSLocator)
				if err := _KmsManager.contract.UnpackLog(event, "RemoveKMSLocator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveKMSLocator is a log parse operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_KmsManager *KmsManagerFilterer) ParseRemoveKMSLocator(log types.Log) (*KmsManagerRemoveKMSLocator, error) {
	event := new(KmsManagerRemoveKMSLocator)
	if err := _KmsManager.contract.UnpackLog(event, "RemoveKMSLocator", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MetaObjectABI is the input ABI used to generate the binding from.
const MetaObjectABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// MetaObjectFuncSigs maps the 4-byte function signature to its string representation.
var MetaObjectFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"ac55c906": "getMeta(bytes)",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"e542b7cb": "putMeta(bytes,bytes)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// MetaObjectBin is the compiled bytecode used for deploying new contracts.
var MetaObjectBin = "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060015560028054600160a060020a031990811632179091556003805490911633179055610a628061007b6000396000f3fe6080604052600436106100b9576000357c0100000000000000000000000000000000000000000000000000000000900480636d2e4b1b116100815780636d2e4b1b146101845780638da5cb5b146101b7578063ac55c906146101cc578063af570c04146102f4578063e542b7cb14610309578063f2fde38b14610443576100b9565b806302d05d3f146100bb57806324d7806c146100ec57806341c0e1b51461013357806354fd4d50146101485780635f4fcae11461016f575b005b3480156100c757600080fd5b506100d0610476565b60408051600160a060020a039092168252519081900360200190f35b3480156100f857600080fd5b5061011f6004803603602081101561010f57600080fd5b5035600160a060020a0316610485565b604080519115158252519081900360200190f35b34801561013f57600080fd5b506100b96104af565b34801561015457600080fd5b5061015d6104d4565b60408051918252519081900360200190f35b34801561017b57600080fd5b5061015d6104da565b34801561019057600080fd5b506100b9600480360360208110156101a757600080fd5b5035600160a060020a03166104e0565b3480156101c357600080fd5b506100d061053b565b3480156101d857600080fd5b5061027f600480360360208110156101ef57600080fd5b81019060208101813564010000000081111561020a57600080fd5b82018360208201111561021c57600080fd5b8035906020019184600183028401116401000000008311171561023e57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061054a945050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102b95781810151838201526020016102a1565b50505050905090810190601f1680156102e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561030057600080fd5b506100d06106f3565b34801561031557600080fd5b506100b96004803603604081101561032c57600080fd5b81019060208101813564010000000081111561034757600080fd5b82018360208201111561035957600080fd5b8035906020019184600183028401116401000000008311171561037b57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156103ce57600080fd5b8201836020820111156103e057600080fd5b8035906020019184600183028401116401000000008311171561040257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610702945050505050565b34801561044f57600080fd5b506100b96004803603602081101561046657600080fd5b5035600160a060020a03166108f9565b600254600160a060020a031681565b600354600090600160a060020a03838116911614156104a6575060016104aa565b5060005b919050565b600354600160a060020a031633146104c657600080fd5b600354600160a060020a0316ff5b60005481565b60015481565b600254600160a060020a031633146104f757600080fd5b600160a060020a038116151561050c57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b6060602082511115156106015781518083015160008181526005602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845293949390918301828280156105f35780601f106105c8576101008083540402835291602001916105f3565b820191906000526020600020905b8154815290600101906020018083116105d657829003601f168201915b5050505050925050506104aa565b6006826040518082805190602001908083835b602083106106335780518252601f199092019160209182019101610614565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156106e75780601f106106bc576101008083540402835291602001916106e7565b820191906000526020600020905b8154815290600101906020018083116106ca57829003601f168201915b50505050509050919050565b600454600160a060020a031681565b61070b33610485565b151561071657600080fd5b815160201061077157815180830151600081815260056020526040812091929161073f91610954565b60008351111561076a57600082815260056020908152604090912084516107689286019061099b565b505b505061085c565b6006826040518082805190602001908083835b602083106107a35780518252601f199092019160209182019101610784565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092206107dc925090506000610954565b60008151111561085c57806006836040518082805190602001908083835b602083106108195780518252601f1990920191602091820191016107fa565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161085a959194919091019250905061099b565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c826040518080602001828103825283818151815260200191508051906020019080838360005b838110156108bb5781810151838201526020016108a3565b50505050905090810190601f1680156108e85780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050565b600354600160a060020a0316331461091057600080fd5b600160a060020a038116151561092557600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b50805460018160011615610100020316600290046000825580601f1061097a5750610998565b601f0160209004906000526020600020908101906109989190610a19565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106109dc57805160ff1916838001178555610a09565b82800160010185558215610a09579182015b82811115610a095782518255916020019190600101906109ee565b50610a15929150610a19565b5090565b610a3391905b80821115610a155760008155600101610a1f565b9056fea165627a7a72305820aa7dd6d5220a3bc12293d030e1d1160adad405de64c93f5ccdda968cb1940c820029"

// DeployMetaObject deploys a new Ethereum contract, binding an instance of MetaObject to it.
func DeployMetaObject(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MetaObject, error) {
	parsed, err := abi.JSON(strings.NewReader(MetaObjectABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MetaObjectBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MetaObject{MetaObjectCaller: MetaObjectCaller{contract: contract}, MetaObjectTransactor: MetaObjectTransactor{contract: contract}, MetaObjectFilterer: MetaObjectFilterer{contract: contract}}, nil
}

// MetaObject is an auto generated Go binding around an Ethereum contract.
type MetaObject struct {
	MetaObjectCaller     // Read-only binding to the contract
	MetaObjectTransactor // Write-only binding to the contract
	MetaObjectFilterer   // Log filterer for contract events
}

// MetaObjectCaller is an auto generated read-only Go binding around an Ethereum contract.
type MetaObjectCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaObjectTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MetaObjectTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaObjectFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MetaObjectFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaObjectSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MetaObjectSession struct {
	Contract     *MetaObject       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MetaObjectCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MetaObjectCallerSession struct {
	Contract *MetaObjectCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MetaObjectTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MetaObjectTransactorSession struct {
	Contract     *MetaObjectTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MetaObjectRaw is an auto generated low-level Go binding around an Ethereum contract.
type MetaObjectRaw struct {
	Contract *MetaObject // Generic contract binding to access the raw methods on
}

// MetaObjectCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MetaObjectCallerRaw struct {
	Contract *MetaObjectCaller // Generic read-only contract binding to access the raw methods on
}

// MetaObjectTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MetaObjectTransactorRaw struct {
	Contract *MetaObjectTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMetaObject creates a new instance of MetaObject, bound to a specific deployed contract.
func NewMetaObject(address common.Address, backend bind.ContractBackend) (*MetaObject, error) {
	contract, err := bindMetaObject(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MetaObject{MetaObjectCaller: MetaObjectCaller{contract: contract}, MetaObjectTransactor: MetaObjectTransactor{contract: contract}, MetaObjectFilterer: MetaObjectFilterer{contract: contract}}, nil
}

// NewMetaObjectCaller creates a new read-only instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectCaller(address common.Address, caller bind.ContractCaller) (*MetaObjectCaller, error) {
	contract, err := bindMetaObject(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MetaObjectCaller{contract: contract}, nil
}

// NewMetaObjectTransactor creates a new write-only instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectTransactor(address common.Address, transactor bind.ContractTransactor) (*MetaObjectTransactor, error) {
	contract, err := bindMetaObject(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MetaObjectTransactor{contract: contract}, nil
}

// NewMetaObjectFilterer creates a new log filterer instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectFilterer(address common.Address, filterer bind.ContractFilterer) (*MetaObjectFilterer, error) {
	contract, err := bindMetaObject(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MetaObjectFilterer{contract: contract}, nil
}

// bindMetaObject binds a generic wrapper to an already deployed contract.
func bindMetaObject(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MetaObjectABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MetaObject *MetaObjectRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MetaObject.Contract.MetaObjectCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MetaObject *MetaObjectRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetaObject.Contract.MetaObjectTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MetaObject *MetaObjectRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MetaObject.Contract.MetaObjectTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MetaObject *MetaObjectCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MetaObject.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MetaObject *MetaObjectTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetaObject.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MetaObject *MetaObjectTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MetaObject.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_MetaObject *MetaObjectCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_MetaObject *MetaObjectSession) ContentSpace() (common.Address, error) {
	return _MetaObject.Contract.ContentSpace(&_MetaObject.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_MetaObject *MetaObjectCallerSession) ContentSpace() (common.Address, error) {
	return _MetaObject.Contract.ContentSpace(&_MetaObject.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_MetaObject *MetaObjectCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_MetaObject *MetaObjectSession) Creator() (common.Address, error) {
	return _MetaObject.Contract.Creator(&_MetaObject.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_MetaObject *MetaObjectCallerSession) Creator() (common.Address, error) {
	return _MetaObject.Contract.Creator(&_MetaObject.CallOpts)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_MetaObject *MetaObjectCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_MetaObject *MetaObjectSession) GetMeta(key []byte) ([]byte, error) {
	return _MetaObject.Contract.GetMeta(&_MetaObject.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_MetaObject *MetaObjectCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _MetaObject.Contract.GetMeta(&_MetaObject.CallOpts, key)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_MetaObject *MetaObjectCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_MetaObject *MetaObjectSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _MetaObject.Contract.IsAdmin(&_MetaObject.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_MetaObject *MetaObjectCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _MetaObject.Contract.IsAdmin(&_MetaObject.CallOpts, _candidate)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_MetaObject *MetaObjectCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_MetaObject *MetaObjectSession) Owner() (common.Address, error) {
	return _MetaObject.Contract.Owner(&_MetaObject.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_MetaObject *MetaObjectCallerSession) Owner() (common.Address, error) {
	return _MetaObject.Contract.Owner(&_MetaObject.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_MetaObject *MetaObjectCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_MetaObject *MetaObjectSession) Version() ([32]byte, error) {
	return _MetaObject.Contract.Version(&_MetaObject.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_MetaObject *MetaObjectCallerSession) Version() ([32]byte, error) {
	return _MetaObject.Contract.Version(&_MetaObject.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_MetaObject *MetaObjectCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_MetaObject *MetaObjectSession) VersionAPI() ([32]byte, error) {
	return _MetaObject.Contract.VersionAPI(&_MetaObject.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_MetaObject *MetaObjectCallerSession) VersionAPI() ([32]byte, error) {
	return _MetaObject.Contract.VersionAPI(&_MetaObject.CallOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_MetaObject *MetaObjectTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_MetaObject *MetaObjectSession) Kill() (*types.Transaction, error) {
	return _MetaObject.Contract.Kill(&_MetaObject.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_MetaObject *MetaObjectTransactorSession) Kill() (*types.Transaction, error) {
	return _MetaObject.Contract.Kill(&_MetaObject.TransactOpts)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_MetaObject *MetaObjectTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_MetaObject *MetaObjectSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _MetaObject.Contract.PutMeta(&_MetaObject.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_MetaObject *MetaObjectTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _MetaObject.Contract.PutMeta(&_MetaObject.TransactOpts, key, value)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_MetaObject *MetaObjectTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_MetaObject *MetaObjectSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _MetaObject.Contract.TransferCreatorship(&_MetaObject.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_MetaObject *MetaObjectTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _MetaObject.Contract.TransferCreatorship(&_MetaObject.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MetaObject *MetaObjectTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MetaObject *MetaObjectSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MetaObject.Contract.TransferOwnership(&_MetaObject.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MetaObject *MetaObjectTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MetaObject.Contract.TransferOwnership(&_MetaObject.TransactOpts, newOwner)
}

// MetaObjectObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the MetaObject contract.
type MetaObjectObjectMetaChangedIterator struct {
	Event *MetaObjectObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MetaObjectObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MetaObjectObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MetaObjectObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MetaObjectObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MetaObjectObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MetaObjectObjectMetaChanged represents a ObjectMetaChanged event raised by the MetaObject contract.
type MetaObjectObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_MetaObject *MetaObjectFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*MetaObjectObjectMetaChangedIterator, error) {

	logs, sub, err := _MetaObject.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &MetaObjectObjectMetaChangedIterator{contract: _MetaObject.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_MetaObject *MetaObjectFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *MetaObjectObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _MetaObject.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MetaObjectObjectMetaChanged)
				if err := _MetaObject.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_MetaObject *MetaObjectFilterer) ParseObjectMetaChanged(log types.Log) (*MetaObjectObjectMetaChanged, error) {
	event := new(MetaObjectObjectMetaChanged)
	if err := _MetaObject.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeABI is the input ABI used to generate the binding from.
const NodeABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"label\",\"type\":\"string\"}],\"name\":\"log\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"}]"

// NodeFuncSigs maps the 4-byte function signature to its string representation.
var NodeFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"41304fac": "log(string)",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// NodeBin is the compiled bytecode used for deploying new contracts.
var NodeBin = "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f4e6f646532303139303331353130353130304d4c00000000000000000000000060055560028054600160a060020a03199081163217909155600380549091163317905561045d8061009f6000396000f3fe6080604052600436106100a3576000357c0100000000000000000000000000000000000000000000000000000000900480635f4fcae1116100765780635f4fcae1146101c55780636d2e4b1b146101da5780638da5cb5b1461020d578063af570c0414610222578063f2fde38b14610237576100a3565b806302d05d3f146100a557806341304fac146100d657806341c0e1b51461018957806354fd4d501461019e575b005b3480156100b157600080fd5b506100ba61026a565b60408051600160a060020a039092168252519081900360200190f35b3480156100e257600080fd5b506100a3600480360360208110156100f957600080fd5b81019060208101813564010000000081111561011457600080fd5b82018360208201111561012657600080fd5b8035906020019184600183028401116401000000008311171561014857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610279945050505050565b34801561019557600080fd5b506100a361032c565b3480156101aa57600080fd5b506101b3610351565b60408051918252519081900360200190f35b3480156101d157600080fd5b506101b3610357565b3480156101e657600080fd5b506100a3600480360360208110156101fd57600080fd5b5035600160a060020a031661035d565b34801561021957600080fd5b506100ba6103b8565b34801561022e57600080fd5b506100ba6103c7565b34801561024357600080fd5b506100a36004803603602081101561025a57600080fd5b5035600160a060020a03166103d6565b600254600160a060020a031681565b600354600160a060020a0316331461029057600080fd5b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab816040518080602001828103825283818151815260200191508051906020019080838360005b838110156102ef5781810151838201526020016102d7565b50505050905090810190601f16801561031c5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b600354600160a060020a0316331461034357600080fd5b600354600160a060020a0316ff5b60055481565b60015481565b600254600160a060020a0316331461037457600080fd5b600160a060020a038116151561038957600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a031633146103ed57600080fd5b600160a060020a038116151561040257600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a72305820c5f2749f44eb25405d211747a93b53c0ff2d4edc1a646c3a77ae52aaf2aaaf570029"

// DeployNode deploys a new Ethereum contract, binding an instance of Node to it.
func DeployNode(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Node, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(NodeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Node{NodeCaller: NodeCaller{contract: contract}, NodeTransactor: NodeTransactor{contract: contract}, NodeFilterer: NodeFilterer{contract: contract}}, nil
}

// Node is an auto generated Go binding around an Ethereum contract.
type Node struct {
	NodeCaller     // Read-only binding to the contract
	NodeTransactor // Write-only binding to the contract
	NodeFilterer   // Log filterer for contract events
}

// NodeCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodeSession struct {
	Contract     *Node             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodeCallerSession struct {
	Contract *NodeCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// NodeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodeTransactorSession struct {
	Contract     *NodeTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodeRaw struct {
	Contract *Node // Generic contract binding to access the raw methods on
}

// NodeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodeCallerRaw struct {
	Contract *NodeCaller // Generic read-only contract binding to access the raw methods on
}

// NodeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodeTransactorRaw struct {
	Contract *NodeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNode creates a new instance of Node, bound to a specific deployed contract.
func NewNode(address common.Address, backend bind.ContractBackend) (*Node, error) {
	contract, err := bindNode(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Node{NodeCaller: NodeCaller{contract: contract}, NodeTransactor: NodeTransactor{contract: contract}, NodeFilterer: NodeFilterer{contract: contract}}, nil
}

// NewNodeCaller creates a new read-only instance of Node, bound to a specific deployed contract.
func NewNodeCaller(address common.Address, caller bind.ContractCaller) (*NodeCaller, error) {
	contract, err := bindNode(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeCaller{contract: contract}, nil
}

// NewNodeTransactor creates a new write-only instance of Node, bound to a specific deployed contract.
func NewNodeTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeTransactor, error) {
	contract, err := bindNode(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeTransactor{contract: contract}, nil
}

// NewNodeFilterer creates a new log filterer instance of Node, bound to a specific deployed contract.
func NewNodeFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeFilterer, error) {
	contract, err := bindNode(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeFilterer{contract: contract}, nil
}

// bindNode binds a generic wrapper to an already deployed contract.
func bindNode(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Node *NodeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Node.Contract.NodeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Node *NodeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Node.Contract.NodeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Node *NodeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Node.Contract.NodeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Node *NodeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Node.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Node *NodeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Node.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Node *NodeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Node.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Node *NodeCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Node.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Node *NodeSession) ContentSpace() (common.Address, error) {
	return _Node.Contract.ContentSpace(&_Node.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Node *NodeCallerSession) ContentSpace() (common.Address, error) {
	return _Node.Contract.ContentSpace(&_Node.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Node *NodeCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Node.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Node *NodeSession) Creator() (common.Address, error) {
	return _Node.Contract.Creator(&_Node.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Node *NodeCallerSession) Creator() (common.Address, error) {
	return _Node.Contract.Creator(&_Node.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Node *NodeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Node.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Node *NodeSession) Owner() (common.Address, error) {
	return _Node.Contract.Owner(&_Node.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Node *NodeCallerSession) Owner() (common.Address, error) {
	return _Node.Contract.Owner(&_Node.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Node *NodeCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Node.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Node *NodeSession) Version() ([32]byte, error) {
	return _Node.Contract.Version(&_Node.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Node *NodeCallerSession) Version() ([32]byte, error) {
	return _Node.Contract.Version(&_Node.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Node *NodeCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Node.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Node *NodeSession) VersionAPI() ([32]byte, error) {
	return _Node.Contract.VersionAPI(&_Node.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Node *NodeCallerSession) VersionAPI() ([32]byte, error) {
	return _Node.Contract.VersionAPI(&_Node.CallOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Node *NodeTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Node *NodeSession) Kill() (*types.Transaction, error) {
	return _Node.Contract.Kill(&_Node.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Node *NodeTransactorSession) Kill() (*types.Transaction, error) {
	return _Node.Contract.Kill(&_Node.TransactOpts)
}

// Log is a paid mutator transaction binding the contract method 0x41304fac.
//
// Solidity: function log(string label) returns()
func (_Node *NodeTransactor) Log(opts *bind.TransactOpts, label string) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "log", label)
}

// Log is a paid mutator transaction binding the contract method 0x41304fac.
//
// Solidity: function log(string label) returns()
func (_Node *NodeSession) Log(label string) (*types.Transaction, error) {
	return _Node.Contract.Log(&_Node.TransactOpts, label)
}

// Log is a paid mutator transaction binding the contract method 0x41304fac.
//
// Solidity: function log(string label) returns()
func (_Node *NodeTransactorSession) Log(label string) (*types.Transaction, error) {
	return _Node.Contract.Log(&_Node.TransactOpts, label)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Node *NodeTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Node *NodeSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Node.Contract.TransferCreatorship(&_Node.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Node *NodeTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Node.Contract.TransferCreatorship(&_Node.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Node *NodeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Node *NodeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Node.Contract.TransferOwnership(&_Node.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Node *NodeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Node.Contract.TransferOwnership(&_Node.TransactOpts, newOwner)
}

// NodeLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the Node contract.
type NodeLogIterator struct {
	Event *NodeLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLog represents a Log event raised by the Node contract.
type NodeLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) FilterLog(opts *bind.FilterOpts) (*NodeLogIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &NodeLogIterator{contract: _Node.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *NodeLog) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLog)
				if err := _Node.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) ParseLog(log types.Log) (*NodeLog, error) {
	event := new(NodeLog)
	if err := _Node.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the Node contract.
type NodeLogAddressIterator struct {
	Event *NodeLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogAddress represents a LogAddress event raised by the Node contract.
type NodeLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) FilterLogAddress(opts *bind.FilterOpts) (*NodeLogAddressIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &NodeLogAddressIterator{contract: _Node.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *NodeLogAddress) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogAddress)
				if err := _Node.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) ParseLogAddress(log types.Log) (*NodeLogAddress, error) {
	event := new(NodeLogAddress)
	if err := _Node.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the Node contract.
type NodeLogBoolIterator struct {
	Event *NodeLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogBool represents a LogBool event raised by the Node contract.
type NodeLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) FilterLogBool(opts *bind.FilterOpts) (*NodeLogBoolIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &NodeLogBoolIterator{contract: _Node.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *NodeLogBool) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogBool)
				if err := _Node.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) ParseLogBool(log types.Log) (*NodeLogBool, error) {
	event := new(NodeLogBool)
	if err := _Node.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the Node contract.
type NodeLogBytes32Iterator struct {
	Event *NodeLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogBytes32 represents a LogBytes32 event raised by the Node contract.
type NodeLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*NodeLogBytes32Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &NodeLogBytes32Iterator{contract: _Node.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *NodeLogBytes32) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogBytes32)
				if err := _Node.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) ParseLogBytes32(log types.Log) (*NodeLogBytes32, error) {
	event := new(NodeLogBytes32)
	if err := _Node.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the Node contract.
type NodeLogInt256Iterator struct {
	Event *NodeLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogInt256 represents a LogInt256 event raised by the Node contract.
type NodeLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) FilterLogInt256(opts *bind.FilterOpts) (*NodeLogInt256Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &NodeLogInt256Iterator{contract: _Node.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *NodeLogInt256) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogInt256)
				if err := _Node.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) ParseLogInt256(log types.Log) (*NodeLogInt256, error) {
	event := new(NodeLogInt256)
	if err := _Node.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the Node contract.
type NodeLogUint256Iterator struct {
	Event *NodeLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogUint256 represents a LogUint256 event raised by the Node contract.
type NodeLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) FilterLogUint256(opts *bind.FilterOpts) (*NodeLogUint256Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &NodeLogUint256Iterator{contract: _Node.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *NodeLogUint256) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogUint256)
				if err := _Node.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) ParseLogUint256(log types.Log) (*NodeLogUint256, error) {
	event := new(NodeLogUint256)
	if err := _Node.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeSpaceABI is the input ABI used to generate the binding from.
const NodeSpaceABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"submitNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numActiveNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"removeNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"approveNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPendingNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"AddNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"RemoveNode\",\"type\":\"event\"}]"

// NodeSpaceFuncSigs maps the 4-byte function signature to its string representation.
var NodeSpaceFuncSigs = map[string]string{
	"52f82dd8": "activeNodeAddresses(uint256)",
	"5272ae17": "activeNodeLocators(uint256)",
	"64f0f050": "addNode(address,bytes)",
	"dd4c97a0": "approveNode(address)",
	"26683e14": "canNodePublish(address)",
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"43f59ec7": "numActiveNodes()",
	"f41a1587": "numPendingNodes()",
	"8da5cb5b": "owner()",
	"6be9514c": "pendingNodeAddresses(uint256)",
	"69e30ff8": "pendingNodeLocators(uint256)",
	"b2b99ec9": "removeNode(address)",
	"160eee74": "submitNode(bytes)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// NodeSpaceBin is the compiled bytecode used for deploying new contracts.
var NodeSpaceBin = "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f4e6f6465537061636532303139303532383137303130304d4c0000000000000060055560028054600160a060020a0319908116321790915560038054909116331790556115408061009f6000396000f3fe608060405260043610610131576000357c01000000000000000000000000000000000000000000000000000000009004806364f0f050116100bd578063af570c0411610081578063af570c04146104ec578063b2b99ec914610501578063dd4c97a014610534578063f2fde38b14610567578063f41a15871461059a57610131565b806364f0f0501461038d57806369e30ff8146104505780636be9514c1461047a5780636d2e4b1b146104a45780638da5cb5b146104d757610131565b806343f59ec71161010457806343f59ec7146102735780635272ae171461029a57806352f82dd81461033957806354fd4d50146103635780635f4fcae11461037857610131565b806302d05d3f14610133578063160eee741461016457806326683e141461021757806341c0e1b51461025e575b005b34801561013f57600080fd5b506101486105af565b60408051600160a060020a039092168252519081900360200190f35b34801561017057600080fd5b506101316004803603602081101561018757600080fd5b8101906020810181356401000000008111156101a257600080fd5b8201836020820111156101b457600080fd5b803590602001918460018302840111640100000000831117156101d657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506105be945050505050565b34801561022357600080fd5b5061024a6004803603602081101561023a57600080fd5b5035600160a060020a031661097e565b604080519115158252519081900360200190f35b34801561026a57600080fd5b506101316109dd565b34801561027f57600080fd5b50610288610a02565b60408051918252519081900360200190f35b3480156102a657600080fd5b506102c4600480360360208110156102bd57600080fd5b5035610a09565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102fe5781810151838201526020016102e6565b50505050905090810190601f16801561032b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561034557600080fd5b506101486004803603602081101561035c57600080fd5b5035610ab0565b34801561036f57600080fd5b50610288610ad8565b34801561038457600080fd5b50610288610ade565b34801561039957600080fd5b50610131600480360360408110156103b057600080fd5b600160a060020a0382351691908101906040810160208201356401000000008111156103db57600080fd5b8201836020820111156103ed57600080fd5b8035906020019184600183028401116401000000008311171561040f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ae4945050505050565b34801561045c57600080fd5b506102c46004803603602081101561047357600080fd5b5035610d1f565b34801561048657600080fd5b506101486004803603602081101561049d57600080fd5b5035610d2d565b3480156104b057600080fd5b50610131600480360360208110156104c757600080fd5b5035600160a060020a0316610d3b565b3480156104e357600080fd5b50610148610d96565b3480156104f857600080fd5b50610148610da5565b34801561050d57600080fd5b506101316004803603602081101561052457600080fd5b5035600160a060020a0316610db4565b34801561054057600080fd5b506101316004803603602081101561055757600080fd5b5035600160a060020a0316610e69565b34801561057357600080fd5b506101316004803603602081101561058a57600080fd5b5035600160a060020a0316611099565b3480156105a657600080fd5b506102886110f4565b600254600160a060020a031681565b6106f4600880548060200260200160405190810160405280929190818152602001828054801561061757602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116105f9575b50505050506009805480602002602001604051908101604052809291908181526020016000905b828210156106e95760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156106d55780601f106106aa576101008083540402835291602001916106d5565b820191906000526020600020905b8154815290600101906020018083116106b857829003601f168201915b50505050508152602001906001019061063e565b5050505033846110fa565b156106fe57600080fd5b610829600680548060200260200160405190810160405280929190818152602001828054801561075757602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610739575b50505050506007805480602002602001604051908101604052809291908181526020016000905b828210156106e95760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156108155780601f106107ea57610100808354040283529160200191610815565b820191906000526020600020905b8154815290600101906020018083116107f857829003601f168201915b50505050508152602001906001019061077e565b1561083357600080fd5b60085460641161084257600080fd5b60098054600181018083556000929092528251610886917f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01906020850190611354565b50506008805460018101825560009182527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301805473ffffffffffffffffffffffffffffffffffffffff19163390811790915560408051828152602081810183815286519383019390935285517fae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d958794926060850192908601918190849084905b83811015610940578181015183820152602001610928565b50505050905090810190601f16801561096d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b6000805b6006548110156109d25782600160a060020a03166006828154811015156109a557fe5b600091825260209091200154600160a060020a031614156109ca5760019150506109d8565b600101610982565b50600090505b919050565b600354600160a060020a031633146109f457600080fd5b600354600160a060020a0316ff5b6007545b90565b6007805482908110610a1757fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815293509091830182828015610aa85780601f10610a7d57610100808354040283529160200191610aa8565b820191906000526020600020905b815481529060010190602001808311610a8b57829003601f168201915b505050505081565b6006805482908110610abe57fe5b600091825260209091200154600160a060020a0316905081565b60055481565b60015481565b600354600160a060020a03163314610afb57600080fd5b610c316006805480602002602001604051908101604052809291908181526020018280548015610b5457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610b36575b50505050506007805480602002602001604051908101604052809291908181526020016000905b82821015610c265760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610c125780601f10610be757610100808354040283529160200191610c12565b820191906000526020600020905b815481529060010190602001808311610bf557829003601f168201915b505050505081526020019060010190610b7b565b5050505084846110fa565b15610c3b57600080fd5b6006805460018082019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790556007805491820180825560009190915282519091610cd6917fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688909101906020850190611354565b505060408051338152600160a060020a038416602082015281517f2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4929181900390910190a15050565b6009805482908110610a1757fe5b6008805482908110610abe57fe5b600254600160a060020a03163314610d5257600080fd5b600160a060020a0381161515610d6757600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a03163314610dcb57600080fd5b60005b600654811015610e655781600160a060020a0316600682815481101515610df157fe5b600091825260209091200154600160a060020a03161415610e5d57610e1981600660076111eb565b60408051338152600160a060020a038416602082015281517f41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d929181900390910190a15b600101610dce565b5050565b600354600160a060020a03163314610e8057600080fd5b6000805b60085481101561108c5782600160a060020a0316600882815481101515610ea757fe5b600091825260209091200154600160a060020a03161415611084576006600882815481101515610ed357fe5b600091825260208083209091015483546001810185559383529120909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055600980546007919083908110610f2d57fe5b60009182526020808320845460018181018088559686529290942092018054610f7194939093019290916002610100918316159190910260001901909116046113d2565b50507fd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54600882815481101515610fa357fe5b60009182526020909120015460098054600160a060020a039092169184908110610fc957fe5b600091825260209182902060408051600160a060020a038616815293840181815291909201805460026000196101006001841615020190911604928401839052929160608301908490801561105f5780601f106110345761010080835404028352916020019161105f565b820191906000526020600020905b81548152906001019060200180831161104257829003601f168201915b5050935050505060405180910390a161107b81600860096111eb565b6001915061108c565b600101610e84565b50801515610e6557600080fd5b600354600160a060020a031633146110b057600080fd5b600160a060020a03811615156110c557600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60095490565b825184516000911461110b57600080fd5b60005b85518110156111dd5782516020840120855186908390811061112c57fe5b906020019060200201516040518082805190602001908083835b602083106111655780518252601f199092019160209182019101611146565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902014806111c6575083600160a060020a031686828151811015156111b157fe5b90602001906020020151600160a060020a0316145b156111d55760019150506111e3565b60010161110e565b50600090505b949350505050565b8154831080156111fb5750805483105b151561120657600080fd5b81546000190183146112cd5780548190600019810190811061122457fe5b90600052602060002001818481548110151561123c57fe5b9060005260206000200190805460018160011615610100020316600290046112659291906113d2565b5081548290600019810190811061127857fe5b6000918252602090912001548254600160a060020a039091169083908590811061129e57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b8054819060001981019081106112df57fe5b9060005260206000200160006112f59190611447565b805461130582600019830161148e565b5081548290600019810190811061131857fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff19169055815461134e8360001983016114b7565b50505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061139557805160ff19168380011785556113c2565b828001600101855582156113c2579182015b828111156113c25782518255916020019190600101906113a7565b506113ce9291506114d7565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061140b57805485556113c2565b828001600101855582156113c257600052602060002091601f016020900482015b828111156113c257825482559160010191906001019061142c565b50805460018160011615610100020316600290046000825580601f1061146d575061148b565b601f01602090049060005260206000209081019061148b91906114d7565b50565b8154818355818111156114b2576000838152602090206114b29181019083016114f1565b505050565b8154818355818111156114b2576000838152602090206114b29181019083015b610a0691905b808211156113ce57600081556001016114dd565b610a0691905b808211156113ce57600061150b8282611447565b506001016114f756fea165627a7a723058208d677ad4fef3704cecb52ecd7d09a4d21bca6e2ff31341ddbdd23194019bee990029"

// DeployNodeSpace deploys a new Ethereum contract, binding an instance of NodeSpace to it.
func DeployNodeSpace(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodeSpace, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeSpaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(NodeSpaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodeSpace{NodeSpaceCaller: NodeSpaceCaller{contract: contract}, NodeSpaceTransactor: NodeSpaceTransactor{contract: contract}, NodeSpaceFilterer: NodeSpaceFilterer{contract: contract}}, nil
}

// NodeSpace is an auto generated Go binding around an Ethereum contract.
type NodeSpace struct {
	NodeSpaceCaller     // Read-only binding to the contract
	NodeSpaceTransactor // Write-only binding to the contract
	NodeSpaceFilterer   // Log filterer for contract events
}

// NodeSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodeSpaceSession struct {
	Contract     *NodeSpace        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodeSpaceCallerSession struct {
	Contract *NodeSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// NodeSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodeSpaceTransactorSession struct {
	Contract     *NodeSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// NodeSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodeSpaceRaw struct {
	Contract *NodeSpace // Generic contract binding to access the raw methods on
}

// NodeSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodeSpaceCallerRaw struct {
	Contract *NodeSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// NodeSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodeSpaceTransactorRaw struct {
	Contract *NodeSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNodeSpace creates a new instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpace(address common.Address, backend bind.ContractBackend) (*NodeSpace, error) {
	contract, err := bindNodeSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodeSpace{NodeSpaceCaller: NodeSpaceCaller{contract: contract}, NodeSpaceTransactor: NodeSpaceTransactor{contract: contract}, NodeSpaceFilterer: NodeSpaceFilterer{contract: contract}}, nil
}

// NewNodeSpaceCaller creates a new read-only instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceCaller(address common.Address, caller bind.ContractCaller) (*NodeSpaceCaller, error) {
	contract, err := bindNodeSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceCaller{contract: contract}, nil
}

// NewNodeSpaceTransactor creates a new write-only instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeSpaceTransactor, error) {
	contract, err := bindNodeSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceTransactor{contract: contract}, nil
}

// NewNodeSpaceFilterer creates a new log filterer instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeSpaceFilterer, error) {
	contract, err := bindNodeSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceFilterer{contract: contract}, nil
}

// bindNodeSpace binds a generic wrapper to an already deployed contract.
func bindNodeSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeSpace *NodeSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _NodeSpace.Contract.NodeSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeSpace *NodeSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeSpace.Contract.NodeSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeSpace *NodeSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeSpace.Contract.NodeSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeSpace *NodeSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _NodeSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeSpace *NodeSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeSpace *NodeSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeSpace.Contract.contract.Transact(opts, method, params...)
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceCaller) ActiveNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "activeNodeAddresses", arg0)
	return *ret0, err
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceSession) ActiveNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _NodeSpace.Contract.ActiveNodeAddresses(&_NodeSpace.CallOpts, arg0)
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) ActiveNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _NodeSpace.Contract.ActiveNodeAddresses(&_NodeSpace.CallOpts, arg0)
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceCaller) ActiveNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "activeNodeLocators", arg0)
	return *ret0, err
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceSession) ActiveNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _NodeSpace.Contract.ActiveNodeLocators(&_NodeSpace.CallOpts, arg0)
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceCallerSession) ActiveNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _NodeSpace.Contract.ActiveNodeLocators(&_NodeSpace.CallOpts, arg0)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_NodeSpace *NodeSpaceCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "canNodePublish", candidate)
	return *ret0, err
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_NodeSpace *NodeSpaceSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _NodeSpace.Contract.CanNodePublish(&_NodeSpace.CallOpts, candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_NodeSpace *NodeSpaceCallerSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _NodeSpace.Contract.CanNodePublish(&_NodeSpace.CallOpts, candidate)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_NodeSpace *NodeSpaceCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_NodeSpace *NodeSpaceSession) ContentSpace() (common.Address, error) {
	return _NodeSpace.Contract.ContentSpace(&_NodeSpace.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) ContentSpace() (common.Address, error) {
	return _NodeSpace.Contract.ContentSpace(&_NodeSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_NodeSpace *NodeSpaceCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_NodeSpace *NodeSpaceSession) Creator() (common.Address, error) {
	return _NodeSpace.Contract.Creator(&_NodeSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) Creator() (common.Address, error) {
	return _NodeSpace.Contract.Creator(&_NodeSpace.CallOpts)
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceCaller) NumActiveNodes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "numActiveNodes")
	return *ret0, err
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceSession) NumActiveNodes() (*big.Int, error) {
	return _NodeSpace.Contract.NumActiveNodes(&_NodeSpace.CallOpts)
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceCallerSession) NumActiveNodes() (*big.Int, error) {
	return _NodeSpace.Contract.NumActiveNodes(&_NodeSpace.CallOpts)
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceCaller) NumPendingNodes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "numPendingNodes")
	return *ret0, err
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceSession) NumPendingNodes() (*big.Int, error) {
	return _NodeSpace.Contract.NumPendingNodes(&_NodeSpace.CallOpts)
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceCallerSession) NumPendingNodes() (*big.Int, error) {
	return _NodeSpace.Contract.NumPendingNodes(&_NodeSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_NodeSpace *NodeSpaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_NodeSpace *NodeSpaceSession) Owner() (common.Address, error) {
	return _NodeSpace.Contract.Owner(&_NodeSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) Owner() (common.Address, error) {
	return _NodeSpace.Contract.Owner(&_NodeSpace.CallOpts)
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceCaller) PendingNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "pendingNodeAddresses", arg0)
	return *ret0, err
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceSession) PendingNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _NodeSpace.Contract.PendingNodeAddresses(&_NodeSpace.CallOpts, arg0)
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) PendingNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _NodeSpace.Contract.PendingNodeAddresses(&_NodeSpace.CallOpts, arg0)
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceCaller) PendingNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "pendingNodeLocators", arg0)
	return *ret0, err
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceSession) PendingNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _NodeSpace.Contract.PendingNodeLocators(&_NodeSpace.CallOpts, arg0)
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceCallerSession) PendingNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _NodeSpace.Contract.PendingNodeLocators(&_NodeSpace.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_NodeSpace *NodeSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_NodeSpace *NodeSpaceSession) Version() ([32]byte, error) {
	return _NodeSpace.Contract.Version(&_NodeSpace.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_NodeSpace *NodeSpaceCallerSession) Version() ([32]byte, error) {
	return _NodeSpace.Contract.Version(&_NodeSpace.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_NodeSpace *NodeSpaceCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_NodeSpace *NodeSpaceSession) VersionAPI() ([32]byte, error) {
	return _NodeSpace.Contract.VersionAPI(&_NodeSpace.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_NodeSpace *NodeSpaceCallerSession) VersionAPI() ([32]byte, error) {
	return _NodeSpace.Contract.VersionAPI(&_NodeSpace.CallOpts)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactor) AddNode(opts *bind.TransactOpts, _nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "addNode", _nodeAddr, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_NodeSpace *NodeSpaceSession) AddNode(_nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.Contract.AddNode(&_NodeSpace.TransactOpts, _nodeAddr, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactorSession) AddNode(_nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.Contract.AddNode(&_NodeSpace.TransactOpts, _nodeAddr, _locator)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactor) ApproveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "approveNode", _nodeAddr)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceSession) ApproveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.ApproveNode(&_NodeSpace.TransactOpts, _nodeAddr)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactorSession) ApproveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.ApproveNode(&_NodeSpace.TransactOpts, _nodeAddr)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_NodeSpace *NodeSpaceTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_NodeSpace *NodeSpaceSession) Kill() (*types.Transaction, error) {
	return _NodeSpace.Contract.Kill(&_NodeSpace.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_NodeSpace *NodeSpaceTransactorSession) Kill() (*types.Transaction, error) {
	return _NodeSpace.Contract.Kill(&_NodeSpace.TransactOpts)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactor) RemoveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "removeNode", _nodeAddr)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceSession) RemoveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.RemoveNode(&_NodeSpace.TransactOpts, _nodeAddr)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactorSession) RemoveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.RemoveNode(&_NodeSpace.TransactOpts, _nodeAddr)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactor) SubmitNode(opts *bind.TransactOpts, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "submitNode", _locator)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_NodeSpace *NodeSpaceSession) SubmitNode(_locator []byte) (*types.Transaction, error) {
	return _NodeSpace.Contract.SubmitNode(&_NodeSpace.TransactOpts, _locator)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactorSession) SubmitNode(_locator []byte) (*types.Transaction, error) {
	return _NodeSpace.Contract.SubmitNode(&_NodeSpace.TransactOpts, _locator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_NodeSpace *NodeSpaceTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_NodeSpace *NodeSpaceSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.TransferCreatorship(&_NodeSpace.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_NodeSpace *NodeSpaceTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.TransferCreatorship(&_NodeSpace.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeSpace *NodeSpaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeSpace *NodeSpaceSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.TransferOwnership(&_NodeSpace.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeSpace *NodeSpaceTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.TransferOwnership(&_NodeSpace.TransactOpts, newOwner)
}

// NodeSpaceAddNodeIterator is returned from FilterAddNode and is used to iterate over the raw logs and unpacked data for AddNode events raised by the NodeSpace contract.
type NodeSpaceAddNodeIterator struct {
	Event *NodeSpaceAddNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceAddNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceAddNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceAddNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceAddNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceAddNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceAddNode represents a AddNode event raised by the NodeSpace contract.
type NodeSpaceAddNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddNode is a free log retrieval operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) FilterAddNode(opts *bind.FilterOpts) (*NodeSpaceAddNodeIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceAddNodeIterator{contract: _NodeSpace.contract, event: "AddNode", logs: logs, sub: sub}, nil
}

// WatchAddNode is a free log subscription operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) WatchAddNode(opts *bind.WatchOpts, sink chan<- *NodeSpaceAddNode) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceAddNode)
				if err := _NodeSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddNode is a log parse operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) ParseAddNode(log types.Log) (*NodeSpaceAddNode, error) {
	event := new(NodeSpaceAddNode)
	if err := _NodeSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeSpaceNodeApprovedIterator is returned from FilterNodeApproved and is used to iterate over the raw logs and unpacked data for NodeApproved events raised by the NodeSpace contract.
type NodeSpaceNodeApprovedIterator struct {
	Event *NodeSpaceNodeApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceNodeApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceNodeApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceNodeApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceNodeApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceNodeApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceNodeApproved represents a NodeApproved event raised by the NodeSpace contract.
type NodeSpaceNodeApproved struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeApproved is a free log retrieval operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) FilterNodeApproved(opts *bind.FilterOpts) (*NodeSpaceNodeApprovedIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceNodeApprovedIterator{contract: _NodeSpace.contract, event: "NodeApproved", logs: logs, sub: sub}, nil
}

// WatchNodeApproved is a free log subscription operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) WatchNodeApproved(opts *bind.WatchOpts, sink chan<- *NodeSpaceNodeApproved) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceNodeApproved)
				if err := _NodeSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeApproved is a log parse operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) ParseNodeApproved(log types.Log) (*NodeSpaceNodeApproved, error) {
	event := new(NodeSpaceNodeApproved)
	if err := _NodeSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeSpaceNodeSubmittedIterator is returned from FilterNodeSubmitted and is used to iterate over the raw logs and unpacked data for NodeSubmitted events raised by the NodeSpace contract.
type NodeSpaceNodeSubmittedIterator struct {
	Event *NodeSpaceNodeSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceNodeSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceNodeSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceNodeSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceNodeSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceNodeSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceNodeSubmitted represents a NodeSubmitted event raised by the NodeSpace contract.
type NodeSpaceNodeSubmitted struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeSubmitted is a free log retrieval operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) FilterNodeSubmitted(opts *bind.FilterOpts) (*NodeSpaceNodeSubmittedIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceNodeSubmittedIterator{contract: _NodeSpace.contract, event: "NodeSubmitted", logs: logs, sub: sub}, nil
}

// WatchNodeSubmitted is a free log subscription operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) WatchNodeSubmitted(opts *bind.WatchOpts, sink chan<- *NodeSpaceNodeSubmitted) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceNodeSubmitted)
				if err := _NodeSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeSubmitted is a log parse operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) ParseNodeSubmitted(log types.Log) (*NodeSpaceNodeSubmitted, error) {
	event := new(NodeSpaceNodeSubmitted)
	if err := _NodeSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeSpaceRemoveNodeIterator is returned from FilterRemoveNode and is used to iterate over the raw logs and unpacked data for RemoveNode events raised by the NodeSpace contract.
type NodeSpaceRemoveNodeIterator struct {
	Event *NodeSpaceRemoveNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceRemoveNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceRemoveNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceRemoveNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceRemoveNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceRemoveNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceRemoveNode represents a RemoveNode event raised by the NodeSpace contract.
type NodeSpaceRemoveNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoveNode is a free log retrieval operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) FilterRemoveNode(opts *bind.FilterOpts) (*NodeSpaceRemoveNodeIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceRemoveNodeIterator{contract: _NodeSpace.contract, event: "RemoveNode", logs: logs, sub: sub}, nil
}

// WatchRemoveNode is a free log subscription operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) WatchRemoveNode(opts *bind.WatchOpts, sink chan<- *NodeSpaceRemoveNode) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceRemoveNode)
				if err := _NodeSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveNode is a log parse operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) ParseRemoveNode(log types.Log) (*NodeSpaceRemoveNode, error) {
	event := new(NodeSpaceRemoveNode)
	if err := _NodeSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OwnableABI is the input ABI used to generate the binding from.
const OwnableABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// OwnableFuncSigs maps the 4-byte function signature to its string representation.
var OwnableFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// OwnableBin is the compiled bytecode used for deploying new contracts.
var OwnableBin = "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060015560028054600160a060020a0319908116321790915560038054909116331790556102ec8061007b6000396000f3fe608060405260043610610098576000357c0100000000000000000000000000000000000000000000000000000000900480636d2e4b1b1161006b5780636d2e4b1b1461011c5780638da5cb5b1461014f578063af570c0414610164578063f2fde38b1461017957610098565b806302d05d3f1461009a57806341c0e1b5146100cb57806354fd4d50146100e05780635f4fcae114610107575b005b3480156100a657600080fd5b506100af6101ac565b60408051600160a060020a039092168252519081900360200190f35b3480156100d757600080fd5b506100986101bb565b3480156100ec57600080fd5b506100f56101e0565b60408051918252519081900360200190f35b34801561011357600080fd5b506100f56101e6565b34801561012857600080fd5b506100986004803603602081101561013f57600080fd5b5035600160a060020a03166101ec565b34801561015b57600080fd5b506100af610247565b34801561017057600080fd5b506100af610256565b34801561018557600080fd5b506100986004803603602081101561019c57600080fd5b5035600160a060020a0316610265565b600254600160a060020a031681565b600354600160a060020a031633146101d257600080fd5b600354600160a060020a0316ff5b60005481565b60015481565b600254600160a060020a0316331461020357600080fd5b600160a060020a038116151561021857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a0316331461027c57600080fd5b600160a060020a038116151561029157600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a7230582099a751fd345cfcb3f71a683ba62d8d87d55f11f03bacb22eaea45becae6b81950029"

// DeployOwnable deploys a new Ethereum contract, binding an instance of Ownable to it.
func DeployOwnable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Ownable, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OwnableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// Ownable is an auto generated Go binding around an Ethereum contract.
type Ownable struct {
	OwnableCaller     // Read-only binding to the contract
	OwnableTransactor // Write-only binding to the contract
	OwnableFilterer   // Log filterer for contract events
}

// OwnableCaller is an auto generated read-only Go binding around an Ethereum contract.
type OwnableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OwnableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OwnableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OwnableSession struct {
	Contract     *Ownable          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OwnableCallerSession struct {
	Contract *OwnableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OwnableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OwnableTransactorSession struct {
	Contract     *OwnableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OwnableRaw is an auto generated low-level Go binding around an Ethereum contract.
type OwnableRaw struct {
	Contract *Ownable // Generic contract binding to access the raw methods on
}

// OwnableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OwnableCallerRaw struct {
	Contract *OwnableCaller // Generic read-only contract binding to access the raw methods on
}

// OwnableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OwnableTransactorRaw struct {
	Contract *OwnableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOwnable creates a new instance of Ownable, bound to a specific deployed contract.
func NewOwnable(address common.Address, backend bind.ContractBackend) (*Ownable, error) {
	contract, err := bindOwnable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// NewOwnableCaller creates a new read-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableCaller(address common.Address, caller bind.ContractCaller) (*OwnableCaller, error) {
	contract, err := bindOwnable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableCaller{contract: contract}, nil
}

// NewOwnableTransactor creates a new write-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnableTransactor, error) {
	contract, err := bindOwnable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableTransactor{contract: contract}, nil
}

// NewOwnableFilterer creates a new log filterer instance of Ownable, bound to a specific deployed contract.
func NewOwnableFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnableFilterer, error) {
	contract, err := bindOwnable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnableFilterer{contract: contract}, nil
}

// bindOwnable binds a generic wrapper to an already deployed contract.
func bindOwnable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.OwnableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Ownable *OwnableCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Ownable *OwnableSession) ContentSpace() (common.Address, error) {
	return _Ownable.Contract.ContentSpace(&_Ownable.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Ownable *OwnableCallerSession) ContentSpace() (common.Address, error) {
	return _Ownable.Contract.ContentSpace(&_Ownable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Ownable *OwnableCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Ownable *OwnableSession) Creator() (common.Address, error) {
	return _Ownable.Contract.Creator(&_Ownable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Ownable *OwnableCallerSession) Creator() (common.Address, error) {
	return _Ownable.Contract.Creator(&_Ownable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Ownable *OwnableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Ownable *OwnableSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Ownable *OwnableCallerSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Ownable *OwnableCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Ownable *OwnableSession) Version() ([32]byte, error) {
	return _Ownable.Contract.Version(&_Ownable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Ownable *OwnableCallerSession) Version() ([32]byte, error) {
	return _Ownable.Contract.Version(&_Ownable.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Ownable *OwnableCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Ownable *OwnableSession) VersionAPI() ([32]byte, error) {
	return _Ownable.Contract.VersionAPI(&_Ownable.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Ownable *OwnableCallerSession) VersionAPI() ([32]byte, error) {
	return _Ownable.Contract.VersionAPI(&_Ownable.CallOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Ownable *OwnableTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Ownable *OwnableSession) Kill() (*types.Transaction, error) {
	return _Ownable.Contract.Kill(&_Ownable.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Ownable *OwnableTransactorSession) Kill() (*types.Transaction, error) {
	return _Ownable.Contract.Kill(&_Ownable.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Ownable *OwnableTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Ownable *OwnableSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferCreatorship(&_Ownable.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Ownable *OwnableTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferCreatorship(&_Ownable.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// PrecompileABI is the input ABI used to generate the binding from.
const PrecompileABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"KMS\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEN\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// PrecompileFuncSigs maps the 4-byte function signature to its string representation.
var PrecompileFuncSigs = map[string]string{
	"a6ca541e": "KMS()",
	"ee2f3a05": "TEN()",
}

// PrecompileBin is the compiled bytecode used for deploying new contracts.
var PrecompileBin = "0x60b261002f600b82828239805160001a6073146000811461001f57610021565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106059577c01000000000000000000000000000000000000000000000000000000006000350463a6ca541e8114605e578063ee2f3a05146076575b600080fd5b6064607c565b60408051918252519081900360200190f35b60646081565b600b81565b600e8156fea165627a7a72305820e51cccbf61e879b52df24d32773450ec6c6cc1f67b08ad6fedc5f3db3c83eaa10029"

// DeployPrecompile deploys a new Ethereum contract, binding an instance of Precompile to it.
func DeployPrecompile(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Precompile, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompileABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PrecompileBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Precompile{PrecompileCaller: PrecompileCaller{contract: contract}, PrecompileTransactor: PrecompileTransactor{contract: contract}, PrecompileFilterer: PrecompileFilterer{contract: contract}}, nil
}

// Precompile is an auto generated Go binding around an Ethereum contract.
type Precompile struct {
	PrecompileCaller     // Read-only binding to the contract
	PrecompileTransactor // Write-only binding to the contract
	PrecompileFilterer   // Log filterer for contract events
}

// PrecompileCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrecompileCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompileTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrecompileTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompileFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrecompileFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompileSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrecompileSession struct {
	Contract     *Precompile       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrecompileCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrecompileCallerSession struct {
	Contract *PrecompileCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// PrecompileTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrecompileTransactorSession struct {
	Contract     *PrecompileTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// PrecompileRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrecompileRaw struct {
	Contract *Precompile // Generic contract binding to access the raw methods on
}

// PrecompileCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrecompileCallerRaw struct {
	Contract *PrecompileCaller // Generic read-only contract binding to access the raw methods on
}

// PrecompileTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrecompileTransactorRaw struct {
	Contract *PrecompileTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrecompile creates a new instance of Precompile, bound to a specific deployed contract.
func NewPrecompile(address common.Address, backend bind.ContractBackend) (*Precompile, error) {
	contract, err := bindPrecompile(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Precompile{PrecompileCaller: PrecompileCaller{contract: contract}, PrecompileTransactor: PrecompileTransactor{contract: contract}, PrecompileFilterer: PrecompileFilterer{contract: contract}}, nil
}

// NewPrecompileCaller creates a new read-only instance of Precompile, bound to a specific deployed contract.
func NewPrecompileCaller(address common.Address, caller bind.ContractCaller) (*PrecompileCaller, error) {
	contract, err := bindPrecompile(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompileCaller{contract: contract}, nil
}

// NewPrecompileTransactor creates a new write-only instance of Precompile, bound to a specific deployed contract.
func NewPrecompileTransactor(address common.Address, transactor bind.ContractTransactor) (*PrecompileTransactor, error) {
	contract, err := bindPrecompile(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompileTransactor{contract: contract}, nil
}

// NewPrecompileFilterer creates a new log filterer instance of Precompile, bound to a specific deployed contract.
func NewPrecompileFilterer(address common.Address, filterer bind.ContractFilterer) (*PrecompileFilterer, error) {
	contract, err := bindPrecompile(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrecompileFilterer{contract: contract}, nil
}

// bindPrecompile binds a generic wrapper to an already deployed contract.
func bindPrecompile(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompileABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompile *PrecompileRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Precompile.Contract.PrecompileCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompile *PrecompileRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompile.Contract.PrecompileTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompile *PrecompileRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompile.Contract.PrecompileTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompile *PrecompileCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Precompile.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompile *PrecompileTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompile.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompile *PrecompileTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompile.Contract.contract.Transact(opts, method, params...)
}

// KMS is a free data retrieval call binding the contract method 0xa6ca541e.
//
// Solidity: function KMS() constant returns(int256)
func (_Precompile *PrecompileCaller) KMS(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Precompile.contract.Call(opts, out, "KMS")
	return *ret0, err
}

// KMS is a free data retrieval call binding the contract method 0xa6ca541e.
//
// Solidity: function KMS() constant returns(int256)
func (_Precompile *PrecompileSession) KMS() (*big.Int, error) {
	return _Precompile.Contract.KMS(&_Precompile.CallOpts)
}

// KMS is a free data retrieval call binding the contract method 0xa6ca541e.
//
// Solidity: function KMS() constant returns(int256)
func (_Precompile *PrecompileCallerSession) KMS() (*big.Int, error) {
	return _Precompile.Contract.KMS(&_Precompile.CallOpts)
}

// TEN is a free data retrieval call binding the contract method 0xee2f3a05.
//
// Solidity: function TEN() constant returns(int256)
func (_Precompile *PrecompileCaller) TEN(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Precompile.contract.Call(opts, out, "TEN")
	return *ret0, err
}

// TEN is a free data retrieval call binding the contract method 0xee2f3a05.
//
// Solidity: function TEN() constant returns(int256)
func (_Precompile *PrecompileSession) TEN() (*big.Int, error) {
	return _Precompile.Contract.TEN(&_Precompile.CallOpts)
}

// TEN is a free data retrieval call binding the contract method 0xee2f3a05.
//
// Solidity: function TEN() constant returns(int256)
func (_Precompile *PrecompileCallerSession) TEN() (*big.Int, error) {
	return _Precompile.Contract.TEN(&_Precompile.CallOpts)
}

// TenantFuncsBaseABI is the input ABI used to generate the binding from.
const TenantFuncsBaseABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_encAuthToken\",\"type\":\"bytes\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_encToken\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"applyGroups\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TenantTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numGroups\",\"type\":\"uint256\"}],\"name\":\"ApplyGroups\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint32\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ord\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"prev\",\"type\":\"bool\"}],\"name\":\"BitSetAndGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"}],\"name\":\"WordGroupDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// TenantFuncsBaseFuncSigs maps the 4-byte function signature to its string representation.
var TenantFuncsBaseFuncSigs = map[string]string{
	"d2771dee": "applyGroups(bytes,uint256,address)",
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"e57097c9": "deleteGroup(bytes32)",
	"30f846a2": "getBit(bytes32,uint8)",
	"e1954b61": "getCounter(bytes32,uint8)",
	"ac55c906": "getMeta(bytes)",
	"7558cbf0": "incrementCounter(bytes32,uint8)",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"e542b7cb": "putMeta(bytes,bytes)",
	"24d7c18d": "setAndGetBit(bytes32,uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c2153d2c": "transferToken(bytes,uint256,address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// TenantFuncsBaseBin is the compiled bytecode used for deploying new contracts.
var TenantFuncsBaseBin = ""

// DeployTenantFuncsBase deploys a new Ethereum contract, binding an instance of TenantFuncsBase to it.
func DeployTenantFuncsBase(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TenantFuncsBase, error) {
	parsed, err := abi.JSON(strings.NewReader(TenantFuncsBaseABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TenantFuncsBaseBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TenantFuncsBase{TenantFuncsBaseCaller: TenantFuncsBaseCaller{contract: contract}, TenantFuncsBaseTransactor: TenantFuncsBaseTransactor{contract: contract}, TenantFuncsBaseFilterer: TenantFuncsBaseFilterer{contract: contract}}, nil
}

// TenantFuncsBase is an auto generated Go binding around an Ethereum contract.
type TenantFuncsBase struct {
	TenantFuncsBaseCaller     // Read-only binding to the contract
	TenantFuncsBaseTransactor // Write-only binding to the contract
	TenantFuncsBaseFilterer   // Log filterer for contract events
}

// TenantFuncsBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type TenantFuncsBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TenantFuncsBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TenantFuncsBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TenantFuncsBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TenantFuncsBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TenantFuncsBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TenantFuncsBaseSession struct {
	Contract     *TenantFuncsBase  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TenantFuncsBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TenantFuncsBaseCallerSession struct {
	Contract *TenantFuncsBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// TenantFuncsBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TenantFuncsBaseTransactorSession struct {
	Contract     *TenantFuncsBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// TenantFuncsBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type TenantFuncsBaseRaw struct {
	Contract *TenantFuncsBase // Generic contract binding to access the raw methods on
}

// TenantFuncsBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TenantFuncsBaseCallerRaw struct {
	Contract *TenantFuncsBaseCaller // Generic read-only contract binding to access the raw methods on
}

// TenantFuncsBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TenantFuncsBaseTransactorRaw struct {
	Contract *TenantFuncsBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTenantFuncsBase creates a new instance of TenantFuncsBase, bound to a specific deployed contract.
func NewTenantFuncsBase(address common.Address, backend bind.ContractBackend) (*TenantFuncsBase, error) {
	contract, err := bindTenantFuncsBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBase{TenantFuncsBaseCaller: TenantFuncsBaseCaller{contract: contract}, TenantFuncsBaseTransactor: TenantFuncsBaseTransactor{contract: contract}, TenantFuncsBaseFilterer: TenantFuncsBaseFilterer{contract: contract}}, nil
}

// NewTenantFuncsBaseCaller creates a new read-only instance of TenantFuncsBase, bound to a specific deployed contract.
func NewTenantFuncsBaseCaller(address common.Address, caller bind.ContractCaller) (*TenantFuncsBaseCaller, error) {
	contract, err := bindTenantFuncsBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseCaller{contract: contract}, nil
}

// NewTenantFuncsBaseTransactor creates a new write-only instance of TenantFuncsBase, bound to a specific deployed contract.
func NewTenantFuncsBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*TenantFuncsBaseTransactor, error) {
	contract, err := bindTenantFuncsBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseTransactor{contract: contract}, nil
}

// NewTenantFuncsBaseFilterer creates a new log filterer instance of TenantFuncsBase, bound to a specific deployed contract.
func NewTenantFuncsBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*TenantFuncsBaseFilterer, error) {
	contract, err := bindTenantFuncsBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseFilterer{contract: contract}, nil
}

// bindTenantFuncsBase binds a generic wrapper to an already deployed contract.
func bindTenantFuncsBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TenantFuncsBaseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TenantFuncsBase *TenantFuncsBaseRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TenantFuncsBase.Contract.TenantFuncsBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TenantFuncsBase *TenantFuncsBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TenantFuncsBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TenantFuncsBase *TenantFuncsBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TenantFuncsBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TenantFuncsBase *TenantFuncsBaseCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TenantFuncsBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TenantFuncsBase *TenantFuncsBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TenantFuncsBase *TenantFuncsBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseSession) ContentSpace() (common.Address, error) {
	return _TenantFuncsBase.Contract.ContentSpace(&_TenantFuncsBase.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) ContentSpace() (common.Address, error) {
	return _TenantFuncsBase.Contract.ContentSpace(&_TenantFuncsBase.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseSession) Creator() (common.Address, error) {
	return _TenantFuncsBase.Contract.Creator(&_TenantFuncsBase.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) Creator() (common.Address, error) {
	return _TenantFuncsBase.Contract.Creator(&_TenantFuncsBase.CallOpts)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseCaller) GetBit(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "getBit", _ident, _ord)
	return *ret0, err
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _TenantFuncsBase.Contract.GetBit(&_TenantFuncsBase.CallOpts, _ident, _ord)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _TenantFuncsBase.Contract.GetBit(&_TenantFuncsBase.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_TenantFuncsBase *TenantFuncsBaseCaller) GetCounter(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "getCounter", _ident, _ord)
	return *ret0, err
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_TenantFuncsBase *TenantFuncsBaseSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _TenantFuncsBase.Contract.GetCounter(&_TenantFuncsBase.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _TenantFuncsBase.Contract.GetCounter(&_TenantFuncsBase.CallOpts, _ident, _ord)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_TenantFuncsBase *TenantFuncsBaseCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_TenantFuncsBase *TenantFuncsBaseSession) GetMeta(key []byte) ([]byte, error) {
	return _TenantFuncsBase.Contract.GetMeta(&_TenantFuncsBase.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _TenantFuncsBase.Contract.GetMeta(&_TenantFuncsBase.CallOpts, key)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _TenantFuncsBase.Contract.IsAdmin(&_TenantFuncsBase.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _TenantFuncsBase.Contract.IsAdmin(&_TenantFuncsBase.CallOpts, _candidate)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseSession) Owner() (common.Address, error) {
	return _TenantFuncsBase.Contract.Owner(&_TenantFuncsBase.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) Owner() (common.Address, error) {
	return _TenantFuncsBase.Contract.Owner(&_TenantFuncsBase.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_TenantFuncsBase *TenantFuncsBaseCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_TenantFuncsBase *TenantFuncsBaseSession) Version() ([32]byte, error) {
	return _TenantFuncsBase.Contract.Version(&_TenantFuncsBase.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) Version() ([32]byte, error) {
	return _TenantFuncsBase.Contract.Version(&_TenantFuncsBase.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_TenantFuncsBase *TenantFuncsBaseCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_TenantFuncsBase *TenantFuncsBaseSession) VersionAPI() ([32]byte, error) {
	return _TenantFuncsBase.Contract.VersionAPI(&_TenantFuncsBase.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) VersionAPI() ([32]byte, error) {
	return _TenantFuncsBase.Contract.VersionAPI(&_TenantFuncsBase.CallOpts)
}

// ApplyGroups is a paid mutator transaction binding the contract method 0xd2771dee.
//
// Solidity: function applyGroups(bytes _encToken, uint256 , address _to) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) ApplyGroups(opts *bind.TransactOpts, _encToken []byte, arg1 *big.Int, _to common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "applyGroups", _encToken, arg1, _to)
}

// ApplyGroups is a paid mutator transaction binding the contract method 0xd2771dee.
//
// Solidity: function applyGroups(bytes _encToken, uint256 , address _to) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) ApplyGroups(_encToken []byte, arg1 *big.Int, _to common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.ApplyGroups(&_TenantFuncsBase.TransactOpts, _encToken, arg1, _to)
}

// ApplyGroups is a paid mutator transaction binding the contract method 0xd2771dee.
//
// Solidity: function applyGroups(bytes _encToken, uint256 , address _to) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) ApplyGroups(_encToken []byte, arg1 *big.Int, _to common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.ApplyGroups(&_TenantFuncsBase.TransactOpts, _encToken, arg1, _to)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) DeleteGroup(opts *bind.TransactOpts, _ident [32]byte) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "deleteGroup", _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.DeleteGroup(&_TenantFuncsBase.TransactOpts, _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.DeleteGroup(&_TenantFuncsBase.TransactOpts, _ident)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) IncrementCounter(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "incrementCounter", _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.IncrementCounter(&_TenantFuncsBase.TransactOpts, _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.IncrementCounter(&_TenantFuncsBase.TransactOpts, _ident, _ord)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) Kill() (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.Kill(&_TenantFuncsBase.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) Kill() (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.Kill(&_TenantFuncsBase.TransactOpts)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.PutMeta(&_TenantFuncsBase.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.PutMeta(&_TenantFuncsBase.TransactOpts, key, value)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseTransactor) SetAndGetBit(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "setAndGetBit", _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.SetAndGetBit(&_TenantFuncsBase.TransactOpts, _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.SetAndGetBit(&_TenantFuncsBase.TransactOpts, _ident, _ord)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TransferCreatorship(&_TenantFuncsBase.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TransferCreatorship(&_TenantFuncsBase.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TransferOwnership(&_TenantFuncsBase.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TransferOwnership(&_TenantFuncsBase.TransactOpts, newOwner)
}

// TransferToken is a paid mutator transaction binding the contract method 0xc2153d2c.
//
// Solidity: function transferToken(bytes _encAuthToken, uint256 _amount, address _to) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) TransferToken(opts *bind.TransactOpts, _encAuthToken []byte, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "transferToken", _encAuthToken, _amount, _to)
}

// TransferToken is a paid mutator transaction binding the contract method 0xc2153d2c.
//
// Solidity: function transferToken(bytes _encAuthToken, uint256 _amount, address _to) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) TransferToken(_encAuthToken []byte, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TransferToken(&_TenantFuncsBase.TransactOpts, _encAuthToken, _amount, _to)
}

// TransferToken is a paid mutator transaction binding the contract method 0xc2153d2c.
//
// Solidity: function transferToken(bytes _encAuthToken, uint256 _amount, address _to) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) TransferToken(_encAuthToken []byte, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TransferToken(&_TenantFuncsBase.TransactOpts, _encAuthToken, _amount, _to)
}

// TenantFuncsBaseApplyGroupsIterator is returned from FilterApplyGroups and is used to iterate over the raw logs and unpacked data for ApplyGroups events raised by the TenantFuncsBase contract.
type TenantFuncsBaseApplyGroupsIterator struct {
	Event *TenantFuncsBaseApplyGroups // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseApplyGroupsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseApplyGroups)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseApplyGroups)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseApplyGroupsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseApplyGroupsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseApplyGroups represents a ApplyGroups event raised by the TenantFuncsBase contract.
type TenantFuncsBaseApplyGroups struct {
	To        common.Address
	NumGroups *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterApplyGroups is a free log retrieval operation binding the contract event 0xaf51ac2c635b218e7e5205267ea152c8c9f51fc74f818c332dcf630e82a3dc3f.
//
// Solidity: event ApplyGroups(address to, uint256 numGroups)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterApplyGroups(opts *bind.FilterOpts) (*TenantFuncsBaseApplyGroupsIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "ApplyGroups")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseApplyGroupsIterator{contract: _TenantFuncsBase.contract, event: "ApplyGroups", logs: logs, sub: sub}, nil
}

// WatchApplyGroups is a free log subscription operation binding the contract event 0xaf51ac2c635b218e7e5205267ea152c8c9f51fc74f818c332dcf630e82a3dc3f.
//
// Solidity: event ApplyGroups(address to, uint256 numGroups)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchApplyGroups(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseApplyGroups) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "ApplyGroups")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseApplyGroups)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "ApplyGroups", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApplyGroups is a log parse operation binding the contract event 0xaf51ac2c635b218e7e5205267ea152c8c9f51fc74f818c332dcf630e82a3dc3f.
//
// Solidity: event ApplyGroups(address to, uint256 numGroups)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseApplyGroups(log types.Log) (*TenantFuncsBaseApplyGroups, error) {
	event := new(TenantFuncsBaseApplyGroups)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "ApplyGroups", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TenantFuncsBaseBitSetAndGetIterator is returned from FilterBitSetAndGet and is used to iterate over the raw logs and unpacked data for BitSetAndGet events raised by the TenantFuncsBase contract.
type TenantFuncsBaseBitSetAndGetIterator struct {
	Event *TenantFuncsBaseBitSetAndGet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseBitSetAndGetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseBitSetAndGet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseBitSetAndGet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseBitSetAndGetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseBitSetAndGetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseBitSetAndGet represents a BitSetAndGet event raised by the TenantFuncsBase contract.
type TenantFuncsBaseBitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBitSetAndGet is a free log retrieval operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterBitSetAndGet(opts *bind.FilterOpts) (*TenantFuncsBaseBitSetAndGetIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseBitSetAndGetIterator{contract: _TenantFuncsBase.contract, event: "BitSetAndGet", logs: logs, sub: sub}, nil
}

// WatchBitSetAndGet is a free log subscription operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchBitSetAndGet(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseBitSetAndGet) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseBitSetAndGet)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitSetAndGet is a log parse operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseBitSetAndGet(log types.Log) (*TenantFuncsBaseBitSetAndGet, error) {
	event := new(TenantFuncsBaseBitSetAndGet)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TenantFuncsBaseCounterIncrementedIterator is returned from FilterCounterIncremented and is used to iterate over the raw logs and unpacked data for CounterIncremented events raised by the TenantFuncsBase contract.
type TenantFuncsBaseCounterIncrementedIterator struct {
	Event *TenantFuncsBaseCounterIncremented // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseCounterIncrementedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseCounterIncremented)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseCounterIncremented)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseCounterIncrementedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseCounterIncrementedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseCounterIncremented represents a CounterIncremented event raised by the TenantFuncsBase contract.
type TenantFuncsBaseCounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterIncremented is a free log retrieval operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterCounterIncremented(opts *bind.FilterOpts) (*TenantFuncsBaseCounterIncrementedIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseCounterIncrementedIterator{contract: _TenantFuncsBase.contract, event: "CounterIncremented", logs: logs, sub: sub}, nil
}

// WatchCounterIncremented is a free log subscription operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchCounterIncremented(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseCounterIncremented) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseCounterIncremented)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterIncremented is a log parse operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseCounterIncremented(log types.Log) (*TenantFuncsBaseCounterIncremented, error) {
	event := new(TenantFuncsBaseCounterIncremented)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TenantFuncsBaseObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the TenantFuncsBase contract.
type TenantFuncsBaseObjectMetaChangedIterator struct {
	Event *TenantFuncsBaseObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseObjectMetaChanged represents a ObjectMetaChanged event raised by the TenantFuncsBase contract.
type TenantFuncsBaseObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*TenantFuncsBaseObjectMetaChangedIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseObjectMetaChangedIterator{contract: _TenantFuncsBase.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseObjectMetaChanged)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseObjectMetaChanged(log types.Log) (*TenantFuncsBaseObjectMetaChanged, error) {
	event := new(TenantFuncsBaseObjectMetaChanged)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TenantFuncsBaseTenantTransferIterator is returned from FilterTenantTransfer and is used to iterate over the raw logs and unpacked data for TenantTransfer events raised by the TenantFuncsBase contract.
type TenantFuncsBaseTenantTransferIterator struct {
	Event *TenantFuncsBaseTenantTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseTenantTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseTenantTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseTenantTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseTenantTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseTenantTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseTenantTransfer represents a TenantTransfer event raised by the TenantFuncsBase contract.
type TenantFuncsBaseTenantTransfer struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTenantTransfer is a free log retrieval operation binding the contract event 0x59d13df91c02dfa098820027bd861986b2712e8fa2e7e431fea189243656aebd.
//
// Solidity: event TenantTransfer(address to, uint256 amount)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterTenantTransfer(opts *bind.FilterOpts) (*TenantFuncsBaseTenantTransferIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "TenantTransfer")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseTenantTransferIterator{contract: _TenantFuncsBase.contract, event: "TenantTransfer", logs: logs, sub: sub}, nil
}

// WatchTenantTransfer is a free log subscription operation binding the contract event 0x59d13df91c02dfa098820027bd861986b2712e8fa2e7e431fea189243656aebd.
//
// Solidity: event TenantTransfer(address to, uint256 amount)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchTenantTransfer(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseTenantTransfer) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "TenantTransfer")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseTenantTransfer)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "TenantTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTenantTransfer is a log parse operation binding the contract event 0x59d13df91c02dfa098820027bd861986b2712e8fa2e7e431fea189243656aebd.
//
// Solidity: event TenantTransfer(address to, uint256 amount)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseTenantTransfer(log types.Log) (*TenantFuncsBaseTenantTransfer, error) {
	event := new(TenantFuncsBaseTenantTransfer)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "TenantTransfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TenantFuncsBaseWordGroupDeletedIterator is returned from FilterWordGroupDeleted and is used to iterate over the raw logs and unpacked data for WordGroupDeleted events raised by the TenantFuncsBase contract.
type TenantFuncsBaseWordGroupDeletedIterator struct {
	Event *TenantFuncsBaseWordGroupDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseWordGroupDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseWordGroupDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseWordGroupDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseWordGroupDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseWordGroupDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseWordGroupDeleted represents a WordGroupDeleted event raised by the TenantFuncsBase contract.
type TenantFuncsBaseWordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWordGroupDeleted is a free log retrieval operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterWordGroupDeleted(opts *bind.FilterOpts) (*TenantFuncsBaseWordGroupDeletedIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseWordGroupDeletedIterator{contract: _TenantFuncsBase.contract, event: "WordGroupDeleted", logs: logs, sub: sub}, nil
}

// WatchWordGroupDeleted is a free log subscription operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchWordGroupDeleted(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseWordGroupDeleted) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseWordGroupDeleted)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWordGroupDeleted is a log parse operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseWordGroupDeleted(log types.Log) (*TenantFuncsBaseWordGroupDeleted, error) {
	event := new(TenantFuncsBaseWordGroupDeleted)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TransactableABI is the input ABI used to generate the binding from.
const TransactableABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_guarantor\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// TransactableFuncSigs maps the 4-byte function signature to its string representation.
var TransactableFuncSigs = map[string]string{
	"508ad278": "execute(address,uint8,bytes32,bytes32,address,uint256,uint256)",
	"f50b2efe": "validateTimestamp(uint256)",
	"763d5ee6": "validateTransaction(uint8,bytes32,bytes32,address,uint256,uint256)",
}

// Transactable is an auto generated Go binding around an Ethereum contract.
type Transactable struct {
	TransactableCaller     // Read-only binding to the contract
	TransactableTransactor // Write-only binding to the contract
	TransactableFilterer   // Log filterer for contract events
}

// TransactableCaller is an auto generated read-only Go binding around an Ethereum contract.
type TransactableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransactableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TransactableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransactableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TransactableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransactableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TransactableSession struct {
	Contract     *Transactable     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TransactableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TransactableCallerSession struct {
	Contract *TransactableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// TransactableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TransactableTransactorSession struct {
	Contract     *TransactableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TransactableRaw is an auto generated low-level Go binding around an Ethereum contract.
type TransactableRaw struct {
	Contract *Transactable // Generic contract binding to access the raw methods on
}

// TransactableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TransactableCallerRaw struct {
	Contract *TransactableCaller // Generic read-only contract binding to access the raw methods on
}

// TransactableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TransactableTransactorRaw struct {
	Contract *TransactableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTransactable creates a new instance of Transactable, bound to a specific deployed contract.
func NewTransactable(address common.Address, backend bind.ContractBackend) (*Transactable, error) {
	contract, err := bindTransactable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Transactable{TransactableCaller: TransactableCaller{contract: contract}, TransactableTransactor: TransactableTransactor{contract: contract}, TransactableFilterer: TransactableFilterer{contract: contract}}, nil
}

// NewTransactableCaller creates a new read-only instance of Transactable, bound to a specific deployed contract.
func NewTransactableCaller(address common.Address, caller bind.ContractCaller) (*TransactableCaller, error) {
	contract, err := bindTransactable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TransactableCaller{contract: contract}, nil
}

// NewTransactableTransactor creates a new write-only instance of Transactable, bound to a specific deployed contract.
func NewTransactableTransactor(address common.Address, transactor bind.ContractTransactor) (*TransactableTransactor, error) {
	contract, err := bindTransactable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TransactableTransactor{contract: contract}, nil
}

// NewTransactableFilterer creates a new log filterer instance of Transactable, bound to a specific deployed contract.
func NewTransactableFilterer(address common.Address, filterer bind.ContractFilterer) (*TransactableFilterer, error) {
	contract, err := bindTransactable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TransactableFilterer{contract: contract}, nil
}

// bindTransactable binds a generic wrapper to an already deployed contract.
func bindTransactable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TransactableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transactable *TransactableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Transactable.Contract.TransactableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transactable *TransactableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transactable.Contract.TransactableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transactable *TransactableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transactable.Contract.TransactableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transactable *TransactableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Transactable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transactable *TransactableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transactable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transactable *TransactableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transactable.Contract.contract.Transact(opts, method, params...)
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool)
func (_Transactable *TransactableCaller) ValidateTimestamp(opts *bind.CallOpts, _ts *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Transactable.contract.Call(opts, out, "validateTimestamp", _ts)
	return *ret0, err
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool)
func (_Transactable *TransactableSession) ValidateTimestamp(_ts *big.Int) (bool, error) {
	return _Transactable.Contract.ValidateTimestamp(&_Transactable.CallOpts, _ts)
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool)
func (_Transactable *TransactableCallerSession) ValidateTimestamp(_ts *big.Int) (bool, error) {
	return _Transactable.Contract.ValidateTimestamp(&_Transactable.CallOpts, _ts)
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_Transactable *TransactableCaller) ValidateTransaction(opts *bind.CallOpts, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Transactable.contract.Call(opts, out, "validateTransaction", _v, _r, _s, _dest, _value, _ts)
	return *ret0, err
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_Transactable *TransactableSession) ValidateTransaction(_v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	return _Transactable.Contract.ValidateTransaction(&_Transactable.CallOpts, _v, _r, _s, _dest, _value, _ts)
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_Transactable *TransactableCallerSession) ValidateTransaction(_v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	return _Transactable.Contract.ValidateTransaction(&_Transactable.CallOpts, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_Transactable *TransactableTransactor) Execute(opts *bind.TransactOpts, _guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _Transactable.contract.Transact(opts, "execute", _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_Transactable *TransactableSession) Execute(_guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _Transactable.Contract.Execute(&_Transactable.TransactOpts, _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_Transactable *TransactableTransactorSession) Execute(_guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _Transactable.Contract.Execute(&_Transactable.TransactOpts, _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// UserSpaceABI is the input ABI used to generate the binding from.
const UserSpaceABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"createUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// UserSpaceFuncSigs maps the 4-byte function signature to its string representation.
var UserSpaceFuncSigs = map[string]string{
	"e7cf0c66": "createUserWallet(address)",
	"63e6ffdd": "userWallets(address)",
	"54fd4d50": "version()",
}

// UserSpaceBin is the compiled bytecode used for deploying new contracts.
var UserSpaceBin = "0x60806040527f55736572537061636532303139303530363135353330304d4c0000000000000060005534801561003457600080fd5b5061016b806100446000396000f3fe608060405234801561001057600080fd5b506004361061005d577c0100000000000000000000000000000000000000000000000000000000600035046354fd4d50811461006257806363e6ffdd1461007c578063e7cf0c66146100d8575b600080fd5b61006a61010b565b60408051918252519081900360200190f35b6100af6004803603602081101561009257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610111565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100af600480360360208110156100ee57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610139565b60005481565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60008080fdfea165627a7a723058200d0dcbaa8dd8bad6509fb1cf56651d1e18be36cf3c79c4479157880e540399650029"

// DeployUserSpace deploys a new Ethereum contract, binding an instance of UserSpace to it.
func DeployUserSpace(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UserSpace, error) {
	parsed, err := abi.JSON(strings.NewReader(UserSpaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(UserSpaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UserSpace{UserSpaceCaller: UserSpaceCaller{contract: contract}, UserSpaceTransactor: UserSpaceTransactor{contract: contract}, UserSpaceFilterer: UserSpaceFilterer{contract: contract}}, nil
}

// UserSpace is an auto generated Go binding around an Ethereum contract.
type UserSpace struct {
	UserSpaceCaller     // Read-only binding to the contract
	UserSpaceTransactor // Write-only binding to the contract
	UserSpaceFilterer   // Log filterer for contract events
}

// UserSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type UserSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UserSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UserSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UserSpaceSession struct {
	Contract     *UserSpace        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UserSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UserSpaceCallerSession struct {
	Contract *UserSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// UserSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UserSpaceTransactorSession struct {
	Contract     *UserSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// UserSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type UserSpaceRaw struct {
	Contract *UserSpace // Generic contract binding to access the raw methods on
}

// UserSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UserSpaceCallerRaw struct {
	Contract *UserSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// UserSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UserSpaceTransactorRaw struct {
	Contract *UserSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUserSpace creates a new instance of UserSpace, bound to a specific deployed contract.
func NewUserSpace(address common.Address, backend bind.ContractBackend) (*UserSpace, error) {
	contract, err := bindUserSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UserSpace{UserSpaceCaller: UserSpaceCaller{contract: contract}, UserSpaceTransactor: UserSpaceTransactor{contract: contract}, UserSpaceFilterer: UserSpaceFilterer{contract: contract}}, nil
}

// NewUserSpaceCaller creates a new read-only instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceCaller(address common.Address, caller bind.ContractCaller) (*UserSpaceCaller, error) {
	contract, err := bindUserSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UserSpaceCaller{contract: contract}, nil
}

// NewUserSpaceTransactor creates a new write-only instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*UserSpaceTransactor, error) {
	contract, err := bindUserSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UserSpaceTransactor{contract: contract}, nil
}

// NewUserSpaceFilterer creates a new log filterer instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*UserSpaceFilterer, error) {
	contract, err := bindUserSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UserSpaceFilterer{contract: contract}, nil
}

// bindUserSpace binds a generic wrapper to an already deployed contract.
func bindUserSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UserSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserSpace *UserSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UserSpace.Contract.UserSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserSpace *UserSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserSpace.Contract.UserSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserSpace *UserSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserSpace.Contract.UserSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserSpace *UserSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UserSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserSpace *UserSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserSpace *UserSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserSpace.Contract.contract.Transact(opts, method, params...)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address ) constant returns(address)
func (_UserSpace *UserSpaceCaller) UserWallets(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _UserSpace.contract.Call(opts, out, "userWallets", arg0)
	return *ret0, err
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address ) constant returns(address)
func (_UserSpace *UserSpaceSession) UserWallets(arg0 common.Address) (common.Address, error) {
	return _UserSpace.Contract.UserWallets(&_UserSpace.CallOpts, arg0)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address ) constant returns(address)
func (_UserSpace *UserSpaceCallerSession) UserWallets(arg0 common.Address) (common.Address, error) {
	return _UserSpace.Contract.UserWallets(&_UserSpace.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_UserSpace *UserSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _UserSpace.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_UserSpace *UserSpaceSession) Version() ([32]byte, error) {
	return _UserSpace.Contract.Version(&_UserSpace.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_UserSpace *UserSpaceCallerSession) Version() ([32]byte, error) {
	return _UserSpace.Contract.Version(&_UserSpace.CallOpts)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address ) returns(address)
func (_UserSpace *UserSpaceTransactor) CreateUserWallet(opts *bind.TransactOpts, arg0 common.Address) (*types.Transaction, error) {
	return _UserSpace.contract.Transact(opts, "createUserWallet", arg0)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address ) returns(address)
func (_UserSpace *UserSpaceSession) CreateUserWallet(arg0 common.Address) (*types.Transaction, error) {
	return _UserSpace.Contract.CreateUserWallet(&_UserSpace.TransactOpts, arg0)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address ) returns(address)
func (_UserSpace *UserSpaceTransactorSession) CreateUserWallet(arg0 common.Address) (*types.Transaction, error) {
	return _UserSpace.Contract.CreateUserWallet(&_UserSpace.TransactOpts, arg0)
}

// UtilsABI is the input ABI used to generate the binding from.
const UtilsABI = "[]"

// UtilsBin is the compiled bytecode used for deploying new contracts.
var UtilsBin = "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820101df3c2ec60bea9c331d2808b912a58e1d22b925204180793415532a27e5ae50029"

// DeployUtils deploys a new Ethereum contract, binding an instance of Utils to it.
func DeployUtils(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Utils, error) {
	parsed, err := abi.JSON(strings.NewReader(UtilsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(UtilsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Utils{UtilsCaller: UtilsCaller{contract: contract}, UtilsTransactor: UtilsTransactor{contract: contract}, UtilsFilterer: UtilsFilterer{contract: contract}}, nil
}

// Utils is an auto generated Go binding around an Ethereum contract.
type Utils struct {
	UtilsCaller     // Read-only binding to the contract
	UtilsTransactor // Write-only binding to the contract
	UtilsFilterer   // Log filterer for contract events
}

// UtilsCaller is an auto generated read-only Go binding around an Ethereum contract.
type UtilsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UtilsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UtilsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UtilsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UtilsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UtilsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UtilsSession struct {
	Contract     *Utils            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UtilsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UtilsCallerSession struct {
	Contract *UtilsCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// UtilsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UtilsTransactorSession struct {
	Contract     *UtilsTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UtilsRaw is an auto generated low-level Go binding around an Ethereum contract.
type UtilsRaw struct {
	Contract *Utils // Generic contract binding to access the raw methods on
}

// UtilsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UtilsCallerRaw struct {
	Contract *UtilsCaller // Generic read-only contract binding to access the raw methods on
}

// UtilsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UtilsTransactorRaw struct {
	Contract *UtilsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUtils creates a new instance of Utils, bound to a specific deployed contract.
func NewUtils(address common.Address, backend bind.ContractBackend) (*Utils, error) {
	contract, err := bindUtils(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Utils{UtilsCaller: UtilsCaller{contract: contract}, UtilsTransactor: UtilsTransactor{contract: contract}, UtilsFilterer: UtilsFilterer{contract: contract}}, nil
}

// NewUtilsCaller creates a new read-only instance of Utils, bound to a specific deployed contract.
func NewUtilsCaller(address common.Address, caller bind.ContractCaller) (*UtilsCaller, error) {
	contract, err := bindUtils(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UtilsCaller{contract: contract}, nil
}

// NewUtilsTransactor creates a new write-only instance of Utils, bound to a specific deployed contract.
func NewUtilsTransactor(address common.Address, transactor bind.ContractTransactor) (*UtilsTransactor, error) {
	contract, err := bindUtils(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UtilsTransactor{contract: contract}, nil
}

// NewUtilsFilterer creates a new log filterer instance of Utils, bound to a specific deployed contract.
func NewUtilsFilterer(address common.Address, filterer bind.ContractFilterer) (*UtilsFilterer, error) {
	contract, err := bindUtils(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UtilsFilterer{contract: contract}, nil
}

// bindUtils binds a generic wrapper to an already deployed contract.
func bindUtils(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UtilsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Utils *UtilsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Utils.Contract.UtilsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Utils *UtilsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Utils.Contract.UtilsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Utils *UtilsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Utils.Contract.UtilsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Utils *UtilsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Utils.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Utils *UtilsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Utils.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Utils *UtilsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Utils.Contract.contract.Transact(opts, method, params...)
}

// VerifierABI is the input ABI used to generate the binding from.
const VerifierABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"isSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"recoverAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// VerifierFuncSigs maps the 4-byte function signature to its string representation.
var VerifierFuncSigs = map[string]string{
	"8677ebe8": "isSigned(address,bytes32,uint8,bytes32,bytes32)",
	"e5df669f": "recoverAddr(bytes32,uint8,bytes32,bytes32)",
}

// VerifierBin is the compiled bytecode used for deploying new contracts.
var VerifierBin = "0x608060405234801561001057600080fd5b5061024e806100206000396000f3fe608060405234801561001057600080fd5b5060043610610052577c010000000000000000000000000000000000000000000000000000000060003504638677ebe88114610057578063e5df669f146100b9575b600080fd5b6100a5600480360360a081101561006d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060208101359060ff6040820135169060608101359060800135610114565b604080519115158252519081900360200190f35b6100eb600480360360808110156100cf57600080fd5b5080359060ff60208201351690604081013590606001356101b6565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008573ffffffffffffffffffffffffffffffffffffffff1660018686868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561018a573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff1614905095945050505050565b604080516000808252602080830180855288905260ff87168385015260608301869052608083018590529251909260019260a080820193601f1981019281900390910190855afa15801561020e573d6000803e3d6000fd5b5050604051601f190151969550505050505056fea165627a7a72305820d3ac2200784c96a74a533c965269ddfb58f845a6922db675025e08ef7ab9a25b0029"

// DeployVerifier deploys a new Ethereum contract, binding an instance of Verifier to it.
func DeployVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Verifier, error) {
	parsed, err := abi.JSON(strings.NewReader(VerifierABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(VerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// Verifier is an auto generated Go binding around an Ethereum contract.
type Verifier struct {
	VerifierCaller     // Read-only binding to the contract
	VerifierTransactor // Write-only binding to the contract
	VerifierFilterer   // Log filterer for contract events
}

// VerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type VerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VerifierSession struct {
	Contract     *Verifier         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VerifierCallerSession struct {
	Contract *VerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// VerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VerifierTransactorSession struct {
	Contract     *VerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// VerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type VerifierRaw struct {
	Contract *Verifier // Generic contract binding to access the raw methods on
}

// VerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VerifierCallerRaw struct {
	Contract *VerifierCaller // Generic read-only contract binding to access the raw methods on
}

// VerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VerifierTransactorRaw struct {
	Contract *VerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVerifier creates a new instance of Verifier, bound to a specific deployed contract.
func NewVerifier(address common.Address, backend bind.ContractBackend) (*Verifier, error) {
	contract, err := bindVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// NewVerifierCaller creates a new read-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierCaller(address common.Address, caller bind.ContractCaller) (*VerifierCaller, error) {
	contract, err := bindVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierCaller{contract: contract}, nil
}

// NewVerifierTransactor creates a new write-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*VerifierTransactor, error) {
	contract, err := bindVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierTransactor{contract: contract}, nil
}

// NewVerifierFilterer creates a new log filterer instance of Verifier, bound to a specific deployed contract.
func NewVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*VerifierFilterer, error) {
	contract, err := bindVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VerifierFilterer{contract: contract}, nil
}

// bindVerifier binds a generic wrapper to an already deployed contract.
func bindVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VerifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.VerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transact(opts, method, params...)
}

// IsSigned is a free data retrieval call binding the contract method 0x8677ebe8.
//
// Solidity: function isSigned(address _addr, bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) constant returns(bool)
func (_Verifier *VerifierCaller) IsSigned(opts *bind.CallOpts, _addr common.Address, msgHash [32]byte, v uint8, r [32]byte, s [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Verifier.contract.Call(opts, out, "isSigned", _addr, msgHash, v, r, s)
	return *ret0, err
}

// IsSigned is a free data retrieval call binding the contract method 0x8677ebe8.
//
// Solidity: function isSigned(address _addr, bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) constant returns(bool)
func (_Verifier *VerifierSession) IsSigned(_addr common.Address, msgHash [32]byte, v uint8, r [32]byte, s [32]byte) (bool, error) {
	return _Verifier.Contract.IsSigned(&_Verifier.CallOpts, _addr, msgHash, v, r, s)
}

// IsSigned is a free data retrieval call binding the contract method 0x8677ebe8.
//
// Solidity: function isSigned(address _addr, bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) constant returns(bool)
func (_Verifier *VerifierCallerSession) IsSigned(_addr common.Address, msgHash [32]byte, v uint8, r [32]byte, s [32]byte) (bool, error) {
	return _Verifier.Contract.IsSigned(&_Verifier.CallOpts, _addr, msgHash, v, r, s)
}

// RecoverAddr is a free data retrieval call binding the contract method 0xe5df669f.
//
// Solidity: function recoverAddr(bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) constant returns(address)
func (_Verifier *VerifierCaller) RecoverAddr(opts *bind.CallOpts, msgHash [32]byte, v uint8, r [32]byte, s [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Verifier.contract.Call(opts, out, "recoverAddr", msgHash, v, r, s)
	return *ret0, err
}

// RecoverAddr is a free data retrieval call binding the contract method 0xe5df669f.
//
// Solidity: function recoverAddr(bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) constant returns(address)
func (_Verifier *VerifierSession) RecoverAddr(msgHash [32]byte, v uint8, r [32]byte, s [32]byte) (common.Address, error) {
	return _Verifier.Contract.RecoverAddr(&_Verifier.CallOpts, msgHash, v, r, s)
}

// RecoverAddr is a free data retrieval call binding the contract method 0xe5df669f.
//
// Solidity: function recoverAddr(bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) constant returns(address)
func (_Verifier *VerifierCallerSession) RecoverAddr(msgHash [32]byte, v uint8, r [32]byte, s [32]byte) (common.Address, error) {
	return _Verifier.Contract.RecoverAddr(&_Verifier.CallOpts, msgHash, v, r, s)
}

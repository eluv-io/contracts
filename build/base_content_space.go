// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AccessIndexorABI is the input ABI used to generate the binding from.
const AccessIndexorABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"dbgAddress\",\"type\":\"event\"}]"

// AccessIndexorFuncSigs maps the 4-byte function signature to its string representation.
var AccessIndexorFuncSigs = map[string]string{
	"18689733": "ACCESS_CONFIRMED()",
	"8232f3f1": "ACCESS_NONE()",
	"479a0c51": "ACCESS_TENTATIVE()",
	"091600e6": "CATEGORY_CONTENT_OBJECT()",
	"68a0469a": "CATEGORY_CONTENT_TYPE()",
	"6373a411": "CATEGORY_CONTRACT()",
	"12915a30": "CATEGORY_GROUP()",
	"16aed232": "CATEGORY_LIBRARY()",
	"d1aeb651": "TYPE_ACCESS()",
	"5d97b6c2": "TYPE_EDIT()",
	"96eba03d": "TYPE_SEE()",
	"30e66949": "accessGroups()",
	"15c0bac1": "checkAccessGroupRights(address,uint8)",
	"5faecb76": "checkContentObjectRights(address,uint8)",
	"fe538c5a": "checkContentTypeRights(address,uint8)",
	"a864dfa5": "checkContractRights(address,uint8)",
	"a00b38c4": "checkDirectRights(uint8,address,uint8)",
	"6813b6d1": "checkLibraryRights(address,uint8)",
	"7fb52f1a": "checkRights(uint8,address,uint8)",
	"d30f8cd0": "cleanUpAccessGroups()",
	"2fa5c842": "cleanUpAll()",
	"048bd529": "cleanUpContentObjects()",
	"85e0a200": "cleanUpContentTypes()",
	"92297d7b": "cleanUpLibraries()",
	"a980892d": "contentObjects()",
	"af570c04": "contentSpace()",
	"9f46133e": "contentTypes()",
	"7709bc78": "contractExists(address)",
	"6c0f79b6": "contracts()",
	"02d05d3f": "creator()",
	"2d474cbd": "getAccessGroup(uint256)",
	"304f4a7b": "getAccessGroupRights(address)",
	"0dc10d3f": "getAccessGroupsLength()",
	"cf8a7503": "getContentObject(uint256)",
	"69881c0c": "getContentObjectRights(address)",
	"ebe9314e": "getContentObjectsLength()",
	"aa3f6952": "getContentType(uint256)",
	"a4081d62": "getContentTypeRights(address)",
	"5c1d3059": "getContentTypesLength()",
	"6ebc8c86": "getContract(uint256)",
	"08d865d7": "getContractRights(address)",
	"fccc134f": "getContractsLength()",
	"cb86806d": "getLibrariesLength()",
	"d15d62a7": "getLibrary(uint256)",
	"fb52222c": "getLibraryRights(address)",
	"42e7ba7b": "hasManagerAccess(address)",
	"41c0e1b5": "kill()",
	"c4b1978d": "libraries()",
	"8da5cb5b": "owner()",
	"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
	"b8ff1dba": "setAccessRights()",
	"3def5140": "setContentObjectRights(address,uint8,uint8)",
	"055af48f": "setContentSpace(address)",
	"8635adb5": "setContentTypeRights(address,uint8,uint8)",
	"224dcba0": "setContractRights(address,uint8,uint8)",
	"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
}

// AccessIndexorBin is the compiled bytecode used for deploying new contracts.
var AccessIndexorBin = "0x7f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f416363657373496e6465786f7232303139303830313134313030304d4c00000060045560058054600160ff19909116811761ff0019166102001762ff00001916620300001763ff000000191663040000001764ff0000000019166405000000001790915560e06040526080908152600a60a052606460c052620000ac9060069060036200013a565b506001805432600160a060020a031991821681179092556002805490911690911790556005546007805462010000830460ff90811660ff1992831617909255600f805461010085048416908316179055600b805483851690831617905560138054630100000085048416908316179055601780546401000000009094049092169216919091179055620001f8565b600183019183908215620001c25791602002820160005b838211156200019157835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000151565b8015620001c05782816101000a81549060ff021916905560010160208160000104928301926001030262000191565b505b50620001d0929150620001d4565b5090565b620001f591905b80821115620001d057805460ff19168155600101620001db565b90565b611a7380620002086000396000f3006080604052600436106102a55763ffffffff60e060020a60003504166302d05d3f81146102a7578063048bd529146102d8578063055af48f146102ff57806308d865d714610320578063091600e6146103575780630dc10d3f1461036c57806312915a301461038157806315c0bac11461039657806316aed232146103d157806318689733146103e6578063224dcba0146103fb5780632d474cbd146104285780632fa5c84214610440578063304f4a7b1461048057806330e66949146104a15780633def5140146104d357806341c0e1b51461050057806342e7ba7b14610515578063479a0c511461053657806354fd4d501461054b5780635c1d3059146105605780635d97b6c2146103e65780635faecb76146105755780636373a4111461059c5780636813b6d1146105b157806368a0469a146105d857806369881c0c146105ed5780636c0f79b61461060e5780636d2e4b1b146106235780636ebc8c86146106445780637709bc781461065c5780637cbb7bf21461067d5780637fb52f1a146106aa5780638232f3f1146106d857806385e0a200146106ed5780638635adb5146107025780638da5cb5b1461072f57806392297d7b1461074457806396eba03d146106d85780639f46133e14610759578063a00b38c41461076e578063a4081d621461079c578063a864dfa5146107bd578063a980892d146107e4578063aa3f6952146107f9578063af570c0414610811578063b8ff1dba14610826578063c4b1978d1461083b578063cb86806d14610850578063cf8a750314610865578063d15d62a71461087d578063d1aeb65114610536578063d30f8cd014610895578063ebe9314e146108aa578063f17bda91146108bf578063f2fde38b146108ec578063fb52222c1461090d578063fccc134f1461092e578063fe538c5a14610943575b005b3480156102b357600080fd5b506102bc61096a565b60408051600160a060020a039092168252519081900360200190f35b3480156102e457600080fd5b506102ed610979565b60408051918252519081900360200190f35b34801561030b57600080fd5b506102a5600160a060020a036004351661098a565b34801561032c57600080fd5b50610341600160a060020a03600435166109da565b6040805160ff9092168252519081900360200190f35b34801561036357600080fd5b506103416109f8565b34801561037857600080fd5b506102ed610a01565b34801561038d57600080fd5b50610341610a07565b3480156103a257600080fd5b506103bd600160a060020a036004351660ff60243516610a15565b604080519115158252519081900360200190f35b3480156103dd57600080fd5b50610341610a35565b3480156103f257600080fd5b50610341610a44565b34801561040757600080fd5b506102a5600160a060020a036004351660ff60243581169060443516610a49565b34801561043457600080fd5b506102bc600435610a5b565b34801561044c57600080fd5b50610455610a88565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561048c57600080fd5b50610341600160a060020a0360043516610ad3565b3480156104ad57600080fd5b506104b6610af1565b6040805160ff909316835260208301919091528051918290030190f35b3480156104df57600080fd5b506102a5600160a060020a036004351660ff60243581169060443516610b00565b34801561050c57600080fd5b506102a5610b0d565b34801561052157600080fd5b506103bd600160a060020a0360043516610b49565b34801561054257600080fd5b50610341610b5d565b34801561055757600080fd5b506102ed610b62565b34801561056c57600080fd5b506102ed610b68565b34801561058157600080fd5b506103bd600160a060020a036004351660ff60243516610b6e565b3480156105a857600080fd5b50610341610b82565b3480156105bd57600080fd5b506103bd600160a060020a036004351660ff60243516610b93565b3480156105e457600080fd5b50610341610bad565b3480156105f957600080fd5b50610341600160a060020a0360043516610bbd565b34801561061a57600080fd5b506104b6610bdb565b34801561062f57600080fd5b506102a5600160a060020a0360043516610bea565b34801561065057600080fd5b506102bc600435610c38565b34801561066857600080fd5b506103bd600160a060020a0360043516610c4a565b34801561068957600080fd5b506102a5600160a060020a036004351660ff60243581169060443516610c52565b3480156106b657600080fd5b506103bd60ff600435811690600160a060020a03602435169060443516610c5f565b3480156106e457600080fd5b50610341610e3a565b3480156106f957600080fd5b506102ed610e3f565b34801561070e57600080fd5b506102a5600160a060020a036004351660ff60243581169060443516610e4b565b34801561073b57600080fd5b506102bc610e58565b34801561075057600080fd5b506102ed610e67565b34801561076557600080fd5b506104b6610e73565b34801561077a57600080fd5b506103bd60ff600435811690600160a060020a03602435169060443516610e82565b3480156107a857600080fd5b50610341600160a060020a0360043516610f32565b3480156107c957600080fd5b506103bd600160a060020a036004351660ff60243516610f50565b3480156107f057600080fd5b506104b6610f6c565b34801561080557600080fd5b506102bc600435610f7b565b34801561081d57600080fd5b506102bc610f8d565b34801561083257600080fd5b506102a5610f9c565b34801561084757600080fd5b506104b6611086565b34801561085c57600080fd5b506102ed611095565b34801561087157600080fd5b506102bc60043561109b565b34801561088957600080fd5b506102bc6004356110ad565b3480156108a157600080fd5b506102ed6110bf565b3480156108b657600080fd5b506102ed6110cb565b3480156108cb57600080fd5b506102a5600160a060020a036004351660ff602435811690604435166110d1565b3480156108f857600080fd5b506102a5600160a060020a03600435166110de565b34801561091957600080fd5b50610341600160a060020a0360043516611143565b34801561093a57600080fd5b506102ed611161565b34801561094f57600080fd5b506103bd600160a060020a036004351660ff60243516611167565b600154600160a060020a031681565b6000610985600b611182565b905090565b600254600160a060020a03163214806109ad5750600254600160a060020a031633145b15156109b857600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a031660009081526018602052604090205460ff1690565b60055460ff1681565b60125490565b600554610100900460ff1681565b600554600090610a2e90610100900460ff168484610c5f565b9392505050565b60055462010000900460ff1681565b600281565b610a5660178484846113ef565b505050565b601180546000919083908110610a6d57fe5b600091825260209091200154600160a060020a031692915050565b6000806000806000610a9a6007611182565b610aa4600f611182565b610aae600b611182565b610ab86013611182565b610ac26017611182565b945094509450945094509091929394565b600160a060020a031660009081526010602052604090205460ff1690565b600f5460125460ff9091169082565b610a56600b8484846113ef565b600254600160a060020a0316321480610b305750600254600160a060020a031633145b1515610b3b57600080fd5b600254600160a060020a0316ff5b600254600160a060020a0390811691161490565b600181565b60045481565b60165490565b600554600090610a2e9060ff168484610c5f565b600554640100000000900460ff1681565b600554600090610a2e9062010000900460ff168484610c5f565b6005546301000000900460ff1681565b600160a060020a03166000908152600c602052604090205460ff1690565b601754601a5460ff9091169082565b600154600160a060020a03163214610c0157600080fd5b600160a060020a0381161515610c1657600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b601980546000919083908110610a6d57fe5b6000903b1190565b610a5660078484846113ef565b600080600080600080879450600260009054906101000a9004600160a060020a0316600160a060020a031685600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610cc857600080fd5b505af1158015610cdc573d6000803e3d6000fd5b505050506040513d6020811015610cf257600080fd5b5051600160a060020a03161415610d0c5760019550610e2e565b610d17898989610e82565b935060018415151415610d2d5760019550610e2e565b5060005b601254811015610e29576011805482908110610d4957fe5b600091825260209091200154600160a060020a031691508115610e2157604080517fa00b38c400000000000000000000000000000000000000000000000000000000815260ff808c166004830152600160a060020a038b81166024840152908a166044830152915193945084939184169163a00b38c4916064808201926020929091908290030181600087803b158015610de257600080fd5b505af1158015610df6573d6000803e3d6000fd5b505050506040513d6020811015610e0c57600080fd5b5051151560011415610e215760019550610e2e565b600101610d31565b600095505b50505050509392505050565b600081565b60006109856013611182565b610a5660138484846113ef565b600254600160a060020a031681565b60006109856007611182565b60135460165460ff9091169082565b60055460009060ff85811691161415610ea857610ea1600b84846117f8565b9050610a2e565b60055460ff858116610100909204161415610ec957610ea1600f84846117f8565b60055460ff85811662010000909204161415610eeb57610ea1600784846117f8565b60055460ff858116640100000000909204161415610f0f57610ea1601784846117f8565b60055460ff8581166301000000909204161415610a2e57610ea1601384846117f8565b600160a060020a031660009081526014602052604090205460ff1690565b600554600090610a2e90640100000000900460ff168484610c5f565b600b54600e5460ff9091169082565b601580546000919083908110610a6d57fe5b600354600160a060020a031681565b600080610fa7611a28565b336000818152600c602081815260408084208054600a60ff8083169182068116808b5260648306819003821683038190038216958b018690526006546101009004821660020282168b8801819052988a9052969095529590940190910191821660ff199093168317905592955090935015801590611026575060ff8316155b1561103657611036600b8561184c565b60408051308152600160a060020a038616602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a150505050565b600754600a5460ff9091169082565b600a5490565b600d80546000919083908110610a6d57fe5b600980546000919083908110610a6d57fe5b6000610985600f611182565b600e5490565b610a56600f8484846113ef565b600254600160a060020a03163214806111015750600254600160a060020a031633145b151561110c57600080fd5b600160a060020a038116151561112157600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a031660009081526008602052604090205460ff1690565b601a5490565b600554600090610a2e906301000000900460ff168484610c5f565b600080805b83600301548110156113e8576111c184600201828154811015156111a757fe5b600091825260209091200154600160a060020a0316610c4a565b151561134b577fa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b2608185600201838154811015156111fa57fe5b600091825260209182902001546040805192830193909352600160a060020a03168183015260608082526004908201527f6465616400000000000000000000000000000000000000000000000000000000608082015290519081900360a00190a16002840180548290811061126b57fe5b60009182526020909120018054600160a060020a031916905560038401546001929092019160001901811461133a578360020160018560030154038154811015156112b257fe5b600091825260209091200154600285018054600160a060020a0390921691839081106112da57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555083600201600185600301540381548110151561132057fe5b60009182526020909120018054600160a060020a03191690555b6003840180546000190190556113e3565b7fa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b26081856002018381548110151561137e57fe5b600091825260209182902001546040805192830193909352600160a060020a03168183015260608082526005908201527f616c697665000000000000000000000000000000000000000000000000000000608082015290519081900360a00190a16001015b611187565b5092915050565b600080600080600080611400611a28565b600080600061140e32610b49565b600354604080517f63e6ffdd0000000000000000000000000000000000000000000000000000000081523260048201529051929c5060009b50600160a060020a03909116995089916363e6ffdd9160248082019260209290919082900301818f87803b15801561147d57600080fd5b505af1158015611491573d6000803e3d6000fd5b505050506040513d60208110156114a757600080fd5b8101908080519060200190929190505050965086955085600160a060020a0316637fb52f1a8f60000160009054906101000a900460ff168f60026040518463ffffffff1660e060020a028152600401808460ff1660ff16815260200183600160a060020a0316600160a060020a031681526020018260ff1660ff1681526020019350505050602060405180830381600087803b15801561154657600080fd5b505af115801561155a573d6000803e3d6000fd5b505050506040513d602081101561157057600080fd5b810190808051906020019092919050505098508d60010160008e600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a900460ff169450600a8560ff168115156115c957fe5b0660ff90811680865260648783160681900382166020870181905287030381166040860152600093508b92508216158015611608575089806116085750885b1561161257600192505b60ff8b16158015906116215750895b8015611643575060018460ff8e166003811061163957fe5b602002015160ff16145b156116515760019250600291505b60ff8b16158015906116605750885b8015611683575060028460ff8e166003811061167857fe5b602002015160ff1614155b156116915760019250600191505b60ff8b16158015906116a05750895b80156116a95750885b156116b75760019250600291505b8215156116c357600080fd5b600660ff8d16600381106116d357fe5b602081049091015460ff601f9092166101000a9004811683029085908e16600381106116fb57fe5b60ff909216602092909202015283600260200201518460016020020151856000602002015101019050808e60010160008f600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508060ff16600014158015611779575060ff8516155b15611788576117888e8e61184c565b60ff8116151561179e5761179c8e8e6118e3565b505b60408051308152600160a060020a038f16602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a15050505050505050505050505050565b600160a060020a038216600090815260018401602052604081205460ff9081169060069084166003811061182857fe5b60208104919091015460ff601f9092166101000a9004811691161015949350505050565b6002820154600383015410156118a5578082600201836003015481548110151561187257fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055506118d6565b60028201805460018101825560009182526020909120018054600160a060020a031916600160a060020a0383161790555b5060030180546001019055565b6000805b8360030154811015611a1e5782600160a060020a0316846002018281548110151561190e57fe5b600091825260209091200154600160a060020a03161415611a16576002840180548290811061193957fe5b60009182526020909120018054600160a060020a03191690556003840154600019018114611a015783600201600185600301540381548110151561197957fe5b600091825260209091200154600285018054600160a060020a0390921691839081106119a157fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055508360020160018560030154038154811015156119e757fe5b60009182526020909120018054600160a060020a03191690555b600384018054600019019055600191506113e8565b6001016118e7565b5060009392505050565b60606040519081016040528060039060208202803883395091929150505600a165627a7a7230582095e9a04d5dfa0a7a8a4eeddffbc2ccea30538c13858f534b816f4243e49e065e0029"

// DeployAccessIndexor deploys a new Ethereum contract, binding an instance of AccessIndexor to it.
func DeployAccessIndexor(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccessIndexor, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessIndexorABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AccessIndexorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessIndexor{AccessIndexorCaller: AccessIndexorCaller{contract: contract}, AccessIndexorTransactor: AccessIndexorTransactor{contract: contract}, AccessIndexorFilterer: AccessIndexorFilterer{contract: contract}}, nil
}

// AccessIndexor is an auto generated Go binding around an Ethereum contract.
type AccessIndexor struct {
	AccessIndexorCaller     // Read-only binding to the contract
	AccessIndexorTransactor // Write-only binding to the contract
	AccessIndexorFilterer   // Log filterer for contract events
}

// AccessIndexorCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessIndexorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessIndexorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessIndexorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessIndexorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessIndexorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessIndexorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessIndexorSession struct {
	Contract     *AccessIndexor    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccessIndexorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessIndexorCallerSession struct {
	Contract *AccessIndexorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// AccessIndexorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessIndexorTransactorSession struct {
	Contract     *AccessIndexorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// AccessIndexorRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessIndexorRaw struct {
	Contract *AccessIndexor // Generic contract binding to access the raw methods on
}

// AccessIndexorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessIndexorCallerRaw struct {
	Contract *AccessIndexorCaller // Generic read-only contract binding to access the raw methods on
}

// AccessIndexorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessIndexorTransactorRaw struct {
	Contract *AccessIndexorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessIndexor creates a new instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexor(address common.Address, backend bind.ContractBackend) (*AccessIndexor, error) {
	contract, err := bindAccessIndexor(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessIndexor{AccessIndexorCaller: AccessIndexorCaller{contract: contract}, AccessIndexorTransactor: AccessIndexorTransactor{contract: contract}, AccessIndexorFilterer: AccessIndexorFilterer{contract: contract}}, nil
}

// NewAccessIndexorCaller creates a new read-only instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorCaller(address common.Address, caller bind.ContractCaller) (*AccessIndexorCaller, error) {
	contract, err := bindAccessIndexor(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorCaller{contract: contract}, nil
}

// NewAccessIndexorTransactor creates a new write-only instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessIndexorTransactor, error) {
	contract, err := bindAccessIndexor(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorTransactor{contract: contract}, nil
}

// NewAccessIndexorFilterer creates a new log filterer instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessIndexorFilterer, error) {
	contract, err := bindAccessIndexor(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorFilterer{contract: contract}, nil
}

// bindAccessIndexor binds a generic wrapper to an already deployed contract.
func bindAccessIndexor(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessIndexorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessIndexor *AccessIndexorRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AccessIndexor.Contract.AccessIndexorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessIndexor *AccessIndexorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.Contract.AccessIndexorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessIndexor *AccessIndexorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessIndexor.Contract.AccessIndexorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessIndexor *AccessIndexorCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AccessIndexor.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessIndexor *AccessIndexorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessIndexor *AccessIndexorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessIndexor.Contract.contract.Transact(opts, method, params...)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "ACCESS_CONFIRMED")
	return *ret0, err
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) ACCESSCONFIRMED() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSCONFIRMED(&_AccessIndexor.CallOpts)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) ACCESSCONFIRMED() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSCONFIRMED(&_AccessIndexor.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "ACCESS_NONE")
	return *ret0, err
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) ACCESSNONE() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSNONE(&_AccessIndexor.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) ACCESSNONE() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSNONE(&_AccessIndexor.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "ACCESS_TENTATIVE")
	return *ret0, err
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) ACCESSTENTATIVE() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSTENTATIVE(&_AccessIndexor.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) ACCESSTENTATIVE() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSTENTATIVE(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_CONTENT_OBJECT")
	return *ret0, err
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTENTOBJECT(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTENTOBJECT(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_CONTENT_TYPE")
	return *ret0, err
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTENTTYPE(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTENTTYPE(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_CONTRACT")
	return *ret0, err
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYCONTRACT() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTRACT(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYCONTRACT() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTRACT(&_AccessIndexor.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_GROUP")
	return *ret0, err
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYGROUP() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYGROUP(&_AccessIndexor.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYGROUP() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYGROUP(&_AccessIndexor.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_LIBRARY")
	return *ret0, err
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYLIBRARY() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYLIBRARY(&_AccessIndexor.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYLIBRARY() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYLIBRARY(&_AccessIndexor.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "TYPE_ACCESS")
	return *ret0, err
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) TYPEACCESS() (uint8, error) {
	return _AccessIndexor.Contract.TYPEACCESS(&_AccessIndexor.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) TYPEACCESS() (uint8, error) {
	return _AccessIndexor.Contract.TYPEACCESS(&_AccessIndexor.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "TYPE_EDIT")
	return *ret0, err
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) TYPEEDIT() (uint8, error) {
	return _AccessIndexor.Contract.TYPEEDIT(&_AccessIndexor.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) TYPEEDIT() (uint8, error) {
	return _AccessIndexor.Contract.TYPEEDIT(&_AccessIndexor.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "TYPE_SEE")
	return *ret0, err
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) TYPESEE() (uint8, error) {
	return _AccessIndexor.Contract.TYPESEE(&_AccessIndexor.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) TYPESEE() (uint8, error) {
	return _AccessIndexor.Contract.TYPESEE(&_AccessIndexor.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "accessGroups")
	return *ret, err
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.AccessGroups(&_AccessIndexor.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.AccessGroups(&_AccessIndexor.CallOpts)
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckAccessGroupRights(opts *bind.CallOpts, group common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkAccessGroupRights", group, access_type)
	return *ret0, err
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckAccessGroupRights(group common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckAccessGroupRights(&_AccessIndexor.CallOpts, group, access_type)
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckAccessGroupRights(group common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckAccessGroupRights(&_AccessIndexor.CallOpts, group, access_type)
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckContentObjectRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkContentObjectRights", obj, access_type)
	return *ret0, err
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckContentObjectRights(obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckContentObjectRights(&_AccessIndexor.CallOpts, obj, access_type)
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckContentObjectRights(obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckContentObjectRights(&_AccessIndexor.CallOpts, obj, access_type)
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckContentTypeRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkContentTypeRights", obj, access_type)
	return *ret0, err
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckContentTypeRights(obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckContentTypeRights(&_AccessIndexor.CallOpts, obj, access_type)
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckContentTypeRights(obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckContentTypeRights(&_AccessIndexor.CallOpts, obj, access_type)
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckContractRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkContractRights", obj, access_type)
	return *ret0, err
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckContractRights(obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckContractRights(&_AccessIndexor.CallOpts, obj, access_type)
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckContractRights(obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckContractRights(&_AccessIndexor.CallOpts, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkDirectRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckDirectRights(&_AccessIndexor.CallOpts, index_type, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckDirectRights(&_AccessIndexor.CallOpts, index_type, obj, access_type)
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckLibraryRights(opts *bind.CallOpts, lib common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkLibraryRights", lib, access_type)
	return *ret0, err
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckLibraryRights(lib common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckLibraryRights(&_AccessIndexor.CallOpts, lib, access_type)
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckLibraryRights(lib common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckLibraryRights(&_AccessIndexor.CallOpts, lib, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckRights(&_AccessIndexor.CallOpts, index_type, obj, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckRights(&_AccessIndexor.CallOpts, index_type, obj, access_type)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "contentObjects")
	return *ret, err
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.ContentObjects(&_AccessIndexor.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.ContentObjects(&_AccessIndexor.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_AccessIndexor *AccessIndexorSession) ContentSpace() (common.Address, error) {
	return _AccessIndexor.Contract.ContentSpace(&_AccessIndexor.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) ContentSpace() (common.Address, error) {
	return _AccessIndexor.Contract.ContentSpace(&_AccessIndexor.CallOpts)
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) ContentTypes(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "contentTypes")
	return *ret, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) ContentTypes() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.ContentTypes(&_AccessIndexor.CallOpts)
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) ContentTypes() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.ContentTypes(&_AccessIndexor.CallOpts)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "contractExists", addr)
	return *ret0, err
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) ContractExists(addr common.Address) (bool, error) {
	return _AccessIndexor.Contract.ContractExists(&_AccessIndexor.CallOpts, addr)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) ContractExists(addr common.Address) (bool, error) {
	return _AccessIndexor.Contract.ContractExists(&_AccessIndexor.CallOpts, addr)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "contracts")
	return *ret, err
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Contracts(&_AccessIndexor.CallOpts)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Contracts(&_AccessIndexor.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_AccessIndexor *AccessIndexorSession) Creator() (common.Address, error) {
	return _AccessIndexor.Contract.Creator(&_AccessIndexor.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) Creator() (common.Address, error) {
	return _AccessIndexor.Contract.Creator(&_AccessIndexor.CallOpts)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getAccessGroup", position)
	return *ret0, err
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetAccessGroup(&_AccessIndexor.CallOpts, position)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetAccessGroup(&_AccessIndexor.CallOpts, position)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getAccessGroupRights", group)
	return *ret0, err
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetAccessGroupRights(&_AccessIndexor.CallOpts, group)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetAccessGroupRights(&_AccessIndexor.CallOpts, group)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getAccessGroupsLength")
	return *ret0, err
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetAccessGroupsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetAccessGroupsLength(&_AccessIndexor.CallOpts)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetAccessGroupsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetAccessGroupsLength(&_AccessIndexor.CallOpts)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentObject", position)
	return *ret0, err
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContentObject(&_AccessIndexor.CallOpts, position)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContentObject(&_AccessIndexor.CallOpts, position)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentObjectRights", obj)
	return *ret0, err
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContentObjectRights(&_AccessIndexor.CallOpts, obj)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContentObjectRights(&_AccessIndexor.CallOpts, obj)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentObjectsLength")
	return *ret0, err
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetContentObjectsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContentObjectsLength(&_AccessIndexor.CallOpts)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentObjectsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContentObjectsLength(&_AccessIndexor.CallOpts)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentType", position)
	return *ret0, err
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetContentType(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContentType(&_AccessIndexor.CallOpts, position)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentType(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContentType(&_AccessIndexor.CallOpts, position)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentTypeRights", obj)
	return *ret0, err
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContentTypeRights(&_AccessIndexor.CallOpts, obj)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContentTypeRights(&_AccessIndexor.CallOpts, obj)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentTypesLength")
	return *ret0, err
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetContentTypesLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContentTypesLength(&_AccessIndexor.CallOpts)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentTypesLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContentTypesLength(&_AccessIndexor.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContract", position)
	return *ret0, err
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetContract(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContract(&_AccessIndexor.CallOpts, position)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetContract(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContract(&_AccessIndexor.CallOpts, position)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContractRights", obj)
	return *ret0, err
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetContractRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContractRights(&_AccessIndexor.CallOpts, obj)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetContractRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContractRights(&_AccessIndexor.CallOpts, obj)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContractsLength")
	return *ret0, err
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetContractsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContractsLength(&_AccessIndexor.CallOpts)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetContractsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContractsLength(&_AccessIndexor.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getLibrariesLength")
	return *ret0, err
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetLibrariesLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetLibrariesLength(&_AccessIndexor.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetLibrariesLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetLibrariesLength(&_AccessIndexor.CallOpts)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getLibrary", position)
	return *ret0, err
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetLibrary(&_AccessIndexor.CallOpts, position)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetLibrary(&_AccessIndexor.CallOpts, position)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getLibraryRights", lib)
	return *ret0, err
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetLibraryRights(&_AccessIndexor.CallOpts, lib)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetLibraryRights(&_AccessIndexor.CallOpts, lib)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) HasManagerAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "hasManagerAccess", candidate)
	return *ret0, err
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) HasManagerAccess(candidate common.Address) (bool, error) {
	return _AccessIndexor.Contract.HasManagerAccess(&_AccessIndexor.CallOpts, candidate)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) HasManagerAccess(candidate common.Address) (bool, error) {
	return _AccessIndexor.Contract.HasManagerAccess(&_AccessIndexor.CallOpts, candidate)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "libraries")
	return *ret, err
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Libraries(&_AccessIndexor.CallOpts)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Libraries(&_AccessIndexor.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AccessIndexor *AccessIndexorSession) Owner() (common.Address, error) {
	return _AccessIndexor.Contract.Owner(&_AccessIndexor.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) Owner() (common.Address, error) {
	return _AccessIndexor.Contract.Owner(&_AccessIndexor.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorSession) Version() ([32]byte, error) {
	return _AccessIndexor.Contract.Version(&_AccessIndexor.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorCallerSession) Version() ([32]byte, error) {
	return _AccessIndexor.Contract.Version(&_AccessIndexor.CallOpts)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpAccessGroups(&_AccessIndexor.TransactOpts)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpAccessGroups(&_AccessIndexor.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpAll")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpAll() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpAll(&_AccessIndexor.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpAll() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpAll(&_AccessIndexor.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpContentObjects(&_AccessIndexor.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpContentObjects(&_AccessIndexor.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpContentTypes(&_AccessIndexor.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpContentTypes(&_AccessIndexor.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpLibraries")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpLibraries() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpLibraries(&_AccessIndexor.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpLibraries() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpLibraries(&_AccessIndexor.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_AccessIndexor *AccessIndexorTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_AccessIndexor *AccessIndexorSession) Kill() (*types.Transaction, error) {
	return _AccessIndexor.Contract.Kill(&_AccessIndexor.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_AccessIndexor *AccessIndexorTransactorSession) Kill() (*types.Transaction, error) {
	return _AccessIndexor.Contract.Kill(&_AccessIndexor.TransactOpts)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetAccessGroupRights(&_AccessIndexor.TransactOpts, group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetAccessGroupRights(&_AccessIndexor.TransactOpts, group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_AccessIndexor *AccessIndexorTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setAccessRights")
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_AccessIndexor *AccessIndexorSession) SetAccessRights() (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetAccessRights(&_AccessIndexor.TransactOpts)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetAccessRights() (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetAccessRights(&_AccessIndexor.TransactOpts)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentObjectRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentObjectRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_AccessIndexor *AccessIndexorSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentSpace(&_AccessIndexor.TransactOpts, content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentSpace(&_AccessIndexor.TransactOpts, content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentTypeRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentTypeRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContractRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContractRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetLibraryRights(&_AccessIndexor.TransactOpts, lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetLibraryRights(&_AccessIndexor.TransactOpts, lib, access_type, access)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_AccessIndexor *AccessIndexorTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_AccessIndexor *AccessIndexorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.TransferCreatorship(&_AccessIndexor.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.TransferCreatorship(&_AccessIndexor.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AccessIndexor *AccessIndexorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AccessIndexor *AccessIndexorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.TransferOwnership(&_AccessIndexor.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.TransferOwnership(&_AccessIndexor.TransactOpts, newOwner)
}

// AccessIndexorRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the AccessIndexor contract.
type AccessIndexorRightsChangedIterator struct {
	Event *AccessIndexorRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessIndexorRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessIndexorRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessIndexorRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessIndexorRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessIndexorRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessIndexorRightsChanged represents a RightsChanged event raised by the AccessIndexor contract.
type AccessIndexorRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*AccessIndexorRightsChangedIterator, error) {

	logs, sub, err := _AccessIndexor.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &AccessIndexorRightsChangedIterator{contract: _AccessIndexor.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *AccessIndexorRightsChanged) (event.Subscription, error) {

	logs, sub, err := _AccessIndexor.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessIndexorRightsChanged)
				if err := _AccessIndexor.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) ParseRightsChanged(log types.Log) (*AccessIndexorRightsChanged, error) {
	event := new(AccessIndexorRightsChanged)
	if err := _AccessIndexor.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccessIndexorDbgAddressIterator is returned from FilterDbgAddress and is used to iterate over the raw logs and unpacked data for DbgAddress events raised by the AccessIndexor contract.
type AccessIndexorDbgAddressIterator struct {
	Event *AccessIndexorDbgAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessIndexorDbgAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessIndexorDbgAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessIndexorDbgAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessIndexorDbgAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessIndexorDbgAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessIndexorDbgAddress represents a DbgAddress event raised by the AccessIndexor contract.
type AccessIndexorDbgAddress struct {
	Label string
	Index *big.Int
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDbgAddress is a free log retrieval operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_AccessIndexor *AccessIndexorFilterer) FilterDbgAddress(opts *bind.FilterOpts) (*AccessIndexorDbgAddressIterator, error) {

	logs, sub, err := _AccessIndexor.contract.FilterLogs(opts, "dbgAddress")
	if err != nil {
		return nil, err
	}
	return &AccessIndexorDbgAddressIterator{contract: _AccessIndexor.contract, event: "dbgAddress", logs: logs, sub: sub}, nil
}

// WatchDbgAddress is a free log subscription operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_AccessIndexor *AccessIndexorFilterer) WatchDbgAddress(opts *bind.WatchOpts, sink chan<- *AccessIndexorDbgAddress) (event.Subscription, error) {

	logs, sub, err := _AccessIndexor.contract.WatchLogs(opts, "dbgAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessIndexorDbgAddress)
				if err := _AccessIndexor.contract.UnpackLog(event, "dbgAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDbgAddress is a log parse operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_AccessIndexor *AccessIndexorFilterer) ParseDbgAddress(log types.Log) (*AccessIndexorDbgAddress, error) {
	event := new(AccessIndexorDbgAddress)
	if err := _AccessIndexor.contract.UnpackLog(event, "dbgAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccessibleABI is the input ABI used to generate the binding from.
const AccessibleABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AccessRequest\",\"type\":\"event\"}]"

// AccessibleFuncSigs maps the 4-byte function signature to its string representation.
var AccessibleFuncSigs = map[string]string{
	"f1551887": "accessRequest()",
	"54fd4d50": "version()",
}

// AccessibleBin is the compiled bytecode used for deploying new contracts.
var AccessibleBin = "0x60806040527f41636365737369626c6532303139303232323133353930304d4c00000000000060005534801561003457600080fd5b5060fa806100436000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166354fd4d508114604d578063f1551887146071575b600080fd5b348015605857600080fd5b50605f6097565b60408051918252519081900360200190f35b348015607c57600080fd5b506083609d565b604080519115158252519081900360200190f35b60005481565b6040516000907fed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88908290a1506001905600a165627a7a72305820f5c6560b9226d9e971e4595b2cd3faf23c04a8b5831e459cf1353fd7e3f1db340029"

// DeployAccessible deploys a new Ethereum contract, binding an instance of Accessible to it.
func DeployAccessible(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Accessible, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessibleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AccessibleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Accessible{AccessibleCaller: AccessibleCaller{contract: contract}, AccessibleTransactor: AccessibleTransactor{contract: contract}, AccessibleFilterer: AccessibleFilterer{contract: contract}}, nil
}

// Accessible is an auto generated Go binding around an Ethereum contract.
type Accessible struct {
	AccessibleCaller     // Read-only binding to the contract
	AccessibleTransactor // Write-only binding to the contract
	AccessibleFilterer   // Log filterer for contract events
}

// AccessibleCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessibleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessibleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessibleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessibleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessibleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessibleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessibleSession struct {
	Contract     *Accessible       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccessibleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessibleCallerSession struct {
	Contract *AccessibleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// AccessibleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessibleTransactorSession struct {
	Contract     *AccessibleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AccessibleRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessibleRaw struct {
	Contract *Accessible // Generic contract binding to access the raw methods on
}

// AccessibleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessibleCallerRaw struct {
	Contract *AccessibleCaller // Generic read-only contract binding to access the raw methods on
}

// AccessibleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessibleTransactorRaw struct {
	Contract *AccessibleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessible creates a new instance of Accessible, bound to a specific deployed contract.
func NewAccessible(address common.Address, backend bind.ContractBackend) (*Accessible, error) {
	contract, err := bindAccessible(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Accessible{AccessibleCaller: AccessibleCaller{contract: contract}, AccessibleTransactor: AccessibleTransactor{contract: contract}, AccessibleFilterer: AccessibleFilterer{contract: contract}}, nil
}

// NewAccessibleCaller creates a new read-only instance of Accessible, bound to a specific deployed contract.
func NewAccessibleCaller(address common.Address, caller bind.ContractCaller) (*AccessibleCaller, error) {
	contract, err := bindAccessible(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessibleCaller{contract: contract}, nil
}

// NewAccessibleTransactor creates a new write-only instance of Accessible, bound to a specific deployed contract.
func NewAccessibleTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessibleTransactor, error) {
	contract, err := bindAccessible(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessibleTransactor{contract: contract}, nil
}

// NewAccessibleFilterer creates a new log filterer instance of Accessible, bound to a specific deployed contract.
func NewAccessibleFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessibleFilterer, error) {
	contract, err := bindAccessible(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessibleFilterer{contract: contract}, nil
}

// bindAccessible binds a generic wrapper to an already deployed contract.
func bindAccessible(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessibleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accessible *AccessibleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Accessible.Contract.AccessibleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accessible *AccessibleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accessible.Contract.AccessibleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accessible *AccessibleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accessible.Contract.AccessibleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accessible *AccessibleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Accessible.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accessible *AccessibleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accessible.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accessible *AccessibleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accessible.Contract.contract.Transact(opts, method, params...)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Accessible *AccessibleCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Accessible *AccessibleSession) Version() ([32]byte, error) {
	return _Accessible.Contract.Version(&_Accessible.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Accessible *AccessibleCallerSession) Version() ([32]byte, error) {
	return _Accessible.Contract.Version(&_Accessible.CallOpts)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_Accessible *AccessibleTransactor) AccessRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "accessRequest")
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_Accessible *AccessibleSession) AccessRequest() (*types.Transaction, error) {
	return _Accessible.Contract.AccessRequest(&_Accessible.TransactOpts)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_Accessible *AccessibleTransactorSession) AccessRequest() (*types.Transaction, error) {
	return _Accessible.Contract.AccessRequest(&_Accessible.TransactOpts)
}

// AccessibleAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the Accessible contract.
type AccessibleAccessRequestIterator struct {
	Event *AccessibleAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessibleAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessibleAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessibleAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessibleAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessibleAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessibleAccessRequest represents a AccessRequest event raised by the Accessible contract.
type AccessibleAccessRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_Accessible *AccessibleFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*AccessibleAccessRequestIterator, error) {

	logs, sub, err := _Accessible.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &AccessibleAccessRequestIterator{contract: _Accessible.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_Accessible *AccessibleFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *AccessibleAccessRequest) (event.Subscription, error) {

	logs, sub, err := _Accessible.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessibleAccessRequest)
				if err := _Accessible.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_Accessible *AccessibleFilterer) ParseAccessRequest(log types.Log) (*AccessibleAccessRequest, error) {
	event := new(AccessibleAccessRequest)
	if err := _Accessible.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupABI is the input ABI used to generate the binding from.
const BaseAccessControlGroupABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"membersList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managersList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"membersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_objectHash\",\"type\":\"string\"},{\"name\":\"_versionHashesConcat\",\"type\":\"string\"},{\"name\":\"_versionTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"migrateEditable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"grantManagerAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"revokeManagerAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"},{\"name\":\"mgr\",\"type\":\"bool\"}],\"name\":\"hasAccessRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"ManagerAccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"MemberRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"ManagerAccessRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operationCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"UnauthorizedOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EditableMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"dbgAddress\",\"type\":\"event\"}]"

// BaseAccessControlGroupFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessControlGroupFuncSigs = map[string]string{
	"18689733": "ACCESS_CONFIRMED()",
	"8232f3f1": "ACCESS_NONE()",
	"479a0c51": "ACCESS_TENTATIVE()",
	"091600e6": "CATEGORY_CONTENT_OBJECT()",
	"68a0469a": "CATEGORY_CONTENT_TYPE()",
	"6373a411": "CATEGORY_CONTRACT()",
	"12915a30": "CATEGORY_GROUP()",
	"16aed232": "CATEGORY_LIBRARY()",
	"d1aeb651": "TYPE_ACCESS()",
	"5d97b6c2": "TYPE_EDIT()",
	"96eba03d": "TYPE_SEE()",
	"30e66949": "accessGroups()",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"15c0bac1": "checkAccessGroupRights(address,uint8)",
	"5faecb76": "checkContentObjectRights(address,uint8)",
	"fe538c5a": "checkContentTypeRights(address,uint8)",
	"a864dfa5": "checkContractRights(address,uint8)",
	"a00b38c4": "checkDirectRights(uint8,address,uint8)",
	"6813b6d1": "checkLibraryRights(address,uint8)",
	"7fb52f1a": "checkRights(uint8,address,uint8)",
	"d30f8cd0": "cleanUpAccessGroups()",
	"2fa5c842": "cleanUpAll()",
	"048bd529": "cleanUpContentObjects()",
	"85e0a200": "cleanUpContentTypes()",
	"92297d7b": "cleanUpLibraries()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"a980892d": "contentObjects()",
	"af570c04": "contentSpace()",
	"9f46133e": "contentTypes()",
	"7709bc78": "contractExists(address)",
	"6c0f79b6": "contracts()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"2d474cbd": "getAccessGroup(uint256)",
	"304f4a7b": "getAccessGroupRights(address)",
	"0dc10d3f": "getAccessGroupsLength()",
	"cf8a7503": "getContentObject(uint256)",
	"69881c0c": "getContentObjectRights(address)",
	"ebe9314e": "getContentObjectsLength()",
	"aa3f6952": "getContentType(uint256)",
	"a4081d62": "getContentTypeRights(address)",
	"5c1d3059": "getContentTypesLength()",
	"6ebc8c86": "getContract(uint256)",
	"08d865d7": "getContractRights(address)",
	"fccc134f": "getContractsLength()",
	"cb86806d": "getLibrariesLength()",
	"d15d62a7": "getLibrary(uint256)",
	"fb52222c": "getLibraryRights(address)",
	"0ae5e739": "grantAccess(address)",
	"75861a95": "grantManagerAccess(address)",
	"95a078e8": "hasAccess(address)",
	"d8961c8d": "hasAccessRight(address,bool)",
	"42e7ba7b": "hasManagerAccess(address)",
	"41c0e1b5": "kill()",
	"c4b1978d": "libraries()",
	"1fcd7794": "managersList(uint256)",
	"638d0290": "managersNum()",
	"13b8ad31": "membersList(uint256)",
	"55277a5b": "membersNum()",
	"6ae5f5e0": "migrateEditable(address,address,string,string,uint256[])",
	"e02dd9c2": "objectHash()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"85e68531": "revokeAccess(address)",
	"cdb849b7": "revokeManagerAccess(address)",
	"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
	"b8ff1dba": "setAccessRights()",
	"3def5140": "setContentObjectRights(address,uint8,uint8)",
	"055af48f": "setContentSpace(address)",
	"8635adb5": "setContentTypeRights(address,uint8,uint8)",
	"224dcba0": "setContractRights(address,uint8,uint8)",
	"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"54fd4d50": "version()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
}

// BaseAccessControlGroupBin is the compiled bytecode used for deploying new contracts.
var BaseAccessControlGroupBin = ""

// DeployBaseAccessControlGroup deploys a new Ethereum contract, binding an instance of BaseAccessControlGroup to it.
func DeployBaseAccessControlGroup(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address) (common.Address, *types.Transaction, *BaseAccessControlGroup, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessControlGroupABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseAccessControlGroupBin), backend, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessControlGroup{BaseAccessControlGroupCaller: BaseAccessControlGroupCaller{contract: contract}, BaseAccessControlGroupTransactor: BaseAccessControlGroupTransactor{contract: contract}, BaseAccessControlGroupFilterer: BaseAccessControlGroupFilterer{contract: contract}}, nil
}

// BaseAccessControlGroup is an auto generated Go binding around an Ethereum contract.
type BaseAccessControlGroup struct {
	BaseAccessControlGroupCaller     // Read-only binding to the contract
	BaseAccessControlGroupTransactor // Write-only binding to the contract
	BaseAccessControlGroupFilterer   // Log filterer for contract events
}

// BaseAccessControlGroupCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessControlGroupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessControlGroupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessControlGroupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessControlGroupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessControlGroupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessControlGroupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseAccessControlGroupSession struct {
	Contract     *BaseAccessControlGroup // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// BaseAccessControlGroupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseAccessControlGroupCallerSession struct {
	Contract *BaseAccessControlGroupCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// BaseAccessControlGroupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseAccessControlGroupTransactorSession struct {
	Contract     *BaseAccessControlGroupTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// BaseAccessControlGroupRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseAccessControlGroupRaw struct {
	Contract *BaseAccessControlGroup // Generic contract binding to access the raw methods on
}

// BaseAccessControlGroupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseAccessControlGroupCallerRaw struct {
	Contract *BaseAccessControlGroupCaller // Generic read-only contract binding to access the raw methods on
}

// BaseAccessControlGroupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseAccessControlGroupTransactorRaw struct {
	Contract *BaseAccessControlGroupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseAccessControlGroup creates a new instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroup(address common.Address, backend bind.ContractBackend) (*BaseAccessControlGroup, error) {
	contract, err := bindBaseAccessControlGroup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroup{BaseAccessControlGroupCaller: BaseAccessControlGroupCaller{contract: contract}, BaseAccessControlGroupTransactor: BaseAccessControlGroupTransactor{contract: contract}, BaseAccessControlGroupFilterer: BaseAccessControlGroupFilterer{contract: contract}}, nil
}

// NewBaseAccessControlGroupCaller creates a new read-only instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessControlGroupCaller, error) {
	contract, err := bindBaseAccessControlGroup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupCaller{contract: contract}, nil
}

// NewBaseAccessControlGroupTransactor creates a new write-only instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessControlGroupTransactor, error) {
	contract, err := bindBaseAccessControlGroup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupTransactor{contract: contract}, nil
}

// NewBaseAccessControlGroupFilterer creates a new log filterer instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessControlGroupFilterer, error) {
	contract, err := bindBaseAccessControlGroup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupFilterer{contract: contract}, nil
}

// bindBaseAccessControlGroup binds a generic wrapper to an already deployed contract.
func bindBaseAccessControlGroup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessControlGroupABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessControlGroup *BaseAccessControlGroupRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessControlGroup.Contract.BaseAccessControlGroupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessControlGroup *BaseAccessControlGroupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.BaseAccessControlGroupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessControlGroup *BaseAccessControlGroupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.BaseAccessControlGroupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessControlGroup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.contract.Transact(opts, method, params...)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "ACCESS_CONFIRMED")
	return *ret0, err
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ACCESSCONFIRMED() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSCONFIRMED(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ACCESSCONFIRMED() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSCONFIRMED(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "ACCESS_NONE")
	return *ret0, err
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ACCESSNONE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSNONE(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ACCESSNONE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSNONE(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "ACCESS_TENTATIVE")
	return *ret0, err
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ACCESSTENTATIVE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSTENTATIVE(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ACCESSTENTATIVE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSTENTATIVE(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_CONTENT_OBJECT")
	return *ret0, err
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTENTOBJECT(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTENTOBJECT(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_CONTENT_TYPE")
	return *ret0, err
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTENTTYPE(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTENTTYPE(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_CONTRACT")
	return *ret0, err
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYCONTRACT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTRACT(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYCONTRACT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTRACT(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_GROUP")
	return *ret0, err
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYGROUP() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYGROUP(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYGROUP() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYGROUP(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_LIBRARY")
	return *ret0, err
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYLIBRARY() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYLIBRARY(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYLIBRARY() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYLIBRARY(&_BaseAccessControlGroup.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "TYPE_ACCESS")
	return *ret0, err
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TYPEACCESS() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPEACCESS(&_BaseAccessControlGroup.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) TYPEACCESS() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPEACCESS(&_BaseAccessControlGroup.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "TYPE_EDIT")
	return *ret0, err
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TYPEEDIT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPEEDIT(&_BaseAccessControlGroup.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) TYPEEDIT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPEEDIT(&_BaseAccessControlGroup.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "TYPE_SEE")
	return *ret0, err
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TYPESEE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPESEE(&_BaseAccessControlGroup.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) TYPESEE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPESEE(&_BaseAccessControlGroup.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "accessGroups")
	return *ret, err
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.AccessGroups(&_BaseAccessControlGroup.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.AccessGroups(&_BaseAccessControlGroup.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CanCommit() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanCommit(&_BaseAccessControlGroup.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CanCommit() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanCommit(&_BaseAccessControlGroup.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CanConfirm() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanConfirm(&_BaseAccessControlGroup.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CanConfirm() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanConfirm(&_BaseAccessControlGroup.CallOpts)
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckAccessGroupRights(opts *bind.CallOpts, group common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkAccessGroupRights", group, access_type)
	return *ret0, err
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckAccessGroupRights(group common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckAccessGroupRights(&_BaseAccessControlGroup.CallOpts, group, access_type)
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckAccessGroupRights(group common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckAccessGroupRights(&_BaseAccessControlGroup.CallOpts, group, access_type)
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckContentObjectRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkContentObjectRights", obj, access_type)
	return *ret0, err
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckContentObjectRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckContentObjectRights(&_BaseAccessControlGroup.CallOpts, obj, access_type)
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckContentObjectRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckContentObjectRights(&_BaseAccessControlGroup.CallOpts, obj, access_type)
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckContentTypeRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkContentTypeRights", obj, access_type)
	return *ret0, err
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckContentTypeRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckContentTypeRights(&_BaseAccessControlGroup.CallOpts, obj, access_type)
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckContentTypeRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckContentTypeRights(&_BaseAccessControlGroup.CallOpts, obj, access_type)
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckContractRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkContractRights", obj, access_type)
	return *ret0, err
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckContractRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckContractRights(&_BaseAccessControlGroup.CallOpts, obj, access_type)
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckContractRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckContractRights(&_BaseAccessControlGroup.CallOpts, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkDirectRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckDirectRights(&_BaseAccessControlGroup.CallOpts, index_type, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckDirectRights(&_BaseAccessControlGroup.CallOpts, index_type, obj, access_type)
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckLibraryRights(opts *bind.CallOpts, lib common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkLibraryRights", lib, access_type)
	return *ret0, err
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckLibraryRights(lib common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckLibraryRights(&_BaseAccessControlGroup.CallOpts, lib, access_type)
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckLibraryRights(lib common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckLibraryRights(&_BaseAccessControlGroup.CallOpts, lib, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckRights(&_BaseAccessControlGroup.CallOpts, index_type, obj, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckRights(&_BaseAccessControlGroup.CallOpts, index_type, obj, access_type)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CommitPending() (bool, error) {
	return _BaseAccessControlGroup.Contract.CommitPending(&_BaseAccessControlGroup.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CommitPending() (bool, error) {
	return _BaseAccessControlGroup.Contract.CommitPending(&_BaseAccessControlGroup.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contentObjects")
	return *ret, err
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.ContentObjects(&_BaseAccessControlGroup.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.ContentObjects(&_BaseAccessControlGroup.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ContentSpace() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ContentSpace(&_BaseAccessControlGroup.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ContentSpace() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ContentSpace(&_BaseAccessControlGroup.CallOpts)
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentTypes(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contentTypes")
	return *ret, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ContentTypes() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.ContentTypes(&_BaseAccessControlGroup.CallOpts)
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ContentTypes() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.ContentTypes(&_BaseAccessControlGroup.CallOpts)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contractExists", addr)
	return *ret0, err
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ContractExists(addr common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.ContractExists(&_BaseAccessControlGroup.CallOpts, addr)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ContractExists(addr common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.ContractExists(&_BaseAccessControlGroup.CallOpts, addr)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contracts")
	return *ret, err
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Contracts(&_BaseAccessControlGroup.CallOpts)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Contracts(&_BaseAccessControlGroup.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CountVersionHashes() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.CountVersionHashes(&_BaseAccessControlGroup.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.CountVersionHashes(&_BaseAccessControlGroup.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Creator() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Creator(&_BaseAccessControlGroup.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Creator() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Creator(&_BaseAccessControlGroup.CallOpts)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getAccessGroup", position)
	return *ret0, err
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroup(&_BaseAccessControlGroup.CallOpts, position)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroup(&_BaseAccessControlGroup.CallOpts, position)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getAccessGroupRights", group)
	return *ret0, err
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroupRights(&_BaseAccessControlGroup.CallOpts, group)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroupRights(&_BaseAccessControlGroup.CallOpts, group)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getAccessGroupsLength")
	return *ret0, err
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetAccessGroupsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroupsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetAccessGroupsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroupsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentObject", position)
	return *ret0, err
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContentObject(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContentObject(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentObjectRights", obj)
	return *ret0, err
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContentObjectRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContentObjectRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentObjectsLength")
	return *ret0, err
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentObjectsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContentObjectsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentObjectsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContentObjectsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentType", position)
	return *ret0, err
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentType(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContentType(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentType(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContentType(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentTypeRights", obj)
	return *ret0, err
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContentTypeRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContentTypeRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentTypesLength")
	return *ret0, err
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentTypesLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContentTypesLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentTypesLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContentTypesLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContract", position)
	return *ret0, err
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContract(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContract(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContract(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContract(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContractRights", obj)
	return *ret0, err
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContractRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContractRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContractRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContractRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContractsLength")
	return *ret0, err
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContractsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContractsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContractsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContractsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getLibrariesLength")
	return *ret0, err
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetLibrariesLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetLibrariesLength(&_BaseAccessControlGroup.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetLibrariesLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetLibrariesLength(&_BaseAccessControlGroup.CallOpts)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getLibrary", position)
	return *ret0, err
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetLibrary(&_BaseAccessControlGroup.CallOpts, position)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetLibrary(&_BaseAccessControlGroup.CallOpts, position)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getLibraryRights", lib)
	return *ret0, err
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetLibraryRights(&_BaseAccessControlGroup.CallOpts, lib)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetLibraryRights(&_BaseAccessControlGroup.CallOpts, lib)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasAccess(&_BaseAccessControlGroup.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasAccess(&_BaseAccessControlGroup.CallOpts, candidate)
}

// HasAccessRight is a free data retrieval call binding the contract method 0xd8961c8d.
//
// Solidity: function hasAccessRight(address candidate, bool mgr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasAccessRight(opts *bind.CallOpts, candidate common.Address, mgr bool) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "hasAccessRight", candidate, mgr)
	return *ret0, err
}

// HasAccessRight is a free data retrieval call binding the contract method 0xd8961c8d.
//
// Solidity: function hasAccessRight(address candidate, bool mgr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) HasAccessRight(candidate common.Address, mgr bool) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasAccessRight(&_BaseAccessControlGroup.CallOpts, candidate, mgr)
}

// HasAccessRight is a free data retrieval call binding the contract method 0xd8961c8d.
//
// Solidity: function hasAccessRight(address candidate, bool mgr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) HasAccessRight(candidate common.Address, mgr bool) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasAccessRight(&_BaseAccessControlGroup.CallOpts, candidate, mgr)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasManagerAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "hasManagerAccess", candidate)
	return *ret0, err
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) HasManagerAccess(candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasManagerAccess(&_BaseAccessControlGroup.CallOpts, candidate)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) HasManagerAccess(candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasManagerAccess(&_BaseAccessControlGroup.CallOpts, candidate)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "libraries")
	return *ret, err
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Libraries(&_BaseAccessControlGroup.CallOpts)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Libraries(&_BaseAccessControlGroup.CallOpts)
}

// ManagersList is a free data retrieval call binding the contract method 0x1fcd7794.
//
// Solidity: function managersList(uint256 ) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ManagersList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "managersList", arg0)
	return *ret0, err
}

// ManagersList is a free data retrieval call binding the contract method 0x1fcd7794.
//
// Solidity: function managersList(uint256 ) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ManagersList(arg0 *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ManagersList(&_BaseAccessControlGroup.CallOpts, arg0)
}

// ManagersList is a free data retrieval call binding the contract method 0x1fcd7794.
//
// Solidity: function managersList(uint256 ) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ManagersList(arg0 *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ManagersList(&_BaseAccessControlGroup.CallOpts, arg0)
}

// ManagersNum is a free data retrieval call binding the contract method 0x638d0290.
//
// Solidity: function managersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ManagersNum(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "managersNum")
	return *ret0, err
}

// ManagersNum is a free data retrieval call binding the contract method 0x638d0290.
//
// Solidity: function managersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ManagersNum() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.ManagersNum(&_BaseAccessControlGroup.CallOpts)
}

// ManagersNum is a free data retrieval call binding the contract method 0x638d0290.
//
// Solidity: function managersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ManagersNum() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.ManagersNum(&_BaseAccessControlGroup.CallOpts)
}

// MembersList is a free data retrieval call binding the contract method 0x13b8ad31.
//
// Solidity: function membersList(uint256 ) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) MembersList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "membersList", arg0)
	return *ret0, err
}

// MembersList is a free data retrieval call binding the contract method 0x13b8ad31.
//
// Solidity: function membersList(uint256 ) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) MembersList(arg0 *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.MembersList(&_BaseAccessControlGroup.CallOpts, arg0)
}

// MembersList is a free data retrieval call binding the contract method 0x13b8ad31.
//
// Solidity: function membersList(uint256 ) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) MembersList(arg0 *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.MembersList(&_BaseAccessControlGroup.CallOpts, arg0)
}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) MembersNum(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "membersNum")
	return *ret0, err
}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) MembersNum() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.MembersNum(&_BaseAccessControlGroup.CallOpts)
}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) MembersNum() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.MembersNum(&_BaseAccessControlGroup.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ObjectHash() (string, error) {
	return _BaseAccessControlGroup.Contract.ObjectHash(&_BaseAccessControlGroup.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ObjectHash() (string, error) {
	return _BaseAccessControlGroup.Contract.ObjectHash(&_BaseAccessControlGroup.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Owner() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Owner(&_BaseAccessControlGroup.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Owner() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Owner(&_BaseAccessControlGroup.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ParentAddress() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ParentAddress(&_BaseAccessControlGroup.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ParentAddress() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ParentAddress(&_BaseAccessControlGroup.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) PendingHash() (string, error) {
	return _BaseAccessControlGroup.Contract.PendingHash(&_BaseAccessControlGroup.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) PendingHash() (string, error) {
	return _BaseAccessControlGroup.Contract.PendingHash(&_BaseAccessControlGroup.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Version() ([32]byte, error) {
	return _BaseAccessControlGroup.Contract.Version(&_BaseAccessControlGroup.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Version() ([32]byte, error) {
	return _BaseAccessControlGroup.Contract.Version(&_BaseAccessControlGroup.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseAccessControlGroup.Contract.VersionHashes(&_BaseAccessControlGroup.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseAccessControlGroup.Contract.VersionHashes(&_BaseAccessControlGroup.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.VersionTimestamp(&_BaseAccessControlGroup.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.VersionTimestamp(&_BaseAccessControlGroup.CallOpts, arg0)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpAccessGroups(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpAccessGroups(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpAll")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpAll() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpAll(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpAll() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpAll(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpContentObjects(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpContentObjects(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpContentTypes(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpContentTypes(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpLibraries")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpLibraries() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpLibraries(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpLibraries() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpLibraries(&_BaseAccessControlGroup.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ClearPending() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.ClearPending(&_BaseAccessControlGroup.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.ClearPending(&_BaseAccessControlGroup.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.Commit(&_BaseAccessControlGroup.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.Commit(&_BaseAccessControlGroup.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.ConfirmCommit(&_BaseAccessControlGroup.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.ConfirmCommit(&_BaseAccessControlGroup.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.DeleteVersion(&_BaseAccessControlGroup.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.DeleteVersion(&_BaseAccessControlGroup.TransactOpts, _versionHash)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) GrantAccess(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "grantAccess", candidate)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GrantAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.GrantAccess(&_BaseAccessControlGroup.TransactOpts, candidate)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) GrantAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.GrantAccess(&_BaseAccessControlGroup.TransactOpts, candidate)
}

// GrantManagerAccess is a paid mutator transaction binding the contract method 0x75861a95.
//
// Solidity: function grantManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) GrantManagerAccess(opts *bind.TransactOpts, manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "grantManagerAccess", manager)
}

// GrantManagerAccess is a paid mutator transaction binding the contract method 0x75861a95.
//
// Solidity: function grantManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GrantManagerAccess(manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.GrantManagerAccess(&_BaseAccessControlGroup.TransactOpts, manager)
}

// GrantManagerAccess is a paid mutator transaction binding the contract method 0x75861a95.
//
// Solidity: function grantManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) GrantManagerAccess(manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.GrantManagerAccess(&_BaseAccessControlGroup.TransactOpts, manager)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Kill() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.Kill(&_BaseAccessControlGroup.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.Kill(&_BaseAccessControlGroup.TransactOpts)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) MigrateEditable(opts *bind.TransactOpts, _owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "migrateEditable", _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.MigrateEditable(&_BaseAccessControlGroup.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.MigrateEditable(&_BaseAccessControlGroup.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) RevokeAccess(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "revokeAccess", candidate)
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) RevokeAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.RevokeAccess(&_BaseAccessControlGroup.TransactOpts, candidate)
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) RevokeAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.RevokeAccess(&_BaseAccessControlGroup.TransactOpts, candidate)
}

// RevokeManagerAccess is a paid mutator transaction binding the contract method 0xcdb849b7.
//
// Solidity: function revokeManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) RevokeManagerAccess(opts *bind.TransactOpts, manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "revokeManagerAccess", manager)
}

// RevokeManagerAccess is a paid mutator transaction binding the contract method 0xcdb849b7.
//
// Solidity: function revokeManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) RevokeManagerAccess(manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.RevokeManagerAccess(&_BaseAccessControlGroup.TransactOpts, manager)
}

// RevokeManagerAccess is a paid mutator transaction binding the contract method 0xcdb849b7.
//
// Solidity: function revokeManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) RevokeManagerAccess(manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.RevokeManagerAccess(&_BaseAccessControlGroup.TransactOpts, manager)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAccessGroupRights(&_BaseAccessControlGroup.TransactOpts, group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAccessGroupRights(&_BaseAccessControlGroup.TransactOpts, group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setAccessRights")
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetAccessRights() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAccessRights(&_BaseAccessControlGroup.TransactOpts)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetAccessRights() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAccessRights(&_BaseAccessControlGroup.TransactOpts)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentObjectRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentObjectRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentSpace(&_BaseAccessControlGroup.TransactOpts, content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentSpace(&_BaseAccessControlGroup.TransactOpts, content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentTypeRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentTypeRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContractRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContractRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetLibraryRights(&_BaseAccessControlGroup.TransactOpts, lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetLibraryRights(&_BaseAccessControlGroup.TransactOpts, lib, access_type, access)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.TransferCreatorship(&_BaseAccessControlGroup.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.TransferCreatorship(&_BaseAccessControlGroup.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.TransferOwnership(&_BaseAccessControlGroup.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.TransferOwnership(&_BaseAccessControlGroup.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.UpdateRequest(&_BaseAccessControlGroup.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.UpdateRequest(&_BaseAccessControlGroup.TransactOpts)
}

// BaseAccessControlGroupCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCommitPendingIterator struct {
	Event *BaseAccessControlGroupCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupCommitPending represents a CommitPending event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseAccessControlGroupCommitPendingIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupCommitPendingIterator{contract: _BaseAccessControlGroup.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupCommitPending)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseCommitPending(log types.Log) (*BaseAccessControlGroupCommitPending, error) {
	event := new(BaseAccessControlGroupCommitPending)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupEditableMigrateIterator is returned from FilterEditableMigrate and is used to iterate over the raw logs and unpacked data for EditableMigrate events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupEditableMigrateIterator struct {
	Event *BaseAccessControlGroupEditableMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupEditableMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupEditableMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupEditableMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupEditableMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupEditableMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupEditableMigrate represents a EditableMigrate event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupEditableMigrate struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEditableMigrate is a free log retrieval operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterEditableMigrate(opts *bind.FilterOpts) (*BaseAccessControlGroupEditableMigrateIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupEditableMigrateIterator{contract: _BaseAccessControlGroup.contract, event: "EditableMigrate", logs: logs, sub: sub}, nil
}

// WatchEditableMigrate is a free log subscription operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchEditableMigrate(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupEditableMigrate) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupEditableMigrate)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEditableMigrate is a log parse operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseEditableMigrate(log types.Log) (*BaseAccessControlGroupEditableMigrate, error) {
	event := new(BaseAccessControlGroupEditableMigrate)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupManagerAccessGrantedIterator is returned from FilterManagerAccessGranted and is used to iterate over the raw logs and unpacked data for ManagerAccessGranted events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessGrantedIterator struct {
	Event *BaseAccessControlGroupManagerAccessGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupManagerAccessGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupManagerAccessGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupManagerAccessGranted represents a ManagerAccessGranted event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessGranted struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterManagerAccessGranted is a free log retrieval operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterManagerAccessGranted(opts *bind.FilterOpts) (*BaseAccessControlGroupManagerAccessGrantedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "ManagerAccessGranted")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupManagerAccessGrantedIterator{contract: _BaseAccessControlGroup.contract, event: "ManagerAccessGranted", logs: logs, sub: sub}, nil
}

// WatchManagerAccessGranted is a free log subscription operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchManagerAccessGranted(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupManagerAccessGranted) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "ManagerAccessGranted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupManagerAccessGranted)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseManagerAccessGranted is a log parse operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseManagerAccessGranted(log types.Log) (*BaseAccessControlGroupManagerAccessGranted, error) {
	event := new(BaseAccessControlGroupManagerAccessGranted)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessGranted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupManagerAccessRevokedIterator is returned from FilterManagerAccessRevoked and is used to iterate over the raw logs and unpacked data for ManagerAccessRevoked events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessRevokedIterator struct {
	Event *BaseAccessControlGroupManagerAccessRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupManagerAccessRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupManagerAccessRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupManagerAccessRevoked represents a ManagerAccessRevoked event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterManagerAccessRevoked is a free log retrieval operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterManagerAccessRevoked(opts *bind.FilterOpts) (*BaseAccessControlGroupManagerAccessRevokedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "ManagerAccessRevoked")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupManagerAccessRevokedIterator{contract: _BaseAccessControlGroup.contract, event: "ManagerAccessRevoked", logs: logs, sub: sub}, nil
}

// WatchManagerAccessRevoked is a free log subscription operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchManagerAccessRevoked(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupManagerAccessRevoked) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "ManagerAccessRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupManagerAccessRevoked)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseManagerAccessRevoked is a log parse operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseManagerAccessRevoked(log types.Log) (*BaseAccessControlGroupManagerAccessRevoked, error) {
	event := new(BaseAccessControlGroupManagerAccessRevoked)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessRevoked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupMemberAddedIterator is returned from FilterMemberAdded and is used to iterate over the raw logs and unpacked data for MemberAdded events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberAddedIterator struct {
	Event *BaseAccessControlGroupMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupMemberAdded represents a MemberAdded event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberAdded struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMemberAdded is a free log retrieval operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterMemberAdded(opts *bind.FilterOpts) (*BaseAccessControlGroupMemberAddedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "MemberAdded")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupMemberAddedIterator{contract: _BaseAccessControlGroup.contract, event: "MemberAdded", logs: logs, sub: sub}, nil
}

// WatchMemberAdded is a free log subscription operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchMemberAdded(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupMemberAdded) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "MemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupMemberAdded)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberAdded is a log parse operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseMemberAdded(log types.Log) (*BaseAccessControlGroupMemberAdded, error) {
	event := new(BaseAccessControlGroupMemberAdded)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupMemberRevokedIterator is returned from FilterMemberRevoked and is used to iterate over the raw logs and unpacked data for MemberRevoked events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberRevokedIterator struct {
	Event *BaseAccessControlGroupMemberRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupMemberRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupMemberRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupMemberRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupMemberRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupMemberRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupMemberRevoked represents a MemberRevoked event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMemberRevoked is a free log retrieval operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterMemberRevoked(opts *bind.FilterOpts) (*BaseAccessControlGroupMemberRevokedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "MemberRevoked")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupMemberRevokedIterator{contract: _BaseAccessControlGroup.contract, event: "MemberRevoked", logs: logs, sub: sub}, nil
}

// WatchMemberRevoked is a free log subscription operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchMemberRevoked(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupMemberRevoked) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "MemberRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupMemberRevoked)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberRevoked is a log parse operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseMemberRevoked(log types.Log) (*BaseAccessControlGroupMemberRevoked, error) {
	event := new(BaseAccessControlGroupMemberRevoked)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberRevoked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupRightsChangedIterator struct {
	Event *BaseAccessControlGroupRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupRightsChanged represents a RightsChanged event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*BaseAccessControlGroupRightsChangedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupRightsChangedIterator{contract: _BaseAccessControlGroup.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupRightsChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupRightsChanged)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseRightsChanged(log types.Log) (*BaseAccessControlGroupRightsChanged, error) {
	event := new(BaseAccessControlGroupRightsChanged)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupUnauthorizedOperationIterator is returned from FilterUnauthorizedOperation and is used to iterate over the raw logs and unpacked data for UnauthorizedOperation events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUnauthorizedOperationIterator struct {
	Event *BaseAccessControlGroupUnauthorizedOperation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupUnauthorizedOperation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupUnauthorizedOperation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupUnauthorizedOperation represents a UnauthorizedOperation event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUnauthorizedOperation struct {
	OperationCode *big.Int
	Candidate     common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUnauthorizedOperation is a free log retrieval operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterUnauthorizedOperation(opts *bind.FilterOpts) (*BaseAccessControlGroupUnauthorizedOperationIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupUnauthorizedOperationIterator{contract: _BaseAccessControlGroup.contract, event: "UnauthorizedOperation", logs: logs, sub: sub}, nil
}

// WatchUnauthorizedOperation is a free log subscription operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchUnauthorizedOperation(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupUnauthorizedOperation) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupUnauthorizedOperation)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnauthorizedOperation is a log parse operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseUnauthorizedOperation(log types.Log) (*BaseAccessControlGroupUnauthorizedOperation, error) {
	event := new(BaseAccessControlGroupUnauthorizedOperation)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUpdateRequestIterator struct {
	Event *BaseAccessControlGroupUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupUpdateRequest represents a UpdateRequest event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseAccessControlGroupUpdateRequestIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupUpdateRequestIterator{contract: _BaseAccessControlGroup.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupUpdateRequest)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseUpdateRequest(log types.Log) (*BaseAccessControlGroupUpdateRequest, error) {
	event := new(BaseAccessControlGroupUpdateRequest)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionConfirmIterator struct {
	Event *BaseAccessControlGroupVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupVersionConfirm represents a VersionConfirm event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseAccessControlGroupVersionConfirmIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupVersionConfirmIterator{contract: _BaseAccessControlGroup.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupVersionConfirm)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseVersionConfirm(log types.Log) (*BaseAccessControlGroupVersionConfirm, error) {
	event := new(BaseAccessControlGroupVersionConfirm)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionDeleteIterator struct {
	Event *BaseAccessControlGroupVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupVersionDelete represents a VersionDelete event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseAccessControlGroupVersionDeleteIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupVersionDeleteIterator{contract: _BaseAccessControlGroup.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupVersionDelete)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseVersionDelete(log types.Log) (*BaseAccessControlGroupVersionDelete, error) {
	event := new(BaseAccessControlGroupVersionDelete)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupDbgAddressIterator is returned from FilterDbgAddress and is used to iterate over the raw logs and unpacked data for DbgAddress events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupDbgAddressIterator struct {
	Event *BaseAccessControlGroupDbgAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupDbgAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupDbgAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupDbgAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupDbgAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupDbgAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupDbgAddress represents a DbgAddress event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupDbgAddress struct {
	Label string
	Index *big.Int
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDbgAddress is a free log retrieval operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterDbgAddress(opts *bind.FilterOpts) (*BaseAccessControlGroupDbgAddressIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "dbgAddress")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupDbgAddressIterator{contract: _BaseAccessControlGroup.contract, event: "dbgAddress", logs: logs, sub: sub}, nil
}

// WatchDbgAddress is a free log subscription operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchDbgAddress(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupDbgAddress) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "dbgAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupDbgAddress)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "dbgAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDbgAddress is a log parse operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseDbgAddress(log types.Log) (*BaseAccessControlGroupDbgAddress, error) {
	event := new(BaseAccessControlGroupDbgAddress)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "dbgAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletABI is the input ABI used to generate the binding from.
const BaseAccessWalletABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusNonceFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusSendFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_address\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"pke_requestor\",\"type\":\"string\"},{\"name\":\"pke_AFGH\",\"type\":\"string\"},{\"name\":\"custom_values\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"contentAccessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_address\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"request_ID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"ml_out_hash\",\"type\":\"bytes32\"}],\"name\":\"contentAccessComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guarantor\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_objectHash\",\"type\":\"string\"},{\"name\":\"_versionHashesConcat\",\"type\":\"string\"},{\"name\":\"_versionTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"migrateEditable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusBalanceFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_address\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"pke_requestor\",\"type\":\"string\"},{\"name\":\"pke_AFGH\",\"type\":\"string\"},{\"name\":\"custom_values\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestMsg\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusOk\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_address\",\"type\":\"address\"},{\"name\":\"request_ID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"ml_out_hash\",\"type\":\"bytes32\"}],\"name\":\"accessCompleteMsg\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusSigFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"guarantor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"int256\"}],\"name\":\"ExecStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"dbgAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EditableMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AccessRequest\",\"type\":\"event\"}]"

// BaseAccessWalletFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessWalletFuncSigs = map[string]string{
	"18689733": "ACCESS_CONFIRMED()",
	"8232f3f1": "ACCESS_NONE()",
	"479a0c51": "ACCESS_TENTATIVE()",
	"091600e6": "CATEGORY_CONTENT_OBJECT()",
	"68a0469a": "CATEGORY_CONTENT_TYPE()",
	"6373a411": "CATEGORY_CONTRACT()",
	"12915a30": "CATEGORY_GROUP()",
	"16aed232": "CATEGORY_LIBRARY()",
	"d1aeb651": "TYPE_ACCESS()",
	"5d97b6c2": "TYPE_EDIT()",
	"96eba03d": "TYPE_SEE()",
	"97510671": "accessCompleteMsg(address,uint256,uint256,bytes32)",
	"30e66949": "accessGroups()",
	"f1551887": "accessRequest()",
	"957a3aa4": "accessRequestMsg(address,uint8,string,string,bytes32[],address[])",
	"0f58a786": "addContentType(address,address)",
	"32eaf21b": "addressKMS()",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"0eaec2c5": "canContribute(address)",
	"26683e14": "canNodePublish(address)",
	"9b55f901": "canPublish(address)",
	"29d00219": "canReview(address)",
	"15c0bac1": "checkAccessGroupRights(address,uint8)",
	"5faecb76": "checkContentObjectRights(address,uint8)",
	"fe538c5a": "checkContentTypeRights(address,uint8)",
	"a864dfa5": "checkContractRights(address,uint8)",
	"a00b38c4": "checkDirectRights(uint8,address,uint8)",
	"6813b6d1": "checkLibraryRights(address,uint8)",
	"7fb52f1a": "checkRights(uint8,address,uint8)",
	"d30f8cd0": "cleanUpAccessGroups()",
	"2fa5c842": "cleanUpAll()",
	"048bd529": "cleanUpContentObjects()",
	"85e0a200": "cleanUpContentTypes()",
	"92297d7b": "cleanUpLibraries()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"3abaae55": "contentAccessComplete(address,bytes,uint256,uint256,bytes32)",
	"0add6d2a": "contentAccessRequest(address,bytes,uint8,string,string,bytes32[],address[])",
	"a980892d": "contentObjects()",
	"af570c04": "contentSpace()",
	"1cdbee5a": "contentTypeContracts(address)",
	"9f46133e": "contentTypes()",
	"991a3a7c": "contentTypes(uint256)",
	"c65bcbe2": "contentTypesLength()",
	"7709bc78": "contractExists(address)",
	"6c0f79b6": "contracts()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"1e2ff94f": "currentTimestamp()",
	"e1a70717": "deleteVersion(string)",
	"9476c478": "execStatusBalanceFail()",
	"04f55daf": "execStatusNonceFail()",
	"95ba60ba": "execStatusOk()",
	"07a08237": "execStatusSendFail()",
	"eb23b7aa": "execStatusSigFail()",
	"508ad278": "execute(address,uint8,bytes32,bytes32,address,uint256,uint256)",
	"1f2caaec": "findTypeByHash(bytes32)",
	"2d474cbd": "getAccessGroup(uint256)",
	"304f4a7b": "getAccessGroupRights(address)",
	"0dc10d3f": "getAccessGroupsLength()",
	"cf8a7503": "getContentObject(uint256)",
	"69881c0c": "getContentObjectRights(address)",
	"ebe9314e": "getContentObjectsLength()",
	"aa3f6952": "getContentType(uint256)",
	"a4081d62": "getContentTypeRights(address)",
	"5c1d3059": "getContentTypesLength()",
	"6ebc8c86": "getContract(uint256)",
	"08d865d7": "getContractRights(address)",
	"fccc134f": "getContractsLength()",
	"cb86806d": "getLibrariesLength()",
	"d15d62a7": "getLibrary(uint256)",
	"fb52222c": "getLibraryRights(address)",
	"95a078e8": "hasAccess(address)",
	"42e7ba7b": "hasManagerAccess(address)",
	"41c0e1b5": "kill()",
	"c4b1978d": "libraries()",
	"6ae5f5e0": "migrateEditable(address,address,string,string,uint256[])",
	"e02dd9c2": "objectHash()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"2cf99422": "publish(address)",
	"fd089196": "removeContentType(address)",
	"3dd71d99": "requiresReview()",
	"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
	"b8ff1dba": "setAccessRights()",
	"c9e8e72d": "setAddressKMS(address)",
	"3def5140": "setContentObjectRights(address,uint8,uint8)",
	"055af48f": "setContentSpace(address)",
	"8635adb5": "setContentTypeRights(address,uint8,uint8)",
	"224dcba0": "setContractRights(address,uint8,uint8)",
	"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"29dedde5": "validType(address)",
	"f50b2efe": "validateTimestamp(uint256)",
	"763d5ee6": "validateTransaction(uint8,bytes32,bytes32,address,uint256,uint256)",
	"54fd4d50": "version()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"9cb121ba": "whitelistedType(address)",
}

// BaseAccessWalletBin is the compiled bytecode used for deploying new contracts.
var BaseAccessWalletBin = ""

// DeployBaseAccessWallet deploys a new Ethereum contract, binding an instance of BaseAccessWallet to it.
func DeployBaseAccessWallet(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address) (common.Address, *types.Transaction, *BaseAccessWallet, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessWalletABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseAccessWalletBin), backend, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessWallet{BaseAccessWalletCaller: BaseAccessWalletCaller{contract: contract}, BaseAccessWalletTransactor: BaseAccessWalletTransactor{contract: contract}, BaseAccessWalletFilterer: BaseAccessWalletFilterer{contract: contract}}, nil
}

// BaseAccessWallet is an auto generated Go binding around an Ethereum contract.
type BaseAccessWallet struct {
	BaseAccessWalletCaller     // Read-only binding to the contract
	BaseAccessWalletTransactor // Write-only binding to the contract
	BaseAccessWalletFilterer   // Log filterer for contract events
}

// BaseAccessWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseAccessWalletSession struct {
	Contract     *BaseAccessWallet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseAccessWalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseAccessWalletCallerSession struct {
	Contract *BaseAccessWalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// BaseAccessWalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseAccessWalletTransactorSession struct {
	Contract     *BaseAccessWalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// BaseAccessWalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseAccessWalletRaw struct {
	Contract *BaseAccessWallet // Generic contract binding to access the raw methods on
}

// BaseAccessWalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseAccessWalletCallerRaw struct {
	Contract *BaseAccessWalletCaller // Generic read-only contract binding to access the raw methods on
}

// BaseAccessWalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseAccessWalletTransactorRaw struct {
	Contract *BaseAccessWalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseAccessWallet creates a new instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWallet(address common.Address, backend bind.ContractBackend) (*BaseAccessWallet, error) {
	contract, err := bindBaseAccessWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWallet{BaseAccessWalletCaller: BaseAccessWalletCaller{contract: contract}, BaseAccessWalletTransactor: BaseAccessWalletTransactor{contract: contract}, BaseAccessWalletFilterer: BaseAccessWalletFilterer{contract: contract}}, nil
}

// NewBaseAccessWalletCaller creates a new read-only instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessWalletCaller, error) {
	contract, err := bindBaseAccessWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletCaller{contract: contract}, nil
}

// NewBaseAccessWalletTransactor creates a new write-only instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessWalletTransactor, error) {
	contract, err := bindBaseAccessWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletTransactor{contract: contract}, nil
}

// NewBaseAccessWalletFilterer creates a new log filterer instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessWalletFilterer, error) {
	contract, err := bindBaseAccessWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFilterer{contract: contract}, nil
}

// bindBaseAccessWallet binds a generic wrapper to an already deployed contract.
func bindBaseAccessWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessWalletABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessWallet *BaseAccessWalletRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessWallet.Contract.BaseAccessWalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessWallet *BaseAccessWalletRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.BaseAccessWalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessWallet *BaseAccessWalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.BaseAccessWalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessWallet *BaseAccessWalletCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessWallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessWallet *BaseAccessWalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessWallet *BaseAccessWalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.contract.Transact(opts, method, params...)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "ACCESS_CONFIRMED")
	return *ret0, err
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) ACCESSCONFIRMED() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSCONFIRMED(&_BaseAccessWallet.CallOpts)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ACCESSCONFIRMED() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSCONFIRMED(&_BaseAccessWallet.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "ACCESS_NONE")
	return *ret0, err
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) ACCESSNONE() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSNONE(&_BaseAccessWallet.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ACCESSNONE() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSNONE(&_BaseAccessWallet.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "ACCESS_TENTATIVE")
	return *ret0, err
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) ACCESSTENTATIVE() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSTENTATIVE(&_BaseAccessWallet.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ACCESSTENTATIVE() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSTENTATIVE(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_CONTENT_OBJECT")
	return *ret0, err
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTENTOBJECT(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTENTOBJECT(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_CONTENT_TYPE")
	return *ret0, err
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTENTTYPE(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTENTTYPE(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_CONTRACT")
	return *ret0, err
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYCONTRACT() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTRACT(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYCONTRACT() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTRACT(&_BaseAccessWallet.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_GROUP")
	return *ret0, err
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYGROUP() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYGROUP(&_BaseAccessWallet.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYGROUP() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYGROUP(&_BaseAccessWallet.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_LIBRARY")
	return *ret0, err
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYLIBRARY() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYLIBRARY(&_BaseAccessWallet.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYLIBRARY() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYLIBRARY(&_BaseAccessWallet.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "TYPE_ACCESS")
	return *ret0, err
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) TYPEACCESS() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPEACCESS(&_BaseAccessWallet.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) TYPEACCESS() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPEACCESS(&_BaseAccessWallet.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "TYPE_EDIT")
	return *ret0, err
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) TYPEEDIT() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPEEDIT(&_BaseAccessWallet.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) TYPEEDIT() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPEEDIT(&_BaseAccessWallet.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "TYPE_SEE")
	return *ret0, err
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) TYPESEE() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPESEE(&_BaseAccessWallet.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) TYPESEE() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPESEE(&_BaseAccessWallet.CallOpts)
}

// AccessCompleteMsg is a free data retrieval call binding the contract method 0x97510671.
//
// Solidity: function accessCompleteMsg(address content_address, uint256 request_ID, uint256 score_pct, bytes32 ml_out_hash) constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCaller) AccessCompleteMsg(opts *bind.CallOpts, content_address common.Address, request_ID *big.Int, score_pct *big.Int, ml_out_hash [32]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "accessCompleteMsg", content_address, request_ID, score_pct, ml_out_hash)
	return *ret0, err
}

// AccessCompleteMsg is a free data retrieval call binding the contract method 0x97510671.
//
// Solidity: function accessCompleteMsg(address content_address, uint256 request_ID, uint256 score_pct, bytes32 ml_out_hash) constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletSession) AccessCompleteMsg(content_address common.Address, request_ID *big.Int, score_pct *big.Int, ml_out_hash [32]byte) ([32]byte, error) {
	return _BaseAccessWallet.Contract.AccessCompleteMsg(&_BaseAccessWallet.CallOpts, content_address, request_ID, score_pct, ml_out_hash)
}

// AccessCompleteMsg is a free data retrieval call binding the contract method 0x97510671.
//
// Solidity: function accessCompleteMsg(address content_address, uint256 request_ID, uint256 score_pct, bytes32 ml_out_hash) constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) AccessCompleteMsg(content_address common.Address, request_ID *big.Int, score_pct *big.Int, ml_out_hash [32]byte) ([32]byte, error) {
	return _BaseAccessWallet.Contract.AccessCompleteMsg(&_BaseAccessWallet.CallOpts, content_address, request_ID, score_pct, ml_out_hash)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "accessGroups")
	return *ret, err
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.AccessGroups(&_BaseAccessWallet.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.AccessGroups(&_BaseAccessWallet.CallOpts)
}

// AccessRequestMsg is a free data retrieval call binding the contract method 0x957a3aa4.
//
// Solidity: function accessRequestMsg(address content_address, uint8 level, string pke_requestor, string pke_AFGH, bytes32[] custom_values, address[] stakeholders) constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCaller) AccessRequestMsg(opts *bind.CallOpts, content_address common.Address, level uint8, pke_requestor string, pke_AFGH string, custom_values [][32]byte, stakeholders []common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "accessRequestMsg", content_address, level, pke_requestor, pke_AFGH, custom_values, stakeholders)
	return *ret0, err
}

// AccessRequestMsg is a free data retrieval call binding the contract method 0x957a3aa4.
//
// Solidity: function accessRequestMsg(address content_address, uint8 level, string pke_requestor, string pke_AFGH, bytes32[] custom_values, address[] stakeholders) constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletSession) AccessRequestMsg(content_address common.Address, level uint8, pke_requestor string, pke_AFGH string, custom_values [][32]byte, stakeholders []common.Address) ([32]byte, error) {
	return _BaseAccessWallet.Contract.AccessRequestMsg(&_BaseAccessWallet.CallOpts, content_address, level, pke_requestor, pke_AFGH, custom_values, stakeholders)
}

// AccessRequestMsg is a free data retrieval call binding the contract method 0x957a3aa4.
//
// Solidity: function accessRequestMsg(address content_address, uint8 level, string pke_requestor, string pke_AFGH, bytes32[] custom_values, address[] stakeholders) constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) AccessRequestMsg(content_address common.Address, level uint8, pke_requestor string, pke_AFGH string, custom_values [][32]byte, stakeholders []common.Address) ([32]byte, error) {
	return _BaseAccessWallet.Contract.AccessRequestMsg(&_BaseAccessWallet.CallOpts, content_address, level, pke_requestor, pke_AFGH, custom_values, stakeholders)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) AddressKMS() (common.Address, error) {
	return _BaseAccessWallet.Contract.AddressKMS(&_BaseAccessWallet.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) AddressKMS() (common.Address, error) {
	return _BaseAccessWallet.Contract.AddressKMS(&_BaseAccessWallet.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanCommit() (bool, error) {
	return _BaseAccessWallet.Contract.CanCommit(&_BaseAccessWallet.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanCommit() (bool, error) {
	return _BaseAccessWallet.Contract.CanCommit(&_BaseAccessWallet.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanConfirm() (bool, error) {
	return _BaseAccessWallet.Contract.CanConfirm(&_BaseAccessWallet.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanConfirm() (bool, error) {
	return _BaseAccessWallet.Contract.CanConfirm(&_BaseAccessWallet.CallOpts)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canContribute", _candidate)
	return *ret0, err
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanContribute(&_BaseAccessWallet.CallOpts, _candidate)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanContribute(&_BaseAccessWallet.CallOpts, _candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canNodePublish", candidate)
	return *ret0, err
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanNodePublish(&_BaseAccessWallet.CallOpts, candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanNodePublish(&_BaseAccessWallet.CallOpts, candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canPublish", _candidate)
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanPublish(&_BaseAccessWallet.CallOpts, _candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanPublish(&_BaseAccessWallet.CallOpts, _candidate)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canReview", arg0)
	return *ret0, err
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanReview(arg0 common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanReview(&_BaseAccessWallet.CallOpts, arg0)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanReview(arg0 common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanReview(&_BaseAccessWallet.CallOpts, arg0)
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckAccessGroupRights(opts *bind.CallOpts, group common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkAccessGroupRights", group, access_type)
	return *ret0, err
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckAccessGroupRights(group common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckAccessGroupRights(&_BaseAccessWallet.CallOpts, group, access_type)
}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckAccessGroupRights(group common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckAccessGroupRights(&_BaseAccessWallet.CallOpts, group, access_type)
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckContentObjectRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkContentObjectRights", obj, access_type)
	return *ret0, err
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckContentObjectRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckContentObjectRights(&_BaseAccessWallet.CallOpts, obj, access_type)
}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckContentObjectRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckContentObjectRights(&_BaseAccessWallet.CallOpts, obj, access_type)
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckContentTypeRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkContentTypeRights", obj, access_type)
	return *ret0, err
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckContentTypeRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckContentTypeRights(&_BaseAccessWallet.CallOpts, obj, access_type)
}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckContentTypeRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckContentTypeRights(&_BaseAccessWallet.CallOpts, obj, access_type)
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckContractRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkContractRights", obj, access_type)
	return *ret0, err
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckContractRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckContractRights(&_BaseAccessWallet.CallOpts, obj, access_type)
}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckContractRights(obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckContractRights(&_BaseAccessWallet.CallOpts, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkDirectRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckDirectRights(&_BaseAccessWallet.CallOpts, index_type, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckDirectRights(&_BaseAccessWallet.CallOpts, index_type, obj, access_type)
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckLibraryRights(opts *bind.CallOpts, lib common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkLibraryRights", lib, access_type)
	return *ret0, err
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckLibraryRights(lib common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckLibraryRights(&_BaseAccessWallet.CallOpts, lib, access_type)
}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckLibraryRights(lib common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckLibraryRights(&_BaseAccessWallet.CallOpts, lib, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckRights(&_BaseAccessWallet.CallOpts, index_type, obj, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckRights(&_BaseAccessWallet.CallOpts, index_type, obj, access_type)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CommitPending() (bool, error) {
	return _BaseAccessWallet.Contract.CommitPending(&_BaseAccessWallet.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CommitPending() (bool, error) {
	return _BaseAccessWallet.Contract.CommitPending(&_BaseAccessWallet.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "contentObjects")
	return *ret, err
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.ContentObjects(&_BaseAccessWallet.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.ContentObjects(&_BaseAccessWallet.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentSpace() (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentSpace(&_BaseAccessWallet.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentSpace() (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentSpace(&_BaseAccessWallet.CallOpts)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contentTypeContracts", arg0)
	return *ret0, err
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentTypeContracts(&_BaseAccessWallet.CallOpts, arg0)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentTypeContracts(&_BaseAccessWallet.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contentTypes", arg0)
	return *ret0, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentTypes(&_BaseAccessWallet.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentTypes(&_BaseAccessWallet.CallOpts, arg0)
}

// ContentTypes0 is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypes0(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "contentTypes0")
	return *ret, err
}

// ContentTypes0 is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentTypes0() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.ContentTypes0(&_BaseAccessWallet.CallOpts)
}

// ContentTypes0 is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentTypes0() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.ContentTypes0(&_BaseAccessWallet.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contentTypesLength")
	return *ret0, err
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentTypesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ContentTypesLength(&_BaseAccessWallet.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentTypesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ContentTypesLength(&_BaseAccessWallet.CallOpts)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contractExists", addr)
	return *ret0, err
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ContractExists(addr common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.ContractExists(&_BaseAccessWallet.CallOpts, addr)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContractExists(addr common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.ContractExists(&_BaseAccessWallet.CallOpts, addr)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "contracts")
	return *ret, err
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Contracts(&_BaseAccessWallet.CallOpts)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Contracts(&_BaseAccessWallet.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CountVersionHashes() (*big.Int, error) {
	return _BaseAccessWallet.Contract.CountVersionHashes(&_BaseAccessWallet.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseAccessWallet.Contract.CountVersionHashes(&_BaseAccessWallet.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) Creator() (common.Address, error) {
	return _BaseAccessWallet.Contract.Creator(&_BaseAccessWallet.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Creator() (common.Address, error) {
	return _BaseAccessWallet.Contract.Creator(&_BaseAccessWallet.CallOpts)
}

// CurrentTimestamp is a free data retrieval call binding the contract method 0x1e2ff94f.
//
// Solidity: function currentTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) CurrentTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "currentTimestamp")
	return *ret0, err
}

// CurrentTimestamp is a free data retrieval call binding the contract method 0x1e2ff94f.
//
// Solidity: function currentTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CurrentTimestamp() (*big.Int, error) {
	return _BaseAccessWallet.Contract.CurrentTimestamp(&_BaseAccessWallet.CallOpts)
}

// CurrentTimestamp is a free data retrieval call binding the contract method 0x1e2ff94f.
//
// Solidity: function currentTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CurrentTimestamp() (*big.Int, error) {
	return _BaseAccessWallet.Contract.CurrentTimestamp(&_BaseAccessWallet.CallOpts)
}

// ExecStatusBalanceFail is a free data retrieval call binding the contract method 0x9476c478.
//
// Solidity: function execStatusBalanceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusBalanceFail(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusBalanceFail")
	return *ret0, err
}

// ExecStatusBalanceFail is a free data retrieval call binding the contract method 0x9476c478.
//
// Solidity: function execStatusBalanceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusBalanceFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusBalanceFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusBalanceFail is a free data retrieval call binding the contract method 0x9476c478.
//
// Solidity: function execStatusBalanceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusBalanceFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusBalanceFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusNonceFail is a free data retrieval call binding the contract method 0x04f55daf.
//
// Solidity: function execStatusNonceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusNonceFail(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusNonceFail")
	return *ret0, err
}

// ExecStatusNonceFail is a free data retrieval call binding the contract method 0x04f55daf.
//
// Solidity: function execStatusNonceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusNonceFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusNonceFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusNonceFail is a free data retrieval call binding the contract method 0x04f55daf.
//
// Solidity: function execStatusNonceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusNonceFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusNonceFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusOk is a free data retrieval call binding the contract method 0x95ba60ba.
//
// Solidity: function execStatusOk() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusOk(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusOk")
	return *ret0, err
}

// ExecStatusOk is a free data retrieval call binding the contract method 0x95ba60ba.
//
// Solidity: function execStatusOk() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusOk() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusOk(&_BaseAccessWallet.CallOpts)
}

// ExecStatusOk is a free data retrieval call binding the contract method 0x95ba60ba.
//
// Solidity: function execStatusOk() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusOk() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusOk(&_BaseAccessWallet.CallOpts)
}

// ExecStatusSendFail is a free data retrieval call binding the contract method 0x07a08237.
//
// Solidity: function execStatusSendFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusSendFail(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusSendFail")
	return *ret0, err
}

// ExecStatusSendFail is a free data retrieval call binding the contract method 0x07a08237.
//
// Solidity: function execStatusSendFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusSendFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusSendFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusSendFail is a free data retrieval call binding the contract method 0x07a08237.
//
// Solidity: function execStatusSendFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusSendFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusSendFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusSigFail is a free data retrieval call binding the contract method 0xeb23b7aa.
//
// Solidity: function execStatusSigFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusSigFail(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusSigFail")
	return *ret0, err
}

// ExecStatusSigFail is a free data retrieval call binding the contract method 0xeb23b7aa.
//
// Solidity: function execStatusSigFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusSigFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusSigFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusSigFail is a free data retrieval call binding the contract method 0xeb23b7aa.
//
// Solidity: function execStatusSigFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusSigFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusSigFail(&_BaseAccessWallet.CallOpts)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "findTypeByHash", typeHash)
	return *ret0, err
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseAccessWallet.Contract.FindTypeByHash(&_BaseAccessWallet.CallOpts, typeHash)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseAccessWallet.Contract.FindTypeByHash(&_BaseAccessWallet.CallOpts, typeHash)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getAccessGroup", position)
	return *ret0, err
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetAccessGroup(&_BaseAccessWallet.CallOpts, position)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetAccessGroup(&_BaseAccessWallet.CallOpts, position)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getAccessGroupRights", group)
	return *ret0, err
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetAccessGroupRights(&_BaseAccessWallet.CallOpts, group)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetAccessGroupRights(&_BaseAccessWallet.CallOpts, group)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getAccessGroupsLength")
	return *ret0, err
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetAccessGroupsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetAccessGroupsLength(&_BaseAccessWallet.CallOpts)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetAccessGroupsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetAccessGroupsLength(&_BaseAccessWallet.CallOpts)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentObject", position)
	return *ret0, err
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContentObject(&_BaseAccessWallet.CallOpts, position)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContentObject(&_BaseAccessWallet.CallOpts, position)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentObjectRights", obj)
	return *ret0, err
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContentObjectRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContentObjectRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentObjectsLength")
	return *ret0, err
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentObjectsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContentObjectsLength(&_BaseAccessWallet.CallOpts)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentObjectsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContentObjectsLength(&_BaseAccessWallet.CallOpts)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentType", position)
	return *ret0, err
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentType(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContentType(&_BaseAccessWallet.CallOpts, position)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentType(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContentType(&_BaseAccessWallet.CallOpts, position)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentTypeRights", obj)
	return *ret0, err
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContentTypeRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContentTypeRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentTypesLength")
	return *ret0, err
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentTypesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContentTypesLength(&_BaseAccessWallet.CallOpts)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentTypesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContentTypesLength(&_BaseAccessWallet.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContract", position)
	return *ret0, err
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContract(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContract(&_BaseAccessWallet.CallOpts, position)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContract(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContract(&_BaseAccessWallet.CallOpts, position)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContractRights", obj)
	return *ret0, err
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContractRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContractRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContractRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContractRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContractsLength")
	return *ret0, err
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContractsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContractsLength(&_BaseAccessWallet.CallOpts)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContractsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContractsLength(&_BaseAccessWallet.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getLibrariesLength")
	return *ret0, err
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetLibrariesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetLibrariesLength(&_BaseAccessWallet.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetLibrariesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetLibrariesLength(&_BaseAccessWallet.CallOpts)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getLibrary", position)
	return *ret0, err
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetLibrary(&_BaseAccessWallet.CallOpts, position)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetLibrary(&_BaseAccessWallet.CallOpts, position)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getLibraryRights", lib)
	return *ret0, err
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetLibraryRights(&_BaseAccessWallet.CallOpts, lib)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetLibraryRights(&_BaseAccessWallet.CallOpts, lib)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address ) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) HasAccess(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "hasAccess", arg0)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address ) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) HasAccess(arg0 common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasAccess(&_BaseAccessWallet.CallOpts, arg0)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address ) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) HasAccess(arg0 common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasAccess(&_BaseAccessWallet.CallOpts, arg0)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) HasManagerAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "hasManagerAccess", candidate)
	return *ret0, err
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) HasManagerAccess(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasManagerAccess(&_BaseAccessWallet.CallOpts, candidate)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) HasManagerAccess(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasManagerAccess(&_BaseAccessWallet.CallOpts, candidate)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "libraries")
	return *ret, err
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Libraries(&_BaseAccessWallet.CallOpts)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Libraries(&_BaseAccessWallet.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletSession) ObjectHash() (string, error) {
	return _BaseAccessWallet.Contract.ObjectHash(&_BaseAccessWallet.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ObjectHash() (string, error) {
	return _BaseAccessWallet.Contract.ObjectHash(&_BaseAccessWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) Owner() (common.Address, error) {
	return _BaseAccessWallet.Contract.Owner(&_BaseAccessWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Owner() (common.Address, error) {
	return _BaseAccessWallet.Contract.Owner(&_BaseAccessWallet.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) ParentAddress() (common.Address, error) {
	return _BaseAccessWallet.Contract.ParentAddress(&_BaseAccessWallet.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ParentAddress() (common.Address, error) {
	return _BaseAccessWallet.Contract.ParentAddress(&_BaseAccessWallet.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletSession) PendingHash() (string, error) {
	return _BaseAccessWallet.Contract.PendingHash(&_BaseAccessWallet.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) PendingHash() (string, error) {
	return _BaseAccessWallet.Contract.PendingHash(&_BaseAccessWallet.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "requiresReview")
	return *ret0, err
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) RequiresReview() (bool, error) {
	return _BaseAccessWallet.Contract.RequiresReview(&_BaseAccessWallet.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) RequiresReview() (bool, error) {
	return _BaseAccessWallet.Contract.RequiresReview(&_BaseAccessWallet.CallOpts)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "validType", content_type)
	return *ret0, err
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.ValidType(&_BaseAccessWallet.CallOpts, content_type)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.ValidType(&_BaseAccessWallet.CallOpts, content_type)
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidateTimestamp(opts *bind.CallOpts, _ts *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "validateTimestamp", _ts)
	return *ret0, err
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ValidateTimestamp(_ts *big.Int) (bool, error) {
	return _BaseAccessWallet.Contract.ValidateTimestamp(&_BaseAccessWallet.CallOpts, _ts)
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ValidateTimestamp(_ts *big.Int) (bool, error) {
	return _BaseAccessWallet.Contract.ValidateTimestamp(&_BaseAccessWallet.CallOpts, _ts)
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidateTransaction(opts *bind.CallOpts, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "validateTransaction", _v, _r, _s, _dest, _value, _ts)
	return *ret0, err
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ValidateTransaction(_v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	return _BaseAccessWallet.Contract.ValidateTransaction(&_BaseAccessWallet.CallOpts, _v, _r, _s, _dest, _value, _ts)
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ValidateTransaction(_v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	return _BaseAccessWallet.Contract.ValidateTransaction(&_BaseAccessWallet.CallOpts, _v, _r, _s, _dest, _value, _ts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletSession) Version() ([32]byte, error) {
	return _BaseAccessWallet.Contract.Version(&_BaseAccessWallet.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Version() ([32]byte, error) {
	return _BaseAccessWallet.Contract.Version(&_BaseAccessWallet.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseAccessWallet.Contract.VersionHashes(&_BaseAccessWallet.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseAccessWallet.Contract.VersionHashes(&_BaseAccessWallet.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseAccessWallet.Contract.VersionTimestamp(&_BaseAccessWallet.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseAccessWallet.Contract.VersionTimestamp(&_BaseAccessWallet.CallOpts, arg0)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "whitelistedType", content_type)
	return *ret0, err
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.WhitelistedType(&_BaseAccessWallet.CallOpts, content_type)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.WhitelistedType(&_BaseAccessWallet.CallOpts, content_type)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) AccessRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "accessRequest")
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) AccessRequest() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.AccessRequest(&_BaseAccessWallet.TransactOpts)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) AccessRequest() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.AccessRequest(&_BaseAccessWallet.TransactOpts)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.AddContentType(&_BaseAccessWallet.TransactOpts, content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.AddContentType(&_BaseAccessWallet.TransactOpts, content_type, content_contract)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpAccessGroups(&_BaseAccessWallet.TransactOpts)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpAccessGroups(&_BaseAccessWallet.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpAll")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpAll() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpAll(&_BaseAccessWallet.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpAll() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpAll(&_BaseAccessWallet.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpContentObjects(&_BaseAccessWallet.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpContentObjects(&_BaseAccessWallet.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpContentTypes(&_BaseAccessWallet.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpContentTypes(&_BaseAccessWallet.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpLibraries")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpLibraries() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpLibraries(&_BaseAccessWallet.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpLibraries() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpLibraries(&_BaseAccessWallet.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessWallet *BaseAccessWalletSession) ClearPending() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ClearPending(&_BaseAccessWallet.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ClearPending(&_BaseAccessWallet.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Commit(&_BaseAccessWallet.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Commit(&_BaseAccessWallet.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ConfirmCommit(&_BaseAccessWallet.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ConfirmCommit(&_BaseAccessWallet.TransactOpts)
}

// ContentAccessComplete is a paid mutator transaction binding the contract method 0x3abaae55.
//
// Solidity: function contentAccessComplete(address content_address, bytes , uint256 request_ID, uint256 score_pct, bytes32 ml_out_hash) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) ContentAccessComplete(opts *bind.TransactOpts, content_address common.Address, arg1 []byte, request_ID *big.Int, score_pct *big.Int, ml_out_hash [32]byte) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "contentAccessComplete", content_address, arg1, request_ID, score_pct, ml_out_hash)
}

// ContentAccessComplete is a paid mutator transaction binding the contract method 0x3abaae55.
//
// Solidity: function contentAccessComplete(address content_address, bytes , uint256 request_ID, uint256 score_pct, bytes32 ml_out_hash) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentAccessComplete(content_address common.Address, arg1 []byte, request_ID *big.Int, score_pct *big.Int, ml_out_hash [32]byte) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ContentAccessComplete(&_BaseAccessWallet.TransactOpts, content_address, arg1, request_ID, score_pct, ml_out_hash)
}

// ContentAccessComplete is a paid mutator transaction binding the contract method 0x3abaae55.
//
// Solidity: function contentAccessComplete(address content_address, bytes , uint256 request_ID, uint256 score_pct, bytes32 ml_out_hash) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) ContentAccessComplete(content_address common.Address, arg1 []byte, request_ID *big.Int, score_pct *big.Int, ml_out_hash [32]byte) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ContentAccessComplete(&_BaseAccessWallet.TransactOpts, content_address, arg1, request_ID, score_pct, ml_out_hash)
}

// ContentAccessRequest is a paid mutator transaction binding the contract method 0x0add6d2a.
//
// Solidity: function contentAccessRequest(address content_address, bytes , uint8 level, string pke_requestor, string pke_AFGH, bytes32[] custom_values, address[] stakeholders) returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) ContentAccessRequest(opts *bind.TransactOpts, content_address common.Address, arg1 []byte, level uint8, pke_requestor string, pke_AFGH string, custom_values [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "contentAccessRequest", content_address, arg1, level, pke_requestor, pke_AFGH, custom_values, stakeholders)
}

// ContentAccessRequest is a paid mutator transaction binding the contract method 0x0add6d2a.
//
// Solidity: function contentAccessRequest(address content_address, bytes , uint8 level, string pke_requestor, string pke_AFGH, bytes32[] custom_values, address[] stakeholders) returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentAccessRequest(content_address common.Address, arg1 []byte, level uint8, pke_requestor string, pke_AFGH string, custom_values [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ContentAccessRequest(&_BaseAccessWallet.TransactOpts, content_address, arg1, level, pke_requestor, pke_AFGH, custom_values, stakeholders)
}

// ContentAccessRequest is a paid mutator transaction binding the contract method 0x0add6d2a.
//
// Solidity: function contentAccessRequest(address content_address, bytes , uint8 level, string pke_requestor, string pke_AFGH, bytes32[] custom_values, address[] stakeholders) returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) ContentAccessRequest(content_address common.Address, arg1 []byte, level uint8, pke_requestor string, pke_AFGH string, custom_values [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ContentAccessRequest(&_BaseAccessWallet.TransactOpts, content_address, arg1, level, pke_requestor, pke_AFGH, custom_values, stakeholders)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.DeleteVersion(&_BaseAccessWallet.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.DeleteVersion(&_BaseAccessWallet.TransactOpts, _versionHash)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) Execute(opts *bind.TransactOpts, _guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "execute", _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) Execute(_guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Execute(&_BaseAccessWallet.TransactOpts, _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) Execute(_guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Execute(&_BaseAccessWallet.TransactOpts, _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWallet *BaseAccessWalletSession) Kill() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Kill(&_BaseAccessWallet.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Kill(&_BaseAccessWallet.TransactOpts)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) MigrateEditable(opts *bind.TransactOpts, _owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "migrateEditable", _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.MigrateEditable(&_BaseAccessWallet.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.MigrateEditable(&_BaseAccessWallet.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "publish", contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Publish(&_BaseAccessWallet.TransactOpts, contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Publish(&_BaseAccessWallet.TransactOpts, contentObj)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.RemoveContentType(&_BaseAccessWallet.TransactOpts, content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.RemoveContentType(&_BaseAccessWallet.TransactOpts, content_type)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAccessGroupRights(&_BaseAccessWallet.TransactOpts, group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAccessGroupRights(&_BaseAccessWallet.TransactOpts, group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAccessRights")
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetAccessRights() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAccessRights(&_BaseAccessWallet.TransactOpts)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetAccessRights() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAccessRights(&_BaseAccessWallet.TransactOpts)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAddressKMS(&_BaseAccessWallet.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAddressKMS(&_BaseAccessWallet.TransactOpts, address_KMS)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentObjectRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentObjectRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentSpace(&_BaseAccessWallet.TransactOpts, content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentSpace(&_BaseAccessWallet.TransactOpts, content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentTypeRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentTypeRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContractRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContractRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetLibraryRights(&_BaseAccessWallet.TransactOpts, lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetLibraryRights(&_BaseAccessWallet.TransactOpts, lib, access_type, access)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.TransferCreatorship(&_BaseAccessWallet.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.TransferCreatorship(&_BaseAccessWallet.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.TransferOwnership(&_BaseAccessWallet.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.TransferOwnership(&_BaseAccessWallet.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessWallet *BaseAccessWalletSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.UpdateRequest(&_BaseAccessWallet.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.UpdateRequest(&_BaseAccessWallet.TransactOpts)
}

// BaseAccessWalletAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseAccessWallet contract.
type BaseAccessWalletAccessRequestIterator struct {
	Event *BaseAccessWalletAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletAccessRequest represents a AccessRequest event raised by the BaseAccessWallet contract.
type BaseAccessWalletAccessRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseAccessWalletAccessRequestIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletAccessRequestIterator{contract: _BaseAccessWallet.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletAccessRequest)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseAccessRequest(log types.Log) (*BaseAccessWalletAccessRequest, error) {
	event := new(BaseAccessWalletAccessRequest)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseAccessWallet contract.
type BaseAccessWalletCommitPendingIterator struct {
	Event *BaseAccessWalletCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletCommitPending represents a CommitPending event raised by the BaseAccessWallet contract.
type BaseAccessWalletCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseAccessWalletCommitPendingIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletCommitPendingIterator{contract: _BaseAccessWallet.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletCommitPending)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseCommitPending(log types.Log) (*BaseAccessWalletCommitPending, error) {
	event := new(BaseAccessWalletCommitPending)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeAddedIterator struct {
	Event *BaseAccessWalletContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletContentTypeAdded represents a ContentTypeAdded event raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseAccessWalletContentTypeAddedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletContentTypeAddedIterator{contract: _BaseAccessWallet.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletContentTypeAdded)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseContentTypeAdded(log types.Log) (*BaseAccessWalletContentTypeAdded, error) {
	event := new(BaseAccessWalletContentTypeAdded)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeRemovedIterator struct {
	Event *BaseAccessWalletContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseAccessWalletContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletContentTypeRemovedIterator{contract: _BaseAccessWallet.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletContentTypeRemoved)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseContentTypeRemoved(log types.Log) (*BaseAccessWalletContentTypeRemoved, error) {
	event := new(BaseAccessWalletContentTypeRemoved)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletEditableMigrateIterator is returned from FilterEditableMigrate and is used to iterate over the raw logs and unpacked data for EditableMigrate events raised by the BaseAccessWallet contract.
type BaseAccessWalletEditableMigrateIterator struct {
	Event *BaseAccessWalletEditableMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletEditableMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletEditableMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletEditableMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletEditableMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletEditableMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletEditableMigrate represents a EditableMigrate event raised by the BaseAccessWallet contract.
type BaseAccessWalletEditableMigrate struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEditableMigrate is a free log retrieval operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterEditableMigrate(opts *bind.FilterOpts) (*BaseAccessWalletEditableMigrateIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletEditableMigrateIterator{contract: _BaseAccessWallet.contract, event: "EditableMigrate", logs: logs, sub: sub}, nil
}

// WatchEditableMigrate is a free log subscription operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchEditableMigrate(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletEditableMigrate) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletEditableMigrate)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEditableMigrate is a log parse operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseEditableMigrate(log types.Log) (*BaseAccessWalletEditableMigrate, error) {
	event := new(BaseAccessWalletEditableMigrate)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletExecStatusIterator is returned from FilterExecStatus and is used to iterate over the raw logs and unpacked data for ExecStatus events raised by the BaseAccessWallet contract.
type BaseAccessWalletExecStatusIterator struct {
	Event *BaseAccessWalletExecStatus // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletExecStatusIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletExecStatus)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletExecStatus)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletExecStatusIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletExecStatusIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletExecStatus represents a ExecStatus event raised by the BaseAccessWallet contract.
type BaseAccessWalletExecStatus struct {
	Guarantor common.Address
	Code      *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterExecStatus is a free log retrieval operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterExecStatus(opts *bind.FilterOpts) (*BaseAccessWalletExecStatusIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ExecStatus")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletExecStatusIterator{contract: _BaseAccessWallet.contract, event: "ExecStatus", logs: logs, sub: sub}, nil
}

// WatchExecStatus is a free log subscription operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchExecStatus(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletExecStatus) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ExecStatus")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletExecStatus)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ExecStatus", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecStatus is a log parse operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseExecStatus(log types.Log) (*BaseAccessWalletExecStatus, error) {
	event := new(BaseAccessWalletExecStatus)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ExecStatus", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the BaseAccessWallet contract.
type BaseAccessWalletRightsChangedIterator struct {
	Event *BaseAccessWalletRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletRightsChanged represents a RightsChanged event raised by the BaseAccessWallet contract.
type BaseAccessWalletRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*BaseAccessWalletRightsChangedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletRightsChangedIterator{contract: _BaseAccessWallet.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletRightsChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletRightsChanged)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseRightsChanged(log types.Log) (*BaseAccessWalletRightsChanged, error) {
	event := new(BaseAccessWalletRightsChanged)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseAccessWallet contract.
type BaseAccessWalletUpdateRequestIterator struct {
	Event *BaseAccessWalletUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletUpdateRequest represents a UpdateRequest event raised by the BaseAccessWallet contract.
type BaseAccessWalletUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseAccessWalletUpdateRequestIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletUpdateRequestIterator{contract: _BaseAccessWallet.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletUpdateRequest)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseUpdateRequest(log types.Log) (*BaseAccessWalletUpdateRequest, error) {
	event := new(BaseAccessWalletUpdateRequest)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionConfirmIterator struct {
	Event *BaseAccessWalletVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletVersionConfirm represents a VersionConfirm event raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseAccessWalletVersionConfirmIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletVersionConfirmIterator{contract: _BaseAccessWallet.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletVersionConfirm)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseVersionConfirm(log types.Log) (*BaseAccessWalletVersionConfirm, error) {
	event := new(BaseAccessWalletVersionConfirm)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionDeleteIterator struct {
	Event *BaseAccessWalletVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletVersionDelete represents a VersionDelete event raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseAccessWalletVersionDeleteIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletVersionDeleteIterator{contract: _BaseAccessWallet.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletVersionDelete)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseVersionDelete(log types.Log) (*BaseAccessWalletVersionDelete, error) {
	event := new(BaseAccessWalletVersionDelete)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletDbgAddressIterator is returned from FilterDbgAddress and is used to iterate over the raw logs and unpacked data for DbgAddress events raised by the BaseAccessWallet contract.
type BaseAccessWalletDbgAddressIterator struct {
	Event *BaseAccessWalletDbgAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletDbgAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletDbgAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletDbgAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletDbgAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletDbgAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletDbgAddress represents a DbgAddress event raised by the BaseAccessWallet contract.
type BaseAccessWalletDbgAddress struct {
	Label string
	Index *big.Int
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDbgAddress is a free log retrieval operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterDbgAddress(opts *bind.FilterOpts) (*BaseAccessWalletDbgAddressIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "dbgAddress")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletDbgAddressIterator{contract: _BaseAccessWallet.contract, event: "dbgAddress", logs: logs, sub: sub}, nil
}

// WatchDbgAddress is a free log subscription operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchDbgAddress(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletDbgAddress) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "dbgAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletDbgAddress)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "dbgAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDbgAddress is a log parse operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseDbgAddress(log types.Log) (*BaseAccessWalletDbgAddress, error) {
	event := new(BaseAccessWalletDbgAddress)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "dbgAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletFactoryABI is the input ABI used to generate the binding from.
const BaseAccessWalletFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseAccessWalletFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessWalletFactoryFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"7708bc41": "createAccessWallet()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
}

// BaseAccessWalletFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseAccessWalletFactoryBin = "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f4273416363576c74466163746f727932303139303530363135343230304d4c0060045560018054600160a060020a03199081163290811790925560028054909116909117905561513e8061007e6000396000f30060806040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461008f57806341c0e1b5146100c057806354fd4d50146100d55780636d2e4b1b146100fc5780637708bc411461011d5780638da5cb5b14610132578063af570c0414610147578063f2fde38b1461015c575b005b34801561009b57600080fd5b506100a461017d565b60408051600160a060020a039092168252519081900360200190f35b3480156100cc57600080fd5b5061008d61018c565b3480156100e157600080fd5b506100ea6101c8565b60408051918252519081900360200190f35b34801561010857600080fd5b5061008d600160a060020a03600435166101ce565b34801561012957600080fd5b506100a4610229565b34801561013e57600080fd5b506100a4610267565b34801561015357600080fd5b506100a4610276565b34801561016857600080fd5b5061008d600160a060020a0360043516610285565b600154600160a060020a031681565b600254600160a060020a03163214806101af5750600254600160a060020a031633145b15156101ba57600080fd5b600254600160a060020a0316ff5b60045481565b600154600160a060020a031632146101e557600080fd5b600160a060020a03811615156101fa57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000336102346102f7565b600160a060020a03909116815260405190819003602001906000f080158015610261573d6000803e3d6000fd5b50905090565b600254600160a060020a031681565b600354600160a060020a031681565b600254600160a060020a03163214806102a85750600254600160a060020a031633145b15156102b357600080fd5b600160a060020a03811615156102c857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604051614e0b806103088339019056007f41636365737369626c6532303139303232323133353930304d4c00000000000060009081557f4f776e61626c6532303139303532383139333830304d4c00000000000000000060019081557f4564697461626c6532303139303830313133353530304d4c00000000000000006005557f436f6e7461696e657232303139303532393039313830304d4c00000000000000600c55600f919091557f416363657373496e6465786f7232303139303830313134313030304d4c0000006011556012805460ff1916821761ff0019166102001762ff00001916620300001763ff000000191663040000001764ff00000000191664050000000017905560e06040526080908152600a60a052606460c0526200011d906013906003620001f9565b507f427341636365737357616c6c65743230313930363131313230303030504f000060285560405160208062004e0b83398101604052516002805432600160a060020a031991821681179092556003805482169092179091556012546014805462010000830460ff90811660ff1992831617909255601c805461010085048416908316179055601880548385169083161790556020805463010000008504841690831617905560248054640100000000909404909216921691909117905560048054909116600160a060020a03909216919091179055620002b7565b600183019183908215620002815791602002820160005b838211156200025057835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000210565b80156200027f5782816101000a81549060ff021916905560010160208160000104928301926001030262000250565b505b506200028f92915062000293565b5090565b620002b491905b808211156200028f57805460ff191681556001016200029a565b90565b614b4480620002c76000396000f30060806040526004361061049e5763ffffffff60e060020a600035041662821de381146104a057806302d05d3f146104d1578063048bd529146104e657806304f55daf1461050d578063055af48f1461052257806307a082371461054357806308d865d714610558578063091600e61461058f5780630add6d2a146105a45780630dc10d3f146107025780630eaec2c5146107175780630f58a7861461074c57806312915a301461077357806314cfabb31461078857806315c0bac11461079d57806316aed232146107c457806318689733146107d95780631cdbee5a146107ee5780631e2ff94f1461080f5780631f2caaec14610824578063224dcba01461083c57806326683e141461086957806329d002191461088a57806329dedde5146108ab5780632cf99422146108cc5780632d474cbd146108ed5780632fa5c84214610905578063304f4a7b1461094557806330e669491461096657806332eaf21b14610998578063331b86c0146109ad578063375a6e7c146109c25780633abaae55146109d75780633dd71d9914610a3e5780633def514014610a5357806341c0e1b514610a8057806342e7ba7b14610a95578063446e882614610ab6578063479a0c5114610abe578063508ad27814610ad357806354fd4d5014610b0f5780635c1d305914610b245780635d97b6c2146107d95780635f6a130114610b395780635faecb7614610b4e578063628449fd14610b755780636373a41114610bff5780636813b6d114610c1457806368a0469a14610c3b57806369881c0c14610c505780636ae5f5e014610c715780636c0f79b614610d575780636d2e4b1b14610d6c5780636e37542714610d8d5780636ebc8c8614610da2578063763d5ee614610dba5780637709bc7814610ded5780637886f74714610e0e5780637ca8f61814610e265780637cbb7bf214610e3e5780637fb52f1a14610e6b5780638232f3f114610e9957806385e0a20014610eae5780638635adb514610ec35780638da5cb5b14610ef057806392297d7b14610f055780639476c47814610f1a578063957a3aa414610f2f57806395a078e81461104b57806395ba60ba1461106c57806396eba03d14610e9957806397510671146110815780639867db74146110ab578063991a3a7c146111045780639b55f901146107175780639cb121ba1461111c5780639f46133e1461113d578063a00b38c414611152578063a4081d6214611180578063a864dfa5146111a1578063a980892d146111c8578063aa3f6952146111dd578063af570c04146111f5578063b8ff1dba1461120a578063c287e0ed1461121f578063c4b1978d14611234578063c65bcbe214611249578063c9e8e72d1461125e578063cb86806d1461127f578063cf8a750314611294578063d15d62a7146112ac578063d1aeb65114610abe578063d30f8cd0146112c4578063e02dd9c2146112d9578063e1a70717146112ee578063eb23b7aa14611347578063ebe9314e1461135c578063f155188714611371578063f17bda9114611386578063f2fde38b146113b3578063f50b2efe146113d4578063fb52222c146113ec578063fccc134f1461140d578063fd08919614611422578063fe538c5a14611443575b005b3480156104ac57600080fd5b506104b561146a565b60408051600160a060020a039092168252519081900360200190f35b3480156104dd57600080fd5b506104b561147a565b3480156104f257600080fd5b506104fb611489565b60408051918252519081900360200190f35b34801561051957600080fd5b506104fb61149a565b34801561052e57600080fd5b5061049e600160a060020a036004351661149f565b34801561054f57600080fd5b506104fb6114ef565b34801561056457600080fd5b50610579600160a060020a03600435166114f4565b6040805160ff9092168252519081900360200190f35b34801561059b57600080fd5b50610579611516565b3480156105b057600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526104fb958335600160a060020a031695369560449491939091019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b60ff8b35169b909a90999401975091955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061151f9650505050505050565b34801561070e57600080fd5b506104fb61184a565b34801561072357600080fd5b50610738600160a060020a0360043516611850565b604080519115158252519081900360200190f35b34801561075857600080fd5b5061049e600160a060020a036004358116906024351661187f565b34801561077f57600080fd5b506105796119f4565b34801561079457600080fd5b50610738611a02565b3480156107a957600080fd5b50610738600160a060020a036004351660ff60243516611a0d565b3480156107d057600080fd5b50610579611a2d565b3480156107e557600080fd5b50610579611a3c565b3480156107fa57600080fd5b506104b5600160a060020a0360043516611a41565b34801561081b57600080fd5b506104fb611a5c565b34801561083057600080fd5b506104b5600435611a62565b34801561084857600080fd5b5061049e600160a060020a036004351660ff60243581169060443516611ce6565b34801561087557600080fd5b50610738600160a060020a0360043516611cf8565b34801561089657600080fd5b50610738600160a060020a0360043516611d99565b3480156108b757600080fd5b50610738600160a060020a0360043516611d9f565b3480156108d857600080fd5b50610738600160a060020a0360043516611dbd565b3480156108f957600080fd5b506104b5600435611edd565b34801561091157600080fd5b5061091a611f0a565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561095157600080fd5b50610579600160a060020a0360043516611f55565b34801561097257600080fd5b5061097b611f73565b6040805160ff909316835260208301919091528051918290030190f35b3480156109a457600080fd5b506104b5611f82565b3480156109b957600080fd5b506104fb611f91565b3480156109ce57600080fd5b50610738611f97565b60408051602060046024803582810135601f8101859004850286018501909652858552610738958335600160a060020a031695369560449491939091019190819084018382808284375094975050843595505050602083013592604001359150611fa09050565b348015610a4a57600080fd5b5061073861204b565b348015610a5f57600080fd5b5061049e600160a060020a036004351660ff60243581169060443516612050565b348015610a8c57600080fd5b5061049e61205d565b348015610aa157600080fd5b50610738600160a060020a0360043516612099565b6107386120ad565b348015610aca57600080fd5b5061057961149a565b348015610adf57600080fd5b50610738600160a060020a0360043581169060ff602435169060443590606435906084351660a43560c43561229d565b348015610b1b57600080fd5b506104fb612574565b348015610b3057600080fd5b506104fb61257a565b348015610b4557600080fd5b5061049e612580565b348015610b5a57600080fd5b50610738600160a060020a036004351660ff602435166125be565b348015610b8157600080fd5b50610b8a6125d2565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610bc4578181015183820152602001610bac565b50505050905090810190601f168015610bf15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c0b57600080fd5b50610579612660565b348015610c2057600080fd5b50610738600160a060020a036004351660ff60243516612671565b348015610c4757600080fd5b5061057961268b565b348015610c5c57600080fd5b50610579600160a060020a036004351661269b565b348015610c7d57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261049e948235600160a060020a039081169560248035909216953695946064949293019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506126b99650505050505050565b348015610d6357600080fd5b5061097b612861565b348015610d7857600080fd5b5061049e600160a060020a0360043516612870565b348015610d9957600080fd5b506107386128be565b348015610dae57600080fd5b506104b56004356128cf565b348015610dc657600080fd5b5061073860ff60043516602435604435600160a060020a036064351660843560a4356128e1565b348015610df957600080fd5b50610738600160a060020a0360043516612a4a565b348015610e1a57600080fd5b506104fb600435612a52565b348015610e3257600080fd5b50610b8a600435612a71565b348015610e4a57600080fd5b5061049e600160a060020a036004351660ff60243581169060443516612ae5565b348015610e7757600080fd5b5061073860ff600435811690600160a060020a03602435169060443516612af2565b348015610ea557600080fd5b50610579612ccd565b348015610eba57600080fd5b506104fb612cd2565b348015610ecf57600080fd5b5061049e600160a060020a036004351660ff60243581169060443516612cde565b348015610efc57600080fd5b506104b5612ceb565b348015610f1157600080fd5b506104fb612cfa565b348015610f2657600080fd5b506104fb611a3c565b348015610f3b57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526104fb948235600160a060020a0316946024803560ff169536959460649492019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750612d069650505050505050565b34801561105757600080fd5b50610738600160a060020a0360043516612ed6565b34801561107857600080fd5b506104fb612ccd565b34801561108d57600080fd5b506104fb600160a060020a0360043516602435604435606435612edc565b3480156110b757600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261049e943694929360249392840191908190840183828082843750949750612f8f9650505050505050565b34801561111057600080fd5b506104b56004356130bc565b34801561112857600080fd5b50610738600160a060020a03600435166130e4565b34801561114957600080fd5b5061097b61313b565b34801561115e57600080fd5b5061073860ff600435811690600160a060020a0360243516906044351661314a565b34801561118c57600080fd5b50610579600160a060020a03600435166131fa565b3480156111ad57600080fd5b50610738600160a060020a036004351660ff60243516613218565b3480156111d457600080fd5b5061097b613234565b3480156111e957600080fd5b506104b5600435613243565b34801561120157600080fd5b506104b5613255565b34801561121657600080fd5b5061049e613264565b34801561122b57600080fd5b5061049e61334e565b34801561124057600080fd5b5061097b613424565b34801561125557600080fd5b506104fb613433565b34801561126a57600080fd5b5061049e600160a060020a0360043516613439565b34801561128b57600080fd5b506104fb613489565b3480156112a057600080fd5b506104b560043561348f565b3480156112b857600080fd5b506104b56004356134a1565b3480156112d057600080fd5b506104fb6134b3565b3480156112e557600080fd5b50610b8a6134bf565b3480156112fa57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104fb94369492936024939284019190819084018382808284375094975061351a9650505050505050565b34801561135357600080fd5b506104fb613ac2565b34801561136857600080fd5b506104fb613ac7565b34801561137d57600080fd5b50610738613acd565b34801561139257600080fd5b5061049e600160a060020a036004351660ff60243581169060443516613afe565b3480156113bf57600080fd5b5061049e600160a060020a0360043516613b0b565b3480156113e057600080fd5b50610738600435613b70565b3480156113f857600080fd5b50610579600160a060020a0360043516613b8c565b34801561141957600080fd5b506104fb613baa565b34801561142e57600080fd5b50610738600160a060020a0360043516613bb0565b34801561144f57600080fd5b50610738600160a060020a036004351660ff60243516613d53565b600454600160a060020a03165b90565b600254600160a060020a031681565b60006114956018613d6e565b905090565b600181565b600354600160a060020a03163214806114c25750600354600160a060020a031633145b15156114cd57600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b600481565b600160a060020a03811660009081526025602052604090205460ff165b919050565b60125460ff1681565b6000806000806000808c945084600160a060020a03166338d0f5048c8a8a6040518463ffffffff1660e060020a028152600401808460ff1660ff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561159f578181015183820152602001611587565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156115de5781810151838201526020016115c6565b5050505090500195505050505050606060405180830381600087803b15801561160657600080fd5b505af115801561161a573d6000803e3d6000fd5b505050506040513d606081101561163057600080fd5b508051602082015160409092015195509350915060ff83161561165257600080fd5b600160a060020a03851663a1ff106e60ff84161515611672576000611674565b855b8d8d8d8d8d6040518763ffffffff1660e060020a028152600401808660ff1660ff16815260200180602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b838110156116e05781810151838201526020016116c8565b50505050905090810190601f16801561170d5780820380516001836020036101000a031916815260200191505b5085810384528851815288516020918201918a019080838360005b83811015611740578181015183820152602001611728565b50505050905090810190601f16801561176d5780820380516001836020036101000a031916815260200191505b508581038352875181528751602091820191808a01910280838360005b838110156117a257818101518382015260200161178a565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156117e15781810151838201526020016117c9565b5050505090500199505050505050505050506020604051808303818588803b15801561180c57600080fd5b505af1158015611820573d6000803e3d6000fd5b50505050506040513d602081101561183757600080fd5b50519d9c50505050505050505050505050565b601f5490565b600354600090600160a060020a03838116911614806118795750600354600160a060020a031633145b92915050565b600354600160a060020a03163214806118a25750600354600160a060020a031633145b15156118ad57600080fd5b600160a060020a03808316600090815260106020526040902054161580156118db57506118d9826130e4565b155b1561198757600e54600f5410156119315781600e600f548154811015156118fe57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555061197d565b600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018054600160a060020a031916600160a060020a0384161790555b600f805460010190555b600160a060020a038281166000818152601060209081526040918290208054600160a060020a0319169486169485179055815192835282019290925281517f280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7929181900390910190a15050565b601254610100900460ff1681565b600061149533611cf8565b601254600090611a2690610100900460ff168484612af2565b9392505050565b60125462010000900460ff1681565b600281565b601060205260009081526040902054600160a060020a031681565b60295481565b600080805b600e54821015611cda57600e805483908110611a7f57fe5b6000918252602091829020015460408051808401889052815180820385018152908201918290528051600160a060020a03909316945092909182918401908083835b60208310611ae05780518252601f199092019160209182019101611ac1565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681600160a060020a031663e02dd9c26040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611b4f57600080fd5b505af1158015611b63573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611b8c57600080fd5b810190808051640100000000811115611ba457600080fd5b82016020810184811115611bb757600080fd5b8151640100000000811182820187101715611bd157600080fd5b50509291905050506040516020018082805190602001908083835b60208310611c0b5780518252601f199092019160209182019101611bec565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611c6e5780518252601f199092019160209182019101611c4f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415611ccf57600e805483908110611cb357fe5b600091825260209091200154600160a060020a03169250611cdf565b600190910190611a67565b600092505b5050919050565b611cf36024848484613fd4565b505050565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152600160a060020a038581169482019490945290516000939092169182916326683e1491602480830192602092919082900301818887803b158015611d6657600080fd5b505af1158015611d7a573d6000803e3d6000fd5b505050506040513d6020811015611d9057600080fd5b50519392505050565b50600090565b6000600f5460001415611db457506001611511565b611879826130e4565b60008033600160a060020a03841614611dd557600080fd5b82905080600160a060020a0316638280dd8f60006040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b158015611e2257600080fd5b505af1158015611e36573d6000803e3d6000fd5b505050506040513d6020811015611e4c57600080fd5b5050604080517f27c1c21d0000000000000000000000000000000000000000000000000000000081529051600160a060020a038316916327c1c21d9160048083019260209291908290030181600087803b158015611ea957600080fd5b505af1158015611ebd573d6000803e3d6000fd5b505050506040513d6020811015611ed357600080fd5b5051159392505050565b601e80546000919083908110611eef57fe5b600091825260209091200154600160a060020a031692915050565b6000806000806000611f1c6014613d6e565b611f26601c613d6e565b611f306018613d6e565b611f3a6020613d6e565b611f446024613d6e565b945094509450945094509091929394565b600160a060020a03166000908152601d602052604090205460ff1690565b601c54601f5460ff9091169082565b600d54600160a060020a031681565b60085490565b600b5460ff1681565b604080517f5cc4aa9b00000000000000000000000000000000000000000000000000000000815260048101859052602481018490526044810183905290516000918791600160a060020a03831691635cc4aa9b91606480830192602092919082900301818887803b15801561201457600080fd5b505af1158015612028573d6000803e3d6000fd5b505050506040513d602081101561203e57600080fd5b5051979650505050505050565b600090565b611cf36018848484613fd4565b600354600160a060020a03163214806120805750600354600160a060020a031633145b151561208b57600080fd5b600354600160a060020a0316ff5b600354600160a060020a0390811691161490565b60006120b7611a02565b15156120c257600080fd5b600b5460ff1615156120d357600080fd5b6000600680546001816001161561010002031660029004905011156121825760088054600181810180845560009390935260068054612149937ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30192600261010091831615919091026000190190911604614874565b5050600754600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01555b600a80546121a59160069160026000196101006001841615020190911604614874565b50426007556040805160208101918290526000908190526121c891600a916148f9565b50600b805460ff1916905560045460408051600160a060020a039092168083526020830182815260068054600260001960018316156101000201909116049385018490527f482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e949293909291906060830190849080156122885780601f1061225d57610100808354040283529160200191612288565b820191906000526020600020905b81548152906001019060200180831161226b57829003601f168201915b5050935050505060405180910390a150600190565b600454600090600160a060020a03168180338314806123495750604080517fd6be0f490000000000000000000000000000000000000000000000000000000081523360048201529051600091600160a060020a0386169163d6be0f499160248082019260209290919082900301818787803b15801561231b57600080fd5b505af115801561232f573d6000803e3d6000fd5b505050506040513d602081101561234557600080fd5b5051115b151561235457600080fd5b600083600160a060020a031663d6be0f498d6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156123b157600080fd5b505af11580156123c5573d6000803e3d6000fd5b505050506040513d60208110156123db57600080fd5b5051116123e757600080fd5b602954851161242b5760408051600160a060020a038d168152600160208201528151600080516020614af9833981519152929181900390910190a160009350612566565b303186111561246f5760408051600160a060020a038d168152600260208201528151600080516020614af9833981519152929181900390910190a160009350612566565b61247d8a8a8a8a8a8a6128e1565b91508115156124c15760408051600160a060020a038d168152600360208201528151600080516020614af9833981519152929181900390910190a160009350612566565b6029859055604051600160a060020a0388169087156108fc029088906000818181858888f19350505050905080151561252f5760408051600160a060020a038d168152600460208201528151600080516020614af9833981519152929181900390910190a160009350612566565b60408051600160a060020a038d168152600060208201528151600080516020614af9833981519152929181900390910190a1600193505b505050979650505050505050565b60285481565b60235490565b6125886128be565b151561259357600080fd5b6040805160208101918290526000908190526125b191600a916148f9565b50600b805460ff19169055565b601254600090611a269060ff168484612af2565b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156126585780601f1061262d57610100808354040283529160200191612658565b820191906000526020600020905b81548152906001019060200180831161263b57829003601f168201915b505050505081565b601254640100000000900460ff1681565b601254600090611a269062010000900460ff168484612af2565b6012546301000000900460ff1681565b600160a060020a031660009081526019602052604090205460ff1690565b6126c1614967565b6126c9614967565b600354606090600090600160a060020a03163214806126f25750600354600160a060020a031633145b15156126fd57600080fd5b86516127109060069060208a01906148f9565b5085511561281b57612721866143dd565b93506127616040805190810160405280600181526020017f3a000000000000000000000000000000000000000000000000000000000000008152506143dd565b9250612773848463ffffffff61440316565b6001016040519080825280602002602001820160405280156127a957816020015b60608152602001906001900390816127945790505b509150600090505b81518110156127f2576127d26127cd858563ffffffff61446916565b61447c565b82828151811015156127e057fe5b602090810290910101526001016127b1565b815161280590600890602085019061497e565b5084516128199060099060208801906149d7565b505b61282489613b0b565b61282d88612870565b6040517fae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce5890600090a1505050505050505050565b60245460275460ff9091169082565b600254600160a060020a0316321461288757600080fd5b600160a060020a038116151561289c57600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a0316321490565b602680546000919083908110611eef57fe5b604080516c01000000000000000000000000308102602080840191909152600160a060020a038716909102603483015260488201859052606880830185905283518084039091018152608890920192839052815160009384938493909282918401908083835b602083106129665780518252601f199092019160209182019101612947565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091506001828a8a8a604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015612a0c573d6000803e3d6000fd5b5050604051601f190151600354909250600160a060020a038084169116149050612a395760009250612a3e565b600192505b50509695505050505050565b6000903b1190565b6009805482908110612a6057fe5b600091825260209091200154905081565b6008805482908110612a7f57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156126585780601f1061262d57610100808354040283529160200191612658565b611cf36014848484613fd4565b600080600080600080879450600360009054906101000a9004600160a060020a0316600160a060020a031685600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015612b5b57600080fd5b505af1158015612b6f573d6000803e3d6000fd5b505050506040513d6020811015612b8557600080fd5b5051600160a060020a03161415612b9f5760019550612cc1565b612baa89898961314a565b935060018415151415612bc05760019550612cc1565b5060005b601f54811015612cbc57601e805482908110612bdc57fe5b600091825260209091200154600160a060020a031691508115612cb457604080517fa00b38c400000000000000000000000000000000000000000000000000000000815260ff808c166004830152600160a060020a038b81166024840152908a166044830152915193945084939184169163a00b38c4916064808201926020929091908290030181600087803b158015612c7557600080fd5b505af1158015612c89573d6000803e3d6000fd5b505050506040513d6020811015612c9f57600080fd5b5051151560011415612cb45760019550612cc1565b600101612bc4565b600095505b50505050509392505050565b600081565b60006114956020613d6e565b611cf36020848484613fd4565b600354600160a060020a031681565b60006114956014613d6e565b60008686868686866040516020018087600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018660ff1660ff167f010000000000000000000000000000000000000000000000000000000000000002815260010185805190602001908083835b60208310612d955780518252601f199092019160209182019101612d76565b51815160209384036101000a600019018019909216911617905287519190930192870191508083835b60208310612ddd5780518252601f199092019160209182019101612dbe565b51815160209384036101000a60001901801990921691161790528651919093019286810192500280838360005b83811015612e22578181015183820152602001612e0a565b50505050905001828051906020019060200280838360005b83811015612e52578181015183820152602001612e3a565b5050505090500196505050505050506040516020818303038152906040526040518082805190602001908083835b60208310612e9f5780518252601f199092019160209182019101612e80565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209a9950505050505050505050565b50600190565b604080516c01000000000000000000000000600160a060020a0387160260208083019190915260348201869052605482018590526074808301859052835180840390910181526094909201928390528151600093918291908401908083835b60208310612f5a5780518252601f199092019160209182019101612f3b565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b612f976128be565b1515612fa257600080fd5b600b5460ff1615612fb257600080fd5b8051608011612fc057600080fd5b8051612fd390600a9060208401906148f9565b50600b805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a031661301761146a565b60408051600160a060020a038085168252831660208201526060918101828152600a805460026000196101006001841615020190911604938301849052926080830190849080156130a95780601f1061307e576101008083540402835291602001916130a9565b820191906000526020600020905b81548152906001019060200180831161308c57829003601f168201915b505094505050505060405180910390a150565b600e8054829081106130ca57fe5b600091825260209091200154600160a060020a0316905081565b600080805b600f548110156131345783600160a060020a0316600e8281548110151561310c57fe5b600091825260209091200154600160a060020a0316141561312c57600191505b6001016130e9565b5092915050565b60205460235460ff9091169082565b60125460009060ff8581169116141561317057613169601884846144cf565b9050611a26565b60125460ff85811661010090920416141561319157613169601c84846144cf565b60125460ff858116620100009092041614156131b357613169601484846144cf565b60125460ff8581166401000000009092041614156131d757613169602484846144cf565b60125460ff8581166301000000909204161415611a2657613169602084846144cf565b600160a060020a031660009081526021602052604090205460ff1690565b601254600090611a2690640100000000900460ff168484612af2565b601854601b5460ff9091169082565b602280546000919083908110611eef57fe5b600454600160a060020a031681565b60008061326f614a11565b3360008181526019602081815260408084208054600a60ff8083169182068116808b5260648306819003821683038190038216958b018690526013546101009004821660020282168b8801819052988a9052969095529590940190910191821660ff1990931683179055929550909350158015906132ee575060ff8316155b156132fe576132fe601885614523565b60408051308152600160a060020a038616602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a150505050565b600354600160a060020a031633148061336a575061336a611a02565b151561337557600080fd5b60408051602080825260068054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156134145780601f106133e957610100808354040283529160200191613414565b820191906000526020600020905b8154815290600101906020018083116133f757829003601f168201915b50509250505060405180910390a1565b60145460175460ff9091169082565b600f5481565b600354600160a060020a031632148061345c5750600354600160a060020a031633145b151561346757600080fd5b600d8054600160a060020a031916600160a060020a0392909216919091179055565b60175490565b601a80546000919083908110611eef57fe5b601680546000919083908110611eef57fe5b6000611495601c613d6e565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156126585780601f1061262d57610100808354040283529160200191612658565b60008060008060008061352b6128be565b151561353657600080fd5b866040516020018082805190602001908083835b602083106135695780518252601f19909201916020918201910161354a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106135cc5780518252601f1990920191602091820191016135ad565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902094506006604051602001808280546001816001161561010002031660029004801561365b5780601f1061363957610100808354040283529182019161365b565b820191906000526020600020905b815481529060010190602001808311613647575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831061369e5780518252601f19909201916020918201910161367f565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209650505050848414156137bf576040805160208101918290526000908190526136f2916006916148f9565b506000600781905560045460408051600160a060020a03909216808352908201839052606060208084018281528c51928501929092528b517f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f519593948d9493909290916080840191860190808383885b8381101561377a578181015183820152602001613762565b50505050905090810190601f1680156137a75780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009550613ab8565b6000199250600091505b6008548210156139d55760088054839081106137e157fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156138495780601f10613827576101008083540402835291820191613849565b820191906000526020600020905b815481529060010190602001808311613835575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831061388c5780518252601f19909201916020918201910161386d565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209350505050848114156139ca5760088054839081106138d057fe5b9060005260206000200160006138e69190614a30565b60098054839081106138f457fe5b600091825260208220015560085460001901821461399a5760088054600019810190811061391e57fe5b9060005260206000200160088381548110151561393757fe5b906000526020600020019080546001816001161561010002031660029004613960929190614874565b5060098054600019810190811061397357fe5b906000526020600020015460098381548110151561398d57fe5b6000918252602090912001555b60088054906139ad906000198301614a77565b5060098054906139c1906000198301614a9b565b508192506139d5565b6001909101906137c9565b6000198314156139e457600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031688856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613a78578181015183820152602001613a60565b50505050905090810190601f168015613aa55780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18295505b5050505050919050565b600381565b601b5490565b6040516000907fed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88908290a150600190565b611cf3601c848484613fd4565b600354600160a060020a0316321480613b2e5750600354600160a060020a031633145b1515613b3957600080fd5b600160a060020a0381161515613b4e57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b6000602954821115613b8457506001611511565b506000919050565b600160a060020a031660009081526015602052604090205460ff1690565b60275490565b60035460009081908190600160a060020a0316321480613bda5750600354600160a060020a031633145b1515613be557600080fd5b5050600f546000190160005b600f54811015611cda5783600160a060020a0316600e82815481101515613c1457fe5b600091825260209091200154600160a060020a03161415613d4b57600e805482908110613c3d57fe5b60009182526020909120018054600160a060020a0319169055808214613ce257600e805483908110613c6b57fe5b600091825260209091200154600e8054600160a060020a039092169183908110613c9157fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600e805483908110613cc857fe5b60009182526020909120018054600160a060020a03191690555b600f829055600160a060020a0384166000818152601060209081526040918290208054600160a060020a0319169055815192835290517fd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e29281900390910190a160019250611cdf565b600101613bf1565b601254600090611a26906301000000900460ff168484612af2565b600080805b836003015481101561313457613dad8460020182815481101515613d9357fe5b600091825260209091200154600160a060020a0316612a4a565b1515613f37577fa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260818560020183815481101515613de657fe5b600091825260209182902001546040805192830193909352600160a060020a03168183015260608082526004908201527f6465616400000000000000000000000000000000000000000000000000000000608082015290519081900360a00190a160028401805482908110613e5757fe5b60009182526020909120018054600160a060020a0319169055600384015460019290920191600019018114613f2657836002016001856003015403815481101515613e9e57fe5b600091825260209091200154600285018054600160a060020a039092169183908110613ec657fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550836002016001856003015403815481101515613f0c57fe5b60009182526020909120018054600160a060020a03191690555b600384018054600019019055613fcf565b7fa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260818560020183815481101515613f6a57fe5b600091825260209182902001546040805192830193909352600160a060020a03168183015260608082526005908201527f616c697665000000000000000000000000000000000000000000000000000000608082015290519081900360a00190a16001015b613d73565b600080600080600080613fe5614a11565b6000806000613ff332612099565b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152329381019390935251929c5060009b50600160a060020a0316995089916363e6ffdd9160248082019260209290919082900301818f87803b15801561406257600080fd5b505af1158015614076573d6000803e3d6000fd5b505050506040513d602081101561408c57600080fd5b8101908080519060200190929190505050965086955085600160a060020a0316637fb52f1a8f60000160009054906101000a900460ff168f60026040518463ffffffff1660e060020a028152600401808460ff1660ff16815260200183600160a060020a0316600160a060020a031681526020018260ff1660ff1681526020019350505050602060405180830381600087803b15801561412b57600080fd5b505af115801561413f573d6000803e3d6000fd5b505050506040513d602081101561415557600080fd5b810190808051906020019092919050505098508d60010160008e600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a900460ff169450600a8560ff168115156141ae57fe5b0660ff90811680865260648783160681900382166020870181905287030381166040860152600093508b925082161580156141ed575089806141ed5750885b156141f757600192505b60ff8b16158015906142065750895b8015614228575060018460ff8e166003811061421e57fe5b602002015160ff16145b156142365760019250600291505b60ff8b16158015906142455750885b8015614268575060028460ff8e166003811061425d57fe5b602002015160ff1614155b156142765760019250600191505b60ff8b16158015906142855750895b801561428e5750885b1561429c5760019250600291505b8215156142a857600080fd5b601360ff8d16600381106142b857fe5b602081049091015460ff601f9092166101000a9004811683029085908e16600381106142e057fe5b60ff909216602092909202015283600260200201518460016020020151856000602002015101019050808e60010160008f600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508060ff1660001415801561435e575060ff8516155b1561436d5761436d8e8e614523565b60ff81161515614383576143818e8e6145ba565b505b60408051308152600160a060020a038f16602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a15050505050505050505050505050565b6143e5614967565b50604080518082019091528151815260209182019181019190915290565b600080826000015161442785600001518660200151866000015187602001516146ff565b0190505b835160208501510181116131345782516020808601518651918601516001909501946144619291850390910390849084906146ff565b01905061442b565b614471614967565b6131348383836147bf565b606080600083600001516040519080825280601f01601f1916602001820160405280156144b3578160200160208202803883390190505b5091506020820190506131348185602001518660000151614830565b600160a060020a038216600090815260018401602052604081205460ff908116906013908416600381106144ff57fe5b60208104919091015460ff601f9092166101000a9004811691161015949350505050565b60028201546003830154101561457c578082600201836003015481548110151561454957fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055506145ad565b60028201805460018101825560009182526020909120018054600160a060020a031916600160a060020a0383161790555b5060030180546001019055565b6000805b83600301548110156146f55782600160a060020a031684600201828154811015156145e557fe5b600091825260209091200154600160a060020a031614156146ed576002840180548290811061461057fe5b60009182526020909120018054600160a060020a031916905560038401546000190181146146d85783600201600185600301540381548110151561465057fe5b600091825260209091200154600285018054600160a060020a03909216918390811061467857fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055508360020160018560030154038154811015156146be57fe5b60009182526020909120018054600160a060020a03191690555b60038401805460001901905560019150613134565b6001016145be565b5060009392505050565b600083818080808080808c8b116147a95760208b116147725760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b82851461476a57838810614757578c8c0198506147af565b878060010198505085885116925061473f565b8798506147af565b8a8a209150600096505b8a8d0387116147a9575089872081811415614799578798506147af565b600197880197969096019561477c565b8c8c0198505b5050505050505050949350505050565b6147c7614967565b60006147e585600001518660200151866000015187602001516146ff565b602080870180519186019190915280518203855286519051919250018114156148115760008552614827565b8351835186519101900385528351810160208601525b50909392505050565b60005b60208210614855578251845260209384019390920191601f1990910190614833565b50905182516020929092036101000a6000190180199091169116179052565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106148ad57805485556148e9565b828001600101855582156148e957600052602060002091601f016020900482015b828111156148e95782548255916001019190600101906148ce565b506148f5929150614abb565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061493a57805160ff19168380011785556148e9565b828001600101855582156148e9579182015b828111156148e957825182559160200191906001019061494c565b604080518082019091526000808252602082015290565b8280548282559060005260206000209081019282156149cb579160200282015b828111156149cb57825180516149bb9184916020909101906148f9565b509160200191906001019061499e565b506148f5929150614ad5565b8280548282559060005260206000209081019282156148e957916020028201828111156148e957825182559160200191906001019061494c565b6060604051908101604052806003906020820280388339509192915050565b50805460018160011615610100020316600290046000825580601f10614a565750614a74565b601f016020900490600052602060002090810190614a749190614abb565b50565b815481835581811115611cf357600083815260209020611cf3918101908301614ad5565b815481835581811115611cf357600083815260209020611cf39181019083015b61147791905b808211156148f55760008155600101614ac1565b61147791905b808211156148f5576000614aef8282614a30565b50600101614adb5600583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefada165627a7a723058204fb29f8a9a0dd8aee2f06cd70df422eae003fa5c75e138cb469d614e46dc925a0029a165627a7a723058201c916981fb061aa3b6ebc991af3c5ab580fa7f7a986083e12819837640045bce0029"

// DeployBaseAccessWalletFactory deploys a new Ethereum contract, binding an instance of BaseAccessWalletFactory to it.
func DeployBaseAccessWalletFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseAccessWalletFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessWalletFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseAccessWalletFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessWalletFactory{BaseAccessWalletFactoryCaller: BaseAccessWalletFactoryCaller{contract: contract}, BaseAccessWalletFactoryTransactor: BaseAccessWalletFactoryTransactor{contract: contract}, BaseAccessWalletFactoryFilterer: BaseAccessWalletFactoryFilterer{contract: contract}}, nil
}

// BaseAccessWalletFactory is an auto generated Go binding around an Ethereum contract.
type BaseAccessWalletFactory struct {
	BaseAccessWalletFactoryCaller     // Read-only binding to the contract
	BaseAccessWalletFactoryTransactor // Write-only binding to the contract
	BaseAccessWalletFactoryFilterer   // Log filterer for contract events
}

// BaseAccessWalletFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessWalletFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseAccessWalletFactorySession struct {
	Contract     *BaseAccessWalletFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// BaseAccessWalletFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseAccessWalletFactoryCallerSession struct {
	Contract *BaseAccessWalletFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// BaseAccessWalletFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseAccessWalletFactoryTransactorSession struct {
	Contract     *BaseAccessWalletFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// BaseAccessWalletFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseAccessWalletFactoryRaw struct {
	Contract *BaseAccessWalletFactory // Generic contract binding to access the raw methods on
}

// BaseAccessWalletFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryCallerRaw struct {
	Contract *BaseAccessWalletFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseAccessWalletFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryTransactorRaw struct {
	Contract *BaseAccessWalletFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseAccessWalletFactory creates a new instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactory(address common.Address, backend bind.ContractBackend) (*BaseAccessWalletFactory, error) {
	contract, err := bindBaseAccessWalletFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactory{BaseAccessWalletFactoryCaller: BaseAccessWalletFactoryCaller{contract: contract}, BaseAccessWalletFactoryTransactor: BaseAccessWalletFactoryTransactor{contract: contract}, BaseAccessWalletFactoryFilterer: BaseAccessWalletFactoryFilterer{contract: contract}}, nil
}

// NewBaseAccessWalletFactoryCaller creates a new read-only instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessWalletFactoryCaller, error) {
	contract, err := bindBaseAccessWalletFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryCaller{contract: contract}, nil
}

// NewBaseAccessWalletFactoryTransactor creates a new write-only instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessWalletFactoryTransactor, error) {
	contract, err := bindBaseAccessWalletFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryTransactor{contract: contract}, nil
}

// NewBaseAccessWalletFactoryFilterer creates a new log filterer instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessWalletFactoryFilterer, error) {
	contract, err := bindBaseAccessWalletFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryFilterer{contract: contract}, nil
}

// bindBaseAccessWalletFactory binds a generic wrapper to an already deployed contract.
func bindBaseAccessWalletFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessWalletFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessWalletFactory.Contract.BaseAccessWalletFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.BaseAccessWalletFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.BaseAccessWalletFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessWalletFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWalletFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) ContentSpace() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.ContentSpace(&_BaseAccessWalletFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.ContentSpace(&_BaseAccessWalletFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWalletFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) Creator() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.Creator(&_BaseAccessWalletFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.Creator(&_BaseAccessWalletFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWalletFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) Owner() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.Owner(&_BaseAccessWalletFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.Owner(&_BaseAccessWalletFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessWalletFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) Version() ([32]byte, error) {
	return _BaseAccessWalletFactory.Contract.Version(&_BaseAccessWalletFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseAccessWalletFactory.Contract.Version(&_BaseAccessWalletFactory.CallOpts)
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) CreateAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "createAccessWallet")
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) CreateAccessWallet() (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.CreateAccessWallet(&_BaseAccessWalletFactory.TransactOpts)
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorSession) CreateAccessWallet() (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.CreateAccessWallet(&_BaseAccessWalletFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) Kill() (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.Kill(&_BaseAccessWalletFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.Kill(&_BaseAccessWalletFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.TransferCreatorship(&_BaseAccessWalletFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.TransferCreatorship(&_BaseAccessWalletFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.TransferOwnership(&_BaseAccessWalletFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.TransferOwnership(&_BaseAccessWalletFactory.TransactOpts, newOwner)
}

// BaseContentABI is the input ABI used to generate the binding from.
const BaseContentABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_PUBLISHED\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"request_ID\",\"type\":\"uint256\"},{\"name\":\"payee\",\"type\":\"address\"},{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"processRequestPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestMap\",\"outputs\":[{\"name\":\"originator\",\"type\":\"address\"},{\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"int8\"},{\"name\":\"settled\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statusCode\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"status_code\",\"type\":\"int256\"}],\"name\":\"statusCodeDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"custom_values\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"getAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"custom_values\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"getCustomInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_DRAFT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status_code\",\"type\":\"int256\"}],\"name\":\"setStatusCode\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"request_ID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"ml_out_hash\",\"type\":\"bytes32\"}],\"name\":\"accessComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_objectHash\",\"type\":\"string\"},{\"name\":\"_versionHashesConcat\",\"type\":\"string\"},{\"name\":\"_versionTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"migrateEditable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status_code\",\"type\":\"int256\"}],\"name\":\"updateStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_contentContractAddress\",\"type\":\"address\"},{\"name\":\"_accessCharge\",\"type\":\"uint256\"},{\"name\":\"_statusCode\",\"type\":\"int256\"},{\"name\":\"_requestID\",\"type\":\"uint256\"},{\"name\":\"_visibility\",\"type\":\"uint8\"},{\"name\":\"_objectHash\",\"type\":\"string\"},{\"name\":\"_versionHashes\",\"type\":\"string\"},{\"name\":\"_versionTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"pke_requestor\",\"type\":\"string\"},{\"name\":\"pke_AFGH\",\"type\":\"string\"},{\"name\":\"custom_values\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_REVIEW\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContentContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"request_ID\",\"type\":\"uint256\"},{\"name\":\"access_granted\",\"type\":\"bool\"},{\"name\":\"re_key\",\"type\":\"string\"},{\"name\":\"encrypted_AES_key\",\"type\":\"string\"}],\"name\":\"accessGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"charge\",\"type\":\"uint256\"}],\"name\":\"setAccessCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statusDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"},{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContentMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"containingLibrary\",\"type\":\"address\"}],\"name\":\"ContentObjectCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContractAddress\",\"type\":\"address\"}],\"name\":\"SetContentType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"contentHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pkeRequestor\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pkeAFGH\",\"type\":\"string\"}],\"name\":\"AccessRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"access_granted\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"reKey\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"encryptedAESKey\",\"type\":\"string\"}],\"name\":\"AccessGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customValue\",\"type\":\"bytes32\"}],\"name\":\"AccessRequestValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"AccessRequestStakeholder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scorePct\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customContractResult\",\"type\":\"bool\"}],\"name\":\"AccessComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentContractAddress\",\"type\":\"address\"}],\"name\":\"SetContentContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accessCharge\",\"type\":\"uint256\"}],\"name\":\"SetAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"accessCharge\",\"type\":\"uint256\"}],\"name\":\"GetAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accessCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountProvided\",\"type\":\"uint256\"}],\"name\":\"InsufficientFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"statusCode\",\"type\":\"int256\"}],\"name\":\"SetStatusCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestStatus\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"statusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"Publish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"custom_contract\",\"type\":\"address\"}],\"name\":\"InvokeCustomPreHook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"custom_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"ReturnCustomHook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"custom_contract\",\"type\":\"address\"}],\"name\":\"InvokeCustomPostHook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"charged\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"received\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"converted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"enough\",\"type\":\"bool\"}],\"name\":\"DbgAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"DbgAccessCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EditableMigrate\",\"type\":\"event\"}]"

// BaseContentFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"4dd70788": "STATUS_DRAFT()",
	"0017de98": "STATUS_PUBLISHED()",
	"d810f8c8": "STATUS_REVIEW()",
	"64ade32b": "accessCharge()",
	"5cc4aa9b": "accessComplete(uint256,uint256,bytes32)",
	"ee56d767": "accessGrant(uint256,bool,string,string)",
	"a1ff106e": "accessRequest(uint8,string,string,bytes32[],address[])",
	"32eaf21b": "addressKMS()",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"81beeb64": "canEdit()",
	"cbcd4461": "canPublish()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"2310167f": "contentContractAddress()",
	"af570c04": "contentSpace()",
	"36ebffca": "contentType()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"38d0f504": "getAccessInfo(uint8,bytes32[],address[])",
	"3ba58afb": "getCustomInfo(uint8,bytes32[],address[])",
	"a8d4160e": "getKMSInfo(bytes)",
	"41c0e1b5": "kill()",
	"b816f513": "libraryAddress()",
	"97449ebd": "migrate(address,address,address,uint256,int256,uint256,uint8,string,string,uint256[])",
	"6ae5f5e0": "migrateEditable(address,address,string,string,uint256[])",
	"e02dd9c2": "objectHash()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"0c6d3f93": "processRequestPayment(uint256,address,string,uint256)",
	"075d4782": "publish()",
	"8f779201": "requestID()",
	"1a735f18": "requestMap(uint256)",
	"f4d9bae8": "setAccessCharge(uint256)",
	"c9e8e72d": "setAddressKMS(address)",
	"e5385303": "setContentContractAddress(address)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"5267db44": "setStatusCode(int256)",
	"aa024e8b": "setVisibility(uint8)",
	"27c1c21d": "statusCode()",
	"38864284": "statusCodeDescription(int256)",
	"f81ab0ae": "statusDescription()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"8280dd8f": "updateStatus(int256)",
	"54fd4d50": "version()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
}

// BaseContentBin is the compiled bytecode used for deploying new contracts.
var BaseContentBin = ""

// DeployBaseContent deploys a new Ethereum contract, binding an instance of BaseContent to it.
func DeployBaseContent(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address, lib common.Address, content_type common.Address) (common.Address, *types.Transaction, *BaseContent, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseContentBin), backend, content_space, lib, content_type)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContent{BaseContentCaller: BaseContentCaller{contract: contract}, BaseContentTransactor: BaseContentTransactor{contract: contract}, BaseContentFilterer: BaseContentFilterer{contract: contract}}, nil
}

// BaseContent is an auto generated Go binding around an Ethereum contract.
type BaseContent struct {
	BaseContentCaller     // Read-only binding to the contract
	BaseContentTransactor // Write-only binding to the contract
	BaseContentFilterer   // Log filterer for contract events
}

// BaseContentCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseContentSession struct {
	Contract     *BaseContent      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseContentCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseContentCallerSession struct {
	Contract *BaseContentCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// BaseContentTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseContentTransactorSession struct {
	Contract     *BaseContentTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// BaseContentRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseContentRaw struct {
	Contract *BaseContent // Generic contract binding to access the raw methods on
}

// BaseContentCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseContentCallerRaw struct {
	Contract *BaseContentCaller // Generic read-only contract binding to access the raw methods on
}

// BaseContentTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseContentTransactorRaw struct {
	Contract *BaseContentTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseContent creates a new instance of BaseContent, bound to a specific deployed contract.
func NewBaseContent(address common.Address, backend bind.ContractBackend) (*BaseContent, error) {
	contract, err := bindBaseContent(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContent{BaseContentCaller: BaseContentCaller{contract: contract}, BaseContentTransactor: BaseContentTransactor{contract: contract}, BaseContentFilterer: BaseContentFilterer{contract: contract}}, nil
}

// NewBaseContentCaller creates a new read-only instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentCaller(address common.Address, caller bind.ContractCaller) (*BaseContentCaller, error) {
	contract, err := bindBaseContent(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentCaller{contract: contract}, nil
}

// NewBaseContentTransactor creates a new write-only instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentTransactor, error) {
	contract, err := bindBaseContent(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTransactor{contract: contract}, nil
}

// NewBaseContentFilterer creates a new log filterer instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentFilterer, error) {
	contract, err := bindBaseContent(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentFilterer{contract: contract}, nil
}

// bindBaseContent binds a generic wrapper to an already deployed contract.
func bindBaseContent(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContent *BaseContentRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContent.Contract.BaseContentCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContent *BaseContentRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.Contract.BaseContentTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContent *BaseContentRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContent.Contract.BaseContentTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContent *BaseContentCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContent.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContent *BaseContentTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContent *BaseContentTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContent.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContent *BaseContentCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContent *BaseContentSession) CANACCESS() (uint8, error) {
	return _BaseContent.Contract.CANACCESS(&_BaseContent.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContent *BaseContentCallerSession) CANACCESS() (uint8, error) {
	return _BaseContent.Contract.CANACCESS(&_BaseContent.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContent *BaseContentCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContent *BaseContentSession) CANEDIT() (uint8, error) {
	return _BaseContent.Contract.CANEDIT(&_BaseContent.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContent *BaseContentCallerSession) CANEDIT() (uint8, error) {
	return _BaseContent.Contract.CANEDIT(&_BaseContent.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContent *BaseContentCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContent *BaseContentSession) CANSEE() (uint8, error) {
	return _BaseContent.Contract.CANSEE(&_BaseContent.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContent *BaseContentCallerSession) CANSEE() (uint8, error) {
	return _BaseContent.Contract.CANSEE(&_BaseContent.CallOpts)
}

// STATUSDRAFT is a free data retrieval call binding the contract method 0x4dd70788.
//
// Solidity: function STATUS_DRAFT() constant returns(bytes32)
func (_BaseContent *BaseContentCaller) STATUSDRAFT(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "STATUS_DRAFT")
	return *ret0, err
}

// STATUSDRAFT is a free data retrieval call binding the contract method 0x4dd70788.
//
// Solidity: function STATUS_DRAFT() constant returns(bytes32)
func (_BaseContent *BaseContentSession) STATUSDRAFT() ([32]byte, error) {
	return _BaseContent.Contract.STATUSDRAFT(&_BaseContent.CallOpts)
}

// STATUSDRAFT is a free data retrieval call binding the contract method 0x4dd70788.
//
// Solidity: function STATUS_DRAFT() constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) STATUSDRAFT() ([32]byte, error) {
	return _BaseContent.Contract.STATUSDRAFT(&_BaseContent.CallOpts)
}

// STATUSPUBLISHED is a free data retrieval call binding the contract method 0x0017de98.
//
// Solidity: function STATUS_PUBLISHED() constant returns(bytes32)
func (_BaseContent *BaseContentCaller) STATUSPUBLISHED(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "STATUS_PUBLISHED")
	return *ret0, err
}

// STATUSPUBLISHED is a free data retrieval call binding the contract method 0x0017de98.
//
// Solidity: function STATUS_PUBLISHED() constant returns(bytes32)
func (_BaseContent *BaseContentSession) STATUSPUBLISHED() ([32]byte, error) {
	return _BaseContent.Contract.STATUSPUBLISHED(&_BaseContent.CallOpts)
}

// STATUSPUBLISHED is a free data retrieval call binding the contract method 0x0017de98.
//
// Solidity: function STATUS_PUBLISHED() constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) STATUSPUBLISHED() ([32]byte, error) {
	return _BaseContent.Contract.STATUSPUBLISHED(&_BaseContent.CallOpts)
}

// STATUSREVIEW is a free data retrieval call binding the contract method 0xd810f8c8.
//
// Solidity: function STATUS_REVIEW() constant returns(bytes32)
func (_BaseContent *BaseContentCaller) STATUSREVIEW(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "STATUS_REVIEW")
	return *ret0, err
}

// STATUSREVIEW is a free data retrieval call binding the contract method 0xd810f8c8.
//
// Solidity: function STATUS_REVIEW() constant returns(bytes32)
func (_BaseContent *BaseContentSession) STATUSREVIEW() ([32]byte, error) {
	return _BaseContent.Contract.STATUSREVIEW(&_BaseContent.CallOpts)
}

// STATUSREVIEW is a free data retrieval call binding the contract method 0xd810f8c8.
//
// Solidity: function STATUS_REVIEW() constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) STATUSREVIEW() ([32]byte, error) {
	return _BaseContent.Contract.STATUSREVIEW(&_BaseContent.CallOpts)
}

// AccessCharge is a free data retrieval call binding the contract method 0x64ade32b.
//
// Solidity: function accessCharge() constant returns(uint256)
func (_BaseContent *BaseContentCaller) AccessCharge(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "accessCharge")
	return *ret0, err
}

// AccessCharge is a free data retrieval call binding the contract method 0x64ade32b.
//
// Solidity: function accessCharge() constant returns(uint256)
func (_BaseContent *BaseContentSession) AccessCharge() (*big.Int, error) {
	return _BaseContent.Contract.AccessCharge(&_BaseContent.CallOpts)
}

// AccessCharge is a free data retrieval call binding the contract method 0x64ade32b.
//
// Solidity: function accessCharge() constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) AccessCharge() (*big.Int, error) {
	return _BaseContent.Contract.AccessCharge(&_BaseContent.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContent *BaseContentCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContent *BaseContentSession) AddressKMS() (common.Address, error) {
	return _BaseContent.Contract.AddressKMS(&_BaseContent.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContent *BaseContentCallerSession) AddressKMS() (common.Address, error) {
	return _BaseContent.Contract.AddressKMS(&_BaseContent.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContent *BaseContentCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContent *BaseContentSession) CanCommit() (bool, error) {
	return _BaseContent.Contract.CanCommit(&_BaseContent.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CanCommit() (bool, error) {
	return _BaseContent.Contract.CanCommit(&_BaseContent.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContent *BaseContentCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContent *BaseContentSession) CanConfirm() (bool, error) {
	return _BaseContent.Contract.CanConfirm(&_BaseContent.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CanConfirm() (bool, error) {
	return _BaseContent.Contract.CanConfirm(&_BaseContent.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContent *BaseContentCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContent *BaseContentSession) CanEdit() (bool, error) {
	return _BaseContent.Contract.CanEdit(&_BaseContent.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CanEdit() (bool, error) {
	return _BaseContent.Contract.CanEdit(&_BaseContent.CallOpts)
}

// CanPublish is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseContent *BaseContentCaller) CanPublish(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "canPublish")
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseContent *BaseContentSession) CanPublish() (bool, error) {
	return _BaseContent.Contract.CanPublish(&_BaseContent.CallOpts)
}

// CanPublish is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CanPublish() (bool, error) {
	return _BaseContent.Contract.CanPublish(&_BaseContent.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContent *BaseContentCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContent *BaseContentSession) CommitPending() (bool, error) {
	return _BaseContent.Contract.CommitPending(&_BaseContent.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CommitPending() (bool, error) {
	return _BaseContent.Contract.CommitPending(&_BaseContent.CallOpts)
}

// ContentContractAddress is a free data retrieval call binding the contract method 0x2310167f.
//
// Solidity: function contentContractAddress() constant returns(address)
func (_BaseContent *BaseContentCaller) ContentContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "contentContractAddress")
	return *ret0, err
}

// ContentContractAddress is a free data retrieval call binding the contract method 0x2310167f.
//
// Solidity: function contentContractAddress() constant returns(address)
func (_BaseContent *BaseContentSession) ContentContractAddress() (common.Address, error) {
	return _BaseContent.Contract.ContentContractAddress(&_BaseContent.CallOpts)
}

// ContentContractAddress is a free data retrieval call binding the contract method 0x2310167f.
//
// Solidity: function contentContractAddress() constant returns(address)
func (_BaseContent *BaseContentCallerSession) ContentContractAddress() (common.Address, error) {
	return _BaseContent.Contract.ContentContractAddress(&_BaseContent.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContent *BaseContentCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContent *BaseContentSession) ContentSpace() (common.Address, error) {
	return _BaseContent.Contract.ContentSpace(&_BaseContent.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContent *BaseContentCallerSession) ContentSpace() (common.Address, error) {
	return _BaseContent.Contract.ContentSpace(&_BaseContent.CallOpts)
}

// ContentType is a free data retrieval call binding the contract method 0x36ebffca.
//
// Solidity: function contentType() constant returns(address)
func (_BaseContent *BaseContentCaller) ContentType(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "contentType")
	return *ret0, err
}

// ContentType is a free data retrieval call binding the contract method 0x36ebffca.
//
// Solidity: function contentType() constant returns(address)
func (_BaseContent *BaseContentSession) ContentType() (common.Address, error) {
	return _BaseContent.Contract.ContentType(&_BaseContent.CallOpts)
}

// ContentType is a free data retrieval call binding the contract method 0x36ebffca.
//
// Solidity: function contentType() constant returns(address)
func (_BaseContent *BaseContentCallerSession) ContentType() (common.Address, error) {
	return _BaseContent.Contract.ContentType(&_BaseContent.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContent *BaseContentCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContent *BaseContentSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContent.Contract.CountVersionHashes(&_BaseContent.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContent.Contract.CountVersionHashes(&_BaseContent.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContent *BaseContentCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContent *BaseContentSession) Creator() (common.Address, error) {
	return _BaseContent.Contract.Creator(&_BaseContent.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContent *BaseContentCallerSession) Creator() (common.Address, error) {
	return _BaseContent.Contract.Creator(&_BaseContent.CallOpts)
}

// GetAccessInfo is a free data retrieval call binding the contract method 0x38d0f504.
//
// Solidity: function getAccessInfo(uint8 level, bytes32[] custom_values, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCaller) GetAccessInfo(opts *bind.CallOpts, level uint8, custom_values [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _BaseContent.contract.Call(opts, out, "getAccessInfo", level, custom_values, stakeholders)
	return *ret0, *ret1, *ret2, err
}

// GetAccessInfo is a free data retrieval call binding the contract method 0x38d0f504.
//
// Solidity: function getAccessInfo(uint8 level, bytes32[] custom_values, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentSession) GetAccessInfo(level uint8, custom_values [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetAccessInfo(&_BaseContent.CallOpts, level, custom_values, stakeholders)
}

// GetAccessInfo is a free data retrieval call binding the contract method 0x38d0f504.
//
// Solidity: function getAccessInfo(uint8 level, bytes32[] custom_values, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCallerSession) GetAccessInfo(level uint8, custom_values [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetAccessInfo(&_BaseContent.CallOpts, level, custom_values, stakeholders)
}

// GetCustomInfo is a free data retrieval call binding the contract method 0x3ba58afb.
//
// Solidity: function getCustomInfo(uint8 level, bytes32[] custom_values, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCaller) GetCustomInfo(opts *bind.CallOpts, level uint8, custom_values [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _BaseContent.contract.Call(opts, out, "getCustomInfo", level, custom_values, stakeholders)
	return *ret0, *ret1, *ret2, err
}

// GetCustomInfo is a free data retrieval call binding the contract method 0x3ba58afb.
//
// Solidity: function getCustomInfo(uint8 level, bytes32[] custom_values, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentSession) GetCustomInfo(level uint8, custom_values [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetCustomInfo(&_BaseContent.CallOpts, level, custom_values, stakeholders)
}

// GetCustomInfo is a free data retrieval call binding the contract method 0x3ba58afb.
//
// Solidity: function getCustomInfo(uint8 level, bytes32[] custom_values, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCallerSession) GetCustomInfo(level uint8, custom_values [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetCustomInfo(&_BaseContent.CallOpts, level, custom_values, stakeholders)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0xa8d4160e.
//
// Solidity: function getKMSInfo(bytes prefix) constant returns(string, string)
func (_BaseContent *BaseContentCaller) GetKMSInfo(opts *bind.CallOpts, prefix []byte) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _BaseContent.contract.Call(opts, out, "getKMSInfo", prefix)
	return *ret0, *ret1, err
}

// GetKMSInfo is a free data retrieval call binding the contract method 0xa8d4160e.
//
// Solidity: function getKMSInfo(bytes prefix) constant returns(string, string)
func (_BaseContent *BaseContentSession) GetKMSInfo(prefix []byte) (string, string, error) {
	return _BaseContent.Contract.GetKMSInfo(&_BaseContent.CallOpts, prefix)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0xa8d4160e.
//
// Solidity: function getKMSInfo(bytes prefix) constant returns(string, string)
func (_BaseContent *BaseContentCallerSession) GetKMSInfo(prefix []byte) (string, string, error) {
	return _BaseContent.Contract.GetKMSInfo(&_BaseContent.CallOpts, prefix)
}

// LibraryAddress is a free data retrieval call binding the contract method 0xb816f513.
//
// Solidity: function libraryAddress() constant returns(address)
func (_BaseContent *BaseContentCaller) LibraryAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "libraryAddress")
	return *ret0, err
}

// LibraryAddress is a free data retrieval call binding the contract method 0xb816f513.
//
// Solidity: function libraryAddress() constant returns(address)
func (_BaseContent *BaseContentSession) LibraryAddress() (common.Address, error) {
	return _BaseContent.Contract.LibraryAddress(&_BaseContent.CallOpts)
}

// LibraryAddress is a free data retrieval call binding the contract method 0xb816f513.
//
// Solidity: function libraryAddress() constant returns(address)
func (_BaseContent *BaseContentCallerSession) LibraryAddress() (common.Address, error) {
	return _BaseContent.Contract.LibraryAddress(&_BaseContent.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContent *BaseContentCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContent *BaseContentSession) ObjectHash() (string, error) {
	return _BaseContent.Contract.ObjectHash(&_BaseContent.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContent *BaseContentCallerSession) ObjectHash() (string, error) {
	return _BaseContent.Contract.ObjectHash(&_BaseContent.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContent *BaseContentCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContent *BaseContentSession) Owner() (common.Address, error) {
	return _BaseContent.Contract.Owner(&_BaseContent.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContent *BaseContentCallerSession) Owner() (common.Address, error) {
	return _BaseContent.Contract.Owner(&_BaseContent.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContent *BaseContentCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContent *BaseContentSession) ParentAddress() (common.Address, error) {
	return _BaseContent.Contract.ParentAddress(&_BaseContent.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContent *BaseContentCallerSession) ParentAddress() (common.Address, error) {
	return _BaseContent.Contract.ParentAddress(&_BaseContent.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContent *BaseContentCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContent *BaseContentSession) PendingHash() (string, error) {
	return _BaseContent.Contract.PendingHash(&_BaseContent.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContent *BaseContentCallerSession) PendingHash() (string, error) {
	return _BaseContent.Contract.PendingHash(&_BaseContent.CallOpts)
}

// RequestID is a free data retrieval call binding the contract method 0x8f779201.
//
// Solidity: function requestID() constant returns(uint256)
func (_BaseContent *BaseContentCaller) RequestID(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "requestID")
	return *ret0, err
}

// RequestID is a free data retrieval call binding the contract method 0x8f779201.
//
// Solidity: function requestID() constant returns(uint256)
func (_BaseContent *BaseContentSession) RequestID() (*big.Int, error) {
	return _BaseContent.Contract.RequestID(&_BaseContent.CallOpts)
}

// RequestID is a free data retrieval call binding the contract method 0x8f779201.
//
// Solidity: function requestID() constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) RequestID() (*big.Int, error) {
	return _BaseContent.Contract.RequestID(&_BaseContent.CallOpts)
}

// RequestMap is a free data retrieval call binding the contract method 0x1a735f18.
//
// Solidity: function requestMap(uint256 ) constant returns(address originator, uint256 amountPaid, int8 status, uint256 settled)
func (_BaseContent *BaseContentCaller) RequestMap(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Originator common.Address
	AmountPaid *big.Int
	Status     int8
	Settled    *big.Int
}, error) {
	ret := new(struct {
		Originator common.Address
		AmountPaid *big.Int
		Status     int8
		Settled    *big.Int
	})
	out := ret
	err := _BaseContent.contract.Call(opts, out, "requestMap", arg0)
	return *ret, err
}

// RequestMap is a free data retrieval call binding the contract method 0x1a735f18.
//
// Solidity: function requestMap(uint256 ) constant returns(address originator, uint256 amountPaid, int8 status, uint256 settled)
func (_BaseContent *BaseContentSession) RequestMap(arg0 *big.Int) (struct {
	Originator common.Address
	AmountPaid *big.Int
	Status     int8
	Settled    *big.Int
}, error) {
	return _BaseContent.Contract.RequestMap(&_BaseContent.CallOpts, arg0)
}

// RequestMap is a free data retrieval call binding the contract method 0x1a735f18.
//
// Solidity: function requestMap(uint256 ) constant returns(address originator, uint256 amountPaid, int8 status, uint256 settled)
func (_BaseContent *BaseContentCallerSession) RequestMap(arg0 *big.Int) (struct {
	Originator common.Address
	AmountPaid *big.Int
	Status     int8
	Settled    *big.Int
}, error) {
	return _BaseContent.Contract.RequestMap(&_BaseContent.CallOpts, arg0)
}

// StatusCode is a free data retrieval call binding the contract method 0x27c1c21d.
//
// Solidity: function statusCode() constant returns(int256)
func (_BaseContent *BaseContentCaller) StatusCode(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "statusCode")
	return *ret0, err
}

// StatusCode is a free data retrieval call binding the contract method 0x27c1c21d.
//
// Solidity: function statusCode() constant returns(int256)
func (_BaseContent *BaseContentSession) StatusCode() (*big.Int, error) {
	return _BaseContent.Contract.StatusCode(&_BaseContent.CallOpts)
}

// StatusCode is a free data retrieval call binding the contract method 0x27c1c21d.
//
// Solidity: function statusCode() constant returns(int256)
func (_BaseContent *BaseContentCallerSession) StatusCode() (*big.Int, error) {
	return _BaseContent.Contract.StatusCode(&_BaseContent.CallOpts)
}

// StatusCodeDescription is a free data retrieval call binding the contract method 0x38864284.
//
// Solidity: function statusCodeDescription(int256 status_code) constant returns(bytes32)
func (_BaseContent *BaseContentCaller) StatusCodeDescription(opts *bind.CallOpts, status_code *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "statusCodeDescription", status_code)
	return *ret0, err
}

// StatusCodeDescription is a free data retrieval call binding the contract method 0x38864284.
//
// Solidity: function statusCodeDescription(int256 status_code) constant returns(bytes32)
func (_BaseContent *BaseContentSession) StatusCodeDescription(status_code *big.Int) ([32]byte, error) {
	return _BaseContent.Contract.StatusCodeDescription(&_BaseContent.CallOpts, status_code)
}

// StatusCodeDescription is a free data retrieval call binding the contract method 0x38864284.
//
// Solidity: function statusCodeDescription(int256 status_code) constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) StatusCodeDescription(status_code *big.Int) ([32]byte, error) {
	return _BaseContent.Contract.StatusCodeDescription(&_BaseContent.CallOpts, status_code)
}

// StatusDescription is a free data retrieval call binding the contract method 0xf81ab0ae.
//
// Solidity: function statusDescription() constant returns(bytes32)
func (_BaseContent *BaseContentCaller) StatusDescription(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "statusDescription")
	return *ret0, err
}

// StatusDescription is a free data retrieval call binding the contract method 0xf81ab0ae.
//
// Solidity: function statusDescription() constant returns(bytes32)
func (_BaseContent *BaseContentSession) StatusDescription() ([32]byte, error) {
	return _BaseContent.Contract.StatusDescription(&_BaseContent.CallOpts)
}

// StatusDescription is a free data retrieval call binding the contract method 0xf81ab0ae.
//
// Solidity: function statusDescription() constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) StatusDescription() ([32]byte, error) {
	return _BaseContent.Contract.StatusDescription(&_BaseContent.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContent *BaseContentCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContent *BaseContentSession) Version() ([32]byte, error) {
	return _BaseContent.Contract.Version(&_BaseContent.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) Version() ([32]byte, error) {
	return _BaseContent.Contract.Version(&_BaseContent.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContent *BaseContentCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContent *BaseContentSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContent.Contract.VersionHashes(&_BaseContent.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContent *BaseContentCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContent.Contract.VersionHashes(&_BaseContent.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContent *BaseContentCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContent *BaseContentSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContent.Contract.VersionTimestamp(&_BaseContent.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContent.Contract.VersionTimestamp(&_BaseContent.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContent *BaseContentCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContent *BaseContentSession) Visibility() (uint8, error) {
	return _BaseContent.Contract.Visibility(&_BaseContent.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContent *BaseContentCallerSession) Visibility() (uint8, error) {
	return _BaseContent.Contract.Visibility(&_BaseContent.CallOpts)
}

// AccessComplete is a paid mutator transaction binding the contract method 0x5cc4aa9b.
//
// Solidity: function accessComplete(uint256 request_ID, uint256 score_pct, bytes32 ml_out_hash) returns(bool)
func (_BaseContent *BaseContentTransactor) AccessComplete(opts *bind.TransactOpts, request_ID *big.Int, score_pct *big.Int, ml_out_hash [32]byte) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessComplete", request_ID, score_pct, ml_out_hash)
}

// AccessComplete is a paid mutator transaction binding the contract method 0x5cc4aa9b.
//
// Solidity: function accessComplete(uint256 request_ID, uint256 score_pct, bytes32 ml_out_hash) returns(bool)
func (_BaseContent *BaseContentSession) AccessComplete(request_ID *big.Int, score_pct *big.Int, ml_out_hash [32]byte) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessComplete(&_BaseContent.TransactOpts, request_ID, score_pct, ml_out_hash)
}

// AccessComplete is a paid mutator transaction binding the contract method 0x5cc4aa9b.
//
// Solidity: function accessComplete(uint256 request_ID, uint256 score_pct, bytes32 ml_out_hash) returns(bool)
func (_BaseContent *BaseContentTransactorSession) AccessComplete(request_ID *big.Int, score_pct *big.Int, ml_out_hash [32]byte) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessComplete(&_BaseContent.TransactOpts, request_ID, score_pct, ml_out_hash)
}

// AccessGrant is a paid mutator transaction binding the contract method 0xee56d767.
//
// Solidity: function accessGrant(uint256 request_ID, bool access_granted, string re_key, string encrypted_AES_key) returns(bool)
func (_BaseContent *BaseContentTransactor) AccessGrant(opts *bind.TransactOpts, request_ID *big.Int, access_granted bool, re_key string, encrypted_AES_key string) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessGrant", request_ID, access_granted, re_key, encrypted_AES_key)
}

// AccessGrant is a paid mutator transaction binding the contract method 0xee56d767.
//
// Solidity: function accessGrant(uint256 request_ID, bool access_granted, string re_key, string encrypted_AES_key) returns(bool)
func (_BaseContent *BaseContentSession) AccessGrant(request_ID *big.Int, access_granted bool, re_key string, encrypted_AES_key string) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessGrant(&_BaseContent.TransactOpts, request_ID, access_granted, re_key, encrypted_AES_key)
}

// AccessGrant is a paid mutator transaction binding the contract method 0xee56d767.
//
// Solidity: function accessGrant(uint256 request_ID, bool access_granted, string re_key, string encrypted_AES_key) returns(bool)
func (_BaseContent *BaseContentTransactorSession) AccessGrant(request_ID *big.Int, access_granted bool, re_key string, encrypted_AES_key string) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessGrant(&_BaseContent.TransactOpts, request_ID, access_granted, re_key, encrypted_AES_key)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xa1ff106e.
//
// Solidity: function accessRequest(uint8 level, string pke_requestor, string pke_AFGH, bytes32[] custom_values, address[] stakeholders) returns(uint256)
func (_BaseContent *BaseContentTransactor) AccessRequest(opts *bind.TransactOpts, level uint8, pke_requestor string, pke_AFGH string, custom_values [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessRequest", level, pke_requestor, pke_AFGH, custom_values, stakeholders)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xa1ff106e.
//
// Solidity: function accessRequest(uint8 level, string pke_requestor, string pke_AFGH, bytes32[] custom_values, address[] stakeholders) returns(uint256)
func (_BaseContent *BaseContentSession) AccessRequest(level uint8, pke_requestor string, pke_AFGH string, custom_values [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessRequest(&_BaseContent.TransactOpts, level, pke_requestor, pke_AFGH, custom_values, stakeholders)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xa1ff106e.
//
// Solidity: function accessRequest(uint8 level, string pke_requestor, string pke_AFGH, bytes32[] custom_values, address[] stakeholders) returns(uint256)
func (_BaseContent *BaseContentTransactorSession) AccessRequest(level uint8, pke_requestor string, pke_AFGH string, custom_values [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessRequest(&_BaseContent.TransactOpts, level, pke_requestor, pke_AFGH, custom_values, stakeholders)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContent *BaseContentTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContent *BaseContentSession) ClearPending() (*types.Transaction, error) {
	return _BaseContent.Contract.ClearPending(&_BaseContent.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContent *BaseContentTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseContent.Contract.ClearPending(&_BaseContent.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContent *BaseContentTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContent *BaseContentSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContent.Contract.Commit(&_BaseContent.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContent *BaseContentTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContent.Contract.Commit(&_BaseContent.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContent *BaseContentTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContent *BaseContentSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContent.Contract.ConfirmCommit(&_BaseContent.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContent *BaseContentTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContent.Contract.ConfirmCommit(&_BaseContent.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContent *BaseContentTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContent *BaseContentSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContent.Contract.DeleteVersion(&_BaseContent.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContent *BaseContentTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContent.Contract.DeleteVersion(&_BaseContent.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContent *BaseContentTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContent *BaseContentSession) Kill() (*types.Transaction, error) {
	return _BaseContent.Contract.Kill(&_BaseContent.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContent *BaseContentTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseContent.Contract.Kill(&_BaseContent.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x97449ebd.
//
// Solidity: function migrate(address _owner, address _creator, address _contentContractAddress, uint256 _accessCharge, int256 _statusCode, uint256 _requestID, uint8 _visibility, string _objectHash, string _versionHashes, uint256[] _versionTimestamps) returns()
func (_BaseContent *BaseContentTransactor) Migrate(opts *bind.TransactOpts, _owner common.Address, _creator common.Address, _contentContractAddress common.Address, _accessCharge *big.Int, _statusCode *big.Int, _requestID *big.Int, _visibility uint8, _objectHash string, _versionHashes string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "migrate", _owner, _creator, _contentContractAddress, _accessCharge, _statusCode, _requestID, _visibility, _objectHash, _versionHashes, _versionTimestamps)
}

// Migrate is a paid mutator transaction binding the contract method 0x97449ebd.
//
// Solidity: function migrate(address _owner, address _creator, address _contentContractAddress, uint256 _accessCharge, int256 _statusCode, uint256 _requestID, uint8 _visibility, string _objectHash, string _versionHashes, uint256[] _versionTimestamps) returns()
func (_BaseContent *BaseContentSession) Migrate(_owner common.Address, _creator common.Address, _contentContractAddress common.Address, _accessCharge *big.Int, _statusCode *big.Int, _requestID *big.Int, _visibility uint8, _objectHash string, _versionHashes string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.Migrate(&_BaseContent.TransactOpts, _owner, _creator, _contentContractAddress, _accessCharge, _statusCode, _requestID, _visibility, _objectHash, _versionHashes, _versionTimestamps)
}

// Migrate is a paid mutator transaction binding the contract method 0x97449ebd.
//
// Solidity: function migrate(address _owner, address _creator, address _contentContractAddress, uint256 _accessCharge, int256 _statusCode, uint256 _requestID, uint8 _visibility, string _objectHash, string _versionHashes, uint256[] _versionTimestamps) returns()
func (_BaseContent *BaseContentTransactorSession) Migrate(_owner common.Address, _creator common.Address, _contentContractAddress common.Address, _accessCharge *big.Int, _statusCode *big.Int, _requestID *big.Int, _visibility uint8, _objectHash string, _versionHashes string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.Migrate(&_BaseContent.TransactOpts, _owner, _creator, _contentContractAddress, _accessCharge, _statusCode, _requestID, _visibility, _objectHash, _versionHashes, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseContent *BaseContentTransactor) MigrateEditable(opts *bind.TransactOpts, _owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "migrateEditable", _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseContent *BaseContentSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.MigrateEditable(&_BaseContent.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseContent *BaseContentTransactorSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.MigrateEditable(&_BaseContent.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// ProcessRequestPayment is a paid mutator transaction binding the contract method 0x0c6d3f93.
//
// Solidity: function processRequestPayment(uint256 request_ID, address payee, string label, uint256 amount) returns(bool)
func (_BaseContent *BaseContentTransactor) ProcessRequestPayment(opts *bind.TransactOpts, request_ID *big.Int, payee common.Address, label string, amount *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "processRequestPayment", request_ID, payee, label, amount)
}

// ProcessRequestPayment is a paid mutator transaction binding the contract method 0x0c6d3f93.
//
// Solidity: function processRequestPayment(uint256 request_ID, address payee, string label, uint256 amount) returns(bool)
func (_BaseContent *BaseContentSession) ProcessRequestPayment(request_ID *big.Int, payee common.Address, label string, amount *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.ProcessRequestPayment(&_BaseContent.TransactOpts, request_ID, payee, label, amount)
}

// ProcessRequestPayment is a paid mutator transaction binding the contract method 0x0c6d3f93.
//
// Solidity: function processRequestPayment(uint256 request_ID, address payee, string label, uint256 amount) returns(bool)
func (_BaseContent *BaseContentTransactorSession) ProcessRequestPayment(request_ID *big.Int, payee common.Address, label string, amount *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.ProcessRequestPayment(&_BaseContent.TransactOpts, request_ID, payee, label, amount)
}

// Publish is a paid mutator transaction binding the contract method 0x075d4782.
//
// Solidity: function publish() returns(bool)
func (_BaseContent *BaseContentTransactor) Publish(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "publish")
}

// Publish is a paid mutator transaction binding the contract method 0x075d4782.
//
// Solidity: function publish() returns(bool)
func (_BaseContent *BaseContentSession) Publish() (*types.Transaction, error) {
	return _BaseContent.Contract.Publish(&_BaseContent.TransactOpts)
}

// Publish is a paid mutator transaction binding the contract method 0x075d4782.
//
// Solidity: function publish() returns(bool)
func (_BaseContent *BaseContentTransactorSession) Publish() (*types.Transaction, error) {
	return _BaseContent.Contract.Publish(&_BaseContent.TransactOpts)
}

// SetAccessCharge is a paid mutator transaction binding the contract method 0xf4d9bae8.
//
// Solidity: function setAccessCharge(uint256 charge) returns(uint256)
func (_BaseContent *BaseContentTransactor) SetAccessCharge(opts *bind.TransactOpts, charge *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setAccessCharge", charge)
}

// SetAccessCharge is a paid mutator transaction binding the contract method 0xf4d9bae8.
//
// Solidity: function setAccessCharge(uint256 charge) returns(uint256)
func (_BaseContent *BaseContentSession) SetAccessCharge(charge *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.SetAccessCharge(&_BaseContent.TransactOpts, charge)
}

// SetAccessCharge is a paid mutator transaction binding the contract method 0xf4d9bae8.
//
// Solidity: function setAccessCharge(uint256 charge) returns(uint256)
func (_BaseContent *BaseContentTransactorSession) SetAccessCharge(charge *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.SetAccessCharge(&_BaseContent.TransactOpts, charge)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContent *BaseContentTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContent *BaseContentSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.SetAddressKMS(&_BaseContent.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContent *BaseContentTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.SetAddressKMS(&_BaseContent.TransactOpts, address_KMS)
}

// SetContentContractAddress is a paid mutator transaction binding the contract method 0xe5385303.
//
// Solidity: function setContentContractAddress(address addr) returns()
func (_BaseContent *BaseContentTransactor) SetContentContractAddress(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setContentContractAddress", addr)
}

// SetContentContractAddress is a paid mutator transaction binding the contract method 0xe5385303.
//
// Solidity: function setContentContractAddress(address addr) returns()
func (_BaseContent *BaseContentSession) SetContentContractAddress(addr common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.SetContentContractAddress(&_BaseContent.TransactOpts, addr)
}

// SetContentContractAddress is a paid mutator transaction binding the contract method 0xe5385303.
//
// Solidity: function setContentContractAddress(address addr) returns()
func (_BaseContent *BaseContentTransactorSession) SetContentContractAddress(addr common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.SetContentContractAddress(&_BaseContent.TransactOpts, addr)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetGroupRights(&_BaseContent.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetGroupRights(&_BaseContent.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetRights(&_BaseContent.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetRights(&_BaseContent.TransactOpts, stakeholder, access_type, access)
}

// SetStatusCode is a paid mutator transaction binding the contract method 0x5267db44.
//
// Solidity: function setStatusCode(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactor) SetStatusCode(opts *bind.TransactOpts, status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setStatusCode", status_code)
}

// SetStatusCode is a paid mutator transaction binding the contract method 0x5267db44.
//
// Solidity: function setStatusCode(int256 status_code) returns(int256)
func (_BaseContent *BaseContentSession) SetStatusCode(status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.SetStatusCode(&_BaseContent.TransactOpts, status_code)
}

// SetStatusCode is a paid mutator transaction binding the contract method 0x5267db44.
//
// Solidity: function setStatusCode(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactorSession) SetStatusCode(status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.SetStatusCode(&_BaseContent.TransactOpts, status_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 visibility_code) returns()
func (_BaseContent *BaseContentTransactor) SetVisibility(opts *bind.TransactOpts, visibility_code uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setVisibility", visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 visibility_code) returns()
func (_BaseContent *BaseContentSession) SetVisibility(visibility_code uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetVisibility(&_BaseContent.TransactOpts, visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 visibility_code) returns()
func (_BaseContent *BaseContentTransactorSession) SetVisibility(visibility_code uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetVisibility(&_BaseContent.TransactOpts, visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContent *BaseContentTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContent *BaseContentSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.TransferCreatorship(&_BaseContent.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContent *BaseContentTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.TransferCreatorship(&_BaseContent.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContent *BaseContentTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContent *BaseContentSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.TransferOwnership(&_BaseContent.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContent *BaseContentTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.TransferOwnership(&_BaseContent.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContent *BaseContentTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContent *BaseContentSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContent.Contract.UpdateRequest(&_BaseContent.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContent *BaseContentTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContent.Contract.UpdateRequest(&_BaseContent.TransactOpts)
}

// UpdateStatus is a paid mutator transaction binding the contract method 0x8280dd8f.
//
// Solidity: function updateStatus(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactor) UpdateStatus(opts *bind.TransactOpts, status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "updateStatus", status_code)
}

// UpdateStatus is a paid mutator transaction binding the contract method 0x8280dd8f.
//
// Solidity: function updateStatus(int256 status_code) returns(int256)
func (_BaseContent *BaseContentSession) UpdateStatus(status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.UpdateStatus(&_BaseContent.TransactOpts, status_code)
}

// UpdateStatus is a paid mutator transaction binding the contract method 0x8280dd8f.
//
// Solidity: function updateStatus(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactorSession) UpdateStatus(status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.UpdateStatus(&_BaseContent.TransactOpts, status_code)
}

// BaseContentAccessCompleteIterator is returned from FilterAccessComplete and is used to iterate over the raw logs and unpacked data for AccessComplete events raised by the BaseContent contract.
type BaseContentAccessCompleteIterator struct {
	Event *BaseContentAccessComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessComplete represents a AccessComplete event raised by the BaseContent contract.
type BaseContentAccessComplete struct {
	RequestID            *big.Int
	ScorePct             *big.Int
	CustomContractResult bool
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterAccessComplete is a free log retrieval operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) FilterAccessComplete(opts *bind.FilterOpts) (*BaseContentAccessCompleteIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessComplete")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessCompleteIterator{contract: _BaseContent.contract, event: "AccessComplete", logs: logs, sub: sub}, nil
}

// WatchAccessComplete is a free log subscription operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) WatchAccessComplete(opts *bind.WatchOpts, sink chan<- *BaseContentAccessComplete) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessComplete)
				if err := _BaseContent.contract.UnpackLog(event, "AccessComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessComplete is a log parse operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) ParseAccessComplete(log types.Log) (*BaseContentAccessComplete, error) {
	event := new(BaseContentAccessComplete)
	if err := _BaseContent.contract.UnpackLog(event, "AccessComplete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentAccessGrantIterator is returned from FilterAccessGrant and is used to iterate over the raw logs and unpacked data for AccessGrant events raised by the BaseContent contract.
type BaseContentAccessGrantIterator struct {
	Event *BaseContentAccessGrant // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessGrantIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessGrant)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessGrant)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessGrantIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessGrantIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessGrant represents a AccessGrant event raised by the BaseContent contract.
type BaseContentAccessGrant struct {
	RequestID       *big.Int
	AccessGranted   bool
	ReKey           string
	EncryptedAESKey string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAccessGrant is a free log retrieval operation binding the contract event 0x475e9d68ca61f129cebee5af694af00ed0e3b3b0d4b74071fbb81d0e2b912718.
//
// Solidity: event AccessGrant(uint256 requestID, bool access_granted, string reKey, string encryptedAESKey)
func (_BaseContent *BaseContentFilterer) FilterAccessGrant(opts *bind.FilterOpts) (*BaseContentAccessGrantIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessGrant")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessGrantIterator{contract: _BaseContent.contract, event: "AccessGrant", logs: logs, sub: sub}, nil
}

// WatchAccessGrant is a free log subscription operation binding the contract event 0x475e9d68ca61f129cebee5af694af00ed0e3b3b0d4b74071fbb81d0e2b912718.
//
// Solidity: event AccessGrant(uint256 requestID, bool access_granted, string reKey, string encryptedAESKey)
func (_BaseContent *BaseContentFilterer) WatchAccessGrant(opts *bind.WatchOpts, sink chan<- *BaseContentAccessGrant) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessGrant")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessGrant)
				if err := _BaseContent.contract.UnpackLog(event, "AccessGrant", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessGrant is a log parse operation binding the contract event 0x475e9d68ca61f129cebee5af694af00ed0e3b3b0d4b74071fbb81d0e2b912718.
//
// Solidity: event AccessGrant(uint256 requestID, bool access_granted, string reKey, string encryptedAESKey)
func (_BaseContent *BaseContentFilterer) ParseAccessGrant(log types.Log) (*BaseContentAccessGrant, error) {
	event := new(BaseContentAccessGrant)
	if err := _BaseContent.contract.UnpackLog(event, "AccessGrant", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseContent contract.
type BaseContentAccessRequestIterator struct {
	Event *BaseContentAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequest represents a AccessRequest event raised by the BaseContent contract.
type BaseContentAccessRequest struct {
	RequestID    *big.Int
	Level        uint8
	ContentHash  string
	PkeRequestor string
	PkeAFGH      string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseContentAccessRequestIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestIterator{contract: _BaseContent.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequest)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) ParseAccessRequest(log types.Log) (*BaseContentAccessRequest, error) {
	event := new(BaseContentAccessRequest)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentAccessRequestStakeholderIterator is returned from FilterAccessRequestStakeholder and is used to iterate over the raw logs and unpacked data for AccessRequestStakeholder events raised by the BaseContent contract.
type BaseContentAccessRequestStakeholderIterator struct {
	Event *BaseContentAccessRequestStakeholder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestStakeholderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequestStakeholder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequestStakeholder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestStakeholderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestStakeholderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequestStakeholder represents a AccessRequestStakeholder event raised by the BaseContent contract.
type BaseContentAccessRequestStakeholder struct {
	Stakeholder common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestStakeholder is a free log retrieval operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) FilterAccessRequestStakeholder(opts *bind.FilterOpts) (*BaseContentAccessRequestStakeholderIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequestStakeholder")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestStakeholderIterator{contract: _BaseContent.contract, event: "AccessRequestStakeholder", logs: logs, sub: sub}, nil
}

// WatchAccessRequestStakeholder is a free log subscription operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) WatchAccessRequestStakeholder(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequestStakeholder) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequestStakeholder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequestStakeholder)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequestStakeholder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestStakeholder is a log parse operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) ParseAccessRequestStakeholder(log types.Log) (*BaseContentAccessRequestStakeholder, error) {
	event := new(BaseContentAccessRequestStakeholder)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequestStakeholder", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentAccessRequestValueIterator is returned from FilterAccessRequestValue and is used to iterate over the raw logs and unpacked data for AccessRequestValue events raised by the BaseContent contract.
type BaseContentAccessRequestValueIterator struct {
	Event *BaseContentAccessRequestValue // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestValueIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequestValue)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequestValue)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestValueIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestValueIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequestValue represents a AccessRequestValue event raised by the BaseContent contract.
type BaseContentAccessRequestValue struct {
	CustomValue [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestValue is a free log retrieval operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) FilterAccessRequestValue(opts *bind.FilterOpts) (*BaseContentAccessRequestValueIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequestValue")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestValueIterator{contract: _BaseContent.contract, event: "AccessRequestValue", logs: logs, sub: sub}, nil
}

// WatchAccessRequestValue is a free log subscription operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) WatchAccessRequestValue(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequestValue) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequestValue")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequestValue)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequestValue", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestValue is a log parse operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) ParseAccessRequestValue(log types.Log) (*BaseContentAccessRequestValue, error) {
	event := new(BaseContentAccessRequestValue)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequestValue", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContent contract.
type BaseContentCommitPendingIterator struct {
	Event *BaseContentCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentCommitPending represents a CommitPending event raised by the BaseContent contract.
type BaseContentCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentCommitPendingIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentCommitPendingIterator{contract: _BaseContent.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentCommitPending)
				if err := _BaseContent.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) ParseCommitPending(log types.Log) (*BaseContentCommitPending, error) {
	event := new(BaseContentCommitPending)
	if err := _BaseContent.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentContentMigrateIterator is returned from FilterContentMigrate and is used to iterate over the raw logs and unpacked data for ContentMigrate events raised by the BaseContent contract.
type BaseContentContentMigrateIterator struct {
	Event *BaseContentContentMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentContentMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentContentMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentContentMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentContentMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentContentMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentContentMigrate represents a ContentMigrate event raised by the BaseContent contract.
type BaseContentContentMigrate struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterContentMigrate is a free log retrieval operation binding the contract event 0x8aed484f6f6945b0c95faf161e8596fb646538de2080ffe3a03d360aa9234399.
//
// Solidity: event ContentMigrate()
func (_BaseContent *BaseContentFilterer) FilterContentMigrate(opts *bind.FilterOpts) (*BaseContentContentMigrateIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "ContentMigrate")
	if err != nil {
		return nil, err
	}
	return &BaseContentContentMigrateIterator{contract: _BaseContent.contract, event: "ContentMigrate", logs: logs, sub: sub}, nil
}

// WatchContentMigrate is a free log subscription operation binding the contract event 0x8aed484f6f6945b0c95faf161e8596fb646538de2080ffe3a03d360aa9234399.
//
// Solidity: event ContentMigrate()
func (_BaseContent *BaseContentFilterer) WatchContentMigrate(opts *bind.WatchOpts, sink chan<- *BaseContentContentMigrate) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "ContentMigrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentContentMigrate)
				if err := _BaseContent.contract.UnpackLog(event, "ContentMigrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentMigrate is a log parse operation binding the contract event 0x8aed484f6f6945b0c95faf161e8596fb646538de2080ffe3a03d360aa9234399.
//
// Solidity: event ContentMigrate()
func (_BaseContent *BaseContentFilterer) ParseContentMigrate(log types.Log) (*BaseContentContentMigrate, error) {
	event := new(BaseContentContentMigrate)
	if err := _BaseContent.contract.UnpackLog(event, "ContentMigrate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentContentObjectCreateIterator is returned from FilterContentObjectCreate and is used to iterate over the raw logs and unpacked data for ContentObjectCreate events raised by the BaseContent contract.
type BaseContentContentObjectCreateIterator struct {
	Event *BaseContentContentObjectCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentContentObjectCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentContentObjectCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentContentObjectCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentContentObjectCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentContentObjectCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentContentObjectCreate represents a ContentObjectCreate event raised by the BaseContent contract.
type BaseContentContentObjectCreate struct {
	ContainingLibrary common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterContentObjectCreate is a free log retrieval operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) FilterContentObjectCreate(opts *bind.FilterOpts) (*BaseContentContentObjectCreateIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "ContentObjectCreate")
	if err != nil {
		return nil, err
	}
	return &BaseContentContentObjectCreateIterator{contract: _BaseContent.contract, event: "ContentObjectCreate", logs: logs, sub: sub}, nil
}

// WatchContentObjectCreate is a free log subscription operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) WatchContentObjectCreate(opts *bind.WatchOpts, sink chan<- *BaseContentContentObjectCreate) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "ContentObjectCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentContentObjectCreate)
				if err := _BaseContent.contract.UnpackLog(event, "ContentObjectCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectCreate is a log parse operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) ParseContentObjectCreate(log types.Log) (*BaseContentContentObjectCreate, error) {
	event := new(BaseContentContentObjectCreate)
	if err := _BaseContent.contract.UnpackLog(event, "ContentObjectCreate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentDbgAccessIterator is returned from FilterDbgAccess and is used to iterate over the raw logs and unpacked data for DbgAccess events raised by the BaseContent contract.
type BaseContentDbgAccessIterator struct {
	Event *BaseContentDbgAccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentDbgAccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentDbgAccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentDbgAccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentDbgAccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentDbgAccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentDbgAccess represents a DbgAccess event raised by the BaseContent contract.
type BaseContentDbgAccess struct {
	Charged   *big.Int
	Received  *big.Int
	Converted *big.Int
	Enough    bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDbgAccess is a free log retrieval operation binding the contract event 0xfdcd1c148f180968772efab9ef7e26a2ec7a58d82572587ad224c36c91236175.
//
// Solidity: event DbgAccess(uint256 charged, uint256 received, uint256 converted, bool enough)
func (_BaseContent *BaseContentFilterer) FilterDbgAccess(opts *bind.FilterOpts) (*BaseContentDbgAccessIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "DbgAccess")
	if err != nil {
		return nil, err
	}
	return &BaseContentDbgAccessIterator{contract: _BaseContent.contract, event: "DbgAccess", logs: logs, sub: sub}, nil
}

// WatchDbgAccess is a free log subscription operation binding the contract event 0xfdcd1c148f180968772efab9ef7e26a2ec7a58d82572587ad224c36c91236175.
//
// Solidity: event DbgAccess(uint256 charged, uint256 received, uint256 converted, bool enough)
func (_BaseContent *BaseContentFilterer) WatchDbgAccess(opts *bind.WatchOpts, sink chan<- *BaseContentDbgAccess) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "DbgAccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentDbgAccess)
				if err := _BaseContent.contract.UnpackLog(event, "DbgAccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDbgAccess is a log parse operation binding the contract event 0xfdcd1c148f180968772efab9ef7e26a2ec7a58d82572587ad224c36c91236175.
//
// Solidity: event DbgAccess(uint256 charged, uint256 received, uint256 converted, bool enough)
func (_BaseContent *BaseContentFilterer) ParseDbgAccess(log types.Log) (*BaseContentDbgAccess, error) {
	event := new(BaseContentDbgAccess)
	if err := _BaseContent.contract.UnpackLog(event, "DbgAccess", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentDbgAccessCodeIterator is returned from FilterDbgAccessCode and is used to iterate over the raw logs and unpacked data for DbgAccessCode events raised by the BaseContent contract.
type BaseContentDbgAccessCodeIterator struct {
	Event *BaseContentDbgAccessCode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentDbgAccessCodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentDbgAccessCode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentDbgAccessCode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentDbgAccessCodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentDbgAccessCodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentDbgAccessCode represents a DbgAccessCode event raised by the BaseContent contract.
type BaseContentDbgAccessCode struct {
	Code uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDbgAccessCode is a free log retrieval operation binding the contract event 0x14c078593b5fe597db0b1293557c1a5315f2b7e708477ea38b41929534d96bdd.
//
// Solidity: event DbgAccessCode(uint8 code)
func (_BaseContent *BaseContentFilterer) FilterDbgAccessCode(opts *bind.FilterOpts) (*BaseContentDbgAccessCodeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "DbgAccessCode")
	if err != nil {
		return nil, err
	}
	return &BaseContentDbgAccessCodeIterator{contract: _BaseContent.contract, event: "DbgAccessCode", logs: logs, sub: sub}, nil
}

// WatchDbgAccessCode is a free log subscription operation binding the contract event 0x14c078593b5fe597db0b1293557c1a5315f2b7e708477ea38b41929534d96bdd.
//
// Solidity: event DbgAccessCode(uint8 code)
func (_BaseContent *BaseContentFilterer) WatchDbgAccessCode(opts *bind.WatchOpts, sink chan<- *BaseContentDbgAccessCode) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "DbgAccessCode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentDbgAccessCode)
				if err := _BaseContent.contract.UnpackLog(event, "DbgAccessCode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDbgAccessCode is a log parse operation binding the contract event 0x14c078593b5fe597db0b1293557c1a5315f2b7e708477ea38b41929534d96bdd.
//
// Solidity: event DbgAccessCode(uint8 code)
func (_BaseContent *BaseContentFilterer) ParseDbgAccessCode(log types.Log) (*BaseContentDbgAccessCode, error) {
	event := new(BaseContentDbgAccessCode)
	if err := _BaseContent.contract.UnpackLog(event, "DbgAccessCode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentEditableMigrateIterator is returned from FilterEditableMigrate and is used to iterate over the raw logs and unpacked data for EditableMigrate events raised by the BaseContent contract.
type BaseContentEditableMigrateIterator struct {
	Event *BaseContentEditableMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentEditableMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentEditableMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentEditableMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentEditableMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentEditableMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentEditableMigrate represents a EditableMigrate event raised by the BaseContent contract.
type BaseContentEditableMigrate struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEditableMigrate is a free log retrieval operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseContent *BaseContentFilterer) FilterEditableMigrate(opts *bind.FilterOpts) (*BaseContentEditableMigrateIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return &BaseContentEditableMigrateIterator{contract: _BaseContent.contract, event: "EditableMigrate", logs: logs, sub: sub}, nil
}

// WatchEditableMigrate is a free log subscription operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseContent *BaseContentFilterer) WatchEditableMigrate(opts *bind.WatchOpts, sink chan<- *BaseContentEditableMigrate) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentEditableMigrate)
				if err := _BaseContent.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEditableMigrate is a log parse operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseContent *BaseContentFilterer) ParseEditableMigrate(log types.Log) (*BaseContentEditableMigrate, error) {
	event := new(BaseContentEditableMigrate)
	if err := _BaseContent.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentGetAccessChargeIterator is returned from FilterGetAccessCharge and is used to iterate over the raw logs and unpacked data for GetAccessCharge events raised by the BaseContent contract.
type BaseContentGetAccessChargeIterator struct {
	Event *BaseContentGetAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentGetAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentGetAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentGetAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentGetAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentGetAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentGetAccessCharge represents a GetAccessCharge event raised by the BaseContent contract.
type BaseContentGetAccessCharge struct {
	Level        uint8
	AccessCharge *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterGetAccessCharge is a free log retrieval operation binding the contract event 0xa58326ee5bb617cb8b4f0d0f5f557c469d2d05d7a738f777037deda9c724b370.
//
// Solidity: event GetAccessCharge(uint8 level, uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) FilterGetAccessCharge(opts *bind.FilterOpts) (*BaseContentGetAccessChargeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "GetAccessCharge")
	if err != nil {
		return nil, err
	}
	return &BaseContentGetAccessChargeIterator{contract: _BaseContent.contract, event: "GetAccessCharge", logs: logs, sub: sub}, nil
}

// WatchGetAccessCharge is a free log subscription operation binding the contract event 0xa58326ee5bb617cb8b4f0d0f5f557c469d2d05d7a738f777037deda9c724b370.
//
// Solidity: event GetAccessCharge(uint8 level, uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) WatchGetAccessCharge(opts *bind.WatchOpts, sink chan<- *BaseContentGetAccessCharge) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "GetAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentGetAccessCharge)
				if err := _BaseContent.contract.UnpackLog(event, "GetAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGetAccessCharge is a log parse operation binding the contract event 0xa58326ee5bb617cb8b4f0d0f5f557c469d2d05d7a738f777037deda9c724b370.
//
// Solidity: event GetAccessCharge(uint8 level, uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) ParseGetAccessCharge(log types.Log) (*BaseContentGetAccessCharge, error) {
	event := new(BaseContentGetAccessCharge)
	if err := _BaseContent.contract.UnpackLog(event, "GetAccessCharge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentInsufficientFundsIterator is returned from FilterInsufficientFunds and is used to iterate over the raw logs and unpacked data for InsufficientFunds events raised by the BaseContent contract.
type BaseContentInsufficientFundsIterator struct {
	Event *BaseContentInsufficientFunds // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentInsufficientFundsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentInsufficientFunds)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentInsufficientFunds)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentInsufficientFundsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentInsufficientFundsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentInsufficientFunds represents a InsufficientFunds event raised by the BaseContent contract.
type BaseContentInsufficientFunds struct {
	AccessCharge   *big.Int
	AmountProvided *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInsufficientFunds is a free log retrieval operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) FilterInsufficientFunds(opts *bind.FilterOpts) (*BaseContentInsufficientFundsIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "InsufficientFunds")
	if err != nil {
		return nil, err
	}
	return &BaseContentInsufficientFundsIterator{contract: _BaseContent.contract, event: "InsufficientFunds", logs: logs, sub: sub}, nil
}

// WatchInsufficientFunds is a free log subscription operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) WatchInsufficientFunds(opts *bind.WatchOpts, sink chan<- *BaseContentInsufficientFunds) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "InsufficientFunds")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentInsufficientFunds)
				if err := _BaseContent.contract.UnpackLog(event, "InsufficientFunds", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInsufficientFunds is a log parse operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) ParseInsufficientFunds(log types.Log) (*BaseContentInsufficientFunds, error) {
	event := new(BaseContentInsufficientFunds)
	if err := _BaseContent.contract.UnpackLog(event, "InsufficientFunds", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentInvokeCustomPostHookIterator is returned from FilterInvokeCustomPostHook and is used to iterate over the raw logs and unpacked data for InvokeCustomPostHook events raised by the BaseContent contract.
type BaseContentInvokeCustomPostHookIterator struct {
	Event *BaseContentInvokeCustomPostHook // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentInvokeCustomPostHookIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentInvokeCustomPostHook)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentInvokeCustomPostHook)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentInvokeCustomPostHookIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentInvokeCustomPostHookIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentInvokeCustomPostHook represents a InvokeCustomPostHook event raised by the BaseContent contract.
type BaseContentInvokeCustomPostHook struct {
	CustomContract common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInvokeCustomPostHook is a free log retrieval operation binding the contract event 0x97d9c9779ed3ed8b9a6edfe16d17b1fdec843245747a19abfb621806e37d4a89.
//
// Solidity: event InvokeCustomPostHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) FilterInvokeCustomPostHook(opts *bind.FilterOpts) (*BaseContentInvokeCustomPostHookIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "InvokeCustomPostHook")
	if err != nil {
		return nil, err
	}
	return &BaseContentInvokeCustomPostHookIterator{contract: _BaseContent.contract, event: "InvokeCustomPostHook", logs: logs, sub: sub}, nil
}

// WatchInvokeCustomPostHook is a free log subscription operation binding the contract event 0x97d9c9779ed3ed8b9a6edfe16d17b1fdec843245747a19abfb621806e37d4a89.
//
// Solidity: event InvokeCustomPostHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) WatchInvokeCustomPostHook(opts *bind.WatchOpts, sink chan<- *BaseContentInvokeCustomPostHook) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "InvokeCustomPostHook")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentInvokeCustomPostHook)
				if err := _BaseContent.contract.UnpackLog(event, "InvokeCustomPostHook", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvokeCustomPostHook is a log parse operation binding the contract event 0x97d9c9779ed3ed8b9a6edfe16d17b1fdec843245747a19abfb621806e37d4a89.
//
// Solidity: event InvokeCustomPostHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) ParseInvokeCustomPostHook(log types.Log) (*BaseContentInvokeCustomPostHook, error) {
	event := new(BaseContentInvokeCustomPostHook)
	if err := _BaseContent.contract.UnpackLog(event, "InvokeCustomPostHook", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentInvokeCustomPreHookIterator is returned from FilterInvokeCustomPreHook and is used to iterate over the raw logs and unpacked data for InvokeCustomPreHook events raised by the BaseContent contract.
type BaseContentInvokeCustomPreHookIterator struct {
	Event *BaseContentInvokeCustomPreHook // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentInvokeCustomPreHookIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentInvokeCustomPreHook)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentInvokeCustomPreHook)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentInvokeCustomPreHookIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentInvokeCustomPreHookIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentInvokeCustomPreHook represents a InvokeCustomPreHook event raised by the BaseContent contract.
type BaseContentInvokeCustomPreHook struct {
	CustomContract common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInvokeCustomPreHook is a free log retrieval operation binding the contract event 0x12b04791b5caab768e2757268992f0c62801e3921d9e310c893f0d5f9caa5f71.
//
// Solidity: event InvokeCustomPreHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) FilterInvokeCustomPreHook(opts *bind.FilterOpts) (*BaseContentInvokeCustomPreHookIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "InvokeCustomPreHook")
	if err != nil {
		return nil, err
	}
	return &BaseContentInvokeCustomPreHookIterator{contract: _BaseContent.contract, event: "InvokeCustomPreHook", logs: logs, sub: sub}, nil
}

// WatchInvokeCustomPreHook is a free log subscription operation binding the contract event 0x12b04791b5caab768e2757268992f0c62801e3921d9e310c893f0d5f9caa5f71.
//
// Solidity: event InvokeCustomPreHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) WatchInvokeCustomPreHook(opts *bind.WatchOpts, sink chan<- *BaseContentInvokeCustomPreHook) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "InvokeCustomPreHook")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentInvokeCustomPreHook)
				if err := _BaseContent.contract.UnpackLog(event, "InvokeCustomPreHook", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvokeCustomPreHook is a log parse operation binding the contract event 0x12b04791b5caab768e2757268992f0c62801e3921d9e310c893f0d5f9caa5f71.
//
// Solidity: event InvokeCustomPreHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) ParseInvokeCustomPreHook(log types.Log) (*BaseContentInvokeCustomPreHook, error) {
	event := new(BaseContentInvokeCustomPreHook)
	if err := _BaseContent.contract.UnpackLog(event, "InvokeCustomPreHook", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the BaseContent contract.
type BaseContentLogPaymentIterator struct {
	Event *BaseContentLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentLogPayment represents a LogPayment event raised by the BaseContent contract.
type BaseContentLogPayment struct {
	RequestID *big.Int
	Label     string
	Payee     common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestID, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) FilterLogPayment(opts *bind.FilterOpts) (*BaseContentLogPaymentIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &BaseContentLogPaymentIterator{contract: _BaseContent.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestID, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *BaseContentLogPayment) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentLogPayment)
				if err := _BaseContent.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestID, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) ParseLogPayment(log types.Log) (*BaseContentLogPayment, error) {
	event := new(BaseContentLogPayment)
	if err := _BaseContent.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentPublishIterator is returned from FilterPublish and is used to iterate over the raw logs and unpacked data for Publish events raised by the BaseContent contract.
type BaseContentPublishIterator struct {
	Event *BaseContentPublish // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentPublishIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentPublish)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentPublish)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentPublishIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentPublishIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentPublish represents a Publish event raised by the BaseContent contract.
type BaseContentPublish struct {
	RequestStatus bool
	StatusCode    *big.Int
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPublish is a free log retrieval operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterPublish(opts *bind.FilterOpts) (*BaseContentPublishIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "Publish")
	if err != nil {
		return nil, err
	}
	return &BaseContentPublishIterator{contract: _BaseContent.contract, event: "Publish", logs: logs, sub: sub}, nil
}

// WatchPublish is a free log subscription operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchPublish(opts *bind.WatchOpts, sink chan<- *BaseContentPublish) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "Publish")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentPublish)
				if err := _BaseContent.contract.UnpackLog(event, "Publish", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePublish is a log parse operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) ParsePublish(log types.Log) (*BaseContentPublish, error) {
	event := new(BaseContentPublish)
	if err := _BaseContent.contract.UnpackLog(event, "Publish", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentReturnCustomHookIterator is returned from FilterReturnCustomHook and is used to iterate over the raw logs and unpacked data for ReturnCustomHook events raised by the BaseContent contract.
type BaseContentReturnCustomHookIterator struct {
	Event *BaseContentReturnCustomHook // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentReturnCustomHookIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentReturnCustomHook)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentReturnCustomHook)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentReturnCustomHookIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentReturnCustomHookIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentReturnCustomHook represents a ReturnCustomHook event raised by the BaseContent contract.
type BaseContentReturnCustomHook struct {
	CustomContract common.Address
	Result         *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterReturnCustomHook is a free log retrieval operation binding the contract event 0x8c693e8b27db7caf9b9637b66dcc11444760023a4d53e95407a3acef1b249f50.
//
// Solidity: event ReturnCustomHook(address custom_contract, uint256 result)
func (_BaseContent *BaseContentFilterer) FilterReturnCustomHook(opts *bind.FilterOpts) (*BaseContentReturnCustomHookIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "ReturnCustomHook")
	if err != nil {
		return nil, err
	}
	return &BaseContentReturnCustomHookIterator{contract: _BaseContent.contract, event: "ReturnCustomHook", logs: logs, sub: sub}, nil
}

// WatchReturnCustomHook is a free log subscription operation binding the contract event 0x8c693e8b27db7caf9b9637b66dcc11444760023a4d53e95407a3acef1b249f50.
//
// Solidity: event ReturnCustomHook(address custom_contract, uint256 result)
func (_BaseContent *BaseContentFilterer) WatchReturnCustomHook(opts *bind.WatchOpts, sink chan<- *BaseContentReturnCustomHook) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "ReturnCustomHook")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentReturnCustomHook)
				if err := _BaseContent.contract.UnpackLog(event, "ReturnCustomHook", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReturnCustomHook is a log parse operation binding the contract event 0x8c693e8b27db7caf9b9637b66dcc11444760023a4d53e95407a3acef1b249f50.
//
// Solidity: event ReturnCustomHook(address custom_contract, uint256 result)
func (_BaseContent *BaseContentFilterer) ParseReturnCustomHook(log types.Log) (*BaseContentReturnCustomHook, error) {
	event := new(BaseContentReturnCustomHook)
	if err := _BaseContent.contract.UnpackLog(event, "ReturnCustomHook", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSetAccessChargeIterator is returned from FilterSetAccessCharge and is used to iterate over the raw logs and unpacked data for SetAccessCharge events raised by the BaseContent contract.
type BaseContentSetAccessChargeIterator struct {
	Event *BaseContentSetAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetAccessCharge represents a SetAccessCharge event raised by the BaseContent contract.
type BaseContentSetAccessCharge struct {
	AccessCharge *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSetAccessCharge is a free log retrieval operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) FilterSetAccessCharge(opts *bind.FilterOpts) (*BaseContentSetAccessChargeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetAccessCharge")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetAccessChargeIterator{contract: _BaseContent.contract, event: "SetAccessCharge", logs: logs, sub: sub}, nil
}

// WatchSetAccessCharge is a free log subscription operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) WatchSetAccessCharge(opts *bind.WatchOpts, sink chan<- *BaseContentSetAccessCharge) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetAccessCharge)
				if err := _BaseContent.contract.UnpackLog(event, "SetAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAccessCharge is a log parse operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) ParseSetAccessCharge(log types.Log) (*BaseContentSetAccessCharge, error) {
	event := new(BaseContentSetAccessCharge)
	if err := _BaseContent.contract.UnpackLog(event, "SetAccessCharge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSetContentContractIterator is returned from FilterSetContentContract and is used to iterate over the raw logs and unpacked data for SetContentContract events raised by the BaseContent contract.
type BaseContentSetContentContractIterator struct {
	Event *BaseContentSetContentContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetContentContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetContentContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetContentContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetContentContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetContentContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetContentContract represents a SetContentContract event raised by the BaseContent contract.
type BaseContentSetContentContract struct {
	ContentContractAddress common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSetContentContract is a free log retrieval operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) FilterSetContentContract(opts *bind.FilterOpts) (*BaseContentSetContentContractIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetContentContract")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetContentContractIterator{contract: _BaseContent.contract, event: "SetContentContract", logs: logs, sub: sub}, nil
}

// WatchSetContentContract is a free log subscription operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) WatchSetContentContract(opts *bind.WatchOpts, sink chan<- *BaseContentSetContentContract) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetContentContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetContentContract)
				if err := _BaseContent.contract.UnpackLog(event, "SetContentContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetContentContract is a log parse operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) ParseSetContentContract(log types.Log) (*BaseContentSetContentContract, error) {
	event := new(BaseContentSetContentContract)
	if err := _BaseContent.contract.UnpackLog(event, "SetContentContract", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSetContentTypeIterator is returned from FilterSetContentType and is used to iterate over the raw logs and unpacked data for SetContentType events raised by the BaseContent contract.
type BaseContentSetContentTypeIterator struct {
	Event *BaseContentSetContentType // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetContentTypeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetContentType)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetContentType)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetContentTypeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetContentTypeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetContentType represents a SetContentType event raised by the BaseContent contract.
type BaseContentSetContentType struct {
	ContentType            common.Address
	ContentContractAddress common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSetContentType is a free log retrieval operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) FilterSetContentType(opts *bind.FilterOpts) (*BaseContentSetContentTypeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetContentType")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetContentTypeIterator{contract: _BaseContent.contract, event: "SetContentType", logs: logs, sub: sub}, nil
}

// WatchSetContentType is a free log subscription operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) WatchSetContentType(opts *bind.WatchOpts, sink chan<- *BaseContentSetContentType) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetContentType")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetContentType)
				if err := _BaseContent.contract.UnpackLog(event, "SetContentType", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetContentType is a log parse operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) ParseSetContentType(log types.Log) (*BaseContentSetContentType, error) {
	event := new(BaseContentSetContentType)
	if err := _BaseContent.contract.UnpackLog(event, "SetContentType", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSetStatusCodeIterator is returned from FilterSetStatusCode and is used to iterate over the raw logs and unpacked data for SetStatusCode events raised by the BaseContent contract.
type BaseContentSetStatusCodeIterator struct {
	Event *BaseContentSetStatusCode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetStatusCodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetStatusCode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetStatusCode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetStatusCodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetStatusCodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetStatusCode represents a SetStatusCode event raised by the BaseContent contract.
type BaseContentSetStatusCode struct {
	StatusCode *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSetStatusCode is a free log retrieval operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) FilterSetStatusCode(opts *bind.FilterOpts) (*BaseContentSetStatusCodeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetStatusCode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetStatusCodeIterator{contract: _BaseContent.contract, event: "SetStatusCode", logs: logs, sub: sub}, nil
}

// WatchSetStatusCode is a free log subscription operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) WatchSetStatusCode(opts *bind.WatchOpts, sink chan<- *BaseContentSetStatusCode) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetStatusCode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetStatusCode)
				if err := _BaseContent.contract.UnpackLog(event, "SetStatusCode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetStatusCode is a log parse operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) ParseSetStatusCode(log types.Log) (*BaseContentSetStatusCode, error) {
	event := new(BaseContentSetStatusCode)
	if err := _BaseContent.contract.UnpackLog(event, "SetStatusCode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContent contract.
type BaseContentUpdateRequestIterator struct {
	Event *BaseContentUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentUpdateRequest represents a UpdateRequest event raised by the BaseContent contract.
type BaseContentUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentUpdateRequestIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentUpdateRequestIterator{contract: _BaseContent.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentUpdateRequest)
				if err := _BaseContent.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) ParseUpdateRequest(log types.Log) (*BaseContentUpdateRequest, error) {
	event := new(BaseContentUpdateRequest)
	if err := _BaseContent.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContent contract.
type BaseContentVersionConfirmIterator struct {
	Event *BaseContentVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentVersionConfirm represents a VersionConfirm event raised by the BaseContent contract.
type BaseContentVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentVersionConfirmIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentVersionConfirmIterator{contract: _BaseContent.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentVersionConfirm)
				if err := _BaseContent.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) ParseVersionConfirm(log types.Log) (*BaseContentVersionConfirm, error) {
	event := new(BaseContentVersionConfirm)
	if err := _BaseContent.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContent contract.
type BaseContentVersionDeleteIterator struct {
	Event *BaseContentVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentVersionDelete represents a VersionDelete event raised by the BaseContent contract.
type BaseContentVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentVersionDeleteIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentVersionDeleteIterator{contract: _BaseContent.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentVersionDelete)
				if err := _BaseContent.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) ParseVersionDelete(log types.Log) (*BaseContentVersionDelete, error) {
	event := new(BaseContentVersionDelete)
	if err := _BaseContent.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentFactoryABI is the input ABI used to generate the binding from.
const BaseContentFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseContentFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentFactoryFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"bf4e088f": "createContent(address,address)",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
}

// BaseContentFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseContentFactoryBin = ""

// DeployBaseContentFactory deploys a new Ethereum contract, binding an instance of BaseContentFactory to it.
func DeployBaseContentFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseContentFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseContentFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentFactory{BaseContentFactoryCaller: BaseContentFactoryCaller{contract: contract}, BaseContentFactoryTransactor: BaseContentFactoryTransactor{contract: contract}, BaseContentFactoryFilterer: BaseContentFactoryFilterer{contract: contract}}, nil
}

// BaseContentFactory is an auto generated Go binding around an Ethereum contract.
type BaseContentFactory struct {
	BaseContentFactoryCaller     // Read-only binding to the contract
	BaseContentFactoryTransactor // Write-only binding to the contract
	BaseContentFactoryFilterer   // Log filterer for contract events
}

// BaseContentFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseContentFactorySession struct {
	Contract     *BaseContentFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BaseContentFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseContentFactoryCallerSession struct {
	Contract *BaseContentFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// BaseContentFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseContentFactoryTransactorSession struct {
	Contract     *BaseContentFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// BaseContentFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseContentFactoryRaw struct {
	Contract *BaseContentFactory // Generic contract binding to access the raw methods on
}

// BaseContentFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseContentFactoryCallerRaw struct {
	Contract *BaseContentFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseContentFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseContentFactoryTransactorRaw struct {
	Contract *BaseContentFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseContentFactory creates a new instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactory(address common.Address, backend bind.ContractBackend) (*BaseContentFactory, error) {
	contract, err := bindBaseContentFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactory{BaseContentFactoryCaller: BaseContentFactoryCaller{contract: contract}, BaseContentFactoryTransactor: BaseContentFactoryTransactor{contract: contract}, BaseContentFactoryFilterer: BaseContentFactoryFilterer{contract: contract}}, nil
}

// NewBaseContentFactoryCaller creates a new read-only instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseContentFactoryCaller, error) {
	contract, err := bindBaseContentFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryCaller{contract: contract}, nil
}

// NewBaseContentFactoryTransactor creates a new write-only instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentFactoryTransactor, error) {
	contract, err := bindBaseContentFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryTransactor{contract: contract}, nil
}

// NewBaseContentFactoryFilterer creates a new log filterer instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentFactoryFilterer, error) {
	contract, err := bindBaseContentFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryFilterer{contract: contract}, nil
}

// bindBaseContentFactory binds a generic wrapper to an already deployed contract.
func bindBaseContentFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentFactory *BaseContentFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentFactory.Contract.BaseContentFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentFactory *BaseContentFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.BaseContentFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentFactory *BaseContentFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.BaseContentFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentFactory *BaseContentFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentFactory *BaseContentFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentFactory *BaseContentFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentFactory *BaseContentFactorySession) ContentSpace() (common.Address, error) {
	return _BaseContentFactory.Contract.ContentSpace(&_BaseContentFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseContentFactory.Contract.ContentSpace(&_BaseContentFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentFactory *BaseContentFactorySession) Creator() (common.Address, error) {
	return _BaseContentFactory.Contract.Creator(&_BaseContentFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseContentFactory.Contract.Creator(&_BaseContentFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentFactory *BaseContentFactorySession) Owner() (common.Address, error) {
	return _BaseContentFactory.Contract.Owner(&_BaseContentFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseContentFactory.Contract.Owner(&_BaseContentFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactorySession) Version() ([32]byte, error) {
	return _BaseContentFactory.Contract.Version(&_BaseContentFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseContentFactory.Contract.Version(&_BaseContentFactory.CallOpts)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentFactory *BaseContentFactoryTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "createContent", lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentFactory *BaseContentFactorySession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.CreateContent(&_BaseContentFactory.TransactOpts, lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentFactory *BaseContentFactoryTransactorSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.CreateContent(&_BaseContentFactory.TransactOpts, lib, content_type)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactory *BaseContentFactorySession) Kill() (*types.Transaction, error) {
	return _BaseContentFactory.Contract.Kill(&_BaseContentFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactory *BaseContentFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseContentFactory.Contract.Kill(&_BaseContentFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactory *BaseContentFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.TransferCreatorship(&_BaseContentFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactory *BaseContentFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.TransferCreatorship(&_BaseContentFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactory *BaseContentFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.TransferOwnership(&_BaseContentFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactory *BaseContentFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.TransferOwnership(&_BaseContentFactory.TransactOpts, newOwner)
}

// BaseContentFactoryExtABI is the input ABI used to generate the binding from.
const BaseContentFactoryExtABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OP_ACCESS_COMPLETE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OP_ACCESS_REQUEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_opCodes\",\"type\":\"uint32[]\"},{\"name\":\"_contentAddrs\",\"type\":\"address[]\"},{\"name\":\"_userAddrs\",\"type\":\"address[]\"},{\"name\":\"_ctxHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_ts\",\"type\":\"uint256[]\"},{\"name\":\"_amt\",\"type\":\"uint256[]\"}],\"name\":\"executeAccessBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"libraryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"request_timestamp\",\"type\":\"uint64\"}],\"name\":\"AccessRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"libraryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"request_timestamp\",\"type\":\"uint64\"}],\"name\":\"AccessComplete\",\"type\":\"event\"}]"

// BaseContentFactoryExtFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentFactoryExtFuncSigs = map[string]string{
	"4d887374": "OP_ACCESS_COMPLETE()",
	"52344328": "OP_ACCESS_REQUEST()",
	"af570c04": "contentSpace()",
	"bf4e088f": "createContent(address,address)",
	"02d05d3f": "creator()",
	"78cd9119": "executeAccessBatch(uint32[],address[],address[],bytes32[],uint256[],uint256[])",
	"16279055": "isContract(address)",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
}

// BaseContentFactoryExtBin is the compiled bytecode used for deploying new contracts.
var BaseContentFactoryExtBin = "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f426173654374466163746f727932303139313031373136353230304d4c0000006004557f426173654374466163746f7279587432303139313033313230333130304d4c0060055560018054600160a060020a031990811632908117909255600280549091169091179055615efd806100a26000396000f3006080604052600436106100a05763ffffffff60e060020a60003504166302d05d3f81146100a257806316279055146100d357806341c0e1b5146101085780634d8873741461011d578063523443281461014b57806354fd4d50146101605780636d2e4b1b1461018757806378cd9119146101a85780638da5cb5b1461031a578063af570c041461032f578063bf4e088f14610344578063f2fde38b1461036b575b005b3480156100ae57600080fd5b506100b761038c565b60408051600160a060020a039092168252519081900360200190f35b3480156100df57600080fd5b506100f4600160a060020a036004351661039b565b604080519115158252519081900360200190f35b34801561011457600080fd5b506100a06103a3565b34801561012957600080fd5b506101326103df565b6040805163ffffffff9092168252519081900360200190f35b34801561015757600080fd5b506101326103e4565b34801561016c57600080fd5b506101756103e9565b60408051918252519081900360200190f35b34801561019357600080fd5b506100a0600160a060020a03600435166103ef565b3480156101b457600080fd5b50604080516020600480358082013583810280860185019096528085526100a095369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061044a9650505050505050565b34801561032657600080fd5b506100b7610c8f565b34801561033b57600080fd5b506100b7610c9e565b34801561035057600080fd5b506100b7600160a060020a0360043581169060243516610cad565b34801561037757600080fd5b506100a0600160a060020a03600435166111f5565b600154600160a060020a031681565b6000903b1190565b600254600160a060020a03163214806103c65750600254600160a060020a031633145b15156103d157600080fd5b600254600160a060020a0316ff5b600281565b600181565b60055481565b600154600160a060020a0316321461040657600080fd5b600160a060020a038116151561041b57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806000806060808b519550858b5114151561046657600080fd5b8951861461047357600080fd5b8851861461048057600080fd5b8751861461048d57600080fd5b600094505b85851015610c81578a858151811015156104a857fe5b9060200190602002015193506104d48b868151811015156104c557fe5b9060200190602002015161039b565b15156104df57610c76565b8b516001908d90879081106104f057fe5b9060200190602002015163ffffffff161415610932577f8354ff8c2c210fd53709db56438bb45d36a62de8bcc95c8459d80ce933d476804285600160a060020a031663b816f5136040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561056657600080fd5b505af115801561057a573d6000803e3d6000fd5b505050506040513d602081101561059057600080fd5b50518d518e90899081106105a057fe5b906020019060200201518d898151811015156105b857fe5b906020019060200201518d8a8151811015156105d057fe5b906020019060200201518d8b8151811015156105e857fe5b602090810290910181015160408051978852600160a060020a039687169288019290925293851686820152919093166060850152608084019290925267ffffffffffffffff1660a0830152519081900360c00190a183600160a060020a0316632310167f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561067b57600080fd5b505af115801561068f573d6000803e3d6000fd5b505050506040513d60208110156106a557600080fd5b5051600160a060020a03161580159061072b575061072b84600160a060020a0316632310167f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156106fa57600080fd5b505af115801561070e573d6000803e3d6000fd5b505050506040513d602081101561072457600080fd5b505161039b565b1561092d576040805160018082528183019092529060208083019080388339019050509050898581518110151561075e57fe5b9060200190602002015181600081518110151561077757fe5b90602001906020020190600160a060020a03169081600160a060020a03168152505083600160a060020a0316632310167f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b505050506040513d602081101561080157600080fd5b50518851909350600160a060020a0384169063123e0e80908a908890811061082557fe5b90602001906020020151606485856040518563ffffffff1660e060020a028152600401808581526020018460ff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610898578181015183820152602001610880565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156108d75781810151838201526020016108bf565b505050509050019650505050505050602060405180830381600087803b15801561090057600080fd5b505af1158015610914573d6000803e3d6000fd5b505050506040513d602081101561092a57600080fd5b50505b610c76565b8b516002908d908790811061094357fe5b9060200190602002015163ffffffff161415610c71577f078326d18c0223483393342523f51da024ddcb0f1e929aa1f142100381c794f54285600160a060020a031663b816f5136040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156109b957600080fd5b505af11580156109cd573d6000803e3d6000fd5b505050506040513d60208110156109e357600080fd5b50518d518e90899081106109f357fe5b906020019060200201518d89815181101515610a0b57fe5b906020019060200201518d8a815181101515610a2357fe5b906020019060200201518d8b815181101515610a3b57fe5b602090810290910181015160408051978852600160a060020a039687169288019290925293851686820152919093166060850152608084019290925267ffffffffffffffff1660a0830152519081900360c00190a183600160a060020a0316632310167f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610ace57600080fd5b505af1158015610ae2573d6000803e3d6000fd5b505050506040513d6020811015610af857600080fd5b5051600160a060020a031615801590610b4d5750610b4d84600160a060020a0316632310167f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156106fa57600080fd5b1561092d5783600160a060020a0316632310167f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610b9057600080fd5b505af1158015610ba4573d6000803e3d6000fd5b505050506040513d6020811015610bba57600080fd5b50518851909350600160a060020a0384169063eb81eff0908a9088908110610bde57fe5b906020019060200201518988815181101515610bf657fe5b906020019060200201518d89815181101515610c0e57fe5b906020019060200201516040518463ffffffff1660e060020a0281526004018084815260200183815260200182600160a060020a0316600160a060020a031681526020019350505050602060405180830381600087803b15801561090057600080fd5b600080fd5b600190940193610492565b505050505050505050505050565b600254600160a060020a031681565b600354600160a060020a031681565b60008060008060008087945084600160a060020a0316630eaec2c5326040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610d1457600080fd5b505af1158015610d28573d6000803e3d6000fd5b505050506040513d6020811015610d3e57600080fd5b50511515610d4b57600080fd5b84600160a060020a03166329dedde5886040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610da657600080fd5b505af1158015610dba573d6000803e3d6000fd5b505050506040513d6020811015610dd057600080fd5b50511515610ddd57600080fd5b338888610de8611267565b600160a060020a03938416815291831660208301529091166040808301919091525190819003606001906000f080158015610e27573d6000803e3d6000fd5b50935083600160a060020a031663c9e8e72d86600160a060020a03166332eaf21b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610e7757600080fd5b505af1158015610e8b573d6000803e3d6000fd5b505050506040513d6020811015610ea157600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a03909216600483015251602480830192600092919082900301818387803b158015610ee757600080fd5b505af1158015610efb573d6000803e3d6000fd5b5050505083600160a060020a031663e538530386600160a060020a0316631cdbee5a8a6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610f6957600080fd5b505af1158015610f7d573d6000803e3d6000fd5b505050506040513d6020811015610f9357600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a03909216600483015251602480830192600092919082900301818387803b158015610fd957600080fd5b505af1158015610fed573d6000803e3d6000fd5b5050505033925082600160a060020a031663a2d67fcf6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561103257600080fd5b505af1158015611046573d6000803e3d6000fd5b505050506040513d602081101561105c57600080fd5b5051604080517f5d97b6c20000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a03831691633def51409187918491635d97b6c29160048083019260209291908290030181600087803b1580156110c957600080fd5b505af11580156110dd573d6000803e3d6000fd5b505050506040513d60208110156110f357600080fd5b5051604080517f186897330000000000000000000000000000000000000000000000000000000081529051600160a060020a0387169163186897339160048083019260209291908290030181600087803b15801561115057600080fd5b505af1158015611164573d6000803e3d6000fd5b505050506040513d602081101561117a57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff92831660248501529116604483015251606480830192600092919082900301818387803b1580156111d157600080fd5b505af11580156111e5573d6000803e3d6000fd5b50959a9950505050505050505050565b600254600160a060020a03163214806112185750600254600160a060020a031633145b151561122357600080fd5b600160a060020a038116151561123857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604051614c5a80611278833901905600608060408190527f4f776e61626c6532303139303532383139333830304d4c00000000000000000060009081557f4564697461626c6532303139303830313133353530304d4c00000000000000006004557f42617365436f6e74656e7432303139313032393136313730304d4c0000000000600b556012556013805460ff19169055606080614c5a8339810160408181528251602080850151948301516001805432600160a060020a03199182168117909255600280548216909217909155600380548216600160a060020a0380871691909117909155600f80548316828a161790819055600019601155600c80549093168285161790925560138054600a60ff1990911617905516855292519194937fc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19929081900390910190a1505050614b0e8061014c6000396000f3006080604052600436106102985763ffffffff60e060020a60003504166217de98811461029a578062821de3146102c157806302d05d3f146102f2578063075d4782146103075780630c6d3f93146103235780630fe1b5a21461038e578063100508a2146103bb57806314cfabb3146103e65780631a735f18146103fb57806322e564eb146104485780632310167f1461047557806327c1c21d1461048a57806329adec141461049f57806332eaf21b146104b4578063331b86c0146104c957806336ebffca146104de578063375a6e7c146104f3578063388642841461050857806338d0f504146105205780633ba58afb146105da57806341c0e1b514610670578063446e8826146106855780634dd707881461068d5780635267db44146106a257806354fd4d50146106ba5780635cc4aa9b146106cf5780635f6a1301146106e0578063628449fd146106f557806364ade32b1461077f5780636ae5f5e0146107945780636d2e4b1b1461087a5780636e3754271461089b5780637886f747146108b05780637ca8f618146108c857806381beeb64146108e05780638280dd8f146108f55780638da5cb5b1461090d5780638f7792011461092257806397449ebd1461093757806397ac4fd214610a365780639867db7414610a4b578063a1ff106e14610aa4578063a8d4160e14610ba8578063aa024e8b14610cdf578063af570c0414610cfa578063b816f51314610d0f578063c287e0ed14610d24578063c9e8e72d14610d39578063cbcd446114610d5a578063d810f8c814610d6f578063e02dd9c214610d84578063e1a7071714610d99578063e538530314610df2578063ee56d76714610e13578063ef1d7dc214610eb3578063f2fde38b14610ec8578063f4d9bae814610ee9578063f81ab0ae14610f01575b005b3480156102a657600080fd5b506102af610f16565b60408051918252519081900360200190f35b3480156102cd57600080fd5b506102d6610f3a565b60408051600160a060020a039092168252519081900360200190f35b3480156102fe57600080fd5b506102d6610f4a565b61030f610f59565b604080519115158252519081900360200190f35b34801561032f57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261030f9482359460248035600160a060020a03169536959460649492019190819084018382808284375094975050933594506110bf9350505050565b34801561039a57600080fd5b50610298600160a060020a036004351660ff60243581169060443516611106565b3480156103c757600080fd5b506103d06111bc565b6040805160ff9092168252519081900360200190f35b3480156103f257600080fd5b5061030f6111c1565b34801561040757600080fd5b5061041360043561125b565b60408051600160a060020a0390951685526020850193909352600091820b90910b838301526060830152519081900360800190f35b34801561045457600080fd5b50610298600160a060020a036004351660ff6024358116906044351661128f565b34801561048157600080fd5b506102d6611321565b34801561049657600080fd5b506102af611330565b3480156104ab57600080fd5b506103d0611336565b3480156104c057600080fd5b506102d661133f565b3480156104d557600080fd5b506102af61134e565b3480156104ea57600080fd5b506102d6611354565b3480156104ff57600080fd5b5061030f611363565b34801561051457600080fd5b506102af60043561136c565b34801561052c57600080fd5b506040805160206004602480358281013584810280870186019097528086526105b696843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506114be9650505050505050565b6040805160ff94851681529290931660208301528183015290519081900360600190f35b3480156105e657600080fd5b506040805160206004602480358281013584810280870186019097528086526105b696843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506117f39650505050505050565b34801561067c57600080fd5b50610298611b31565b61030f611c66565b34801561069957600080fd5b506102af611e56565b3480156106ae57600080fd5b506102af600435611e7a565b3480156106c657600080fd5b506102af611f0f565b61030f600435602435604435611f15565b3480156106ec57600080fd5b506102986121c2565b34801561070157600080fd5b5061070a612200565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561074457818101518382015260200161072c565b50505050905090810190601f1680156107715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561078b57600080fd5b506102af61228e565b3480156107a057600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610298948235600160a060020a039081169560248035909216953695946064949293019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506122949650505050505050565b34801561088657600080fd5b50610298600160a060020a036004351661243c565b3480156108a757600080fd5b5061030f61248a565b3480156108bc57600080fd5b506102af600435612499565b3480156108d457600080fd5b5061070a6004356124b8565b3480156108ec57600080fd5b5061030f61252c565b34801561090157600080fd5b506102af6004356126c8565b34801561091957600080fd5b506102d661283f565b34801561092e57600080fd5b506102af61284e565b34801561094357600080fd5b50604080516020600460e43581810135601f8101849004840285018401909552848452610298948235600160a060020a03908116956024803583169660443590931695606435956084359560a4359560c43560ff16953695610104949193910191819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506128549650505050505050565b348015610a4257600080fd5b506103d06128fd565b348015610a5757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102989436949293602493928401919081908401838280828437509497506129029650505050505050565b60408051602060046024803582810135601f81018590048502860185019096528585526102af95833560ff1695369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750612a2f9650505050505050565b348015610bb457600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610c01943694929360249392840191908190840183828082843750949750612f059650505050505050565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610c42578181015183820152602001610c2a565b50505050905090810190601f168015610c6f5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610ca2578181015183820152602001610c8a565b50505050905090810190601f168015610ccf5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610ceb57600080fd5b5061029860ff600435166132ba565b348015610d0657600080fd5b506102d66132fe565b348015610d1b57600080fd5b506102d661330d565b348015610d3057600080fd5b5061029861331c565b348015610d4557600080fd5b50610298600160a060020a03600435166133f2565b348015610d6657600080fd5b5061030f613442565b348015610d7b57600080fd5b506102af613464565b348015610d9057600080fd5b5061070a613488565b348015610da557600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102af9436949293602493928401919081908401838280828437509497506134e39650505050505050565b348015610dfe57600080fd5b50610298600160a060020a0360043516613a8b565b348015610e1f57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261030f948235946024803515159536959460649492019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750613c429650505050505050565b348015610ebf57600080fd5b506103d0613fd9565b348015610ed457600080fd5b50610298600160a060020a0360043516613fde565b348015610ef557600080fd5b506102af600435614043565b348015610f0d57600080fd5b506102af6140b4565b7f5075626c6973686564000000000000000000000000000000000000000000000081565b600f54600160a060020a03165b90565b600154600160a060020a031681565b600f54604080517f2cf9942200000000000000000000000000000000000000000000000000000000815230600482015290516000928392600160a060020a0390911691632cf994229160248082019260209290919082900301818787803b158015610fc357600080fd5b505af1158015610fd7573d6000803e3d6000fd5b505050506040513d6020811015610fed57600080fd5b505160115460408051831515815260208101839052606091810182815260058054600260001961010060018416150201909116049383018490529495507fad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf494869493909291906080830190849080156110a75780601f1061107c576101008083540402835291602001916110a7565b820191906000526020600020905b81548152906001019060200180831161108a57829003601f168201915b505094505050505060405180910390a18091505b5090565b600e54600090600160a060020a0316158015906110e65750600e54600160a060020a031633145b15156110f157600080fd5b6110fd858585856140c1565b95945050505050565b6003546040805160e060020a6363e6ffdd028152600160a060020a0386811660048301529151919092169160009183916363e6ffdd91602480830192602092919082900301818787803b15801561115c57600080fd5b505af1158015611170573d6000803e3d6000fd5b505050506040513d602081101561118657600080fd5b50519050600160a060020a03811615156111aa576111a585858561128f565b6111b5565b6111b581858561128f565b5050505050565b600181565b600f54604080517f26683e140000000000000000000000000000000000000000000000000000000081523360048201529051600092600160a060020a03169182916326683e149160248082019260209290919082900301818887803b15801561122957600080fd5b505af115801561123d573d6000803e3d6000fd5b505050506040513d602081101561125357600080fd5b505191505090565b6014602052600090815260408120805460018201546002830154600390930154600160a060020a03909216939092900b9084565b604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff80851660248301528316604482015290518491600160a060020a03831691633def51409160648082019260009290919082900301818387803b15801561130357600080fd5b505af1158015611317573d6000803e3d6000fd5b5050505050505050565b600e54600160a060020a031681565b60115481565b60135460ff1681565b600d54600160a060020a031681565b60075490565b600c54600160a060020a031681565b600a5460ff1681565b600e5460009081908190600160a060020a03161561141c5750600e54604080517f45080442000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a0390921691829163450804429160248083019260209291908290030181600087803b1580156113ed57600080fd5b505af1158015611401573d6000803e3d6000fd5b505050506040513d602081101561141757600080fd5b505191505b811561142a578192506114b7565b831515611459577f5075626c6973686564000000000000000000000000000000000000000000000092506114b7565b600084121561148a577f447261667400000000000000000000000000000000000000000000000000000092506114b7565b60008413156114b7577f447261667420696e20726576696577000000000000000000000000000000000092505b5050919050565b600080600080600080600080600060115460001415156114eb576114e06141f3565b9850985098506117e4565b6114f68c8c8c6117f3565b9750909550935060ff808616148061151157508360ff1660ff145b156117da576003546040805160e060020a6363e6ffdd0281523260048201529051600160a060020a03909216945084916363e6ffdd916024808201926020929091908290030181600087803b15801561156957600080fd5b505af115801561157d573d6000803e3d6000fd5b505050506040513d602081101561159357600080fd5b50519150600160a060020a038216156117da57508060ff80861614156116b75780600160a060020a0316635faecb763083600160a060020a03166396eba03d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561160157600080fd5b505af1158015611615573d6000803e3d6000fd5b505050506040513d602081101561162b57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b15801561167c57600080fd5b505af1158015611690573d6000803e3d6000fd5b505050506040513d60208110156116a657600080fd5b50511515600114156116b757600094505b60ff851615156117da578360ff1660ff14156117da5780600160a060020a0316635faecb763083600160a060020a031663d1aeb6516040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561171b57600080fd5b505af115801561172f573d6000803e3d6000fd5b505050506040513d602081101561174557600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b15801561179657600080fd5b505af11580156117aa573d6000803e3d6000fd5b505050506040513d60208110156117c057600080fd5b50511515600114156117d557600093506117da565b606493505b8484879850985098505b50505050505093509350939050565b60008060008060008060008060008060006010549750600160ff16601360009054906101000a900460ff1660ff16101561182e5760ff611831565b60005b601354909750600a60ff909116101561184b5760ff61184e565b60005b600e54909650600160a060020a031615611b1c57600e60009054906101000a9004600160a060020a0316905080600160a060020a0316630f82c16f8f8f8f6040518463ffffffff1660e060020a028152600401808460ff1660ff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156118ee5781810151838201526020016118d6565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561192d578181015183820152602001611915565b5050505090500195505050505050608060405180830381600087803b15801561195557600080fd5b505af1158015611969573d6000803e3d6000fd5b505050506040513d608081101561197f57600080fd5b508051602082015160408301516060909301516010549298509096509194509092508211156119b15760649650611b1c565b80600160a060020a031663b535b03e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156119ef57600080fd5b505af1158015611a03573d6000803e3d6000fd5b505050506040513d6020811015611a1957600080fd5b5051851660ff161515611a2a578396505b80600160a060020a0316636af274176040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611a6857600080fd5b505af1158015611a7c573d6000803e3d6000fd5b505050506040513d6020811015611a9257600080fd5b5051851660ff161515611aa3578295505b80600160a060020a031663f185db0c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611ae157600080fd5b505af1158015611af5573d6000803e3d6000fd5b505050506040513d6020811015611b0b57600080fd5b5051851660ff161515611b1c578197505b50949c939b5094995091975050505050505050565b600f546000908190600160a060020a03163314611b4d57600080fd5b600e54600160a060020a031615611c5a57600e60009054906101000a9004600160a060020a0316915081600160a060020a0316639e99bbea6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611bb457600080fd5b505af1158015611bc8573d6000803e3d6000fd5b505050506040513d6020811015611bde57600080fd5b50519050801580611bef5750806064145b1515611bfa57600080fd5b8060641415611c5a5781600160a060020a03166341c0e1b56040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611c4157600080fd5b505af1158015611c55573d6000803e3d6000fd5b505050505b611c6261449c565b5050565b6000611c706111c1565b1515611c7b57600080fd5b600a5460ff161515611c8c57600080fd5b600060058054600181600116156101000203166002900490501115611d3b5760078054600181810180845560009390935260058054611d02937fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880192600261010091831615919091026000190190911604614855565b5050600654600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301555b60098054611d5e9160059160026000196101006001841615020190911604614855565b5042600655604080516020810191829052600090819052611d81916009916148d6565b50600a805460ff1916905560035460408051600160a060020a039092168083526020830182815260058054600260001960018316156101000201909116049385018490527f482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e94929390929190606083019084908015611e415780601f10611e1657610100808354040283529160200191611e41565b820191906000526020600020905b815481529060010190602001808311611e2457829003601f168201915b5050935050505060405180910390a150600190565b7f447261667400000000000000000000000000000000000000000000000000000081565b600254600090600160a060020a031632148015611eae57506000821280611eae5750600082138015611eae57506000601154125b15611eb95760118290555b600f54600160a060020a0316331415611ed25760118290555b60115460408051918252517fda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a29181900360200190a1505060115490565b600b5481565b60008381526014602052604081208054829081908190600160a060020a031615801590611f5f57508354600160a060020a0316331480611f5f5750600254600160a060020a031633145b1515611f6a57600080fd5b600e548715159350600160a060020a03161561202457600e54604080517f17685953000000000000000000000000000000000000000000000000000000008152600481018b9052602481018a90529051600160a060020a03909216935083916317685953916044808201926020929091908290030181600087803b158015611ff157600080fd5b505af1158015612005573d6000803e3d6000fd5b505050506040513d602081101561201b57600080fd5b50518015935090505b8354600160a060020a0316331415612061578215612051576002848101805460ff19169091179055612061565b60028401805460ff191660fe1790555b83600101548460030154101561213f576002840154600090810b810b136120e257835460408051808201909152600681527f726566756e6400000000000000000000000000000000000000000000000000006020820152600386015460018701546120dc938c93600160a060020a03909116929091036140c1565b5061213f565b60025460408051808201909152600e81527f72656c6561736520657363726f7700000000000000000000000000000000000060208201526003860154600187015461213d938c93600160a060020a03909116929091036140c1565b505b60008881526014602090815260408083208054600160a060020a03191681556001810184905560028101805460ff191690556003019290925581518a81529081018990528415158183015290517f2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac069181900360600190a150909695505050505050565b6121ca61248a565b15156121d557600080fd5b6040805160208101918290526000908190526121f3916009916148d6565b50600a805460ff19169055565b6009805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156122865780601f1061225b57610100808354040283529160200191612286565b820191906000526020600020905b81548152906001019060200180831161226957829003601f168201915b505050505081565b60105481565b61229c614944565b6122a4614944565b600254606090600090600160a060020a03163214806122cd5750600254600160a060020a031633145b15156122d857600080fd5b86516122eb9060059060208a01906148d6565b508551156123f6576122fc866144d8565b935061233c6040805190810160405280600181526020017f3a000000000000000000000000000000000000000000000000000000000000008152506144d8565b925061234e848463ffffffff6144fe16565b60010160405190808252806020026020018201604052801561238457816020015b606081526020019060019003908161236f5790505b509150600090505b81518110156123cd576123ad6123a8858563ffffffff61456b16565b61457e565b82828151811015156123bb57fe5b6020908102909101015260010161238c565b81516123e090600790602085019061495b565b5084516123f49060089060208801906149b4565b505b6123ff89613fde565b6124088861243c565b6040517fae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce5890600090a1505050505050505050565b600154600160a060020a0316321461245357600080fd5b600160a060020a038116151561246857600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b600061249461252c565b905090565b60088054829081106124a757fe5b600091825260209091200154905081565b60078054829081106124c657fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156122865780601f1061225b57610100808354040283529160200191612286565b6003546040805160e060020a6363e6ffdd0281523260048201529051600092600160a060020a0316918391829184916363e6ffdd9160248082019260209290919082900301818787803b15801561258257600080fd5b505af1158015612596573d6000803e3d6000fd5b505050506040513d60208110156125ac57600080fd5b5051604080517f5d97b6c20000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a03831691635faecb769130918491635d97b6c29160048083019260209291908290030181600087803b15801561261957600080fd5b505af115801561262d573d6000803e3d6000fd5b505050506040513d602081101561264357600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b15801561269457600080fd5b505af11580156126a8573d6000803e3d6000fd5b505050506040513d60208110156126be57600080fd5b5051935050505090565b60008060006126d5613442565b15156126e057600080fd5b600e54600160a060020a0316151561276457600254600160a060020a03163214806127155750600254600160a060020a031633145b801561272c575083600019148061272c5750836001145b156127395783915061275f565b600f54600160a060020a0316331480156127565750600060115412155b1561275f578391505b6127fc565b50600e54604080517f3513a805000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a03909216918291633513a8059160248083019260209291908290030181600087803b1580156127cd57600080fd5b505af11580156127e1573d6000803e3d6000fd5b505050506040513d60208110156127f757600080fd5b505191505b60118290556040805183815290517fda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a29181900360200190a1505060115492915050565b600254600160a060020a031681565b60125481565b600254600160a060020a03163214806128775750600254600160a060020a031633145b151561288257600080fd5b600e8054600160a060020a031916600160a060020a038a161790556010879055601186905560128590556013805460ff191660ff86161790556128c88a8a858585612294565b6040517f8aed484f6f6945b0c95faf161e8596fb646538de2080ffe3a03d360aa923439990600090a150505050505050505050565b600a81565b61290a61248a565b151561291557600080fd5b600a5460ff161561292557600080fd5b805160801161293357600080fd5b80516129469060099060208401906148d6565b50600a805460ff191660011790556003547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a031661298a610f3a565b60408051600160a060020a038085168252831660208201526060918101828152600980546002600019610100600184161502019091160493830184905292608083019084908015612a1c5780601f106129f157610100808354040283529160200191612a1c565b820191906000526020600020905b8154815290600101906020018083116129ff57829003601f168201915b505094505050505060405180910390a150565b600080600080612a3d6149ee565b60128054600101905560008080612a558d8b8b6114be565b98509096509450606460ff86161415612a825734871115612a7557600080fd5b612a7d6145d1565b600094505b60ff851615612a9057600080fd5b604080516080810182523381523460208083019182526000838501818152606085018281526012548352601490935294812084518154600160a060020a03918216600160a060020a03199091161782559351600182015594516002860180549190920b60ff1660ff1990911617905551600390930192909255600e549095501615612c4b57600e60009054906101000a9004600160a060020a0316925082600160a060020a031663123e0e806012548f8d8d6040518563ffffffff1660e060020a028152600401808581526020018460ff1660ff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015612baa578181015183820152602001612b92565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015612be9578181015183820152602001612bd1565b505050509050019650505050505050602060405180830381600087803b158015612c1257600080fd5b505af1158015612c26573d6000803e3d6000fd5b505050506040513d6020811015612c3c57600080fd5b505191508115612c4b57600080fd5b7f50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a066012548e60058f8f604051808681526020018560ff1660ff168152602001806020018060200180602001848103845287818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015612d175780601f10612cec57610100808354040283529160200191612d17565b820191906000526020600020905b815481529060010190602001808311612cfa57829003601f168201915b5050848103835286518152865160209182019188019080838360005b83811015612d4b578181015183820152602001612d33565b50505050905090810190601f168015612d785780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015612dab578181015183820152602001612d93565b50505050905090810190601f168015612dd85780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a15060005b8951811015612e69578981815181101515612e0657fe5b6020908102909101015115612e61577f515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c388a82815181101515612e4457fe5b602090810290910181015160408051918252519081900390910190a15b600101612def565b5060005b8851811015612ef1578981815181101515612e8457fe5b6020908102909101015115612ee9577fb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b6848982815181101515612ec257fe5b602090810290910181015160408051600160a060020a039092168252519081900390910190a15b600101612e6d565b50506012549b9a5050505050505050505050565b600354600d546060918291600160a060020a0391821691161580612fba5750600d54604080517fd6be0f49000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015290519183169163d6be0f49916024808201926020929091908290030181600087803b158015612f8c57600080fd5b505af1158015612fa0573d6000803e3d6000fd5b505050506040513d6020811015612fb657600080fd5b5051155b15612fe357604080516020818101835260008083528351918201909352918252935091506132b4565b600d54604080517f589aafc1000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015290519183169163268bfac491839163589aafc19160248082019260009290919082900301818387803b15801561305257600080fd5b505af1158015613066573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561308f57600080fd5b8101908080516401000000008111156130a757600080fd5b820160208101848111156130ba57600080fd5b81516401000000008111828201871017156130d457600080fd5b5050929190505050866040518363ffffffff1660e060020a028152600401808060200180602001838103835285818151815260200191508051906020019080838360005b83811015613130578181015183820152602001613118565b50505050905090810190601f16801561315d5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015613190578181015183820152602001613178565b50505050905090810190601f1680156131bd5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156131de57600080fd5b505af11580156131f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561321b57600080fd5b81019080805164010000000081111561323357600080fd5b8201602081018481111561324657600080fd5b815164010000000081118282018710171561326057600080fd5b5050929190602001805164010000000081111561327c57600080fd5b8201602081018481111561328f57600080fd5b81516401000000008111828201871017156132a957600080fd5b509497509550505050505b50915091565b600254600160a060020a03163214806132dd5750600254600160a060020a031633145b15156132e857600080fd5b6013805460ff191660ff92909216919091179055565b600354600160a060020a031681565b600f54600160a060020a031681565b600254600160a060020a031633148061333857506133386111c1565b151561334357600080fd5b60408051602080825260058054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156133e25780601f106133b7576101008083540402835291602001916133e2565b820191906000526020600020905b8154815290600101906020018083116133c557829003601f168201915b50509250505060405180910390a1565b600254600160a060020a03163214806134155750600254600160a060020a031633145b151561342057600080fd5b600d8054600160a060020a031916600160a060020a0392909216919091179055565b600061344c61252c565b80612494575050600f54600160a060020a0316331490565b7f447261667420696e20726576696577000000000000000000000000000000000081565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156122865780601f1061225b57610100808354040283529160200191612286565b6000806000806000806134f461248a565b15156134ff57600080fd5b866040516020018082805190602001908083835b602083106135325780518252601f199092019160209182019101613513565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106135955780518252601f199092019160209182019101613576565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209450600560405160200180828054600181600116156101000203166002900480156136245780601f10613602576101008083540402835291820191613624565b820191906000526020600020905b815481529060010190602001808311613610575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106136675780518252601f199092019160209182019101613648565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120965050505084841415613788576040805160208101918290526000908190526136bb916005916148d6565b506000600681905560035460408051600160a060020a03909216808352908201839052606060208084018281528c51928501929092528b517f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f519593948d9493909290916080840191860190808383885b8381101561374357818101518382015260200161372b565b50505050905090810190601f1680156137705780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009550613a81565b6000199250600091505b60075482101561399e5760078054839081106137aa57fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156138125780601f106137f0576101008083540402835291820191613812565b820191906000526020600020905b8154815290600101906020018083116137fe575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106138555780518252601f199092019160209182019101613836565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912093505050508481141561399357600780548390811061389957fe5b9060005260206000200160006138af9190614a15565b60088054839081106138bd57fe5b6000918252602082200155600754600019018214613963576007805460001981019081106138e757fe5b9060005260206000200160078381548110151561390057fe5b906000526020600020019080546001816001161561010002031660029004613929929190614855565b5060088054600019810190811061393c57fe5b906000526020600020015460088381548110151561395657fe5b6000918252602090912001555b6007805490613976906000198301614a5c565b50600880549061398a906000198301614a85565b5081925061399e565b600190910190613792565b6000198314156139ad57600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600360009054906101000a9004600160a060020a031688856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613a41578181015183820152602001613a29565b50505050905090810190601f168015613a6e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18295505b5050505050919050565b60025460009081908190600160a060020a0316321480613ab55750600254600160a060020a031633145b1515613ac057600080fd5b600e54600160a060020a031615613b6057600e60009054906101000a9004600160a060020a0316925082600160a060020a0316639e99bbea6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613b2757600080fd5b505af1158015613b3b573d6000803e3d6000fd5b505050506040513d6020811015613b5157600080fd5b505191508115613b6057600080fd5b600e8054600160a060020a031916600160a060020a03861690811790915515613bfd5783925082600160a060020a0316637b1cdb3e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613bc457600080fd5b505af1158015613bd8573d6000803e3d6000fd5b505050506040513d6020811015613bee57600080fd5b505190508015613bfd57600080fd5b600e5460408051600160a060020a039092168252517fa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb79181900360200190a150505050565b600254600090819081908190600160a060020a0316331480613c6e5750600d54600160a060020a031633145b1515613c7957600080fd5b60008881526014602052604090208054909350600160a060020a03161515613ca057600080fd5b600e54879250600160a060020a031615613d595750600e54604080517fe870ed91000000000000000000000000000000000000000000000000000000008152600481018a905288151560248201529051600160a060020a0390921691829163e870ed919160448083019260209291908290030181600087803b158015613d2557600080fd5b505af1158015613d39573d6000803e3d6000fd5b505050506040513d6020811015613d4f57600080fd5b5051159150613e2d565b826001015483600301541015613e2d57861515613dd057825460408051808201909152600f81527f616363657373206465636c696e65640000000000000000000000000000000000602082015260038501546001860154613dca938c93600160a060020a03909116929091036140c1565b50613e2d565b60025460408051808201909152600d81527f6f776e6572207061796d656e7400000000000000000000000000000000000000602082015260038501546001860154613e2b938c93600160a060020a03909116929091036140c1565b505b60018215151415613f685760028301805460ff19166001908117909155604080518a8152602080820184905260809282018381528a519383019390935289517f475e9d68ca61f129cebee5af694af00ed0e3b3b0d4b74071fbb81d0e2b912718948d9490938c938c93919291606084019160a08501919087019080838360005b83811015613ec5578181015183820152602001613ead565b50505050905090810190601f168015613ef25780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015613f25578181015183820152602001613f0d565b50505050905090810190601f168015613f525780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a1613fce565b60028301805460ff191660ff179055604080518981526000602082018190526080828401819052820181905260c06060830181905282015290517f475e9d68ca61f129cebee5af694af00ed0e3b3b0d4b74071fbb81d0e2b912718918190036101000190a15b509695505050505050565b606481565b600254600160a060020a03163214806140015750600254600160a060020a031633145b151561400c57600080fd5b600160a060020a038116151561402157600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600254600090600160a060020a03163214806140695750600254600160a060020a031633145b151561407457600080fd5b60108290556040805183815290517f4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a39181900360200190a1505060105490565b600061249460115461136c565b6000848152601460205260408120600181015460038201548401116141ea57604051600160a060020a0386169084156108fc029085906000818181858888f19350505050158015614116573d6000803e3d6000fd5b508281600301540181600301819055507fad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b986858786604051808581526020018060200184600160a060020a0316600160a060020a03168152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156141ac578181015183820152602001614194565b50505050905090810190601f1680156141d95780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b50949350505050565b60025460009081908190819081908190600160a060020a03163214806142215750601354606460ff90911610155b1561423757601054600096508695509350614494565b6003546040805160e060020a6363e6ffdd0281523260048201529051600160a060020a03909216945084916363e6ffdd916024808201926020929091908290030181600087803b15801561428a57600080fd5b505af115801561429e573d6000803e3d6000fd5b505050506040513d60208110156142b457600080fd5b50519150600160a060020a038216156143da5781905080600160a060020a0316635faecb763083600160a060020a0316635d97b6c26040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561431857600080fd5b505af115801561432c573d6000803e3d6000fd5b505050506040513d602081101561434257600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b15801561439357600080fd5b505af11580156143a7573d6000803e3d6000fd5b505050506040513d60208110156143bd57600080fd5b50511515600114156143da57601054600096508695509350614494565b600f54604080517f29d002190000000000000000000000000000000000000000000000000000000081523260048201529051600160a060020a03909216916329d00219916024808201926020929091908290030181600087803b15801561444057600080fd5b505af1158015614454573d6000803e3d6000fd5b505050506040513d602081101561446a57600080fd5b505115156001141561448757601054600096508695509350614494565b601054600a965086955093505b505050909192565b600254600160a060020a03163214806144bf5750600254600160a060020a031633145b15156144ca57600080fd5b600254600160a060020a0316ff5b6144e0614944565b50604080518082019091528151815260209182019181019190915290565b600080826000015161452285600001518660200151866000015187602001516146e0565b0190505b8351602085015101811161456457825160208086015186519186015160019095019461455c9291850390910390849084906146e0565b019050614526565b5092915050565b614573614944565b6145648383836147a0565b606080600083600001516040519080825280601f01601f1916602001820160405280156145b5578160200160208202803883390190505b5091506020820190506145648185602001518660000151614811565b600354604080517fa2d67fcf0000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216916000918291849163a2d67fcf91600480830192602092919082900301818787803b15801561463657600080fd5b505af115801561464a573d6000803e3d6000fd5b505050506040513d602081101561466057600080fd5b5051604080517fb8ff1dba0000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a0383169163b8ff1dba9160048082019260009290919082900301818387803b1580156146c357600080fd5b505af11580156146d7573d6000803e3d6000fd5b50505050505050565b600083818080808080808c8b1161478a5760208b116147535760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b82851461474b57838810614738578c8c019850614790565b8780600101985050858851169250614720565b879850614790565b8a8a209150600096505b8a8d03871161478a57508987208181141561477a57879850614790565b600197880197969096019561475d565b8c8c0198505b5050505050505050949350505050565b6147a8614944565b60006147c685600001518660200151866000015187602001516146e0565b602080870180519186019190915280518203855286519051919250018114156147f25760008552614808565b8351835186519101900385528351810160208601525b50909392505050565b60005b60208210614836578251845260209384019390920191601f1990910190614814565b50905182516020929092036101000a6000190180199091169116179052565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061488e57805485556148ca565b828001600101855582156148ca57600052602060002091601f016020900482015b828111156148ca5782548255916001019190600101906148af565b506110bb929150614aa5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061491757805160ff19168380011785556148ca565b828001600101855582156148ca579182015b828111156148ca578251825591602001919060010190614929565b604080518082019091526000808252602082015290565b8280548282559060005260206000209081019282156149a8579160200282015b828111156149a857825180516149989184916020909101906148d6565b509160200191906001019061497b565b506110bb929150614abf565b8280548282559060005260206000209081019282156148ca57916020028201828111156148ca578251825591602001919060010190614929565b60408051608081018252600080825260208201819052918101829052606081019190915290565b50805460018160011615610100020316600290046000825580601f10614a3b5750614a59565b601f016020900490600052602060002090810190614a599190614aa5565b50565b815481835581811115614a8057600083815260209020614a80918101908301614abf565b505050565b815481835581811115614a8057600083815260209020614a809181019083015b610f4791905b808211156110bb5760008155600101614aab565b610f4791905b808211156110bb576000614ad98282614a15565b50600101614ac55600a165627a7a723058201f284729ae932cf75e9d18a5a1bca6e48fd64bca44425d524077fd72f36317470029a165627a7a7230582039e5ff84d4f6973b3b1a257bd2d2cc8d1778f5e8cdf5113278c86e9edcec17810029"

// DeployBaseContentFactoryExt deploys a new Ethereum contract, binding an instance of BaseContentFactoryExt to it.
func DeployBaseContentFactoryExt(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseContentFactoryExt, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentFactoryExtABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseContentFactoryExtBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentFactoryExt{BaseContentFactoryExtCaller: BaseContentFactoryExtCaller{contract: contract}, BaseContentFactoryExtTransactor: BaseContentFactoryExtTransactor{contract: contract}, BaseContentFactoryExtFilterer: BaseContentFactoryExtFilterer{contract: contract}}, nil
}

// BaseContentFactoryExt is an auto generated Go binding around an Ethereum contract.
type BaseContentFactoryExt struct {
	BaseContentFactoryExtCaller     // Read-only binding to the contract
	BaseContentFactoryExtTransactor // Write-only binding to the contract
	BaseContentFactoryExtFilterer   // Log filterer for contract events
}

// BaseContentFactoryExtCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentFactoryExtCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryExtTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentFactoryExtTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryExtFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentFactoryExtFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryExtSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseContentFactoryExtSession struct {
	Contract     *BaseContentFactoryExt // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// BaseContentFactoryExtCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseContentFactoryExtCallerSession struct {
	Contract *BaseContentFactoryExtCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// BaseContentFactoryExtTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseContentFactoryExtTransactorSession struct {
	Contract     *BaseContentFactoryExtTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// BaseContentFactoryExtRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseContentFactoryExtRaw struct {
	Contract *BaseContentFactoryExt // Generic contract binding to access the raw methods on
}

// BaseContentFactoryExtCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseContentFactoryExtCallerRaw struct {
	Contract *BaseContentFactoryExtCaller // Generic read-only contract binding to access the raw methods on
}

// BaseContentFactoryExtTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseContentFactoryExtTransactorRaw struct {
	Contract *BaseContentFactoryExtTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseContentFactoryExt creates a new instance of BaseContentFactoryExt, bound to a specific deployed contract.
func NewBaseContentFactoryExt(address common.Address, backend bind.ContractBackend) (*BaseContentFactoryExt, error) {
	contract, err := bindBaseContentFactoryExt(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryExt{BaseContentFactoryExtCaller: BaseContentFactoryExtCaller{contract: contract}, BaseContentFactoryExtTransactor: BaseContentFactoryExtTransactor{contract: contract}, BaseContentFactoryExtFilterer: BaseContentFactoryExtFilterer{contract: contract}}, nil
}

// NewBaseContentFactoryExtCaller creates a new read-only instance of BaseContentFactoryExt, bound to a specific deployed contract.
func NewBaseContentFactoryExtCaller(address common.Address, caller bind.ContractCaller) (*BaseContentFactoryExtCaller, error) {
	contract, err := bindBaseContentFactoryExt(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryExtCaller{contract: contract}, nil
}

// NewBaseContentFactoryExtTransactor creates a new write-only instance of BaseContentFactoryExt, bound to a specific deployed contract.
func NewBaseContentFactoryExtTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentFactoryExtTransactor, error) {
	contract, err := bindBaseContentFactoryExt(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryExtTransactor{contract: contract}, nil
}

// NewBaseContentFactoryExtFilterer creates a new log filterer instance of BaseContentFactoryExt, bound to a specific deployed contract.
func NewBaseContentFactoryExtFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentFactoryExtFilterer, error) {
	contract, err := bindBaseContentFactoryExt(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryExtFilterer{contract: contract}, nil
}

// bindBaseContentFactoryExt binds a generic wrapper to an already deployed contract.
func bindBaseContentFactoryExt(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentFactoryExtABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentFactoryExt *BaseContentFactoryExtRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentFactoryExt.Contract.BaseContentFactoryExtCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentFactoryExt *BaseContentFactoryExtRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.BaseContentFactoryExtTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentFactoryExt *BaseContentFactoryExtRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.BaseContentFactoryExtTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentFactoryExt *BaseContentFactoryExtCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentFactoryExt.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.contract.Transact(opts, method, params...)
}

// OPACCESSCOMPLETE is a free data retrieval call binding the contract method 0x4d887374.
//
// Solidity: function OP_ACCESS_COMPLETE() constant returns(uint32)
func (_BaseContentFactoryExt *BaseContentFactoryExtCaller) OPACCESSCOMPLETE(opts *bind.CallOpts) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _BaseContentFactoryExt.contract.Call(opts, out, "OP_ACCESS_COMPLETE")
	return *ret0, err
}

// OPACCESSCOMPLETE is a free data retrieval call binding the contract method 0x4d887374.
//
// Solidity: function OP_ACCESS_COMPLETE() constant returns(uint32)
func (_BaseContentFactoryExt *BaseContentFactoryExtSession) OPACCESSCOMPLETE() (uint32, error) {
	return _BaseContentFactoryExt.Contract.OPACCESSCOMPLETE(&_BaseContentFactoryExt.CallOpts)
}

// OPACCESSCOMPLETE is a free data retrieval call binding the contract method 0x4d887374.
//
// Solidity: function OP_ACCESS_COMPLETE() constant returns(uint32)
func (_BaseContentFactoryExt *BaseContentFactoryExtCallerSession) OPACCESSCOMPLETE() (uint32, error) {
	return _BaseContentFactoryExt.Contract.OPACCESSCOMPLETE(&_BaseContentFactoryExt.CallOpts)
}

// OPACCESSREQUEST is a free data retrieval call binding the contract method 0x52344328.
//
// Solidity: function OP_ACCESS_REQUEST() constant returns(uint32)
func (_BaseContentFactoryExt *BaseContentFactoryExtCaller) OPACCESSREQUEST(opts *bind.CallOpts) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _BaseContentFactoryExt.contract.Call(opts, out, "OP_ACCESS_REQUEST")
	return *ret0, err
}

// OPACCESSREQUEST is a free data retrieval call binding the contract method 0x52344328.
//
// Solidity: function OP_ACCESS_REQUEST() constant returns(uint32)
func (_BaseContentFactoryExt *BaseContentFactoryExtSession) OPACCESSREQUEST() (uint32, error) {
	return _BaseContentFactoryExt.Contract.OPACCESSREQUEST(&_BaseContentFactoryExt.CallOpts)
}

// OPACCESSREQUEST is a free data retrieval call binding the contract method 0x52344328.
//
// Solidity: function OP_ACCESS_REQUEST() constant returns(uint32)
func (_BaseContentFactoryExt *BaseContentFactoryExtCallerSession) OPACCESSREQUEST() (uint32, error) {
	return _BaseContentFactoryExt.Contract.OPACCESSREQUEST(&_BaseContentFactoryExt.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentFactoryExt.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtSession) ContentSpace() (common.Address, error) {
	return _BaseContentFactoryExt.Contract.ContentSpace(&_BaseContentFactoryExt.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtCallerSession) ContentSpace() (common.Address, error) {
	return _BaseContentFactoryExt.Contract.ContentSpace(&_BaseContentFactoryExt.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentFactoryExt.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtSession) Creator() (common.Address, error) {
	return _BaseContentFactoryExt.Contract.Creator(&_BaseContentFactoryExt.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtCallerSession) Creator() (common.Address, error) {
	return _BaseContentFactoryExt.Contract.Creator(&_BaseContentFactoryExt.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentFactoryExt.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtSession) Owner() (common.Address, error) {
	return _BaseContentFactoryExt.Contract.Owner(&_BaseContentFactoryExt.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtCallerSession) Owner() (common.Address, error) {
	return _BaseContentFactoryExt.Contract.Owner(&_BaseContentFactoryExt.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentFactoryExt *BaseContentFactoryExtCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentFactoryExt.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentFactoryExt *BaseContentFactoryExtSession) Version() ([32]byte, error) {
	return _BaseContentFactoryExt.Contract.Version(&_BaseContentFactoryExt.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentFactoryExt *BaseContentFactoryExtCallerSession) Version() ([32]byte, error) {
	return _BaseContentFactoryExt.Contract.Version(&_BaseContentFactoryExt.CallOpts)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.contract.Transact(opts, "createContent", lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.CreateContent(&_BaseContentFactoryExt.TransactOpts, lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactorSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.CreateContent(&_BaseContentFactoryExt.TransactOpts, lib, content_type)
}

// ExecuteAccessBatch is a paid mutator transaction binding the contract method 0x78cd9119.
//
// Solidity: function executeAccessBatch(uint32[] _opCodes, address[] _contentAddrs, address[] _userAddrs, bytes32[] _ctxHashes, uint256[] _ts, uint256[] _amt) returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactor) ExecuteAccessBatch(opts *bind.TransactOpts, _opCodes []uint32, _contentAddrs []common.Address, _userAddrs []common.Address, _ctxHashes [][32]byte, _ts []*big.Int, _amt []*big.Int) (*types.Transaction, error) {
	return _BaseContentFactoryExt.contract.Transact(opts, "executeAccessBatch", _opCodes, _contentAddrs, _userAddrs, _ctxHashes, _ts, _amt)
}

// ExecuteAccessBatch is a paid mutator transaction binding the contract method 0x78cd9119.
//
// Solidity: function executeAccessBatch(uint32[] _opCodes, address[] _contentAddrs, address[] _userAddrs, bytes32[] _ctxHashes, uint256[] _ts, uint256[] _amt) returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtSession) ExecuteAccessBatch(_opCodes []uint32, _contentAddrs []common.Address, _userAddrs []common.Address, _ctxHashes [][32]byte, _ts []*big.Int, _amt []*big.Int) (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.ExecuteAccessBatch(&_BaseContentFactoryExt.TransactOpts, _opCodes, _contentAddrs, _userAddrs, _ctxHashes, _ts, _amt)
}

// ExecuteAccessBatch is a paid mutator transaction binding the contract method 0x78cd9119.
//
// Solidity: function executeAccessBatch(uint32[] _opCodes, address[] _contentAddrs, address[] _userAddrs, bytes32[] _ctxHashes, uint256[] _ts, uint256[] _amt) returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactorSession) ExecuteAccessBatch(_opCodes []uint32, _contentAddrs []common.Address, _userAddrs []common.Address, _ctxHashes [][32]byte, _ts []*big.Int, _amt []*big.Int) (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.ExecuteAccessBatch(&_BaseContentFactoryExt.TransactOpts, _opCodes, _contentAddrs, _userAddrs, _ctxHashes, _ts, _amt)
}

// IsContract is a paid mutator transaction binding the contract method 0x16279055.
//
// Solidity: function isContract(address addr) returns(bool)
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactor) IsContract(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.contract.Transact(opts, "isContract", addr)
}

// IsContract is a paid mutator transaction binding the contract method 0x16279055.
//
// Solidity: function isContract(address addr) returns(bool)
func (_BaseContentFactoryExt *BaseContentFactoryExtSession) IsContract(addr common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.IsContract(&_BaseContentFactoryExt.TransactOpts, addr)
}

// IsContract is a paid mutator transaction binding the contract method 0x16279055.
//
// Solidity: function isContract(address addr) returns(bool)
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactorSession) IsContract(addr common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.IsContract(&_BaseContentFactoryExt.TransactOpts, addr)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactoryExt.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtSession) Kill() (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.Kill(&_BaseContentFactoryExt.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.Kill(&_BaseContentFactoryExt.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.TransferCreatorship(&_BaseContentFactoryExt.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.TransferCreatorship(&_BaseContentFactoryExt.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.TransferOwnership(&_BaseContentFactoryExt.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.Contract.TransferOwnership(&_BaseContentFactoryExt.TransactOpts, newOwner)
}

// BaseContentFactoryExtAccessCompleteIterator is returned from FilterAccessComplete and is used to iterate over the raw logs and unpacked data for AccessComplete events raised by the BaseContentFactoryExt contract.
type BaseContentFactoryExtAccessCompleteIterator struct {
	Event *BaseContentFactoryExtAccessComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentFactoryExtAccessCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentFactoryExtAccessComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentFactoryExtAccessComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentFactoryExtAccessCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentFactoryExtAccessCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentFactoryExtAccessComplete represents a AccessComplete event raised by the BaseContentFactoryExt contract.
type BaseContentFactoryExtAccessComplete struct {
	Timestamp        *big.Int
	LibraryAddress   common.Address
	ContentAddress   common.Address
	UserAddress      common.Address
	ContextHash      [32]byte
	RequestTimestamp uint64
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessComplete is a free log retrieval operation binding the contract event 0x078326d18c0223483393342523f51da024ddcb0f1e929aa1f142100381c794f5.
//
// Solidity: event AccessComplete(uint256 timestamp, address libraryAddress, address contentAddress, address userAddress, bytes32 contextHash, uint64 request_timestamp)
func (_BaseContentFactoryExt *BaseContentFactoryExtFilterer) FilterAccessComplete(opts *bind.FilterOpts) (*BaseContentFactoryExtAccessCompleteIterator, error) {

	logs, sub, err := _BaseContentFactoryExt.contract.FilterLogs(opts, "AccessComplete")
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryExtAccessCompleteIterator{contract: _BaseContentFactoryExt.contract, event: "AccessComplete", logs: logs, sub: sub}, nil
}

// WatchAccessComplete is a free log subscription operation binding the contract event 0x078326d18c0223483393342523f51da024ddcb0f1e929aa1f142100381c794f5.
//
// Solidity: event AccessComplete(uint256 timestamp, address libraryAddress, address contentAddress, address userAddress, bytes32 contextHash, uint64 request_timestamp)
func (_BaseContentFactoryExt *BaseContentFactoryExtFilterer) WatchAccessComplete(opts *bind.WatchOpts, sink chan<- *BaseContentFactoryExtAccessComplete) (event.Subscription, error) {

	logs, sub, err := _BaseContentFactoryExt.contract.WatchLogs(opts, "AccessComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentFactoryExtAccessComplete)
				if err := _BaseContentFactoryExt.contract.UnpackLog(event, "AccessComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessComplete is a log parse operation binding the contract event 0x078326d18c0223483393342523f51da024ddcb0f1e929aa1f142100381c794f5.
//
// Solidity: event AccessComplete(uint256 timestamp, address libraryAddress, address contentAddress, address userAddress, bytes32 contextHash, uint64 request_timestamp)
func (_BaseContentFactoryExt *BaseContentFactoryExtFilterer) ParseAccessComplete(log types.Log) (*BaseContentFactoryExtAccessComplete, error) {
	event := new(BaseContentFactoryExtAccessComplete)
	if err := _BaseContentFactoryExt.contract.UnpackLog(event, "AccessComplete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentFactoryExtAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseContentFactoryExt contract.
type BaseContentFactoryExtAccessRequestIterator struct {
	Event *BaseContentFactoryExtAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentFactoryExtAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentFactoryExtAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentFactoryExtAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentFactoryExtAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentFactoryExtAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentFactoryExtAccessRequest represents a AccessRequest event raised by the BaseContentFactoryExt contract.
type BaseContentFactoryExtAccessRequest struct {
	Timestamp        *big.Int
	LibraryAddress   common.Address
	ContentAddress   common.Address
	UserAddress      common.Address
	ContextHash      [32]byte
	RequestTimestamp uint64
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0x8354ff8c2c210fd53709db56438bb45d36a62de8bcc95c8459d80ce933d47680.
//
// Solidity: event AccessRequest(uint256 timestamp, address libraryAddress, address contentAddress, address userAddress, bytes32 contextHash, uint64 request_timestamp)
func (_BaseContentFactoryExt *BaseContentFactoryExtFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseContentFactoryExtAccessRequestIterator, error) {

	logs, sub, err := _BaseContentFactoryExt.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryExtAccessRequestIterator{contract: _BaseContentFactoryExt.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0x8354ff8c2c210fd53709db56438bb45d36a62de8bcc95c8459d80ce933d47680.
//
// Solidity: event AccessRequest(uint256 timestamp, address libraryAddress, address contentAddress, address userAddress, bytes32 contextHash, uint64 request_timestamp)
func (_BaseContentFactoryExt *BaseContentFactoryExtFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseContentFactoryExtAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentFactoryExt.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentFactoryExtAccessRequest)
				if err := _BaseContentFactoryExt.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0x8354ff8c2c210fd53709db56438bb45d36a62de8bcc95c8459d80ce933d47680.
//
// Solidity: event AccessRequest(uint256 timestamp, address libraryAddress, address contentAddress, address userAddress, bytes32 contextHash, uint64 request_timestamp)
func (_BaseContentFactoryExt *BaseContentFactoryExtFilterer) ParseAccessRequest(log types.Log) (*BaseContentFactoryExtAccessRequest, error) {
	event := new(BaseContentFactoryExtAccessRequest)
	if err := _BaseContentFactoryExt.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceABI is the input ABI used to generate the binding from.
const BaseContentSpaceABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"submitNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerSpaceNode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numActiveNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraryFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"getKMSID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addKMSLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_objectHash\",\"type\":\"string\"},{\"name\":\"_versionHashesConcat\",\"type\":\"string\"},{\"name\":\"_versionTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"migrateEditable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setWalletFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setGroupFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setContentFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsIdStr\",\"type\":\"string\"}],\"name\":\"checkKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space_description\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setLibraryFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_pubKey\",\"type\":\"string\"}],\"name\":\"setKMSPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unregisterSpaceNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"removeNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"engageAccountLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"checkKMSAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"approveNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8[]\"},{\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"name\":\"_from\",\"type\":\"address[]\"},{\"name\":\"_dest\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"},{\"name\":\"_ts\",\"type\":\"uint256[]\"}],\"name\":\"executeBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPendingNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodeMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"removeKMSLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentTypeAddress\",\"type\":\"address\"}],\"name\":\"CreateContentType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"libraryAddress\",\"type\":\"address\"}],\"name\":\"CreateLibrary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupAddress\",\"type\":\"address\"}],\"name\":\"CreateGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"}],\"name\":\"CreateContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"CreateAccessWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"EngageAccountLibrary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"SetFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nodeObjAddr\",\"type\":\"address\"}],\"name\":\"RegisterNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nodeObjAddr\",\"type\":\"address\"}],\"name\":\"UnregisterNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"AddKMSLocator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"RemoveKMSLocator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CreateSpace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"GetAccessWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"AddNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"RemoveNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EditableMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AccessRequest\",\"type\":\"event\"}]"

// BaseContentSpaceFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentSpaceFuncSigs = map[string]string{
	"f1551887": "accessRequest()",
	"52f82dd8": "activeNodeAddresses(uint256)",
	"5272ae17": "activeNodeLocators(uint256)",
	"0f58a786": "addContentType(address,address)",
	"653a92f6": "addKMSLocator(string,bytes)",
	"64f0f050": "addNode(address,bytes)",
	"32eaf21b": "addressKMS()",
	"dd4c97a0": "approveNode(address)",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"0eaec2c5": "canContribute(address)",
	"26683e14": "canNodePublish(address)",
	"9b55f901": "canPublish(address)",
	"29d00219": "canReview(address)",
	"8d2a23db": "checkKMS(string)",
	"d6be0f49": "checkKMSAddr(address)",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"904696a8": "contentFactory()",
	"af570c04": "contentSpace()",
	"1cdbee5a": "contentTypeContracts(address)",
	"991a3a7c": "contentTypes(uint256)",
	"c65bcbe2": "contentTypesLength()",
	"331b86c0": "countVersionHashes()",
	"7708bc41": "createAccessWallet()",
	"bf4e088f": "createContent(address,address)",
	"b8cfaf05": "createContentType()",
	"575185ed": "createGroup()",
	"40b89f06": "createLibrary(address)",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"7284e416": "description()",
	"c82710c1": "engageAccountLibrary()",
	"e9861ab1": "executeBatch(uint8[],bytes32[],bytes32[],address[],address[],uint256[],uint256[])",
	"c45a0155": "factory()",
	"1f2caaec": "findTypeByHash(bytes32)",
	"a2d67fcf": "getAccessWallet()",
	"589aafc1": "getKMSID(address)",
	"268bfac4": "getKMSInfo(string,bytes)",
	"ac55c906": "getMeta(bytes)",
	"b04b6caa": "groupFactory()",
	"95a078e8": "hasAccess(address)",
	"41c0e1b5": "kill()",
	"441c5aa3": "libraryFactory()",
	"6ae5f5e0": "migrateEditable(address,address,string,string,uint256[])",
	"06fdde03": "name()",
	"fbd1b4ce": "nodeMapping(address)",
	"43f59ec7": "numActiveNodes()",
	"f41a1587": "numPendingNodes()",
	"e02dd9c2": "objectHash()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"6be9514c": "pendingNodeAddresses(uint256)",
	"69e30ff8": "pendingNodeLocators(uint256)",
	"2cf99422": "publish(address)",
	"e542b7cb": "putMeta(bytes,bytes)",
	"2f7a781a": "registerSpaceNode()",
	"fd089196": "removeContentType(address)",
	"fe7ac19f": "removeKMSLocator(string,bytes)",
	"b2b99ec9": "removeNode(address)",
	"3dd71d99": "requiresReview()",
	"c9e8e72d": "setAddressKMS(address)",
	"85ce1df1": "setContentFactory(address)",
	"90c3f38f": "setDescription(string)",
	"5bb47808": "setFactory(address)",
	"837b3b93": "setGroupFactory(address)",
	"a69cb734": "setKMSPublicKey(string,string)",
	"9d05d18d": "setLibraryFactory(address)",
	"7ebf879c": "setWalletFactory(address)",
	"160eee74": "submitNode(bytes)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"abe596b1": "unregisterSpaceNode()",
	"c287e0ed": "updateRequest()",
	"63e6ffdd": "userWallets(address)",
	"29dedde5": "validType(address)",
	"54fd4d50": "version()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"c5c03699": "walletFactory()",
	"9cb121ba": "whitelistedType(address)",
}

// BaseContentSpaceBin is the compiled bytecode used for deploying new contracts.
var BaseContentSpaceBin = "0x60806040527f4f776e61626c6532303139303532383139333830304d4c00000000000000000060009081557f41636365737369626c6532303139303232323133353930304d4c0000000000006006557f4564697461626c6532303139303830313133353530304d4c00000000000000006007557f436f6e7461696e657232303139303532393039313830304d4c00000000000000600e556011557f55736572537061636532303139303530363135353330304d4c000000000000006013557f4e6f6465537061636532303139303532383137303130304d4c000000000000006015557f42617365436f6e74656e74537061636532303139303830313134303430304d4c601a553480156200011257600080fd5b5060405162005ef638038062005ef68339810160405280516001805432600160a060020a031991821681179092556002805490911690911790550180516200016290601b906020840190620001c6565b5060038054600160a060020a03191630179055601a5460025460408051928352600160a060020a0391909116602083015280517f599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf549281900390910190a1506200026b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020957805160ff191683800117855562000239565b8280016001018555821562000239579182015b82811115620002395782518255916020019190600101906200021c565b50620002479291506200024b565b5090565b6200026891905b8082111562000247576000815560010162000252565b90565b615c7b806200027b6000396000f3006080604052600436106103b75763ffffffff60e060020a600035041662821de381146103b957806302d05d3f146103ea57806306fdde03146103ff5780630eaec2c5146104895780630f58a786146104be57806314cfabb3146104e5578063160eee74146104fa5780631cdbee5a146105535780631f2caaec1461057457806326683e141461058c578063268bfac4146105ad57806329d002191461072257806329dedde5146107435780632cf99422146107645780632f7a781a1461078557806332eaf21b1461079a578063331b86c0146107af578063375a6e7c146107d65780633dd71d99146107eb57806340b89f061461080057806341c0e1b51461082157806343f59ec714610836578063441c5aa31461084b578063446e8826146108605780635272ae171461086857806352f82dd81461088057806354fd4d5014610898578063575185ed146108ad578063589aafc1146108c25780635bb47808146108e35780635f6a130114610904578063628449fd1461091957806363e6ffdd1461092e57806364f0f0501461094f578063653a92f6146109b657806369e30ff814610a4d5780636ae5f5e014610a655780636be9514c14610b4b5780636d2e4b1b14610b635780636e37542714610b845780637284e41614610b995780637708bc4114610bae5780637886f74714610bc35780637ca8f61814610bdb5780637ebf879c14610bf3578063837b3b9314610c1457806385ce1df114610c355780638d2a23db14610c565780638da5cb5b14610caf578063904696a814610cc457806390c3f38f14610cd957806395a078e814610d325780639867db7414610d53578063991a3a7c14610dac5780639b55f901146104895780639cb121ba14610dc45780639d05d18d14610de5578063a2d67fcf14610e06578063a69cb73414610e1b578063abe596b114610eb2578063ac55c90614610ec7578063af570c0414610f20578063b04b6caa14610f35578063b2b99ec914610f4a578063b8cfaf0514610f6b578063bf4e088f14610f80578063c287e0ed14610fa7578063c45a015514610fbc578063c5c0369914610fd1578063c65bcbe214610fe6578063c82710c114610ffb578063c9e8e72d14611010578063d6be0f4914611031578063dd4c97a014611052578063e02dd9c214611073578063e1a7071714611088578063e542b7cb146110e1578063e9861ab114611178578063f155188714611323578063f2fde38b14611338578063f41a158714611359578063fbd1b4ce1461136e578063fd0891961461138f578063fe7ac19f146113b0575b005b3480156103c557600080fd5b506103ce611447565b60408051600160a060020a039092168252519081900360200190f35b3480156103f657600080fd5b506103ce611457565b34801561040b57600080fd5b50610414611466565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561044e578181015183820152602001610436565b50505050905090810190601f16801561047b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561049557600080fd5b506104aa600160a060020a03600435166114f4565b604080519115158252519081900360200190f35b3480156104ca57600080fd5b506103b7600160a060020a0360043581169060243516611525565b3480156104f157600080fd5b506104aa61169a565b34801561050657600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103b79436949293602493928401919081908401838280828437509497506116aa9650505050505050565b34801561055f57600080fd5b506103ce600160a060020a0360043516611a5d565b34801561058057600080fd5b506103ce600435611a78565b34801561059857600080fd5b506104aa600160a060020a0360043516611cfc565b3480156105b957600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261064494369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750611d5a9650505050505050565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561068557818101518382015260200161066d565b50505050905090810190601f1680156106b25780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156106e55781810151838201526020016106cd565b50505050905090810190601f1680156107125780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561072e57600080fd5b506104aa600160a060020a03600435166121a3565b34801561074f57600080fd5b506104aa600160a060020a03600435166121a9565b34801561077057600080fd5b506104aa600160a060020a03600435166121c7565b34801561079157600080fd5b506103ce6122e7565b3480156107a657600080fd5b506103ce612461565b3480156107bb57600080fd5b506107c4612470565b60408051918252519081900360200190f35b3480156107e257600080fd5b506104aa612476565b3480156107f757600080fd5b506104aa61247f565b34801561080c57600080fd5b506103ce600160a060020a0360043516612484565b34801561082d57600080fd5b506103b761255f565b34801561084257600080fd5b506107c461259b565b34801561085757600080fd5b506103ce6125a1565b6104aa6125b0565b34801561087457600080fd5b506104146004356127a0565b34801561088c57600080fd5b506103ce600435612814565b3480156108a457600080fd5b506107c461283c565b3480156108b957600080fd5b506103ce612842565b3480156108ce57600080fd5b50610414600160a060020a036004351661290c565b3480156108ef57600080fd5b506103b7600160a060020a036004351661291f565b34801561091057600080fd5b506103b761296f565b34801561092557600080fd5b506104146129ad565b34801561093a57600080fd5b506103ce600160a060020a0360043516612a08565b34801561095b57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526103b7958335600160a060020a0316953695604494919390910191908190840183828082843750949750612a239650505050505050565b3480156109c257600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104aa94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750612c689650505050505050565b348015610a5957600080fd5b50610414600435612fcb565b348015610a7157600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526103b7948235600160a060020a039081169560248035909216953695946064949293019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750612fd99650505050505050565b348015610b5757600080fd5b506103ce600435613181565b348015610b6f57600080fd5b506103b7600160a060020a036004351661318f565b348015610b9057600080fd5b506104aa6131dd565b348015610ba557600080fd5b506104146131ee565b348015610bba57600080fd5b506103ce613249565b348015610bcf57600080fd5b506107c4600435613254565b348015610be757600080fd5b50610414600435613273565b348015610bff57600080fd5b506103b7600160a060020a0360043516613281565b348015610c2057600080fd5b506103b7600160a060020a03600435166132d1565b348015610c4157600080fd5b506103b7600160a060020a0360043516613321565b348015610c6257600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526107c49436949293602493928401919081908401838280828437509497506133719650505050505050565b348015610cbb57600080fd5b506103ce6133d9565b348015610cd057600080fd5b506103ce6133e8565b348015610ce557600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103b79436949293602493928401919081908401838280828437509497506133f79650505050505050565b348015610d3e57600080fd5b506104aa600160a060020a036004351661343c565b348015610d5f57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103b79436949293602493928401919081908401838280828437509497506134429650505050505050565b348015610db857600080fd5b506103ce60043561356f565b348015610dd057600080fd5b506104aa600160a060020a036004351661357d565b348015610df157600080fd5b506103b7600160a060020a03600435166135d4565b348015610e1257600080fd5b506103ce613624565b348015610e2757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103b794369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506136b09650505050505050565b348015610ebe57600080fd5b506104aa613757565b348015610ed357600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261041494369492936024939284019190819084018382808284375094975061384e9650505050505050565b348015610f2c57600080fd5b506103ce6139fc565b348015610f4157600080fd5b506103ce613a0b565b348015610f5657600080fd5b506103b7600160a060020a0360043516613a1a565b348015610f7757600080fd5b506103ce613ae6565b348015610f8c57600080fd5b506103ce600160a060020a0360043581169060243516613bad565b348015610fb357600080fd5b506103b7613c91565b348015610fc857600080fd5b506103ce613d67565b348015610fdd57600080fd5b506103ce613d76565b348015610ff257600080fd5b506107c4613d85565b34801561100757600080fd5b506103ce613d8b565b34801561101c57600080fd5b506103b7600160a060020a0360043516613dc5565b34801561103d57600080fd5b506107c4600160a060020a0360043516613e15565b34801561105e57600080fd5b506103b7600160a060020a0360043516613e8b565b34801561107f57600080fd5b506104146140cc565b34801561109457600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526107c49436949293602493928401919081908401838280828437509497506141279650505050505050565b3480156110ed57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103b794369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506146cf9650505050505050565b34801561118457600080fd5b50604080516020600480358082013583810280860185019096528085526103b795369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506147b79650505050505050565b34801561132f57600080fd5b506104aa6149bd565b34801561134457600080fd5b506103b7600160a060020a03600435166149ee565b34801561136557600080fd5b506107c4614a53565b34801561137a57600080fd5b506103ce600160a060020a0360043516614a59565b34801561139b57600080fd5b506104aa600160a060020a0360043516614a74565b3480156113bc57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104aa94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750614c179650505050505050565b600354600160a060020a03165b90565b600154600160a060020a031681565b601b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156114ec5780601f106114c1576101008083540402835291602001916114ec565b820191906000526020600020905b8154815290600101906020018083116114cf57829003601f168201915b505050505081565b600254600090600160a060020a038381169116148061151d5750600254600160a060020a031633145b90505b919050565b600254600160a060020a03163214806115485750600254600160a060020a031633145b151561155357600080fd5b600160a060020a0380831660009081526012602052604090205416158015611581575061157f8261357d565b155b1561162d5760105460115410156115d7578160106011548154811015156115a457fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550611623565b601080546001810182556000919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672018054600160a060020a031916600160a060020a0384161790555b6011805460010190555b600160a060020a038281166000818152601260209081526040918290208054600160a060020a0319169486169485179055815192835282019290925281517f280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7929181900390910190a15050565b60006116a533611cfc565b905090565b6117e0601880548060200260200160405190810160405280929190818152602001828054801561170357602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116116e5575b50505050506019805480602002602001604051908101604052809291908181526020016000905b828210156117d55760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156117c15780601f10611796576101008083540402835291602001916117c1565b820191906000526020600020905b8154815290600101906020018083116117a457829003601f168201915b50505050508152602001906001019061172a565b5050505033846150a5565b156117ea57600080fd5b611915601680548060200260200160405190810160405280929190818152602001828054801561184357602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611825575b50505050506017805480602002602001604051908101604052809291908181526020016000905b828210156117d55760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156119015780601f106118d657610100808354040283529160200191611901565b820191906000526020600020905b8154815290600101906020018083116118e457829003601f168201915b50505050508152602001906001019061186a565b1561191f57600080fd5b60185460641161192e57600080fd5b60198054600181018083556000929092528251611972917f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695019060208501906159a3565b50506018805460018101825560009182527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e018054600160a060020a0319163390811790915560408051828152602081810183815286519383019390935285517fae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d958794926060850192908601918190849084905b83811015611a1f578181015183820152602001611a07565b50505050905090810190601f168015611a4c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b601260205260009081526040902054600160a060020a031681565b600080805b601054821015611cf0576010805483908110611a9557fe5b6000918252602091829020015460408051808401889052815180820385018152908201918290528051600160a060020a03909316945092909182918401908083835b60208310611af65780518252601f199092019160209182019101611ad7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681600160a060020a031663e02dd9c26040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611b6557600080fd5b505af1158015611b79573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611ba257600080fd5b810190808051640100000000811115611bba57600080fd5b82016020810184811115611bcd57600080fd5b8151640100000000811182820187101715611be757600080fd5b50509291905050506040516020018082805190602001908083835b60208310611c215780518252601f199092019160209182019101611c02565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611c845780518252601f199092019160209182019101611c65565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415611ce5576010805483908110611cc957fe5b600091825260209091200154600160a060020a03169250611cf5565b600190910190611a7d565b600092505b5050919050565b6000805b601654811015611d4f5782600160a060020a0316601682815481101515611d2357fe5b600091825260209091200154600160a060020a03161415611d475760019150611d54565b600101611d00565b600091505b50919050565b60608060608060608060006023896040518082805190602001908083835b60208310611d975780518252601f199092019160209182019101611d78565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208054808402870184019092528186529350915060009084015b82821015611e875760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611e735780601f10611e4857610100808354040283529160200191611e73565b820191906000526020600020905b815481529060010190602001808311611e5657829003601f168201915b505050505081526020019060010190611ddc565b5050505094506024896040518082805190602001908083835b60208310611ebf5780518252601f199092019160209182019101611ea0565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f6002600183161590980290950116959095049283018290048202880182019052818752929450925050830182828015611f735780601f10611f4857610100808354040283529160200191611f73565b820191906000526020600020905b815481529060010190602001808311611f5657829003601f168201915b50505050509350845160001415611fa0578360206040519081016040528060008152509096509650612197565b611faa85896151f3565b9250600090505b825181101561219057600183510381141561209557818382815181101515611fd557fe5b906020019060200201516040516020018083805190602001908083835b602083106120115780518252601f199092019160209182019101611ff2565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106120595780518252601f19909201916020918201910161203a565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529150612188565b8183828151811015156120a457fe5b906020019060200201516040516020018083805190602001908083835b602083106120e05780518252601f1990920191602091820191016120c1565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106121285780518252601f199092019160209182019101612109565b6001836020036101000a038019825116818451168082178552505050505050905001807f2c000000000000000000000000000000000000000000000000000000000000008152506001019250505060405160208183030381529060405291505b600101611fb1565b8184965096505b50505050509250929050565b50600090565b6000601154600014156121be57506001611520565b61151d8261357d565b60008033600160a060020a038416146121df57600080fd5b82905080600160a060020a0316638280dd8f60006040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b15801561222c57600080fd5b505af1158015612240573d6000803e3d6000fd5b505050506040513d602081101561225657600080fd5b5050604080517f27c1c21d0000000000000000000000000000000000000000000000000000000081529051600160a060020a038316916327c1c21d9160048083019260209291908290030181600087803b1580156122b357600080fd5b505af11580156122c7573d6000803e3d6000fd5b505050506040513d60208110156122dd57600080fd5b5051159392505050565b3360009081526022602052604081205481908190600160a060020a03161561230e57600080fd5b600091505b60165482101561235957601680543391908490811061232e57fe5b600091825260209091200154600160a060020a0316141561234e57612359565b600190910190612313565b601654821061236757600080fd5b601d54604080517f5c6dc2190000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691635c6dc219916024808201926020929091908290030181600087803b1580156123cd57600080fd5b505af11580156123e1573d6000803e3d6000fd5b505050506040513d60208110156123f757600080fd5b5051336000908152602260209081526040918290208054600160a060020a031916600160a060020a038516908117909155825190815291519293507f4575facd117046c9c28b69a3eb9c08939f2462a5a22ea6c6dcd4f79b8dd124e992918290030190a192915050565b600f54600160a060020a031681565b600a5490565b600d5460ff1681565b600090565b60208054604080517f40b89f06000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151600094859493909316926340b89f06926024808201939182900301818787803b1580156124ed57600080fd5b505af1158015612501573d6000803e3d6000fd5b505050506040513d602081101561251757600080fd5b505160408051600160a060020a038316815290519192507f473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571919081900360200190a192915050565b600254600160a060020a03163214806125825750600254600160a060020a031633145b151561258d57600080fd5b600254600160a060020a0316ff5b60175490565b602054600160a060020a031681565b60006125ba61169a565b15156125c557600080fd5b600d5460ff1615156125d657600080fd5b60006008805460018160011615610100020316600290049050111561268557600a805460018181018084556000939093526008805461264c937fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80192600261010091831615919091026000190190911604615a1d565b5050600954600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901555b600c80546126a89160089160026000196101006001841615020190911604615a1d565b50426009556040805160208101918290526000908190526126cb91600c916159a3565b50600d805460ff1916905560035460408051600160a060020a039092168083526020830182815260088054600260001960018316156101000201909116049385018490527f482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e9492939092919060608301908490801561278b5780601f106127605761010080835404028352916020019161278b565b820191906000526020600020905b81548152906001019060200180831161276e57829003601f168201915b5050935050505060405180910390a150600190565b60178054829081106127ae57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156114ec5780601f106114c1576101008083540402835291602001916114ec565b601680548290811061282257fe5b600091825260209091200154600160a060020a0316905081565b601a5481565b600080601e60009054906101000a9004600160a060020a0316600160a060020a031663575185ed6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561289857600080fd5b505af11580156128ac573d6000803e3d6000fd5b505050506040513d60208110156128c257600080fd5b505160408051600160a060020a038316815290519192507fa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159919081900360200190a18091505b5090565b606061151d6129196152f8565b836152fd565b600254600160a060020a03163214806129425750600254600160a060020a031633145b151561294d57600080fd5b601d8054600160a060020a031916600160a060020a0392909216919091179055565b6129776131dd565b151561298257600080fd5b6040805160208101918290526000908190526129a091600c916159a3565b50600d805460ff19169055565b600c805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156114ec5780601f106114c1576101008083540402835291602001916114ec565b601460205260009081526040902054600160a060020a031681565b600254600160a060020a0316321480612a465750600254600160a060020a031633145b1515612a5157600080fd5b612b876016805480602002602001604051908101604052809291908181526020018280548015612aaa57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612a8c575b50505050506017805480602002602001604051908101604052809291908181526020016000905b82821015612b7c5760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015612b685780601f10612b3d57610100808354040283529160200191612b68565b820191906000526020600020905b815481529060010190602001808311612b4b57829003601f168201915b505050505081526020019060010190612ad1565b5050505084846150a5565b15612b9157600080fd5b6016805460018082019092557fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b5124289018054600160a060020a031916600160a060020a0385161790556017805491820180825560009190915282519091612c1f917fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c159091019060208501906159a3565b505060408051338152600160a060020a038416602082015281517f2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4929181900390910190a15050565b6002546000906060908290600160a060020a0316321480612c935750600254600160a060020a031633145b1515612c9e57600080fd5b6023856040518082805190602001908083835b60208310612cd05780518252601f199092019160209182019101612cb1565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208054808402870184019092528186529350915060009084015b82821015612dc05760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015612dac5780601f10612d8157610100808354040283529160200191612dac565b820191906000526020600020905b815481529060010190602001808311612d8f57829003601f168201915b505050505081526020019060010190612d15565b505050509150600090505b8151811015612efc57836040518082805190602001908083835b60208310612e045780518252601f199092019160209182019101612de5565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912085519093508592508491508110612e4057fe5b906020019060200201516040518082805190602001908083835b60208310612e795780518252601f199092019160209182019101612e5a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415612ef457604080513381526001602082015281517fdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319929181900390910190a160009250612fc3565b600101612dcb565b6023856040518082805190602001908083835b60208310612f2e5780518252601f199092019160209182019101612f0f565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932080546001810180835560009283529185902089519295612f819550910192508801906159a3565b5050604080513381526000602082015281517fdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319929181900390910190a1600192505b505092915050565b60198054829081106127ae57fe5b612fe1615a92565b612fe9615a92565b600254606090600090600160a060020a03163214806130125750600254600160a060020a031633145b151561301d57600080fd5b86516130309060089060208a01906159a3565b5085511561313b5761304186615375565b93506130816040805190810160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250615375565b9250613093848463ffffffff61539b16565b6001016040519080825280602002602001820160405280156130c957816020015b60608152602001906001900390816130b45790505b509150600090505b8151811015613112576130f26130ed858563ffffffff61540116565b615414565b828281518110151561310057fe5b602090810290910101526001016130d1565b815161312590600a906020850190615aa9565b50845161313990600b906020880190615b02565b505b613144896149ee565b61314d8861318f565b6040517fae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce5890600090a1505050505050505050565b601880548290811061282257fe5b600154600160a060020a031632146131a657600080fd5b600160a060020a03811615156131bb57600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a0316321490565b601c805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156114ec5780601f106114c1576101008083540402835291602001916114ec565b60006116a532615467565b600b80548290811061326257fe5b600091825260209091200154905081565b600a8054829081106127ae57fe5b600254600160a060020a03163214806132a45750600254600160a060020a031633145b15156132af57600080fd5b601f8054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a03163214806132f45750600254600160a060020a031633145b15156132ff57600080fd5b601e8054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a03163214806133445750600254600160a060020a031633145b151561334f57600080fd5b60218054600160a060020a031916600160a060020a0392909216919091179055565b60006023826040518082805190602001908083835b602083106133a55780518252601f199092019160209182019101613386565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054949350505050565b600254600160a060020a031681565b602154600160a060020a031681565b600254600160a060020a031632148061341a5750600254600160a060020a031633145b151561342557600080fd5b805161343890601c9060208401906159a3565b5050565b50600190565b61344a6131dd565b151561345557600080fd5b600d5460ff161561346557600080fd5b805160801161347357600080fd5b805161348690600c9060208401906159a3565b50600d805460ff191660011790556003547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a03166134ca611447565b60408051600160a060020a038085168252831660208201526060918101828152600c8054600260001961010060018416150201909116049383018490529260808301908490801561355c5780601f106135315761010080835404028352916020019161355c565b820191906000526020600020905b81548152906001019060200180831161353f57829003601f168201915b505094505050505060405180910390a150565b601080548290811061282257fe5b600080805b6011548110156135cd5783600160a060020a03166010828154811015156135a557fe5b600091825260209091200154600160a060020a031614156135c557600191505b600101613582565b5092915050565b600254600160a060020a03163214806135f75750600254600160a060020a031633145b151561360257600080fd5b60208054600160a060020a031916600160a060020a0392909216919091179055565b326000908152601460205260408120548190600160a060020a031615156136545761364d613249565b905061366f565b5032600090815260146020526040902054600160a060020a03165b60408051600160a060020a038316815290517f1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e1579181900360200190a1919050565b600254600160a060020a03163214806136d35750600254600160a060020a031633145b15156136de57600080fd5b806024836040518082805190602001908083835b602083106137115780518252601f1990920191602091820191016136f2565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161375295919491909101925090506159a3565b505050565b336000908152602260205260408120548190600160a060020a0316151561377d57600080fd5b50336000908152602260205260408082208054600160a060020a0319811690915581517f41c0e1b50000000000000000000000000000000000000000000000000000000081529151600160a060020a039091169283926341c0e1b5926004808301939282900301818387803b1580156137f557600080fd5b505af1158015613809573d6000803e3d6000fd5b505060408051600160a060020a038516815290517fb98695ab4c6cedb3b4dfe62479a9d39a59aa2cb38b8bd92bbb6ce5856e42bdf49350908190036020019150a15090565b60606000806020845111151561390857505081518083015160008181526004602090815260409182902080548351601f6002610100600185161502600019019093169290920491820184900484028101840190945280845293949390918301828280156138fc5780601f106138d1576101008083540402835291602001916138fc565b820191906000526020600020905b8154815290600101906020018083116138df57829003601f168201915b50505050509250611cf5565b6005846040518082805190602001908083835b6020831061393a5780518252601f19909201916020918201910161391b565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156139ee5780601f106139c3576101008083540402835291602001916139ee565b820191906000526020600020905b8154815290600101906020018083116139d157829003601f168201915b505050505092505050919050565b600354600160a060020a031681565b601e54600160a060020a031681565b600254600090600160a060020a0316321480613a405750600254600160a060020a031633145b1515613a4b57600080fd5b5060005b6016548110156134385781600160a060020a0316601682815481101515613a7257fe5b600091825260209091200154600160a060020a03161415613ade57613a9a8160166017615611565b60408051338152600160a060020a038416602082015281517f41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d929181900390910190a15b600101613a4f565b600080601d60009054906101000a9004600160a060020a0316600160a060020a031663b8cfaf056040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613b3c57600080fd5b505af1158015613b50573d6000803e3d6000fd5b505050506040513d6020811015613b6657600080fd5b505160408051600160a060020a038316815290519192507f9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8919081900360200190a1919050565b602154604080517fbf4e088f000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152848116602483015291516000938493169163bf4e088f91604480830192602092919082900301818787803b158015613c1e57600080fd5b505af1158015613c32573d6000803e3d6000fd5b505050506040513d6020811015613c4857600080fd5b505160408051600160a060020a038316815290519192507fa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce919081900360200190a19392505050565b600254600160a060020a0316331480613cad5750613cad61169a565b1515613cb857600080fd5b60408051602080825260088054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b6593909291829182019084908015613d575780601f10613d2c57610100808354040283529160200191613d57565b820191906000526020600020905b815481529060010190602001808311613d3a57829003601f168201915b50509250505060405180910390a1565b601d54600160a060020a031681565b601f54600160a060020a031681565b60115481565b6040805132815290516000917f53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca919081900360200190a190565b600254600160a060020a0316321480613de85750600254600160a060020a031633145b1515613df357600080fd5b600f8054600160a060020a031916600160a060020a0392909216919091179055565b60006060613e228361290c565b90506023816040518082805190602001908083835b60208310613e565780518252601f199092019160209182019101613e37565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205495945050505050565b6002546000908190600160a060020a0316321480613eb35750600254600160a060020a031633145b1515613ebe57600080fd5b5060009050805b6018548110156140c05782600160a060020a0316601882815481101515613ee857fe5b600091825260209091200154600160a060020a031614156140b8576016601882815481101515613f1457fe5b6000918252602080832090910154835460018101855593835291209091018054600160a060020a031916600160a060020a03909216919091179055601980546017919083908110613f6157fe5b60009182526020808320845460018181018088559686529290942092018054613fa59493909301929091600261010091831615919091026000190190911604615a1d565b50507fd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54601882815481101515613fd757fe5b60009182526020909120015460198054600160a060020a039092169184908110613ffd57fe5b600091825260209182902060408051600160a060020a03861681529384018181529190920180546002600019610100600184161502019091160492840183905292916060830190849080156140935780601f1061406857610100808354040283529160200191614093565b820191906000526020600020905b81548152906001019060200180831161407657829003601f168201915b5050935050505060405180910390a16140af8160186019615611565b600191506140c0565b600101613ec5565b81151561375257600080fd5b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156114ec5780601f106114c1576101008083540402835291602001916114ec565b6000806000806000806141386131dd565b151561414357600080fd5b866040516020018082805190602001908083835b602083106141765780518252601f199092019160209182019101614157565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106141d95780518252601f1990920191602091820191016141ba565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209450600860405160200180828054600181600116156101000203166002900480156142685780601f10614246576101008083540402835291820191614268565b820191906000526020600020905b815481529060010190602001808311614254575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106142ab5780518252601f19909201916020918201910161428c565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209650505050848414156143cc576040805160208101918290526000908190526142ff916008916159a3565b506000600981905560035460408051600160a060020a03909216808352908201839052606060208084018281528c51928501929092528b517f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f519593948d9493909290916080840191860190808383885b8381101561438757818101518382015260200161436f565b50505050905090810190601f1680156143b45780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600095506146c5565b6000199250600091505b600a548210156145e257600a8054839081106143ee57fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156144565780601f10614434576101008083540402835291820191614456565b820191906000526020600020905b815481529060010190602001808311614442575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106144995780518252601f19909201916020918201910161447a565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209350505050848114156145d757600a8054839081106144dd57fe5b9060005260206000200160006144f39190615b3c565b600b80548390811061450157fe5b6000918252602082200155600a546000190182146145a757600a8054600019810190811061452b57fe5b90600052602060002001600a8381548110151561454457fe5b90600052602060002001908054600181600116156101000203166002900461456d929190615a1d565b50600b8054600019810190811061458057fe5b9060005260206000200154600b8381548110151561459a57fe5b6000918252602090912001555b600a8054906145ba906000198301615b83565b50600b8054906145ce906000198301615ba7565b508192506145e2565b6001909101906143d6565b6000198314156145f157600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600360009054906101000a9004600160a060020a031688856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561468557818101518382015260200161466d565b50505050905090810190601f1680156146b25780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18295505b5050505050919050565b6002546000908190600160a060020a03163214806146f75750600254600160a060020a031633145b151561470257600080fd5b835160201061473b57505081518083015160008181526004602090815260409091208451929392614735928601906159a3565b506147b1565b826005856040518082805190602001908083835b6020831061476e5780518252601f19909201916020918201910161474f565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932084516147af95919491909101925090506159a3565b505b50505050565b60025460009081908190600160a060020a03163314806147df575060006147dd33613e15565b115b15156147ea57600080fd5b88518a51146147f857600080fd5b875189511461480657600080fd5b865188511461481457600080fd5b855187511461482257600080fd5b845186511461483057600080fd5b835185511461483e57600080fd5b600092505b89518310156149b157868381518110151561485a57fe5b90602001906020020151915081600160a060020a031663508ad278338c8681518110151561488457fe5b906020019060200201518c8781518110151561489c57fe5b906020019060200201518c888151811015156148b457fe5b906020019060200201518b898151811015156148cc57fe5b906020019060200201518b8a8151811015156148e457fe5b906020019060200201518b8b8151811015156148fc57fe5b60209081029091018101516040805160e060020a63ffffffff8c16028152600160a060020a03998a16600482015260ff90981660248901526044880196909652606487019490945291909516608485015260a484019490945260c48301525160e480830193928290030181600087803b15801561497857600080fd5b505af115801561498c573d6000803e3d6000fd5b505050506040513d60208110156149a257600080fd5b50519050600190920191614843565b50505050505050505050565b6040516000907fed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88908290a150600190565b600254600160a060020a0316321480614a115750600254600160a060020a031633145b1515614a1c57600080fd5b600160a060020a0381161515614a3157600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b60195490565b602260205260009081526040902054600160a060020a031681565b60025460009081908190600160a060020a0316321480614a9e5750600254600160a060020a031633145b1515614aa957600080fd5b50506011546000190160005b601154811015611cf05783600160a060020a0316601082815481101515614ad857fe5b600091825260209091200154600160a060020a03161415614c0f576010805482908110614b0157fe5b60009182526020909120018054600160a060020a0319169055808214614ba6576010805483908110614b2f57fe5b60009182526020909120015460108054600160a060020a039092169183908110614b5557fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556010805483908110614b8c57fe5b60009182526020909120018054600160a060020a03191690555b6011829055600160a060020a0384166000818152601260209081526040918290208054600160a060020a0319169055815192835290517fd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e29281900390910190a160019250611cf5565b600101614ab5565b6002546000906060908290600160a060020a0316321480614c425750600254600160a060020a031633145b1515614c4d57600080fd5b6023856040518082805190602001908083835b60208310614c7f5780518252601f199092019160209182019101614c60565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208054808402870184019092528186529350915060009084015b82821015614d6f5760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015614d5b5780601f10614d3057610100808354040283529160200191614d5b565b820191906000526020600020905b815481529060010190602001808311614d3e57829003601f168201915b505050505081526020019060010190614cc4565b505050509150600090505b815181101561505f57836040518082805190602001908083835b60208310614db35780518252601f199092019160209182019101614d94565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912085519093508592508491508110614def57fe5b906020019060200201516040518082805190602001908083835b60208310614e285780518252601f199092019160209182019101614e09565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415615057578151600019018114614f1357815182906000198101908110614e7d57fe5b906020019060200201516023866040518082805190602001908083835b60208310614eb95780518252601f199092019160209182019101614e9a565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922080549092508491508110614ef457fe5b906000526020600020019080519060200190614f119291906159a3565b505b6023856040518082805190602001908083835b60208310614f455780518252601f199092019160209182019101614f26565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001835103815481101515614f8957fe5b906000526020600020016000614f9f9190615b3c565b60016023866040518082805190602001908083835b60208310614fd35780518252601f199092019160209182019101614fb4565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805493909303926150129250905082615bcb565b50604080513381526000602082015281517f5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c929181900390910190a160019250612fc3565b600101614d7a565b604080513381526001602082015281517f5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c929181900390910190a1506000949350505050565b600080845186511415156150b857600080fd5b5060005b85518110156151e557826040518082805190602001908083835b602083106150f55780518252601f1990920191602091820191016150d6565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091208851909350889250849150811061513157fe5b906020019060200201516040518082805190602001908083835b6020831061516a5780518252601f19909201916020918201910161514b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614806151cf575083600160a060020a031686828151811015156151ba57fe5b90602001906020020151600160a060020a0316145b156151dd57600191506151ea565b6001016150bc565b600091505b50949350505050565b6060600080825b855182101561523b57615224868381518110151561521457fe5b9060200190602002015186615767565b15615230576001909201915b6001909101906151fa565b8260405190808252806020026020018201604052801561526f57816020015b606081526020019060019003908161525a5790505b509050821515615281578093506152ef565b60009250600091505b85518210156152eb576152a4868381518110151561521457fe5b156152e05785828151811015156152b757fe5b9060200190602002015181848151811015156152cf57fe5b602090810290910101526001909201915b60019091019061528a565b8093505b50505092915050565b600b90565b604080517f6d616b654944537472696e6728696e742c6164647265737329000000000000008152905190819003601901812080825260e060020a8402600483018190526008830184905260609260ff90848160288160008681f180151561536357600080fd5b50606081016040529695505050505050565b61537d615a92565b50604080518082019091528151815260209182019181019190915290565b60008082600001516153bf856000015186602001518660000151876020015161582e565b0190505b835160208501510181116135cd5782516020808601518651918601516001909501946153f992918503909103908490849061582e565b0190506153c3565b615409615a92565b6135cd8383836158ee565b606080600083600001516040519080825280601f01601f19166020018201604052801561544b578160200160208202803883390190505b5091506020820190506135cd818560200151866000015161595f565b600160a060020a03808216600090815260146020526040812054909182918291161561549257600080fd5b601f60009054906101000a9004600160a060020a0316600160a060020a0316637708bc416040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156154e557600080fd5b505af11580156154f9573d6000803e3d6000fd5b505050506040513d602081101561550f57600080fd5b50519150600160a060020a03841632146155a15750604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151839283169163f2fde38b91602480830192600092919082900301818387803b15801561558857600080fd5b505af115801561559c573d6000803e3d6000fd5b505050505b60408051600160a060020a038416815290517f56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca9181900360200190a150600160a060020a0392831660009081526014602052604090208054600160a060020a031916938216939093179092555090565b8154831080156156215750805483105b151561562c57600080fd5b81546000190183146156f35780548190600019810190811061564a57fe5b90600052602060002001818481548110151561566257fe5b90600052602060002001908054600181600116156101000203166002900461568b929190615a1d565b5081548290600019810190811061569e57fe5b6000918252602090912001548254600160a060020a03909116908390859081106156c457fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b80548190600019810190811061570557fe5b90600052602060002001600061571b9190615b3c565b805461572b826000198301615bcb565b5081548290600019810190811061573e57fe5b60009182526020909120018054600160a060020a031916905581546147b1836000198301615ba7565b600080600083519150845182111561577e57845191505b5060005b8181101561582357838181518110151561579857fe5b90602001015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191685828151811015156157db57fe5b60209101015160f860020a90819004027fff00000000000000000000000000000000000000000000000000000000000000161461581b5760009250612fc3565b600101615782565b506001949350505050565b600083818080808080808c8b116158d85760208b116158a15760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b82851461589957838810615886578c8c0198506158de565b878060010198505085885116925061586e565b8798506158de565b8a8a209150600096505b8a8d0387116158d85750898720818114156158c8578798506158de565b60019788019796909601956158ab565b8c8c0198505b5050505050505050949350505050565b6158f6615a92565b6000615914856000015186602001518660000151876020015161582e565b602080870180519186019190915280518203855286519051919250018114156159405760008552615956565b8351835186519101900385528351810160208601525b50909392505050565b60005b60208210615984578251845260209384019390920191601f1990910190615962565b50905182516020929092036101000a6000190180199091169116179052565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106159e457805160ff1916838001178555615a11565b82800160010185558215615a11579182015b82811115615a115782518255916020019190600101906159f6565b50612908929150615bef565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615a565780548555615a11565b82800160010185558215615a1157600052602060002091601f016020900482015b82811115615a11578254825591600101919060010190615a77565b604080518082019091526000808252602082015290565b828054828255906000526020600020908101928215615af6579160200282015b82811115615af65782518051615ae69184916020909101906159a3565b5091602001919060010190615ac9565b50612908929150615c09565b828054828255906000526020600020908101928215615a115791602002820182811115615a115782518255916020019190600101906159f6565b50805460018160011615610100020316600290046000825580601f10615b625750615b80565b601f016020900490600052602060002090810190615b809190615bef565b50565b81548183558181111561375257600083815260209020613752918101908301615c09565b81548183558181111561375257600083815260209020613752918101908301615bef565b81548183558181111561375257600083815260209020613752918101908301615c2c565b61145491905b808211156129085760008155600101615bf5565b61145491905b80821115612908576000615c238282615b3c565b50600101615c0f565b61145491905b80821115612908576000615c468282615b3c565b50600101615c325600a165627a7a72305820ee5e0c8c721ffd7882bc7c3bfc57695bb09bdf8178afdf82ad3c29fd919562780029"

// DeployBaseContentSpace deploys a new Ethereum contract, binding an instance of BaseContentSpace to it.
func DeployBaseContentSpace(auth *bind.TransactOpts, backend bind.ContractBackend, content_space_name string) (common.Address, *types.Transaction, *BaseContentSpace, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentSpaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseContentSpaceBin), backend, content_space_name)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentSpace{BaseContentSpaceCaller: BaseContentSpaceCaller{contract: contract}, BaseContentSpaceTransactor: BaseContentSpaceTransactor{contract: contract}, BaseContentSpaceFilterer: BaseContentSpaceFilterer{contract: contract}}, nil
}

// BaseContentSpace is an auto generated Go binding around an Ethereum contract.
type BaseContentSpace struct {
	BaseContentSpaceCaller     // Read-only binding to the contract
	BaseContentSpaceTransactor // Write-only binding to the contract
	BaseContentSpaceFilterer   // Log filterer for contract events
}

// BaseContentSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseContentSpaceSession struct {
	Contract     *BaseContentSpace // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseContentSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseContentSpaceCallerSession struct {
	Contract *BaseContentSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// BaseContentSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseContentSpaceTransactorSession struct {
	Contract     *BaseContentSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// BaseContentSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseContentSpaceRaw struct {
	Contract *BaseContentSpace // Generic contract binding to access the raw methods on
}

// BaseContentSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseContentSpaceCallerRaw struct {
	Contract *BaseContentSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// BaseContentSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseContentSpaceTransactorRaw struct {
	Contract *BaseContentSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseContentSpace creates a new instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpace(address common.Address, backend bind.ContractBackend) (*BaseContentSpace, error) {
	contract, err := bindBaseContentSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpace{BaseContentSpaceCaller: BaseContentSpaceCaller{contract: contract}, BaseContentSpaceTransactor: BaseContentSpaceTransactor{contract: contract}, BaseContentSpaceFilterer: BaseContentSpaceFilterer{contract: contract}}, nil
}

// NewBaseContentSpaceCaller creates a new read-only instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceCaller(address common.Address, caller bind.ContractCaller) (*BaseContentSpaceCaller, error) {
	contract, err := bindBaseContentSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCaller{contract: contract}, nil
}

// NewBaseContentSpaceTransactor creates a new write-only instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentSpaceTransactor, error) {
	contract, err := bindBaseContentSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceTransactor{contract: contract}, nil
}

// NewBaseContentSpaceFilterer creates a new log filterer instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentSpaceFilterer, error) {
	contract, err := bindBaseContentSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceFilterer{contract: contract}, nil
}

// bindBaseContentSpace binds a generic wrapper to an already deployed contract.
func bindBaseContentSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentSpace *BaseContentSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentSpace.Contract.BaseContentSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentSpace *BaseContentSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.BaseContentSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentSpace *BaseContentSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.BaseContentSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentSpace *BaseContentSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentSpace *BaseContentSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentSpace *BaseContentSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.contract.Transact(opts, method, params...)
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ActiveNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "activeNodeAddresses", arg0)
	return *ret0, err
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ActiveNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.ActiveNodeAddresses(&_BaseContentSpace.CallOpts, arg0)
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ActiveNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.ActiveNodeAddresses(&_BaseContentSpace.CallOpts, arg0)
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) ActiveNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "activeNodeLocators", arg0)
	return *ret0, err
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceSession) ActiveNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _BaseContentSpace.Contract.ActiveNodeLocators(&_BaseContentSpace.CallOpts, arg0)
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ActiveNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _BaseContentSpace.Contract.ActiveNodeLocators(&_BaseContentSpace.CallOpts, arg0)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) AddressKMS() (common.Address, error) {
	return _BaseContentSpace.Contract.AddressKMS(&_BaseContentSpace.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) AddressKMS() (common.Address, error) {
	return _BaseContentSpace.Contract.AddressKMS(&_BaseContentSpace.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanCommit() (bool, error) {
	return _BaseContentSpace.Contract.CanCommit(&_BaseContentSpace.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanCommit() (bool, error) {
	return _BaseContentSpace.Contract.CanCommit(&_BaseContentSpace.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanConfirm() (bool, error) {
	return _BaseContentSpace.Contract.CanConfirm(&_BaseContentSpace.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanConfirm() (bool, error) {
	return _BaseContentSpace.Contract.CanConfirm(&_BaseContentSpace.CallOpts)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canContribute", _candidate)
	return *ret0, err
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanContribute(&_BaseContentSpace.CallOpts, _candidate)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanContribute(&_BaseContentSpace.CallOpts, _candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canNodePublish", candidate)
	return *ret0, err
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanNodePublish(&_BaseContentSpace.CallOpts, candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanNodePublish(&_BaseContentSpace.CallOpts, candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canPublish", _candidate)
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanPublish(&_BaseContentSpace.CallOpts, _candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanPublish(&_BaseContentSpace.CallOpts, _candidate)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canReview", arg0)
	return *ret0, err
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanReview(arg0 common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanReview(&_BaseContentSpace.CallOpts, arg0)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanReview(arg0 common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanReview(&_BaseContentSpace.CallOpts, arg0)
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CheckKMS(opts *bind.CallOpts, _kmsIdStr string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "checkKMS", _kmsIdStr)
	return *ret0, err
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) CheckKMS(_kmsIdStr string) (*big.Int, error) {
	return _BaseContentSpace.Contract.CheckKMS(&_BaseContentSpace.CallOpts, _kmsIdStr)
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CheckKMS(_kmsIdStr string) (*big.Int, error) {
	return _BaseContentSpace.Contract.CheckKMS(&_BaseContentSpace.CallOpts, _kmsIdStr)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CheckKMSAddr(opts *bind.CallOpts, _kmsAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "checkKMSAddr", _kmsAddr)
	return *ret0, err
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _BaseContentSpace.Contract.CheckKMSAddr(&_BaseContentSpace.CallOpts, _kmsAddr)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _BaseContentSpace.Contract.CheckKMSAddr(&_BaseContentSpace.CallOpts, _kmsAddr)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CommitPending() (bool, error) {
	return _BaseContentSpace.Contract.CommitPending(&_BaseContentSpace.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CommitPending() (bool, error) {
	return _BaseContentSpace.Contract.CommitPending(&_BaseContentSpace.CallOpts)
}

// ContentFactory is a free data retrieval call binding the contract method 0x904696a8.
//
// Solidity: function contentFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentFactory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentFactory")
	return *ret0, err
}

// ContentFactory is a free data retrieval call binding the contract method 0x904696a8.
//
// Solidity: function contentFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ContentFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.ContentFactory(&_BaseContentSpace.CallOpts)
}

// ContentFactory is a free data retrieval call binding the contract method 0x904696a8.
//
// Solidity: function contentFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.ContentFactory(&_BaseContentSpace.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ContentSpace() (common.Address, error) {
	return _BaseContentSpace.Contract.ContentSpace(&_BaseContentSpace.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentSpace() (common.Address, error) {
	return _BaseContentSpace.Contract.ContentSpace(&_BaseContentSpace.CallOpts)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentTypeContracts", arg0)
	return *ret0, err
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.ContentTypeContracts(&_BaseContentSpace.CallOpts, arg0)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.ContentTypeContracts(&_BaseContentSpace.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentTypes", arg0)
	return *ret0, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.ContentTypes(&_BaseContentSpace.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.ContentTypes(&_BaseContentSpace.CallOpts, arg0)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentTypesLength")
	return *ret0, err
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) ContentTypesLength() (*big.Int, error) {
	return _BaseContentSpace.Contract.ContentTypesLength(&_BaseContentSpace.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentTypesLength() (*big.Int, error) {
	return _BaseContentSpace.Contract.ContentTypesLength(&_BaseContentSpace.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContentSpace.Contract.CountVersionHashes(&_BaseContentSpace.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContentSpace.Contract.CountVersionHashes(&_BaseContentSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) Creator() (common.Address, error) {
	return _BaseContentSpace.Contract.Creator(&_BaseContentSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Creator() (common.Address, error) {
	return _BaseContentSpace.Contract.Creator(&_BaseContentSpace.CallOpts)
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) Description(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "description")
	return *ret0, err
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) Description() (string, error) {
	return _BaseContentSpace.Contract.Description(&_BaseContentSpace.CallOpts)
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Description() (string, error) {
	return _BaseContentSpace.Contract.Description(&_BaseContentSpace.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "factory")
	return *ret0, err
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) Factory() (common.Address, error) {
	return _BaseContentSpace.Contract.Factory(&_BaseContentSpace.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Factory() (common.Address, error) {
	return _BaseContentSpace.Contract.Factory(&_BaseContentSpace.CallOpts)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "findTypeByHash", typeHash)
	return *ret0, err
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseContentSpace.Contract.FindTypeByHash(&_BaseContentSpace.CallOpts, typeHash)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseContentSpace.Contract.FindTypeByHash(&_BaseContentSpace.CallOpts, typeHash)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) GetKMSID(opts *bind.CallOpts, _kmsAddr common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "getKMSID", _kmsAddr)
	return *ret0, err
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _BaseContentSpace.Contract.GetKMSID(&_BaseContentSpace.CallOpts, _kmsAddr)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _BaseContentSpace.Contract.GetKMSID(&_BaseContentSpace.CallOpts, _kmsAddr)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_BaseContentSpace *BaseContentSpaceCaller) GetKMSInfo(opts *bind.CallOpts, _kmsID string, prefix []byte) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _BaseContentSpace.contract.Call(opts, out, "getKMSInfo", _kmsID, prefix)
	return *ret0, *ret1, err
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_BaseContentSpace *BaseContentSpaceSession) GetKMSInfo(_kmsID string, prefix []byte) (string, string, error) {
	return _BaseContentSpace.Contract.GetKMSInfo(&_BaseContentSpace.CallOpts, _kmsID, prefix)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) GetKMSInfo(_kmsID string, prefix []byte) (string, string, error) {
	return _BaseContentSpace.Contract.GetKMSInfo(&_BaseContentSpace.CallOpts, _kmsID, prefix)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseContentSpace.Contract.GetMeta(&_BaseContentSpace.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseContentSpace.Contract.GetMeta(&_BaseContentSpace.CallOpts, key)
}

// GroupFactory is a free data retrieval call binding the contract method 0xb04b6caa.
//
// Solidity: function groupFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) GroupFactory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "groupFactory")
	return *ret0, err
}

// GroupFactory is a free data retrieval call binding the contract method 0xb04b6caa.
//
// Solidity: function groupFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) GroupFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.GroupFactory(&_BaseContentSpace.CallOpts)
}

// GroupFactory is a free data retrieval call binding the contract method 0xb04b6caa.
//
// Solidity: function groupFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) GroupFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.GroupFactory(&_BaseContentSpace.CallOpts)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address ) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) HasAccess(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "hasAccess", arg0)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address ) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) HasAccess(arg0 common.Address) (bool, error) {
	return _BaseContentSpace.Contract.HasAccess(&_BaseContentSpace.CallOpts, arg0)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address ) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) HasAccess(arg0 common.Address) (bool, error) {
	return _BaseContentSpace.Contract.HasAccess(&_BaseContentSpace.CallOpts, arg0)
}

// LibraryFactory is a free data retrieval call binding the contract method 0x441c5aa3.
//
// Solidity: function libraryFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) LibraryFactory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "libraryFactory")
	return *ret0, err
}

// LibraryFactory is a free data retrieval call binding the contract method 0x441c5aa3.
//
// Solidity: function libraryFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) LibraryFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.LibraryFactory(&_BaseContentSpace.CallOpts)
}

// LibraryFactory is a free data retrieval call binding the contract method 0x441c5aa3.
//
// Solidity: function libraryFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) LibraryFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.LibraryFactory(&_BaseContentSpace.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) Name() (string, error) {
	return _BaseContentSpace.Contract.Name(&_BaseContentSpace.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Name() (string, error) {
	return _BaseContentSpace.Contract.Name(&_BaseContentSpace.CallOpts)
}

// NodeMapping is a free data retrieval call binding the contract method 0xfbd1b4ce.
//
// Solidity: function nodeMapping(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) NodeMapping(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "nodeMapping", arg0)
	return *ret0, err
}

// NodeMapping is a free data retrieval call binding the contract method 0xfbd1b4ce.
//
// Solidity: function nodeMapping(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) NodeMapping(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.NodeMapping(&_BaseContentSpace.CallOpts, arg0)
}

// NodeMapping is a free data retrieval call binding the contract method 0xfbd1b4ce.
//
// Solidity: function nodeMapping(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) NodeMapping(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.NodeMapping(&_BaseContentSpace.CallOpts, arg0)
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) NumActiveNodes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "numActiveNodes")
	return *ret0, err
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) NumActiveNodes() (*big.Int, error) {
	return _BaseContentSpace.Contract.NumActiveNodes(&_BaseContentSpace.CallOpts)
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) NumActiveNodes() (*big.Int, error) {
	return _BaseContentSpace.Contract.NumActiveNodes(&_BaseContentSpace.CallOpts)
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) NumPendingNodes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "numPendingNodes")
	return *ret0, err
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) NumPendingNodes() (*big.Int, error) {
	return _BaseContentSpace.Contract.NumPendingNodes(&_BaseContentSpace.CallOpts)
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) NumPendingNodes() (*big.Int, error) {
	return _BaseContentSpace.Contract.NumPendingNodes(&_BaseContentSpace.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) ObjectHash() (string, error) {
	return _BaseContentSpace.Contract.ObjectHash(&_BaseContentSpace.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ObjectHash() (string, error) {
	return _BaseContentSpace.Contract.ObjectHash(&_BaseContentSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) Owner() (common.Address, error) {
	return _BaseContentSpace.Contract.Owner(&_BaseContentSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Owner() (common.Address, error) {
	return _BaseContentSpace.Contract.Owner(&_BaseContentSpace.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ParentAddress() (common.Address, error) {
	return _BaseContentSpace.Contract.ParentAddress(&_BaseContentSpace.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ParentAddress() (common.Address, error) {
	return _BaseContentSpace.Contract.ParentAddress(&_BaseContentSpace.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) PendingHash() (string, error) {
	return _BaseContentSpace.Contract.PendingHash(&_BaseContentSpace.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) PendingHash() (string, error) {
	return _BaseContentSpace.Contract.PendingHash(&_BaseContentSpace.CallOpts)
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "pendingNodeAddresses", arg0)
	return *ret0, err
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) PendingNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.PendingNodeAddresses(&_BaseContentSpace.CallOpts, arg0)
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) PendingNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.PendingNodeAddresses(&_BaseContentSpace.CallOpts, arg0)
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "pendingNodeLocators", arg0)
	return *ret0, err
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceSession) PendingNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _BaseContentSpace.Contract.PendingNodeLocators(&_BaseContentSpace.CallOpts, arg0)
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCallerSession) PendingNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _BaseContentSpace.Contract.PendingNodeLocators(&_BaseContentSpace.CallOpts, arg0)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "requiresReview")
	return *ret0, err
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) RequiresReview() (bool, error) {
	return _BaseContentSpace.Contract.RequiresReview(&_BaseContentSpace.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) RequiresReview() (bool, error) {
	return _BaseContentSpace.Contract.RequiresReview(&_BaseContentSpace.CallOpts)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) UserWallets(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "userWallets", arg0)
	return *ret0, err
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) UserWallets(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.UserWallets(&_BaseContentSpace.CallOpts, arg0)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) UserWallets(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.UserWallets(&_BaseContentSpace.CallOpts, arg0)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "validType", content_type)
	return *ret0, err
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseContentSpace.Contract.ValidType(&_BaseContentSpace.CallOpts, content_type)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseContentSpace.Contract.ValidType(&_BaseContentSpace.CallOpts, content_type)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceSession) Version() ([32]byte, error) {
	return _BaseContentSpace.Contract.Version(&_BaseContentSpace.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Version() ([32]byte, error) {
	return _BaseContentSpace.Contract.Version(&_BaseContentSpace.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContentSpace.Contract.VersionHashes(&_BaseContentSpace.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContentSpace.Contract.VersionHashes(&_BaseContentSpace.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContentSpace.Contract.VersionTimestamp(&_BaseContentSpace.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContentSpace.Contract.VersionTimestamp(&_BaseContentSpace.CallOpts, arg0)
}

// WalletFactory is a free data retrieval call binding the contract method 0xc5c03699.
//
// Solidity: function walletFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) WalletFactory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "walletFactory")
	return *ret0, err
}

// WalletFactory is a free data retrieval call binding the contract method 0xc5c03699.
//
// Solidity: function walletFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) WalletFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.WalletFactory(&_BaseContentSpace.CallOpts)
}

// WalletFactory is a free data retrieval call binding the contract method 0xc5c03699.
//
// Solidity: function walletFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) WalletFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.WalletFactory(&_BaseContentSpace.CallOpts)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "whitelistedType", content_type)
	return *ret0, err
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseContentSpace.Contract.WhitelistedType(&_BaseContentSpace.CallOpts, content_type)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseContentSpace.Contract.WhitelistedType(&_BaseContentSpace.CallOpts, content_type)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) AccessRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "accessRequest")
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) AccessRequest() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AccessRequest(&_BaseContentSpace.TransactOpts)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) AccessRequest() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AccessRequest(&_BaseContentSpace.TransactOpts)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseContentSpace *BaseContentSpaceSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddContentType(&_BaseContentSpace.TransactOpts, content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddContentType(&_BaseContentSpace.TransactOpts, content_type, content_contract)
}

// AddKMSLocator is a paid mutator transaction binding the contract method 0x653a92f6.
//
// Solidity: function addKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) AddKMSLocator(opts *bind.TransactOpts, _kmsID string, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "addKMSLocator", _kmsID, _locator)
}

// AddKMSLocator is a paid mutator transaction binding the contract method 0x653a92f6.
//
// Solidity: function addKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) AddKMSLocator(_kmsID string, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddKMSLocator(&_BaseContentSpace.TransactOpts, _kmsID, _locator)
}

// AddKMSLocator is a paid mutator transaction binding the contract method 0x653a92f6.
//
// Solidity: function addKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) AddKMSLocator(_kmsID string, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddKMSLocator(&_BaseContentSpace.TransactOpts, _kmsID, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) AddNode(opts *bind.TransactOpts, _nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "addNode", _nodeAddr, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceSession) AddNode(_nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddNode(&_BaseContentSpace.TransactOpts, _nodeAddr, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) AddNode(_nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddNode(&_BaseContentSpace.TransactOpts, _nodeAddr, _locator)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) ApproveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "approveNode", _nodeAddr)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceSession) ApproveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ApproveNode(&_BaseContentSpace.TransactOpts, _nodeAddr)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) ApproveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ApproveNode(&_BaseContentSpace.TransactOpts, _nodeAddr)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentSpace *BaseContentSpaceSession) ClearPending() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ClearPending(&_BaseContentSpace.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ClearPending(&_BaseContentSpace.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentSpace *BaseContentSpaceSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Commit(&_BaseContentSpace.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Commit(&_BaseContentSpace.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ConfirmCommit(&_BaseContentSpace.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ConfirmCommit(&_BaseContentSpace.TransactOpts)
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createAccessWallet")
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateAccessWallet() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateAccessWallet(&_BaseContentSpace.TransactOpts)
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateAccessWallet() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateAccessWallet(&_BaseContentSpace.TransactOpts)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createContent", lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateContent(&_BaseContentSpace.TransactOpts, lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateContent(&_BaseContentSpace.TransactOpts, lib, content_type)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createContentType")
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateContentType() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateContentType(&_BaseContentSpace.TransactOpts)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateContentType() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateContentType(&_BaseContentSpace.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createGroup")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateGroup() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateGroup(&_BaseContentSpace.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateGroup() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateGroup(&_BaseContentSpace.TransactOpts)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateLibrary(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createLibrary", address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateLibrary(&_BaseContentSpace.TransactOpts, address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateLibrary(&_BaseContentSpace.TransactOpts, address_KMS)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentSpace *BaseContentSpaceTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentSpace *BaseContentSpaceSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.DeleteVersion(&_BaseContentSpace.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.DeleteVersion(&_BaseContentSpace.TransactOpts, _versionHash)
}

// EngageAccountLibrary is a paid mutator transaction binding the contract method 0xc82710c1.
//
// Solidity: function engageAccountLibrary() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) EngageAccountLibrary(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "engageAccountLibrary")
}

// EngageAccountLibrary is a paid mutator transaction binding the contract method 0xc82710c1.
//
// Solidity: function engageAccountLibrary() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) EngageAccountLibrary() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.EngageAccountLibrary(&_BaseContentSpace.TransactOpts)
}

// EngageAccountLibrary is a paid mutator transaction binding the contract method 0xc82710c1.
//
// Solidity: function engageAccountLibrary() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) EngageAccountLibrary() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.EngageAccountLibrary(&_BaseContentSpace.TransactOpts)
}

// ExecuteBatch is a paid mutator transaction binding the contract method 0xe9861ab1.
//
// Solidity: function executeBatch(uint8[] _v, bytes32[] _r, bytes32[] _s, address[] _from, address[] _dest, uint256[] _value, uint256[] _ts) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) ExecuteBatch(opts *bind.TransactOpts, _v []uint8, _r [][32]byte, _s [][32]byte, _from []common.Address, _dest []common.Address, _value []*big.Int, _ts []*big.Int) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "executeBatch", _v, _r, _s, _from, _dest, _value, _ts)
}

// ExecuteBatch is a paid mutator transaction binding the contract method 0xe9861ab1.
//
// Solidity: function executeBatch(uint8[] _v, bytes32[] _r, bytes32[] _s, address[] _from, address[] _dest, uint256[] _value, uint256[] _ts) returns()
func (_BaseContentSpace *BaseContentSpaceSession) ExecuteBatch(_v []uint8, _r [][32]byte, _s [][32]byte, _from []common.Address, _dest []common.Address, _value []*big.Int, _ts []*big.Int) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ExecuteBatch(&_BaseContentSpace.TransactOpts, _v, _r, _s, _from, _dest, _value, _ts)
}

// ExecuteBatch is a paid mutator transaction binding the contract method 0xe9861ab1.
//
// Solidity: function executeBatch(uint8[] _v, bytes32[] _r, bytes32[] _s, address[] _from, address[] _dest, uint256[] _value, uint256[] _ts) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) ExecuteBatch(_v []uint8, _r [][32]byte, _s [][32]byte, _from []common.Address, _dest []common.Address, _value []*big.Int, _ts []*big.Int) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ExecuteBatch(&_BaseContentSpace.TransactOpts, _v, _r, _s, _from, _dest, _value, _ts)
}

// GetAccessWallet is a paid mutator transaction binding the contract method 0xa2d67fcf.
//
// Solidity: function getAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) GetAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "getAccessWallet")
}

// GetAccessWallet is a paid mutator transaction binding the contract method 0xa2d67fcf.
//
// Solidity: function getAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) GetAccessWallet() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.GetAccessWallet(&_BaseContentSpace.TransactOpts)
}

// GetAccessWallet is a paid mutator transaction binding the contract method 0xa2d67fcf.
//
// Solidity: function getAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) GetAccessWallet() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.GetAccessWallet(&_BaseContentSpace.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentSpace *BaseContentSpaceSession) Kill() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Kill(&_BaseContentSpace.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Kill(&_BaseContentSpace.TransactOpts)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) MigrateEditable(opts *bind.TransactOpts, _owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "migrateEditable", _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseContentSpace *BaseContentSpaceSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.MigrateEditable(&_BaseContentSpace.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.MigrateEditable(&_BaseContentSpace.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "publish", contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Publish(&_BaseContentSpace.TransactOpts, contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Publish(&_BaseContentSpace.TransactOpts, contentObj)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContentSpace *BaseContentSpaceSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.PutMeta(&_BaseContentSpace.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.PutMeta(&_BaseContentSpace.TransactOpts, key, value)
}

// RegisterSpaceNode is a paid mutator transaction binding the contract method 0x2f7a781a.
//
// Solidity: function registerSpaceNode() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) RegisterSpaceNode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "registerSpaceNode")
}

// RegisterSpaceNode is a paid mutator transaction binding the contract method 0x2f7a781a.
//
// Solidity: function registerSpaceNode() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) RegisterSpaceNode() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RegisterSpaceNode(&_BaseContentSpace.TransactOpts)
}

// RegisterSpaceNode is a paid mutator transaction binding the contract method 0x2f7a781a.
//
// Solidity: function registerSpaceNode() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) RegisterSpaceNode() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RegisterSpaceNode(&_BaseContentSpace.TransactOpts)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveContentType(&_BaseContentSpace.TransactOpts, content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveContentType(&_BaseContentSpace.TransactOpts, content_type)
}

// RemoveKMSLocator is a paid mutator transaction binding the contract method 0xfe7ac19f.
//
// Solidity: function removeKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) RemoveKMSLocator(opts *bind.TransactOpts, _kmsID string, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "removeKMSLocator", _kmsID, _locator)
}

// RemoveKMSLocator is a paid mutator transaction binding the contract method 0xfe7ac19f.
//
// Solidity: function removeKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) RemoveKMSLocator(_kmsID string, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveKMSLocator(&_BaseContentSpace.TransactOpts, _kmsID, _locator)
}

// RemoveKMSLocator is a paid mutator transaction binding the contract method 0xfe7ac19f.
//
// Solidity: function removeKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) RemoveKMSLocator(_kmsID string, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveKMSLocator(&_BaseContentSpace.TransactOpts, _kmsID, _locator)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) RemoveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "removeNode", _nodeAddr)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceSession) RemoveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveNode(&_BaseContentSpace.TransactOpts, _nodeAddr)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) RemoveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveNode(&_BaseContentSpace.TransactOpts, _nodeAddr)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetAddressKMS(&_BaseContentSpace.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetAddressKMS(&_BaseContentSpace.TransactOpts, address_KMS)
}

// SetContentFactory is a paid mutator transaction binding the contract method 0x85ce1df1.
//
// Solidity: function setContentFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetContentFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setContentFactory", new_factory)
}

// SetContentFactory is a paid mutator transaction binding the contract method 0x85ce1df1.
//
// Solidity: function setContentFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetContentFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetContentFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetContentFactory is a paid mutator transaction binding the contract method 0x85ce1df1.
//
// Solidity: function setContentFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetContentFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetContentFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string content_space_description) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetDescription(opts *bind.TransactOpts, content_space_description string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setDescription", content_space_description)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string content_space_description) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetDescription(content_space_description string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetDescription(&_BaseContentSpace.TransactOpts, content_space_description)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string content_space_description) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetDescription(content_space_description string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetDescription(&_BaseContentSpace.TransactOpts, content_space_description)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setFactory", new_factory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetGroupFactory is a paid mutator transaction binding the contract method 0x837b3b93.
//
// Solidity: function setGroupFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetGroupFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setGroupFactory", new_factory)
}

// SetGroupFactory is a paid mutator transaction binding the contract method 0x837b3b93.
//
// Solidity: function setGroupFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetGroupFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetGroupFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetGroupFactory is a paid mutator transaction binding the contract method 0x837b3b93.
//
// Solidity: function setGroupFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetGroupFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetGroupFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetKMSPublicKey is a paid mutator transaction binding the contract method 0xa69cb734.
//
// Solidity: function setKMSPublicKey(string _kmsID, string _pubKey) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetKMSPublicKey(opts *bind.TransactOpts, _kmsID string, _pubKey string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setKMSPublicKey", _kmsID, _pubKey)
}

// SetKMSPublicKey is a paid mutator transaction binding the contract method 0xa69cb734.
//
// Solidity: function setKMSPublicKey(string _kmsID, string _pubKey) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetKMSPublicKey(_kmsID string, _pubKey string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetKMSPublicKey(&_BaseContentSpace.TransactOpts, _kmsID, _pubKey)
}

// SetKMSPublicKey is a paid mutator transaction binding the contract method 0xa69cb734.
//
// Solidity: function setKMSPublicKey(string _kmsID, string _pubKey) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetKMSPublicKey(_kmsID string, _pubKey string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetKMSPublicKey(&_BaseContentSpace.TransactOpts, _kmsID, _pubKey)
}

// SetLibraryFactory is a paid mutator transaction binding the contract method 0x9d05d18d.
//
// Solidity: function setLibraryFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetLibraryFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setLibraryFactory", new_factory)
}

// SetLibraryFactory is a paid mutator transaction binding the contract method 0x9d05d18d.
//
// Solidity: function setLibraryFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetLibraryFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetLibraryFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetLibraryFactory is a paid mutator transaction binding the contract method 0x9d05d18d.
//
// Solidity: function setLibraryFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetLibraryFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetLibraryFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetWalletFactory is a paid mutator transaction binding the contract method 0x7ebf879c.
//
// Solidity: function setWalletFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetWalletFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setWalletFactory", new_factory)
}

// SetWalletFactory is a paid mutator transaction binding the contract method 0x7ebf879c.
//
// Solidity: function setWalletFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetWalletFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetWalletFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetWalletFactory is a paid mutator transaction binding the contract method 0x7ebf879c.
//
// Solidity: function setWalletFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetWalletFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetWalletFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SubmitNode(opts *bind.TransactOpts, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "submitNode", _locator)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SubmitNode(_locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SubmitNode(&_BaseContentSpace.TransactOpts, _locator)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SubmitNode(_locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SubmitNode(&_BaseContentSpace.TransactOpts, _locator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentSpace *BaseContentSpaceSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.TransferCreatorship(&_BaseContentSpace.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.TransferCreatorship(&_BaseContentSpace.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentSpace *BaseContentSpaceSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.TransferOwnership(&_BaseContentSpace.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.TransferOwnership(&_BaseContentSpace.TransactOpts, newOwner)
}

// UnregisterSpaceNode is a paid mutator transaction binding the contract method 0xabe596b1.
//
// Solidity: function unregisterSpaceNode() returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) UnregisterSpaceNode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "unregisterSpaceNode")
}

// UnregisterSpaceNode is a paid mutator transaction binding the contract method 0xabe596b1.
//
// Solidity: function unregisterSpaceNode() returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) UnregisterSpaceNode() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.UnregisterSpaceNode(&_BaseContentSpace.TransactOpts)
}

// UnregisterSpaceNode is a paid mutator transaction binding the contract method 0xabe596b1.
//
// Solidity: function unregisterSpaceNode() returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) UnregisterSpaceNode() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.UnregisterSpaceNode(&_BaseContentSpace.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentSpace *BaseContentSpaceSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.UpdateRequest(&_BaseContentSpace.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.UpdateRequest(&_BaseContentSpace.TransactOpts)
}

// BaseContentSpaceAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseContentSpace contract.
type BaseContentSpaceAccessRequestIterator struct {
	Event *BaseContentSpaceAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceAccessRequest represents a AccessRequest event raised by the BaseContentSpace contract.
type BaseContentSpaceAccessRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseContentSpaceAccessRequestIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceAccessRequestIterator{contract: _BaseContentSpace.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceAccessRequest)
				if err := _BaseContentSpace.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseAccessRequest(log types.Log) (*BaseContentSpaceAccessRequest, error) {
	event := new(BaseContentSpaceAccessRequest)
	if err := _BaseContentSpace.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceAddKMSLocatorIterator is returned from FilterAddKMSLocator and is used to iterate over the raw logs and unpacked data for AddKMSLocator events raised by the BaseContentSpace contract.
type BaseContentSpaceAddKMSLocatorIterator struct {
	Event *BaseContentSpaceAddKMSLocator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceAddKMSLocatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceAddKMSLocator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceAddKMSLocator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceAddKMSLocatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceAddKMSLocatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceAddKMSLocator represents a AddKMSLocator event raised by the BaseContentSpace contract.
type BaseContentSpaceAddKMSLocator struct {
	Sender common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterAddKMSLocator is a free log retrieval operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterAddKMSLocator(opts *bind.FilterOpts) (*BaseContentSpaceAddKMSLocatorIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "AddKMSLocator")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceAddKMSLocatorIterator{contract: _BaseContentSpace.contract, event: "AddKMSLocator", logs: logs, sub: sub}, nil
}

// WatchAddKMSLocator is a free log subscription operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchAddKMSLocator(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceAddKMSLocator) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "AddKMSLocator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceAddKMSLocator)
				if err := _BaseContentSpace.contract.UnpackLog(event, "AddKMSLocator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddKMSLocator is a log parse operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseAddKMSLocator(log types.Log) (*BaseContentSpaceAddKMSLocator, error) {
	event := new(BaseContentSpaceAddKMSLocator)
	if err := _BaseContentSpace.contract.UnpackLog(event, "AddKMSLocator", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceAddNodeIterator is returned from FilterAddNode and is used to iterate over the raw logs and unpacked data for AddNode events raised by the BaseContentSpace contract.
type BaseContentSpaceAddNodeIterator struct {
	Event *BaseContentSpaceAddNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceAddNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceAddNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceAddNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceAddNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceAddNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceAddNode represents a AddNode event raised by the BaseContentSpace contract.
type BaseContentSpaceAddNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddNode is a free log retrieval operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterAddNode(opts *bind.FilterOpts) (*BaseContentSpaceAddNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceAddNodeIterator{contract: _BaseContentSpace.contract, event: "AddNode", logs: logs, sub: sub}, nil
}

// WatchAddNode is a free log subscription operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchAddNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceAddNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceAddNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddNode is a log parse operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseAddNode(log types.Log) (*BaseContentSpaceAddNode, error) {
	event := new(BaseContentSpaceAddNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContentSpace contract.
type BaseContentSpaceCommitPendingIterator struct {
	Event *BaseContentSpaceCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCommitPending represents a CommitPending event raised by the BaseContentSpace contract.
type BaseContentSpaceCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentSpaceCommitPendingIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCommitPendingIterator{contract: _BaseContentSpace.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCommitPending)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCommitPending(log types.Log) (*BaseContentSpaceCommitPending, error) {
	event := new(BaseContentSpaceCommitPending)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeAddedIterator struct {
	Event *BaseContentSpaceContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceContentTypeAdded represents a ContentTypeAdded event raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseContentSpaceContentTypeAddedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceContentTypeAddedIterator{contract: _BaseContentSpace.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceContentTypeAdded)
				if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseContentTypeAdded(log types.Log) (*BaseContentSpaceContentTypeAdded, error) {
	event := new(BaseContentSpaceContentTypeAdded)
	if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeRemovedIterator struct {
	Event *BaseContentSpaceContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseContentSpaceContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceContentTypeRemovedIterator{contract: _BaseContentSpace.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceContentTypeRemoved)
				if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseContentTypeRemoved(log types.Log) (*BaseContentSpaceContentTypeRemoved, error) {
	event := new(BaseContentSpaceContentTypeRemoved)
	if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateAccessWalletIterator is returned from FilterCreateAccessWallet and is used to iterate over the raw logs and unpacked data for CreateAccessWallet events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateAccessWalletIterator struct {
	Event *BaseContentSpaceCreateAccessWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateAccessWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateAccessWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateAccessWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateAccessWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateAccessWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateAccessWallet represents a CreateAccessWallet event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateAccessWallet struct {
	Wallet common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCreateAccessWallet is a free log retrieval operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateAccessWallet(opts *bind.FilterOpts) (*BaseContentSpaceCreateAccessWalletIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateAccessWallet")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateAccessWalletIterator{contract: _BaseContentSpace.contract, event: "CreateAccessWallet", logs: logs, sub: sub}, nil
}

// WatchCreateAccessWallet is a free log subscription operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateAccessWallet(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateAccessWallet) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateAccessWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateAccessWallet)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateAccessWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateAccessWallet is a log parse operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateAccessWallet(log types.Log) (*BaseContentSpaceCreateAccessWallet, error) {
	event := new(BaseContentSpaceCreateAccessWallet)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateAccessWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateContentIterator is returned from FilterCreateContent and is used to iterate over the raw logs and unpacked data for CreateContent events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentIterator struct {
	Event *BaseContentSpaceCreateContent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateContentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateContent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateContent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateContentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateContentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateContent represents a CreateContent event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContent struct {
	ContentAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCreateContent is a free log retrieval operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateContent(opts *bind.FilterOpts) (*BaseContentSpaceCreateContentIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateContent")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateContentIterator{contract: _BaseContentSpace.contract, event: "CreateContent", logs: logs, sub: sub}, nil
}

// WatchCreateContent is a free log subscription operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateContent(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateContent) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateContent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateContent)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateContent is a log parse operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateContent(log types.Log) (*BaseContentSpaceCreateContent, error) {
	event := new(BaseContentSpaceCreateContent)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateContentTypeIterator is returned from FilterCreateContentType and is used to iterate over the raw logs and unpacked data for CreateContentType events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentTypeIterator struct {
	Event *BaseContentSpaceCreateContentType // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateContentTypeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateContentType)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateContentType)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateContentTypeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateContentTypeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateContentType represents a CreateContentType event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentType struct {
	ContentTypeAddress common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterCreateContentType is a free log retrieval operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateContentType(opts *bind.FilterOpts) (*BaseContentSpaceCreateContentTypeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateContentType")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateContentTypeIterator{contract: _BaseContentSpace.contract, event: "CreateContentType", logs: logs, sub: sub}, nil
}

// WatchCreateContentType is a free log subscription operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateContentType(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateContentType) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateContentType")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateContentType)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContentType", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateContentType is a log parse operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateContentType(log types.Log) (*BaseContentSpaceCreateContentType, error) {
	event := new(BaseContentSpaceCreateContentType)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContentType", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateGroupIterator is returned from FilterCreateGroup and is used to iterate over the raw logs and unpacked data for CreateGroup events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateGroupIterator struct {
	Event *BaseContentSpaceCreateGroup // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateGroupIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateGroup)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateGroup)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateGroupIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateGroupIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateGroup represents a CreateGroup event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateGroup struct {
	GroupAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCreateGroup is a free log retrieval operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateGroup(opts *bind.FilterOpts) (*BaseContentSpaceCreateGroupIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateGroup")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateGroupIterator{contract: _BaseContentSpace.contract, event: "CreateGroup", logs: logs, sub: sub}, nil
}

// WatchCreateGroup is a free log subscription operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateGroup(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateGroup) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateGroup")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateGroup)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateGroup", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateGroup is a log parse operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateGroup(log types.Log) (*BaseContentSpaceCreateGroup, error) {
	event := new(BaseContentSpaceCreateGroup)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateGroup", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateLibraryIterator is returned from FilterCreateLibrary and is used to iterate over the raw logs and unpacked data for CreateLibrary events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateLibraryIterator struct {
	Event *BaseContentSpaceCreateLibrary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateLibraryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateLibrary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateLibrary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateLibraryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateLibraryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateLibrary represents a CreateLibrary event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateLibrary struct {
	LibraryAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCreateLibrary is a free log retrieval operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateLibrary(opts *bind.FilterOpts) (*BaseContentSpaceCreateLibraryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateLibrary")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateLibraryIterator{contract: _BaseContentSpace.contract, event: "CreateLibrary", logs: logs, sub: sub}, nil
}

// WatchCreateLibrary is a free log subscription operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateLibrary(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateLibrary) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateLibrary")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateLibrary)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateLibrary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateLibrary is a log parse operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateLibrary(log types.Log) (*BaseContentSpaceCreateLibrary, error) {
	event := new(BaseContentSpaceCreateLibrary)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateLibrary", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateSpaceIterator is returned from FilterCreateSpace and is used to iterate over the raw logs and unpacked data for CreateSpace events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateSpaceIterator struct {
	Event *BaseContentSpaceCreateSpace // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateSpaceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateSpace)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateSpace)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateSpaceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateSpaceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateSpace represents a CreateSpace event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateSpace struct {
	Version [32]byte
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterCreateSpace is a free log retrieval operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateSpace(opts *bind.FilterOpts) (*BaseContentSpaceCreateSpaceIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateSpace")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateSpaceIterator{contract: _BaseContentSpace.contract, event: "CreateSpace", logs: logs, sub: sub}, nil
}

// WatchCreateSpace is a free log subscription operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateSpace(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateSpace) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateSpace")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateSpace)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateSpace", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateSpace is a log parse operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateSpace(log types.Log) (*BaseContentSpaceCreateSpace, error) {
	event := new(BaseContentSpaceCreateSpace)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateSpace", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceEditableMigrateIterator is returned from FilterEditableMigrate and is used to iterate over the raw logs and unpacked data for EditableMigrate events raised by the BaseContentSpace contract.
type BaseContentSpaceEditableMigrateIterator struct {
	Event *BaseContentSpaceEditableMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceEditableMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceEditableMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceEditableMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceEditableMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceEditableMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceEditableMigrate represents a EditableMigrate event raised by the BaseContentSpace contract.
type BaseContentSpaceEditableMigrate struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEditableMigrate is a free log retrieval operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterEditableMigrate(opts *bind.FilterOpts) (*BaseContentSpaceEditableMigrateIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceEditableMigrateIterator{contract: _BaseContentSpace.contract, event: "EditableMigrate", logs: logs, sub: sub}, nil
}

// WatchEditableMigrate is a free log subscription operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchEditableMigrate(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceEditableMigrate) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceEditableMigrate)
				if err := _BaseContentSpace.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEditableMigrate is a log parse operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseEditableMigrate(log types.Log) (*BaseContentSpaceEditableMigrate, error) {
	event := new(BaseContentSpaceEditableMigrate)
	if err := _BaseContentSpace.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceEngageAccountLibraryIterator is returned from FilterEngageAccountLibrary and is used to iterate over the raw logs and unpacked data for EngageAccountLibrary events raised by the BaseContentSpace contract.
type BaseContentSpaceEngageAccountLibraryIterator struct {
	Event *BaseContentSpaceEngageAccountLibrary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceEngageAccountLibrary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceEngageAccountLibrary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceEngageAccountLibrary represents a EngageAccountLibrary event raised by the BaseContentSpace contract.
type BaseContentSpaceEngageAccountLibrary struct {
	AccountAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterEngageAccountLibrary is a free log retrieval operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterEngageAccountLibrary(opts *bind.FilterOpts) (*BaseContentSpaceEngageAccountLibraryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "EngageAccountLibrary")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceEngageAccountLibraryIterator{contract: _BaseContentSpace.contract, event: "EngageAccountLibrary", logs: logs, sub: sub}, nil
}

// WatchEngageAccountLibrary is a free log subscription operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchEngageAccountLibrary(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceEngageAccountLibrary) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "EngageAccountLibrary")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceEngageAccountLibrary)
				if err := _BaseContentSpace.contract.UnpackLog(event, "EngageAccountLibrary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEngageAccountLibrary is a log parse operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseEngageAccountLibrary(log types.Log) (*BaseContentSpaceEngageAccountLibrary, error) {
	event := new(BaseContentSpaceEngageAccountLibrary)
	if err := _BaseContentSpace.contract.UnpackLog(event, "EngageAccountLibrary", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceGetAccessWalletIterator is returned from FilterGetAccessWallet and is used to iterate over the raw logs and unpacked data for GetAccessWallet events raised by the BaseContentSpace contract.
type BaseContentSpaceGetAccessWalletIterator struct {
	Event *BaseContentSpaceGetAccessWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceGetAccessWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceGetAccessWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceGetAccessWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceGetAccessWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceGetAccessWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceGetAccessWallet represents a GetAccessWallet event raised by the BaseContentSpace contract.
type BaseContentSpaceGetAccessWallet struct {
	WalletAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterGetAccessWallet is a free log retrieval operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterGetAccessWallet(opts *bind.FilterOpts) (*BaseContentSpaceGetAccessWalletIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceGetAccessWalletIterator{contract: _BaseContentSpace.contract, event: "GetAccessWallet", logs: logs, sub: sub}, nil
}

// WatchGetAccessWallet is a free log subscription operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchGetAccessWallet(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceGetAccessWallet) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceGetAccessWallet)
				if err := _BaseContentSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGetAccessWallet is a log parse operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseGetAccessWallet(log types.Log) (*BaseContentSpaceGetAccessWallet, error) {
	event := new(BaseContentSpaceGetAccessWallet)
	if err := _BaseContentSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceNodeApprovedIterator is returned from FilterNodeApproved and is used to iterate over the raw logs and unpacked data for NodeApproved events raised by the BaseContentSpace contract.
type BaseContentSpaceNodeApprovedIterator struct {
	Event *BaseContentSpaceNodeApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceNodeApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceNodeApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceNodeApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceNodeApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceNodeApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceNodeApproved represents a NodeApproved event raised by the BaseContentSpace contract.
type BaseContentSpaceNodeApproved struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeApproved is a free log retrieval operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterNodeApproved(opts *bind.FilterOpts) (*BaseContentSpaceNodeApprovedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceNodeApprovedIterator{contract: _BaseContentSpace.contract, event: "NodeApproved", logs: logs, sub: sub}, nil
}

// WatchNodeApproved is a free log subscription operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchNodeApproved(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceNodeApproved) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceNodeApproved)
				if err := _BaseContentSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeApproved is a log parse operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseNodeApproved(log types.Log) (*BaseContentSpaceNodeApproved, error) {
	event := new(BaseContentSpaceNodeApproved)
	if err := _BaseContentSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceNodeSubmittedIterator is returned from FilterNodeSubmitted and is used to iterate over the raw logs and unpacked data for NodeSubmitted events raised by the BaseContentSpace contract.
type BaseContentSpaceNodeSubmittedIterator struct {
	Event *BaseContentSpaceNodeSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceNodeSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceNodeSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceNodeSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceNodeSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceNodeSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceNodeSubmitted represents a NodeSubmitted event raised by the BaseContentSpace contract.
type BaseContentSpaceNodeSubmitted struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeSubmitted is a free log retrieval operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterNodeSubmitted(opts *bind.FilterOpts) (*BaseContentSpaceNodeSubmittedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceNodeSubmittedIterator{contract: _BaseContentSpace.contract, event: "NodeSubmitted", logs: logs, sub: sub}, nil
}

// WatchNodeSubmitted is a free log subscription operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchNodeSubmitted(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceNodeSubmitted) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceNodeSubmitted)
				if err := _BaseContentSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeSubmitted is a log parse operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseNodeSubmitted(log types.Log) (*BaseContentSpaceNodeSubmitted, error) {
	event := new(BaseContentSpaceNodeSubmitted)
	if err := _BaseContentSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceRegisterNodeIterator is returned from FilterRegisterNode and is used to iterate over the raw logs and unpacked data for RegisterNode events raised by the BaseContentSpace contract.
type BaseContentSpaceRegisterNodeIterator struct {
	Event *BaseContentSpaceRegisterNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceRegisterNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceRegisterNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceRegisterNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceRegisterNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceRegisterNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceRegisterNode represents a RegisterNode event raised by the BaseContentSpace contract.
type BaseContentSpaceRegisterNode struct {
	NodeObjAddr common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegisterNode is a free log retrieval operation binding the contract event 0x4575facd117046c9c28b69a3eb9c08939f2462a5a22ea6c6dcd4f79b8dd124e9.
//
// Solidity: event RegisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterRegisterNode(opts *bind.FilterOpts) (*BaseContentSpaceRegisterNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "RegisterNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceRegisterNodeIterator{contract: _BaseContentSpace.contract, event: "RegisterNode", logs: logs, sub: sub}, nil
}

// WatchRegisterNode is a free log subscription operation binding the contract event 0x4575facd117046c9c28b69a3eb9c08939f2462a5a22ea6c6dcd4f79b8dd124e9.
//
// Solidity: event RegisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchRegisterNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceRegisterNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "RegisterNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceRegisterNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "RegisterNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisterNode is a log parse operation binding the contract event 0x4575facd117046c9c28b69a3eb9c08939f2462a5a22ea6c6dcd4f79b8dd124e9.
//
// Solidity: event RegisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseRegisterNode(log types.Log) (*BaseContentSpaceRegisterNode, error) {
	event := new(BaseContentSpaceRegisterNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "RegisterNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceRemoveKMSLocatorIterator is returned from FilterRemoveKMSLocator and is used to iterate over the raw logs and unpacked data for RemoveKMSLocator events raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveKMSLocatorIterator struct {
	Event *BaseContentSpaceRemoveKMSLocator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceRemoveKMSLocatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceRemoveKMSLocator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceRemoveKMSLocator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceRemoveKMSLocatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceRemoveKMSLocatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceRemoveKMSLocator represents a RemoveKMSLocator event raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveKMSLocator struct {
	Sender common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRemoveKMSLocator is a free log retrieval operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterRemoveKMSLocator(opts *bind.FilterOpts) (*BaseContentSpaceRemoveKMSLocatorIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "RemoveKMSLocator")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceRemoveKMSLocatorIterator{contract: _BaseContentSpace.contract, event: "RemoveKMSLocator", logs: logs, sub: sub}, nil
}

// WatchRemoveKMSLocator is a free log subscription operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchRemoveKMSLocator(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceRemoveKMSLocator) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "RemoveKMSLocator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceRemoveKMSLocator)
				if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveKMSLocator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveKMSLocator is a log parse operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseRemoveKMSLocator(log types.Log) (*BaseContentSpaceRemoveKMSLocator, error) {
	event := new(BaseContentSpaceRemoveKMSLocator)
	if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveKMSLocator", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceRemoveNodeIterator is returned from FilterRemoveNode and is used to iterate over the raw logs and unpacked data for RemoveNode events raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveNodeIterator struct {
	Event *BaseContentSpaceRemoveNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceRemoveNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceRemoveNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceRemoveNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceRemoveNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceRemoveNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceRemoveNode represents a RemoveNode event raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoveNode is a free log retrieval operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterRemoveNode(opts *bind.FilterOpts) (*BaseContentSpaceRemoveNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceRemoveNodeIterator{contract: _BaseContentSpace.contract, event: "RemoveNode", logs: logs, sub: sub}, nil
}

// WatchRemoveNode is a free log subscription operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchRemoveNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceRemoveNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceRemoveNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveNode is a log parse operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseRemoveNode(log types.Log) (*BaseContentSpaceRemoveNode, error) {
	event := new(BaseContentSpaceRemoveNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceSetFactoryIterator is returned from FilterSetFactory and is used to iterate over the raw logs and unpacked data for SetFactory events raised by the BaseContentSpace contract.
type BaseContentSpaceSetFactoryIterator struct {
	Event *BaseContentSpaceSetFactory // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceSetFactoryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceSetFactory)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceSetFactory)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceSetFactoryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceSetFactoryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceSetFactory represents a SetFactory event raised by the BaseContentSpace contract.
type BaseContentSpaceSetFactory struct {
	Factory common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSetFactory is a free log retrieval operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterSetFactory(opts *bind.FilterOpts) (*BaseContentSpaceSetFactoryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "SetFactory")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceSetFactoryIterator{contract: _BaseContentSpace.contract, event: "SetFactory", logs: logs, sub: sub}, nil
}

// WatchSetFactory is a free log subscription operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchSetFactory(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceSetFactory) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "SetFactory")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceSetFactory)
				if err := _BaseContentSpace.contract.UnpackLog(event, "SetFactory", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFactory is a log parse operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseSetFactory(log types.Log) (*BaseContentSpaceSetFactory, error) {
	event := new(BaseContentSpaceSetFactory)
	if err := _BaseContentSpace.contract.UnpackLog(event, "SetFactory", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceUnregisterNodeIterator is returned from FilterUnregisterNode and is used to iterate over the raw logs and unpacked data for UnregisterNode events raised by the BaseContentSpace contract.
type BaseContentSpaceUnregisterNodeIterator struct {
	Event *BaseContentSpaceUnregisterNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceUnregisterNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceUnregisterNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceUnregisterNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceUnregisterNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceUnregisterNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceUnregisterNode represents a UnregisterNode event raised by the BaseContentSpace contract.
type BaseContentSpaceUnregisterNode struct {
	NodeObjAddr common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUnregisterNode is a free log retrieval operation binding the contract event 0xb98695ab4c6cedb3b4dfe62479a9d39a59aa2cb38b8bd92bbb6ce5856e42bdf4.
//
// Solidity: event UnregisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterUnregisterNode(opts *bind.FilterOpts) (*BaseContentSpaceUnregisterNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "UnregisterNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceUnregisterNodeIterator{contract: _BaseContentSpace.contract, event: "UnregisterNode", logs: logs, sub: sub}, nil
}

// WatchUnregisterNode is a free log subscription operation binding the contract event 0xb98695ab4c6cedb3b4dfe62479a9d39a59aa2cb38b8bd92bbb6ce5856e42bdf4.
//
// Solidity: event UnregisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchUnregisterNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceUnregisterNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "UnregisterNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceUnregisterNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "UnregisterNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnregisterNode is a log parse operation binding the contract event 0xb98695ab4c6cedb3b4dfe62479a9d39a59aa2cb38b8bd92bbb6ce5856e42bdf4.
//
// Solidity: event UnregisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseUnregisterNode(log types.Log) (*BaseContentSpaceUnregisterNode, error) {
	event := new(BaseContentSpaceUnregisterNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "UnregisterNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContentSpace contract.
type BaseContentSpaceUpdateRequestIterator struct {
	Event *BaseContentSpaceUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceUpdateRequest represents a UpdateRequest event raised by the BaseContentSpace contract.
type BaseContentSpaceUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentSpaceUpdateRequestIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceUpdateRequestIterator{contract: _BaseContentSpace.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceUpdateRequest)
				if err := _BaseContentSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseUpdateRequest(log types.Log) (*BaseContentSpaceUpdateRequest, error) {
	event := new(BaseContentSpaceUpdateRequest)
	if err := _BaseContentSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContentSpace contract.
type BaseContentSpaceVersionConfirmIterator struct {
	Event *BaseContentSpaceVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceVersionConfirm represents a VersionConfirm event raised by the BaseContentSpace contract.
type BaseContentSpaceVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentSpaceVersionConfirmIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceVersionConfirmIterator{contract: _BaseContentSpace.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceVersionConfirm)
				if err := _BaseContentSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseVersionConfirm(log types.Log) (*BaseContentSpaceVersionConfirm, error) {
	event := new(BaseContentSpaceVersionConfirm)
	if err := _BaseContentSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContentSpace contract.
type BaseContentSpaceVersionDeleteIterator struct {
	Event *BaseContentSpaceVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceVersionDelete represents a VersionDelete event raised by the BaseContentSpace contract.
type BaseContentSpaceVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentSpaceVersionDeleteIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceVersionDeleteIterator{contract: _BaseContentSpace.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceVersionDelete)
				if err := _BaseContentSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseVersionDelete(log types.Log) (*BaseContentSpaceVersionDelete, error) {
	event := new(BaseContentSpaceVersionDelete)
	if err := _BaseContentSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeABI is the input ABI used to generate the binding from.
const BaseContentTypeABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_objectHash\",\"type\":\"string\"},{\"name\":\"_versionHashesConcat\",\"type\":\"string\"},{\"name\":\"_versionTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"migrateEditable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EditableMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AccessRequest\",\"type\":\"event\"}]"

// BaseContentTypeFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentTypeFuncSigs = map[string]string{
	"f1551887": "accessRequest()",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"41c0e1b5": "kill()",
	"6ae5f5e0": "migrateEditable(address,address,string,string,uint256[])",
	"e02dd9c2": "objectHash()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"54fd4d50": "version()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
}

// BaseContentTypeBin is the compiled bytecode used for deploying new contracts.
var BaseContentTypeBin = "0x608060408190527f41636365737369626c6532303139303232323133353930304d4c0000000000006000557f4f776e61626c6532303139303532383139333830304d4c0000000000000000006001557f4564697461626c6532303139303830313133353530304d4c00000000000000006005557f42617365436f6e74656e745479706532303139303831333130353030304d4c00600c55602080611dbc83398101604052516002805432600160a060020a0319918216811790925560038054821690921790915560048054909116600160a060020a03909216919091179055611ccf806100ed6000396000f30060806040526004361061012e5763ffffffff60e060020a600035041662821de3811461013057806302d05d3f146101615780630fe1b5a21461017657806314cfabb3146101a357806322e564eb146101cc578063331b86c0146101f9578063375a6e7c1461022057806341c0e1b514610235578063446e88261461024a57806354fd4d50146102525780635f6a130114610267578063628449fd1461027c5780636ae5f5e0146103065780636d2e4b1b146103ec5780636e3754271461040d5780637886f747146104225780637ca8f6181461043a5780638da5cb5b146104525780639867db7414610467578063af570c04146104c0578063c287e0ed146104d5578063e02dd9c2146104ea578063e1a70717146104ff578063f155188714610558578063f2fde38b1461056d575b005b34801561013c57600080fd5b5061014561058e565b60408051600160a060020a039092168252519081900360200190f35b34801561016d57600080fd5b5061014561059e565b34801561018257600080fd5b5061012e600160a060020a036004351660ff602435811690604435166105ad565b3480156101af57600080fd5b506101b861067d565b604080519115158252519081900360200190f35b3480156101d857600080fd5b5061012e600160a060020a036004351660ff6024358116906044351661071c565b34801561020557600080fd5b5061020e6107ae565b60408051918252519081900360200190f35b34801561022c57600080fd5b506101b86107b4565b34801561024157600080fd5b5061012e6107bd565b6101b86107f9565b34801561025e57600080fd5b5061020e6109e9565b34801561027357600080fd5b5061012e6109ef565b34801561028857600080fd5b50610291610a2d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102cb5781810151838201526020016102b3565b50505050905090810190601f1680156102f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561031257600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261012e948235600160a060020a039081169560248035909216953695946064949293019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610abb9650505050505050565b3480156103f857600080fd5b5061012e600160a060020a0360043516610c63565b34801561041957600080fd5b506101b8610cbe565b34801561042e57600080fd5b5061020e600435610e75565b34801561044657600080fd5b50610291600435610e94565b34801561045e57600080fd5b50610145610f08565b34801561047357600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261012e943694929360249392840191908190840183828082843750949750610f179650505050505050565b3480156104cc57600080fd5b50610145611044565b3480156104e157600080fd5b5061012e611053565b3480156104f657600080fd5b50610291611129565b34801561050b57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261020e9436949293602493928401919081908401838280828437509497506111849650505050505050565b34801561056457600080fd5b506101b861172c565b34801561057957600080fd5b5061012e600160a060020a036004351661175d565b600454600160a060020a03165b90565b600254600160a060020a031681565b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd9160248082019260209290919082900301818787803b15801561061d57600080fd5b505af1158015610631573d6000803e3d6000fd5b505050506040513d602081101561064757600080fd5b50519050600160a060020a038116151561066b5761066685858561071c565b610676565b61067681858561071c565b5050505050565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e149160248082019260209290919082900301818887803b1580156106e957600080fd5b505af11580156106fd573d6000803e3d6000fd5b505050506040513d602081101561071357600080fd5b505191505b5090565b604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff80851660248301528316604482015290518491600160a060020a03831691638635adb59160648082019260009290919082900301818387803b15801561079057600080fd5b505af11580156107a4573d6000803e3d6000fd5b5050505050505050565b60085490565b600b5460ff1681565b600354600160a060020a03163214806107e05750600354600160a060020a031633145b15156107eb57600080fd5b600354600160a060020a0316ff5b600061080361067d565b151561080e57600080fd5b600b5460ff16151561081f57600080fd5b6000600680546001816001161561010002031660029004905011156108ce5760088054600181810180845560009390935260068054610895937ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30192600261010091831615919091026000190190911604611a3d565b5050600754600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01555b600a80546108f19160069160026000196101006001841615020190911604611a3d565b504260075560408051602081019182905260009081905261091491600a91611abe565b50600b805460ff1916905560045460408051600160a060020a039092168083526020830182815260068054600260001960018316156101000201909116049385018490527f482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e949293909291906060830190849080156109d45780601f106109a9576101008083540402835291602001916109d4565b820191906000526020600020905b8154815290600101906020018083116109b757829003601f168201915b5050935050505060405180910390a150600190565b600c5481565b6109f7610cbe565b1515610a0257600080fd5b604080516020810191829052600090819052610a2091600a91611abe565b50600b805460ff19169055565b600a805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ab35780601f10610a8857610100808354040283529160200191610ab3565b820191906000526020600020905b815481529060010190602001808311610a9657829003601f168201915b505050505081565b610ac3611b2c565b610acb611b2c565b600354606090600090600160a060020a0316321480610af45750600354600160a060020a031633145b1515610aff57600080fd5b8651610b129060069060208a0190611abe565b50855115610c1d57610b23866117cf565b9350610b636040805190810160405280600181526020017f3a000000000000000000000000000000000000000000000000000000000000008152506117cf565b9250610b75848463ffffffff6117f516565b600101604051908082528060200260200182016040528015610bab57816020015b6060815260200190600190039081610b965790505b509150600090505b8151811015610bf457610bd4610bcf858563ffffffff61186216565b611875565b8282815181101515610be257fe5b60209081029091010152600101610bb3565b8151610c07906008906020850190611b43565b508451610c1b906009906020880190611b9c565b505b610c268961175d565b610c2f88610c63565b6040517fae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce5890600090a1505050505050505050565b600254600160a060020a03163214610c7a57600080fd5b600160a060020a0381161515610c8f57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152329381019390935251600092600160a060020a03909216918391829184916363e6ffdd9160248082019260209290919082900301818787803b158015610d2e57600080fd5b505af1158015610d42573d6000803e3d6000fd5b505050506040513d6020811015610d5857600080fd5b50519150600160a060020a03821615610e6a5781905080600160a060020a031663fe538c5a3083600160a060020a0316635d97b6c26040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610dbc57600080fd5b505af1158015610dd0573d6000803e3d6000fd5b505050506040513d6020811015610de657600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b158015610e3757600080fd5b505af1158015610e4b573d6000803e3d6000fd5b505050506040513d6020811015610e6157600080fd5b50519350610e6f565b600093505b50505090565b6009805482908110610e8357fe5b600091825260209091200154905081565b6008805482908110610ea257fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815293509091830182828015610ab35780601f10610a8857610100808354040283529160200191610ab3565b600354600160a060020a031681565b610f1f610cbe565b1515610f2a57600080fd5b600b5460ff1615610f3a57600080fd5b8051608011610f4857600080fd5b8051610f5b90600a906020840190611abe565b50600b805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316610f9f61058e565b60408051600160a060020a038085168252831660208201526060918101828152600a805460026000196101006001841615020190911604938301849052926080830190849080156110315780601f1061100657610100808354040283529160200191611031565b820191906000526020600020905b81548152906001019060200180831161101457829003601f168201915b505094505050505060405180910390a150565b600454600160a060020a031681565b600354600160a060020a031633148061106f575061106f61067d565b151561107a57600080fd5b60408051602080825260068054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156111195780601f106110ee57610100808354040283529160200191611119565b820191906000526020600020905b8154815290600101906020018083116110fc57829003601f168201915b50509250505060405180910390a1565b6006805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ab35780601f10610a8857610100808354040283529160200191610ab3565b600080600080600080611195610cbe565b15156111a057600080fd5b866040516020018082805190602001908083835b602083106111d35780518252601f1990920191602091820191016111b4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106112365780518252601f199092019160209182019101611217565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209450600660405160200180828054600181600116156101000203166002900480156112c55780601f106112a35761010080835404028352918201916112c5565b820191906000526020600020905b8154815290600101906020018083116112b1575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106113085780518252601f1990920191602091820191016112e9565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209650505050848414156114295760408051602081019182905260009081905261135c91600691611abe565b506000600781905560045460408051600160a060020a03909216808352908201839052606060208084018281528c51928501929092528b517f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f519593948d9493909290916080840191860190808383885b838110156113e45781810151838201526020016113cc565b50505050905090810190601f1680156114115780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009550611722565b6000199250600091505b60085482101561163f57600880548390811061144b57fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156114b35780601f106114915761010080835404028352918201916114b3565b820191906000526020600020905b81548152906001019060200180831161149f575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106114f65780518252601f1990920191602091820191016114d7565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912093505050508481141561163457600880548390811061153a57fe5b9060005260206000200160006115509190611bd6565b600980548390811061155e57fe5b60009182526020822001556008546000190182146116045760088054600019810190811061158857fe5b906000526020600020016008838154811015156115a157fe5b9060005260206000200190805460018160011615610100020316600290046115ca929190611a3d565b506009805460001981019081106115dd57fe5b90600052602060002001546009838154811015156115f757fe5b6000918252602090912001555b6008805490611617906000198301611c1d565b50600980549061162b906000198301611c46565b5081925061163f565b600190910190611433565b60001983141561164e57600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031688856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156116e25781810151838201526020016116ca565b50505050905090810190601f16801561170f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18295505b5050505050919050565b6040516000907fed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88908290a150600190565b600354600160a060020a03163214806117805750600354600160a060020a031633145b151561178b57600080fd5b600160a060020a03811615156117a057600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6117d7611b2c565b50604080518082019091528151815260209182019181019190915290565b600080826000015161181985600001518660200151866000015187602001516118c8565b0190505b8351602085015101811161185b5782516020808601518651918601516001909501946118539291850390910390849084906118c8565b01905061181d565b5092915050565b61186a611b2c565b61185b838383611988565b606080600083600001516040519080825280601f01601f1916602001820160405280156118ac578160200160208202803883390190505b50915060208201905061185b81856020015186600001516119f9565b600083818080808080808c8b116119725760208b1161193b5760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b82851461193357838810611920578c8c019850611978565b8780600101985050858851169250611908565b879850611978565b8a8a209150600096505b8a8d03871161197257508987208181141561196257879850611978565b6001978801979690960195611945565b8c8c0198505b5050505050505050949350505050565b611990611b2c565b60006119ae85600001518660200151866000015187602001516118c8565b602080870180519186019190915280518203855286519051919250018114156119da57600085526119f0565b8351835186519101900385528351810160208601525b50909392505050565b60005b60208210611a1e578251845260209384019390920191601f19909101906119fc565b50905182516020929092036101000a6000190180199091169116179052565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a765780548555611ab2565b82800160010185558215611ab257600052602060002091601f016020900482015b82811115611ab2578254825591600101919060010190611a97565b50610718929150611c66565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611aff57805160ff1916838001178555611ab2565b82800160010185558215611ab2579182015b82811115611ab2578251825591602001919060010190611b11565b604080518082019091526000808252602082015290565b828054828255906000526020600020908101928215611b90579160200282015b82811115611b905782518051611b80918491602090910190611abe565b5091602001919060010190611b63565b50610718929150611c80565b828054828255906000526020600020908101928215611ab25791602002820182811115611ab2578251825591602001919060010190611b11565b50805460018160011615610100020316600290046000825580601f10611bfc5750611c1a565b601f016020900490600052602060002090810190611c1a9190611c66565b50565b815481835581811115611c4157600083815260209020611c41918101908301611c80565b505050565b815481835581811115611c4157600083815260209020611c419181019083015b61059b91905b808211156107185760008155600101611c6c565b61059b91905b80821115610718576000611c9a8282611bd6565b50600101611c865600a165627a7a72305820efa46244c9ca8a24019dc280e8cc4a21690f945ab93d5368c97e3c2cd386b7500029"

// DeployBaseContentType deploys a new Ethereum contract, binding an instance of BaseContentType to it.
func DeployBaseContentType(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address) (common.Address, *types.Transaction, *BaseContentType, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentTypeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseContentTypeBin), backend, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentType{BaseContentTypeCaller: BaseContentTypeCaller{contract: contract}, BaseContentTypeTransactor: BaseContentTypeTransactor{contract: contract}, BaseContentTypeFilterer: BaseContentTypeFilterer{contract: contract}}, nil
}

// BaseContentType is an auto generated Go binding around an Ethereum contract.
type BaseContentType struct {
	BaseContentTypeCaller     // Read-only binding to the contract
	BaseContentTypeTransactor // Write-only binding to the contract
	BaseContentTypeFilterer   // Log filterer for contract events
}

// BaseContentTypeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentTypeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTypeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentTypeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTypeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentTypeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTypeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseContentTypeSession struct {
	Contract     *BaseContentType  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseContentTypeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseContentTypeCallerSession struct {
	Contract *BaseContentTypeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// BaseContentTypeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseContentTypeTransactorSession struct {
	Contract     *BaseContentTypeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// BaseContentTypeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseContentTypeRaw struct {
	Contract *BaseContentType // Generic contract binding to access the raw methods on
}

// BaseContentTypeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseContentTypeCallerRaw struct {
	Contract *BaseContentTypeCaller // Generic read-only contract binding to access the raw methods on
}

// BaseContentTypeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseContentTypeTransactorRaw struct {
	Contract *BaseContentTypeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseContentType creates a new instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentType(address common.Address, backend bind.ContractBackend) (*BaseContentType, error) {
	contract, err := bindBaseContentType(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentType{BaseContentTypeCaller: BaseContentTypeCaller{contract: contract}, BaseContentTypeTransactor: BaseContentTypeTransactor{contract: contract}, BaseContentTypeFilterer: BaseContentTypeFilterer{contract: contract}}, nil
}

// NewBaseContentTypeCaller creates a new read-only instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeCaller(address common.Address, caller bind.ContractCaller) (*BaseContentTypeCaller, error) {
	contract, err := bindBaseContentType(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeCaller{contract: contract}, nil
}

// NewBaseContentTypeTransactor creates a new write-only instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentTypeTransactor, error) {
	contract, err := bindBaseContentType(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeTransactor{contract: contract}, nil
}

// NewBaseContentTypeFilterer creates a new log filterer instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentTypeFilterer, error) {
	contract, err := bindBaseContentType(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeFilterer{contract: contract}, nil
}

// bindBaseContentType binds a generic wrapper to an already deployed contract.
func bindBaseContentType(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentTypeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentType *BaseContentTypeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentType.Contract.BaseContentTypeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentType *BaseContentTypeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.Contract.BaseContentTypeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentType *BaseContentTypeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentType.Contract.BaseContentTypeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentType *BaseContentTypeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentType.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentType *BaseContentTypeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentType *BaseContentTypeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentType.Contract.contract.Transact(opts, method, params...)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) CanCommit() (bool, error) {
	return _BaseContentType.Contract.CanCommit(&_BaseContentType.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) CanCommit() (bool, error) {
	return _BaseContentType.Contract.CanCommit(&_BaseContentType.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) CanConfirm() (bool, error) {
	return _BaseContentType.Contract.CanConfirm(&_BaseContentType.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) CanConfirm() (bool, error) {
	return _BaseContentType.Contract.CanConfirm(&_BaseContentType.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) CommitPending() (bool, error) {
	return _BaseContentType.Contract.CommitPending(&_BaseContentType.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) CommitPending() (bool, error) {
	return _BaseContentType.Contract.CommitPending(&_BaseContentType.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentType *BaseContentTypeCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentType *BaseContentTypeSession) ContentSpace() (common.Address, error) {
	return _BaseContentType.Contract.ContentSpace(&_BaseContentType.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentType *BaseContentTypeCallerSession) ContentSpace() (common.Address, error) {
	return _BaseContentType.Contract.ContentSpace(&_BaseContentType.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentType *BaseContentTypeCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentType *BaseContentTypeSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContentType.Contract.CountVersionHashes(&_BaseContentType.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentType *BaseContentTypeCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContentType.Contract.CountVersionHashes(&_BaseContentType.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentType *BaseContentTypeCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentType *BaseContentTypeSession) Creator() (common.Address, error) {
	return _BaseContentType.Contract.Creator(&_BaseContentType.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentType *BaseContentTypeCallerSession) Creator() (common.Address, error) {
	return _BaseContentType.Contract.Creator(&_BaseContentType.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentType *BaseContentTypeCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentType *BaseContentTypeSession) ObjectHash() (string, error) {
	return _BaseContentType.Contract.ObjectHash(&_BaseContentType.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentType *BaseContentTypeCallerSession) ObjectHash() (string, error) {
	return _BaseContentType.Contract.ObjectHash(&_BaseContentType.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentType *BaseContentTypeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentType *BaseContentTypeSession) Owner() (common.Address, error) {
	return _BaseContentType.Contract.Owner(&_BaseContentType.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentType *BaseContentTypeCallerSession) Owner() (common.Address, error) {
	return _BaseContentType.Contract.Owner(&_BaseContentType.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentType *BaseContentTypeCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentType *BaseContentTypeSession) ParentAddress() (common.Address, error) {
	return _BaseContentType.Contract.ParentAddress(&_BaseContentType.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentType *BaseContentTypeCallerSession) ParentAddress() (common.Address, error) {
	return _BaseContentType.Contract.ParentAddress(&_BaseContentType.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentType *BaseContentTypeCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentType *BaseContentTypeSession) PendingHash() (string, error) {
	return _BaseContentType.Contract.PendingHash(&_BaseContentType.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentType *BaseContentTypeCallerSession) PendingHash() (string, error) {
	return _BaseContentType.Contract.PendingHash(&_BaseContentType.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeSession) Version() ([32]byte, error) {
	return _BaseContentType.Contract.Version(&_BaseContentType.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeCallerSession) Version() ([32]byte, error) {
	return _BaseContentType.Contract.Version(&_BaseContentType.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentType *BaseContentTypeCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentType *BaseContentTypeSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContentType.Contract.VersionHashes(&_BaseContentType.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentType *BaseContentTypeCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContentType.Contract.VersionHashes(&_BaseContentType.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentType *BaseContentTypeCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentType *BaseContentTypeSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContentType.Contract.VersionTimestamp(&_BaseContentType.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentType *BaseContentTypeCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContentType.Contract.VersionTimestamp(&_BaseContentType.CallOpts, arg0)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseContentType *BaseContentTypeTransactor) AccessRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "accessRequest")
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseContentType *BaseContentTypeSession) AccessRequest() (*types.Transaction, error) {
	return _BaseContentType.Contract.AccessRequest(&_BaseContentType.TransactOpts)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseContentType *BaseContentTypeTransactorSession) AccessRequest() (*types.Transaction, error) {
	return _BaseContentType.Contract.AccessRequest(&_BaseContentType.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentType *BaseContentTypeTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentType *BaseContentTypeSession) ClearPending() (*types.Transaction, error) {
	return _BaseContentType.Contract.ClearPending(&_BaseContentType.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentType *BaseContentTypeTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseContentType.Contract.ClearPending(&_BaseContentType.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentType *BaseContentTypeTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentType *BaseContentTypeSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContentType.Contract.Commit(&_BaseContentType.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContentType.Contract.Commit(&_BaseContentType.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentType *BaseContentTypeTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentType *BaseContentTypeSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContentType.Contract.ConfirmCommit(&_BaseContentType.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentType *BaseContentTypeTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContentType.Contract.ConfirmCommit(&_BaseContentType.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentType *BaseContentTypeTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentType *BaseContentTypeSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContentType.Contract.DeleteVersion(&_BaseContentType.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentType *BaseContentTypeTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContentType.Contract.DeleteVersion(&_BaseContentType.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentType *BaseContentTypeTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentType *BaseContentTypeSession) Kill() (*types.Transaction, error) {
	return _BaseContentType.Contract.Kill(&_BaseContentType.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentType *BaseContentTypeTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseContentType.Contract.Kill(&_BaseContentType.TransactOpts)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseContentType *BaseContentTypeTransactor) MigrateEditable(opts *bind.TransactOpts, _owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "migrateEditable", _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseContentType *BaseContentTypeSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseContentType.Contract.MigrateEditable(&_BaseContentType.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseContentType.Contract.MigrateEditable(&_BaseContentType.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetGroupRights(&_BaseContentType.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetGroupRights(&_BaseContentType.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetRights(&_BaseContentType.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetRights(&_BaseContentType.TransactOpts, stakeholder, access_type, access)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentType *BaseContentTypeTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentType *BaseContentTypeSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.TransferCreatorship(&_BaseContentType.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.TransferCreatorship(&_BaseContentType.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentType *BaseContentTypeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentType *BaseContentTypeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.TransferOwnership(&_BaseContentType.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.TransferOwnership(&_BaseContentType.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentType *BaseContentTypeTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentType *BaseContentTypeSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContentType.Contract.UpdateRequest(&_BaseContentType.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentType *BaseContentTypeTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContentType.Contract.UpdateRequest(&_BaseContentType.TransactOpts)
}

// BaseContentTypeAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseContentType contract.
type BaseContentTypeAccessRequestIterator struct {
	Event *BaseContentTypeAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeAccessRequest represents a AccessRequest event raised by the BaseContentType contract.
type BaseContentTypeAccessRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseContentType *BaseContentTypeFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseContentTypeAccessRequestIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeAccessRequestIterator{contract: _BaseContentType.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseContentType *BaseContentTypeFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseContentTypeAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeAccessRequest)
				if err := _BaseContentType.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseContentType *BaseContentTypeFilterer) ParseAccessRequest(log types.Log) (*BaseContentTypeAccessRequest, error) {
	event := new(BaseContentTypeAccessRequest)
	if err := _BaseContentType.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContentType contract.
type BaseContentTypeCommitPendingIterator struct {
	Event *BaseContentTypeCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeCommitPending represents a CommitPending event raised by the BaseContentType contract.
type BaseContentTypeCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentTypeCommitPendingIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeCommitPendingIterator{contract: _BaseContentType.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentTypeCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeCommitPending)
				if err := _BaseContentType.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseCommitPending(log types.Log) (*BaseContentTypeCommitPending, error) {
	event := new(BaseContentTypeCommitPending)
	if err := _BaseContentType.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeEditableMigrateIterator is returned from FilterEditableMigrate and is used to iterate over the raw logs and unpacked data for EditableMigrate events raised by the BaseContentType contract.
type BaseContentTypeEditableMigrateIterator struct {
	Event *BaseContentTypeEditableMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeEditableMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeEditableMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeEditableMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeEditableMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeEditableMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeEditableMigrate represents a EditableMigrate event raised by the BaseContentType contract.
type BaseContentTypeEditableMigrate struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEditableMigrate is a free log retrieval operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseContentType *BaseContentTypeFilterer) FilterEditableMigrate(opts *bind.FilterOpts) (*BaseContentTypeEditableMigrateIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeEditableMigrateIterator{contract: _BaseContentType.contract, event: "EditableMigrate", logs: logs, sub: sub}, nil
}

// WatchEditableMigrate is a free log subscription operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseContentType *BaseContentTypeFilterer) WatchEditableMigrate(opts *bind.WatchOpts, sink chan<- *BaseContentTypeEditableMigrate) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeEditableMigrate)
				if err := _BaseContentType.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEditableMigrate is a log parse operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseContentType *BaseContentTypeFilterer) ParseEditableMigrate(log types.Log) (*BaseContentTypeEditableMigrate, error) {
	event := new(BaseContentTypeEditableMigrate)
	if err := _BaseContentType.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContentType contract.
type BaseContentTypeUpdateRequestIterator struct {
	Event *BaseContentTypeUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeUpdateRequest represents a UpdateRequest event raised by the BaseContentType contract.
type BaseContentTypeUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentTypeUpdateRequestIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeUpdateRequestIterator{contract: _BaseContentType.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentTypeUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeUpdateRequest)
				if err := _BaseContentType.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseUpdateRequest(log types.Log) (*BaseContentTypeUpdateRequest, error) {
	event := new(BaseContentTypeUpdateRequest)
	if err := _BaseContentType.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContentType contract.
type BaseContentTypeVersionConfirmIterator struct {
	Event *BaseContentTypeVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeVersionConfirm represents a VersionConfirm event raised by the BaseContentType contract.
type BaseContentTypeVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentTypeVersionConfirmIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeVersionConfirmIterator{contract: _BaseContentType.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentTypeVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeVersionConfirm)
				if err := _BaseContentType.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseVersionConfirm(log types.Log) (*BaseContentTypeVersionConfirm, error) {
	event := new(BaseContentTypeVersionConfirm)
	if err := _BaseContentType.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContentType contract.
type BaseContentTypeVersionDeleteIterator struct {
	Event *BaseContentTypeVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeVersionDelete represents a VersionDelete event raised by the BaseContentType contract.
type BaseContentTypeVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentTypeVersionDeleteIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeVersionDeleteIterator{contract: _BaseContentType.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentTypeVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeVersionDelete)
				if err := _BaseContentType.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) ParseVersionDelete(log types.Log) (*BaseContentTypeVersionDelete, error) {
	event := new(BaseContentTypeVersionDelete)
	if err := _BaseContentType.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseFactoryABI is the input ABI used to generate the binding from.
const BaseFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createNode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseFactoryFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"b8cfaf05": "createContentType()",
	"5c6dc219": "createNode(address)",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
}

// BaseFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseFactoryBin = "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f42617365466163746f727932303139303830313134303730304d4c000000000060045560018054600160a060020a03199081163290811790925560028054909116909117905561283e8061007e6000396000f30060806040526004361061007f5763ffffffff60e060020a60003504166302d05d3f811461008157806341c0e1b5146100b257806354fd4d50146100c75780635c6dc219146100ee5780636d2e4b1b1461010f5780638da5cb5b14610130578063af570c0414610145578063b8cfaf051461015a578063f2fde38b1461016f575b005b34801561008d57600080fd5b50610096610190565b60408051600160a060020a039092168252519081900360200190f35b3480156100be57600080fd5b5061007f61019f565b3480156100d357600080fd5b506100dc6101db565b60408051918252519081900360200190f35b3480156100fa57600080fd5b50610096600160a060020a03600435166101e1565b34801561011b57600080fd5b5061007f600160a060020a0360043516610298565b34801561013c57600080fd5b506100966102f3565b34801561015157600080fd5b50610096610302565b34801561016657600080fd5b50610096610311565b34801561017b57600080fd5b5061007f600160a060020a0360043516610553565b600154600160a060020a031681565b600254600160a060020a03163214806101c25750600254600160a060020a031633145b15156101cd57600080fd5b600254600160a060020a0316ff5b60045481565b6000806101ec6105c5565b604051809103906000f080158015610208573d6000803e3d6000fd5b50905082600160a060020a031681600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561025357600080fd5b505af1158015610267573d6000803e3d6000fd5b505050506040513d602081101561027d57600080fd5b5051600160a060020a03161461029257600080fd5b92915050565b600154600160a060020a031632146102af57600080fd5b600160a060020a03811615156102c457600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600354600160a060020a031681565b6000806000806000336103226105d5565b600160a060020a03909116815260405190819003602001906000f08015801561034f573d6000803e3d6000fd5b50935033925082600160a060020a031663a2d67fcf6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561039357600080fd5b505af11580156103a7573d6000803e3d6000fd5b505050506040513d60208110156103bd57600080fd5b5051604080517f5d97b6c20000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a03831691638635adb59187918491635d97b6c29160048083019260209291908290030181600087803b15801561042a57600080fd5b505af115801561043e573d6000803e3d6000fd5b505050506040513d602081101561045457600080fd5b5051604080517f186897330000000000000000000000000000000000000000000000000000000081529051600160a060020a0387169163186897339160048083019260209291908290030181600087803b1580156104b157600080fd5b505af11580156104c5573d6000803e3d6000fd5b505050506040513d60208110156104db57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff92831660248501529116604483015251606480830192600092919082900301818387803b15801561053257600080fd5b505af1158015610546573d6000803e3d6000fd5b5095979650505050505050565b600254600160a060020a03163214806105765750600254600160a060020a031633145b151561058157600080fd5b600160a060020a038116151561059657600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604051610471806105e683390190565b604051611dbc80610a5783390190560060806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f4e6f646532303139303331353130353130304d4c00000000000000000000000060045560018054600160a060020a0319908116329081179092556002805490911690911790556103f38061007e6000396000f30060806040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461008f57806341304fac146100c057806341c0e1b51461011957806354fd4d501461012e5780636d2e4b1b146101555780638da5cb5b14610176578063af570c041461018b578063f2fde38b146101a0575b005b34801561009b57600080fd5b506100a46101c1565b60408051600160a060020a039092168252519081900360200190f35b3480156100cc57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261008d9436949293602493928401919081908401838280828437509497506101d09650505050505050565b34801561012557600080fd5b5061008d61029a565b34801561013a57600080fd5b506101436102d6565b60408051918252519081900360200190f35b34801561016157600080fd5b5061008d600160a060020a03600435166102dc565b34801561018257600080fd5b506100a4610337565b34801561019757600080fd5b506100a4610346565b3480156101ac57600080fd5b5061008d600160a060020a0360043516610355565b600154600160a060020a031681565b600254600160a060020a03163214806101f35750600254600160a060020a031633145b15156101fe57600080fd5b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025d578181015183820152602001610245565b50505050905090810190601f16801561028a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b600254600160a060020a03163214806102bd5750600254600160a060020a031633145b15156102c857600080fd5b600254600160a060020a0316ff5b60045481565b600154600160a060020a031632146102f357600080fd5b600160a060020a038116151561030857600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600354600160a060020a031681565b600254600160a060020a03163214806103785750600254600160a060020a031633145b151561038357600080fd5b600160a060020a038116151561039857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820a0cadc6a40fa46faebaa611e56e79afcbcdd3066d57a7976356003cfb35e2d530029608060408190527f41636365737369626c6532303139303232323133353930304d4c0000000000006000557f4f776e61626c6532303139303532383139333830304d4c0000000000000000006001557f4564697461626c6532303139303830313133353530304d4c00000000000000006005557f42617365436f6e74656e745479706532303139303831333130353030304d4c00600c55602080611dbc83398101604052516002805432600160a060020a0319918216811790925560038054821690921790915560048054909116600160a060020a03909216919091179055611ccf806100ed6000396000f30060806040526004361061012e5763ffffffff60e060020a600035041662821de3811461013057806302d05d3f146101615780630fe1b5a21461017657806314cfabb3146101a357806322e564eb146101cc578063331b86c0146101f9578063375a6e7c1461022057806341c0e1b514610235578063446e88261461024a57806354fd4d50146102525780635f6a130114610267578063628449fd1461027c5780636ae5f5e0146103065780636d2e4b1b146103ec5780636e3754271461040d5780637886f747146104225780637ca8f6181461043a5780638da5cb5b146104525780639867db7414610467578063af570c04146104c0578063c287e0ed146104d5578063e02dd9c2146104ea578063e1a70717146104ff578063f155188714610558578063f2fde38b1461056d575b005b34801561013c57600080fd5b5061014561058e565b60408051600160a060020a039092168252519081900360200190f35b34801561016d57600080fd5b5061014561059e565b34801561018257600080fd5b5061012e600160a060020a036004351660ff602435811690604435166105ad565b3480156101af57600080fd5b506101b861067d565b604080519115158252519081900360200190f35b3480156101d857600080fd5b5061012e600160a060020a036004351660ff6024358116906044351661071c565b34801561020557600080fd5b5061020e6107ae565b60408051918252519081900360200190f35b34801561022c57600080fd5b506101b86107b4565b34801561024157600080fd5b5061012e6107bd565b6101b86107f9565b34801561025e57600080fd5b5061020e6109e9565b34801561027357600080fd5b5061012e6109ef565b34801561028857600080fd5b50610291610a2d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102cb5781810151838201526020016102b3565b50505050905090810190601f1680156102f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561031257600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261012e948235600160a060020a039081169560248035909216953695946064949293019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610abb9650505050505050565b3480156103f857600080fd5b5061012e600160a060020a0360043516610c63565b34801561041957600080fd5b506101b8610cbe565b34801561042e57600080fd5b5061020e600435610e75565b34801561044657600080fd5b50610291600435610e94565b34801561045e57600080fd5b50610145610f08565b34801561047357600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261012e943694929360249392840191908190840183828082843750949750610f179650505050505050565b3480156104cc57600080fd5b50610145611044565b3480156104e157600080fd5b5061012e611053565b3480156104f657600080fd5b50610291611129565b34801561050b57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261020e9436949293602493928401919081908401838280828437509497506111849650505050505050565b34801561056457600080fd5b506101b861172c565b34801561057957600080fd5b5061012e600160a060020a036004351661175d565b600454600160a060020a03165b90565b600254600160a060020a031681565b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd9160248082019260209290919082900301818787803b15801561061d57600080fd5b505af1158015610631573d6000803e3d6000fd5b505050506040513d602081101561064757600080fd5b50519050600160a060020a038116151561066b5761066685858561071c565b610676565b61067681858561071c565b5050505050565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e149160248082019260209290919082900301818887803b1580156106e957600080fd5b505af11580156106fd573d6000803e3d6000fd5b505050506040513d602081101561071357600080fd5b505191505b5090565b604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff80851660248301528316604482015290518491600160a060020a03831691638635adb59160648082019260009290919082900301818387803b15801561079057600080fd5b505af11580156107a4573d6000803e3d6000fd5b5050505050505050565b60085490565b600b5460ff1681565b600354600160a060020a03163214806107e05750600354600160a060020a031633145b15156107eb57600080fd5b600354600160a060020a0316ff5b600061080361067d565b151561080e57600080fd5b600b5460ff16151561081f57600080fd5b6000600680546001816001161561010002031660029004905011156108ce5760088054600181810180845560009390935260068054610895937ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30192600261010091831615919091026000190190911604611a3d565b5050600754600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01555b600a80546108f19160069160026000196101006001841615020190911604611a3d565b504260075560408051602081019182905260009081905261091491600a91611abe565b50600b805460ff1916905560045460408051600160a060020a039092168083526020830182815260068054600260001960018316156101000201909116049385018490527f482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e949293909291906060830190849080156109d45780601f106109a9576101008083540402835291602001916109d4565b820191906000526020600020905b8154815290600101906020018083116109b757829003601f168201915b5050935050505060405180910390a150600190565b600c5481565b6109f7610cbe565b1515610a0257600080fd5b604080516020810191829052600090819052610a2091600a91611abe565b50600b805460ff19169055565b600a805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ab35780601f10610a8857610100808354040283529160200191610ab3565b820191906000526020600020905b815481529060010190602001808311610a9657829003601f168201915b505050505081565b610ac3611b2c565b610acb611b2c565b600354606090600090600160a060020a0316321480610af45750600354600160a060020a031633145b1515610aff57600080fd5b8651610b129060069060208a0190611abe565b50855115610c1d57610b23866117cf565b9350610b636040805190810160405280600181526020017f3a000000000000000000000000000000000000000000000000000000000000008152506117cf565b9250610b75848463ffffffff6117f516565b600101604051908082528060200260200182016040528015610bab57816020015b6060815260200190600190039081610b965790505b509150600090505b8151811015610bf457610bd4610bcf858563ffffffff61186216565b611875565b8282815181101515610be257fe5b60209081029091010152600101610bb3565b8151610c07906008906020850190611b43565b508451610c1b906009906020880190611b9c565b505b610c268961175d565b610c2f88610c63565b6040517fae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce5890600090a1505050505050505050565b600254600160a060020a03163214610c7a57600080fd5b600160a060020a0381161515610c8f57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152329381019390935251600092600160a060020a03909216918391829184916363e6ffdd9160248082019260209290919082900301818787803b158015610d2e57600080fd5b505af1158015610d42573d6000803e3d6000fd5b505050506040513d6020811015610d5857600080fd5b50519150600160a060020a03821615610e6a5781905080600160a060020a031663fe538c5a3083600160a060020a0316635d97b6c26040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610dbc57600080fd5b505af1158015610dd0573d6000803e3d6000fd5b505050506040513d6020811015610de657600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b158015610e3757600080fd5b505af1158015610e4b573d6000803e3d6000fd5b505050506040513d6020811015610e6157600080fd5b50519350610e6f565b600093505b50505090565b6009805482908110610e8357fe5b600091825260209091200154905081565b6008805482908110610ea257fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815293509091830182828015610ab35780601f10610a8857610100808354040283529160200191610ab3565b600354600160a060020a031681565b610f1f610cbe565b1515610f2a57600080fd5b600b5460ff1615610f3a57600080fd5b8051608011610f4857600080fd5b8051610f5b90600a906020840190611abe565b50600b805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316610f9f61058e565b60408051600160a060020a038085168252831660208201526060918101828152600a805460026000196101006001841615020190911604938301849052926080830190849080156110315780601f1061100657610100808354040283529160200191611031565b820191906000526020600020905b81548152906001019060200180831161101457829003601f168201915b505094505050505060405180910390a150565b600454600160a060020a031681565b600354600160a060020a031633148061106f575061106f61067d565b151561107a57600080fd5b60408051602080825260068054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156111195780601f106110ee57610100808354040283529160200191611119565b820191906000526020600020905b8154815290600101906020018083116110fc57829003601f168201915b50509250505060405180910390a1565b6006805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ab35780601f10610a8857610100808354040283529160200191610ab3565b600080600080600080611195610cbe565b15156111a057600080fd5b866040516020018082805190602001908083835b602083106111d35780518252601f1990920191602091820191016111b4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106112365780518252601f199092019160209182019101611217565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209450600660405160200180828054600181600116156101000203166002900480156112c55780601f106112a35761010080835404028352918201916112c5565b820191906000526020600020905b8154815290600101906020018083116112b1575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106113085780518252601f1990920191602091820191016112e9565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209650505050848414156114295760408051602081019182905260009081905261135c91600691611abe565b506000600781905560045460408051600160a060020a03909216808352908201839052606060208084018281528c51928501929092528b517f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f519593948d9493909290916080840191860190808383885b838110156113e45781810151838201526020016113cc565b50505050905090810190601f1680156114115780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009550611722565b6000199250600091505b60085482101561163f57600880548390811061144b57fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156114b35780601f106114915761010080835404028352918201916114b3565b820191906000526020600020905b81548152906001019060200180831161149f575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106114f65780518252601f1990920191602091820191016114d7565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912093505050508481141561163457600880548390811061153a57fe5b9060005260206000200160006115509190611bd6565b600980548390811061155e57fe5b60009182526020822001556008546000190182146116045760088054600019810190811061158857fe5b906000526020600020016008838154811015156115a157fe5b9060005260206000200190805460018160011615610100020316600290046115ca929190611a3d565b506009805460001981019081106115dd57fe5b90600052602060002001546009838154811015156115f757fe5b6000918252602090912001555b6008805490611617906000198301611c1d565b50600980549061162b906000198301611c46565b5081925061163f565b600190910190611433565b60001983141561164e57600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031688856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156116e25781810151838201526020016116ca565b50505050905090810190601f16801561170f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18295505b5050505050919050565b6040516000907fed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88908290a150600190565b600354600160a060020a03163214806117805750600354600160a060020a031633145b151561178b57600080fd5b600160a060020a03811615156117a057600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6117d7611b2c565b50604080518082019091528151815260209182019181019190915290565b600080826000015161181985600001518660200151866000015187602001516118c8565b0190505b8351602085015101811161185b5782516020808601518651918601516001909501946118539291850390910390849084906118c8565b01905061181d565b5092915050565b61186a611b2c565b61185b838383611988565b606080600083600001516040519080825280601f01601f1916602001820160405280156118ac578160200160208202803883390190505b50915060208201905061185b81856020015186600001516119f9565b600083818080808080808c8b116119725760208b1161193b5760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b82851461193357838810611920578c8c019850611978565b8780600101985050858851169250611908565b879850611978565b8a8a209150600096505b8a8d03871161197257508987208181141561196257879850611978565b6001978801979690960195611945565b8c8c0198505b5050505050505050949350505050565b611990611b2c565b60006119ae85600001518660200151866000015187602001516118c8565b602080870180519186019190915280518203855286519051919250018114156119da57600085526119f0565b8351835186519101900385528351810160208601525b50909392505050565b60005b60208210611a1e578251845260209384019390920191601f19909101906119fc565b50905182516020929092036101000a6000190180199091169116179052565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a765780548555611ab2565b82800160010185558215611ab257600052602060002091601f016020900482015b82811115611ab2578254825591600101919060010190611a97565b50610718929150611c66565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611aff57805160ff1916838001178555611ab2565b82800160010185558215611ab2579182015b82811115611ab2578251825591602001919060010190611b11565b604080518082019091526000808252602082015290565b828054828255906000526020600020908101928215611b90579160200282015b82811115611b905782518051611b80918491602090910190611abe565b5091602001919060010190611b63565b50610718929150611c80565b828054828255906000526020600020908101928215611ab25791602002820182811115611ab2578251825591602001919060010190611b11565b50805460018160011615610100020316600290046000825580601f10611bfc5750611c1a565b601f016020900490600052602060002090810190611c1a9190611c66565b50565b815481835581811115611c4157600083815260209020611c41918101908301611c80565b505050565b815481835581811115611c4157600083815260209020611c419181019083015b61059b91905b808211156107185760008155600101611c6c565b61059b91905b80821115610718576000611c9a8282611bd6565b50600101611c865600a165627a7a72305820efa46244c9ca8a24019dc280e8cc4a21690f945ab93d5368c97e3c2cd386b7500029a165627a7a7230582039df7a4caf723f906fb4c2e27bced8381b3ac16de817a490da185a1bf3a8a6690029"

// DeployBaseFactory deploys a new Ethereum contract, binding an instance of BaseFactory to it.
func DeployBaseFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseFactory{BaseFactoryCaller: BaseFactoryCaller{contract: contract}, BaseFactoryTransactor: BaseFactoryTransactor{contract: contract}, BaseFactoryFilterer: BaseFactoryFilterer{contract: contract}}, nil
}

// BaseFactory is an auto generated Go binding around an Ethereum contract.
type BaseFactory struct {
	BaseFactoryCaller     // Read-only binding to the contract
	BaseFactoryTransactor // Write-only binding to the contract
	BaseFactoryFilterer   // Log filterer for contract events
}

// BaseFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseFactorySession struct {
	Contract     *BaseFactory      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseFactoryCallerSession struct {
	Contract *BaseFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// BaseFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseFactoryTransactorSession struct {
	Contract     *BaseFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// BaseFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseFactoryRaw struct {
	Contract *BaseFactory // Generic contract binding to access the raw methods on
}

// BaseFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseFactoryCallerRaw struct {
	Contract *BaseFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseFactoryTransactorRaw struct {
	Contract *BaseFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseFactory creates a new instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactory(address common.Address, backend bind.ContractBackend) (*BaseFactory, error) {
	contract, err := bindBaseFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseFactory{BaseFactoryCaller: BaseFactoryCaller{contract: contract}, BaseFactoryTransactor: BaseFactoryTransactor{contract: contract}, BaseFactoryFilterer: BaseFactoryFilterer{contract: contract}}, nil
}

// NewBaseFactoryCaller creates a new read-only instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseFactoryCaller, error) {
	contract, err := bindBaseFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseFactoryCaller{contract: contract}, nil
}

// NewBaseFactoryTransactor creates a new write-only instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseFactoryTransactor, error) {
	contract, err := bindBaseFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseFactoryTransactor{contract: contract}, nil
}

// NewBaseFactoryFilterer creates a new log filterer instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseFactoryFilterer, error) {
	contract, err := bindBaseFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseFactoryFilterer{contract: contract}, nil
}

// bindBaseFactory binds a generic wrapper to an already deployed contract.
func bindBaseFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseFactory *BaseFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseFactory.Contract.BaseFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseFactory *BaseFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseFactory.Contract.BaseFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseFactory *BaseFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseFactory.Contract.BaseFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseFactory *BaseFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseFactory *BaseFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseFactory *BaseFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseFactory.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseFactory *BaseFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseFactory *BaseFactorySession) ContentSpace() (common.Address, error) {
	return _BaseFactory.Contract.ContentSpace(&_BaseFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseFactory *BaseFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseFactory.Contract.ContentSpace(&_BaseFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseFactory *BaseFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseFactory *BaseFactorySession) Creator() (common.Address, error) {
	return _BaseFactory.Contract.Creator(&_BaseFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseFactory *BaseFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseFactory.Contract.Creator(&_BaseFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseFactory *BaseFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseFactory *BaseFactorySession) Owner() (common.Address, error) {
	return _BaseFactory.Contract.Owner(&_BaseFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseFactory *BaseFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseFactory.Contract.Owner(&_BaseFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseFactory *BaseFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseFactory *BaseFactorySession) Version() ([32]byte, error) {
	return _BaseFactory.Contract.Version(&_BaseFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseFactory *BaseFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseFactory.Contract.Version(&_BaseFactory.CallOpts)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseFactory *BaseFactoryTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "createContentType")
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseFactory *BaseFactorySession) CreateContentType() (*types.Transaction, error) {
	return _BaseFactory.Contract.CreateContentType(&_BaseFactory.TransactOpts)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseFactory *BaseFactoryTransactorSession) CreateContentType() (*types.Transaction, error) {
	return _BaseFactory.Contract.CreateContentType(&_BaseFactory.TransactOpts)
}

// CreateNode is a paid mutator transaction binding the contract method 0x5c6dc219.
//
// Solidity: function createNode(address _owner) returns(address)
func (_BaseFactory *BaseFactoryTransactor) CreateNode(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "createNode", _owner)
}

// CreateNode is a paid mutator transaction binding the contract method 0x5c6dc219.
//
// Solidity: function createNode(address _owner) returns(address)
func (_BaseFactory *BaseFactorySession) CreateNode(_owner common.Address) (*types.Transaction, error) {
	return _BaseFactory.Contract.CreateNode(&_BaseFactory.TransactOpts, _owner)
}

// CreateNode is a paid mutator transaction binding the contract method 0x5c6dc219.
//
// Solidity: function createNode(address _owner) returns(address)
func (_BaseFactory *BaseFactoryTransactorSession) CreateNode(_owner common.Address) (*types.Transaction, error) {
	return _BaseFactory.Contract.CreateNode(&_BaseFactory.TransactOpts, _owner)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseFactory *BaseFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseFactory *BaseFactorySession) Kill() (*types.Transaction, error) {
	return _BaseFactory.Contract.Kill(&_BaseFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseFactory *BaseFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseFactory.Contract.Kill(&_BaseFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseFactory *BaseFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseFactory *BaseFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseFactory.Contract.TransferCreatorship(&_BaseFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseFactory *BaseFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseFactory.Contract.TransferCreatorship(&_BaseFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseFactory *BaseFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseFactory *BaseFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseFactory.Contract.TransferOwnership(&_BaseFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseFactory *BaseFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseFactory.Contract.TransferOwnership(&_BaseFactory.TransactOpts, newOwner)
}

// BaseGroupFactoryABI is the input ABI used to generate the binding from.
const BaseGroupFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseGroupFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseGroupFactoryFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"575185ed": "createGroup()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
}

// BaseGroupFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseGroupFactoryBin = ""

// DeployBaseGroupFactory deploys a new Ethereum contract, binding an instance of BaseGroupFactory to it.
func DeployBaseGroupFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseGroupFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseGroupFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseGroupFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseGroupFactory{BaseGroupFactoryCaller: BaseGroupFactoryCaller{contract: contract}, BaseGroupFactoryTransactor: BaseGroupFactoryTransactor{contract: contract}, BaseGroupFactoryFilterer: BaseGroupFactoryFilterer{contract: contract}}, nil
}

// BaseGroupFactory is an auto generated Go binding around an Ethereum contract.
type BaseGroupFactory struct {
	BaseGroupFactoryCaller     // Read-only binding to the contract
	BaseGroupFactoryTransactor // Write-only binding to the contract
	BaseGroupFactoryFilterer   // Log filterer for contract events
}

// BaseGroupFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseGroupFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseGroupFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseGroupFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseGroupFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseGroupFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseGroupFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseGroupFactorySession struct {
	Contract     *BaseGroupFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseGroupFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseGroupFactoryCallerSession struct {
	Contract *BaseGroupFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// BaseGroupFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseGroupFactoryTransactorSession struct {
	Contract     *BaseGroupFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// BaseGroupFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseGroupFactoryRaw struct {
	Contract *BaseGroupFactory // Generic contract binding to access the raw methods on
}

// BaseGroupFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseGroupFactoryCallerRaw struct {
	Contract *BaseGroupFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseGroupFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseGroupFactoryTransactorRaw struct {
	Contract *BaseGroupFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseGroupFactory creates a new instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactory(address common.Address, backend bind.ContractBackend) (*BaseGroupFactory, error) {
	contract, err := bindBaseGroupFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactory{BaseGroupFactoryCaller: BaseGroupFactoryCaller{contract: contract}, BaseGroupFactoryTransactor: BaseGroupFactoryTransactor{contract: contract}, BaseGroupFactoryFilterer: BaseGroupFactoryFilterer{contract: contract}}, nil
}

// NewBaseGroupFactoryCaller creates a new read-only instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseGroupFactoryCaller, error) {
	contract, err := bindBaseGroupFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryCaller{contract: contract}, nil
}

// NewBaseGroupFactoryTransactor creates a new write-only instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseGroupFactoryTransactor, error) {
	contract, err := bindBaseGroupFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryTransactor{contract: contract}, nil
}

// NewBaseGroupFactoryFilterer creates a new log filterer instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseGroupFactoryFilterer, error) {
	contract, err := bindBaseGroupFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryFilterer{contract: contract}, nil
}

// bindBaseGroupFactory binds a generic wrapper to an already deployed contract.
func bindBaseGroupFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseGroupFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseGroupFactory *BaseGroupFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseGroupFactory.Contract.BaseGroupFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseGroupFactory *BaseGroupFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.BaseGroupFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseGroupFactory *BaseGroupFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.BaseGroupFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseGroupFactory *BaseGroupFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseGroupFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseGroupFactory *BaseGroupFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseGroupFactory *BaseGroupFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseGroupFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactorySession) ContentSpace() (common.Address, error) {
	return _BaseGroupFactory.Contract.ContentSpace(&_BaseGroupFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseGroupFactory.Contract.ContentSpace(&_BaseGroupFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseGroupFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactorySession) Creator() (common.Address, error) {
	return _BaseGroupFactory.Contract.Creator(&_BaseGroupFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseGroupFactory.Contract.Creator(&_BaseGroupFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseGroupFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactorySession) Owner() (common.Address, error) {
	return _BaseGroupFactory.Contract.Owner(&_BaseGroupFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseGroupFactory.Contract.Owner(&_BaseGroupFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseGroupFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactorySession) Version() ([32]byte, error) {
	return _BaseGroupFactory.Contract.Version(&_BaseGroupFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseGroupFactory.Contract.Version(&_BaseGroupFactory.CallOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseGroupFactory *BaseGroupFactoryTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "createGroup")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseGroupFactory *BaseGroupFactorySession) CreateGroup() (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.CreateGroup(&_BaseGroupFactory.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseGroupFactory *BaseGroupFactoryTransactorSession) CreateGroup() (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.CreateGroup(&_BaseGroupFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseGroupFactory *BaseGroupFactorySession) Kill() (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.Kill(&_BaseGroupFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.Kill(&_BaseGroupFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseGroupFactory *BaseGroupFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.TransferCreatorship(&_BaseGroupFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.TransferCreatorship(&_BaseGroupFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseGroupFactory *BaseGroupFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.TransferOwnership(&_BaseGroupFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.TransferOwnership(&_BaseGroupFactory.TransactOpts, newOwner)
}

// BaseLibraryABI is the input ABI used to generate the binding from.
const BaseLibraryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"updateAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approvalRequestsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeReviewerGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addAccessorGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reviewerGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributorGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accessorGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeContributorGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"submitApprovalRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPendingApprovalRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addContributorGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_objectHash\",\"type\":\"string\"},{\"name\":\"_versionHashesConcat\",\"type\":\"string\"},{\"name\":\"_versionTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"migrateEditable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_contract\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"approveContent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contentAddr\",\"type\":\"address\"}],\"name\":\"deleteContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvalRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reviewerGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addReviewerGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessorGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeAccessorGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"},{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"content_type\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"}],\"name\":\"ContentObjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"}],\"name\":\"ContentObjectDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ContributorGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ContributorGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ReviewerGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ReviewerGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"AccessorGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"AccessorGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operationCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"UnauthorizedOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"ApproveContentRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"ApproveContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addressKms\",\"type\":\"address\"}],\"name\":\"UpdateKmsAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EditableMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AccessRequest\",\"type\":\"event\"}]"

// BaseLibraryFuncSigs maps the 4-byte function signature to its string representation.
var BaseLibraryFuncSigs = map[string]string{
	"f1551887": "accessRequest()",
	"2c11f392": "accessorGroups(uint256)",
	"e5538fd2": "accessorGroupsLength()",
	"1d0f4351": "addAccessorGroup(address)",
	"0f58a786": "addContentType(address,address)",
	"679a9a3c": "addContributorGroup(address)",
	"dc3c29c0": "addReviewerGroup(address)",
	"32eaf21b": "addressKMS()",
	"8cb13c2e": "approvalRequests(uint256)",
	"16308394": "approvalRequestsLength()",
	"87e86b2c": "approveContent(address,bool,string)",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"0eaec2c5": "canContribute(address)",
	"26683e14": "canNodePublish(address)",
	"cbcd4461": "canPublish()",
	"9b55f901": "canPublish(address)",
	"29d00219": "canReview(address)",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"1cdbee5a": "contentTypeContracts(address)",
	"991a3a7c": "contentTypes(uint256)",
	"c65bcbe2": "contentTypesLength()",
	"2393553b": "contributorGroups(uint256)",
	"470750bb": "contributorGroupsLength()",
	"331b86c0": "countVersionHashes()",
	"1e35d8fa": "createContent(address)",
	"02d05d3f": "creator()",
	"87fcd0b8": "deleteContent(address)",
	"e1a70717": "deleteVersion(string)",
	"1f2caaec": "findTypeByHash(bytes32)",
	"ac55c906": "getMeta(bytes)",
	"63dab9d4": "getPendingApprovalRequest(uint256)",
	"95a078e8": "hasAccess(address)",
	"41c0e1b5": "kill()",
	"6ae5f5e0": "migrateEditable(address,address,string,string,uint256[])",
	"e02dd9c2": "objectHash()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"2cf99422": "publish(address)",
	"e542b7cb": "putMeta(bytes,bytes)",
	"e8de515f": "removeAccessorGroup(address)",
	"fd089196": "removeContentType(address)",
	"386493e0": "removeContributorGroup(address)",
	"1b969895": "removeReviewerGroup(address)",
	"3dd71d99": "requiresReview()",
	"952e464b": "reviewerGroups(uint256)",
	"21770a84": "reviewerGroupsLength()",
	"c9e8e72d": "setAddressKMS(address)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"49102e61": "submitApprovalRequest()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"011e01a5": "updateAddressKMS(address)",
	"c287e0ed": "updateRequest()",
	"29dedde5": "validType(address)",
	"54fd4d50": "version()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"9cb121ba": "whitelistedType(address)",
}

// BaseLibraryBin is the compiled bytecode used for deploying new contracts.
var BaseLibraryBin = ""

// DeployBaseLibrary deploys a new Ethereum contract, binding an instance of BaseLibrary to it.
func DeployBaseLibrary(auth *bind.TransactOpts, backend bind.ContractBackend, address_KMS common.Address, content_space common.Address) (common.Address, *types.Transaction, *BaseLibrary, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseLibraryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseLibraryBin), backend, address_KMS, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseLibrary{BaseLibraryCaller: BaseLibraryCaller{contract: contract}, BaseLibraryTransactor: BaseLibraryTransactor{contract: contract}, BaseLibraryFilterer: BaseLibraryFilterer{contract: contract}}, nil
}

// BaseLibrary is an auto generated Go binding around an Ethereum contract.
type BaseLibrary struct {
	BaseLibraryCaller     // Read-only binding to the contract
	BaseLibraryTransactor // Write-only binding to the contract
	BaseLibraryFilterer   // Log filterer for contract events
}

// BaseLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseLibrarySession struct {
	Contract     *BaseLibrary      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseLibraryCallerSession struct {
	Contract *BaseLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// BaseLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseLibraryTransactorSession struct {
	Contract     *BaseLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// BaseLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseLibraryRaw struct {
	Contract *BaseLibrary // Generic contract binding to access the raw methods on
}

// BaseLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseLibraryCallerRaw struct {
	Contract *BaseLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseLibraryTransactorRaw struct {
	Contract *BaseLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseLibrary creates a new instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibrary(address common.Address, backend bind.ContractBackend) (*BaseLibrary, error) {
	contract, err := bindBaseLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseLibrary{BaseLibraryCaller: BaseLibraryCaller{contract: contract}, BaseLibraryTransactor: BaseLibraryTransactor{contract: contract}, BaseLibraryFilterer: BaseLibraryFilterer{contract: contract}}, nil
}

// NewBaseLibraryCaller creates a new read-only instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryCaller(address common.Address, caller bind.ContractCaller) (*BaseLibraryCaller, error) {
	contract, err := bindBaseLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryCaller{contract: contract}, nil
}

// NewBaseLibraryTransactor creates a new write-only instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseLibraryTransactor, error) {
	contract, err := bindBaseLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryTransactor{contract: contract}, nil
}

// NewBaseLibraryFilterer creates a new log filterer instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseLibraryFilterer, error) {
	contract, err := bindBaseLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFilterer{contract: contract}, nil
}

// bindBaseLibrary binds a generic wrapper to an already deployed contract.
func bindBaseLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseLibrary *BaseLibraryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseLibrary.Contract.BaseLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseLibrary *BaseLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.Contract.BaseLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseLibrary *BaseLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseLibrary.Contract.BaseLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseLibrary *BaseLibraryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseLibrary *BaseLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseLibrary *BaseLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseLibrary.Contract.contract.Transact(opts, method, params...)
}

// AccessorGroups is a free data retrieval call binding the contract method 0x2c11f392.
//
// Solidity: function accessorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) AccessorGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "accessorGroups", arg0)
	return *ret0, err
}

// AccessorGroups is a free data retrieval call binding the contract method 0x2c11f392.
//
// Solidity: function accessorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) AccessorGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.AccessorGroups(&_BaseLibrary.CallOpts, arg0)
}

// AccessorGroups is a free data retrieval call binding the contract method 0x2c11f392.
//
// Solidity: function accessorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) AccessorGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.AccessorGroups(&_BaseLibrary.CallOpts, arg0)
}

// AccessorGroupsLength is a free data retrieval call binding the contract method 0xe5538fd2.
//
// Solidity: function accessorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) AccessorGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "accessorGroupsLength")
	return *ret0, err
}

// AccessorGroupsLength is a free data retrieval call binding the contract method 0xe5538fd2.
//
// Solidity: function accessorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) AccessorGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.AccessorGroupsLength(&_BaseLibrary.CallOpts)
}

// AccessorGroupsLength is a free data retrieval call binding the contract method 0xe5538fd2.
//
// Solidity: function accessorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) AccessorGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.AccessorGroupsLength(&_BaseLibrary.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) AddressKMS() (common.Address, error) {
	return _BaseLibrary.Contract.AddressKMS(&_BaseLibrary.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) AddressKMS() (common.Address, error) {
	return _BaseLibrary.Contract.AddressKMS(&_BaseLibrary.CallOpts)
}

// ApprovalRequests is a free data retrieval call binding the contract method 0x8cb13c2e.
//
// Solidity: function approvalRequests(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ApprovalRequests(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "approvalRequests", arg0)
	return *ret0, err
}

// ApprovalRequests is a free data retrieval call binding the contract method 0x8cb13c2e.
//
// Solidity: function approvalRequests(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ApprovalRequests(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ApprovalRequests(&_BaseLibrary.CallOpts, arg0)
}

// ApprovalRequests is a free data retrieval call binding the contract method 0x8cb13c2e.
//
// Solidity: function approvalRequests(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ApprovalRequests(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ApprovalRequests(&_BaseLibrary.CallOpts, arg0)
}

// ApprovalRequestsLength is a free data retrieval call binding the contract method 0x16308394.
//
// Solidity: function approvalRequestsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ApprovalRequestsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "approvalRequestsLength")
	return *ret0, err
}

// ApprovalRequestsLength is a free data retrieval call binding the contract method 0x16308394.
//
// Solidity: function approvalRequestsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) ApprovalRequestsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ApprovalRequestsLength(&_BaseLibrary.CallOpts)
}

// ApprovalRequestsLength is a free data retrieval call binding the contract method 0x16308394.
//
// Solidity: function approvalRequestsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) ApprovalRequestsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ApprovalRequestsLength(&_BaseLibrary.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanCommit() (bool, error) {
	return _BaseLibrary.Contract.CanCommit(&_BaseLibrary.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanCommit() (bool, error) {
	return _BaseLibrary.Contract.CanCommit(&_BaseLibrary.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanConfirm() (bool, error) {
	return _BaseLibrary.Contract.CanConfirm(&_BaseLibrary.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanConfirm() (bool, error) {
	return _BaseLibrary.Contract.CanConfirm(&_BaseLibrary.CallOpts)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canContribute", _candidate)
	return *ret0, err
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanContribute(&_BaseLibrary.CallOpts, _candidate)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanContribute(&_BaseLibrary.CallOpts, _candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canNodePublish", candidate)
	return *ret0, err
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanNodePublish(candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanNodePublish(&_BaseLibrary.CallOpts, candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanNodePublish(&_BaseLibrary.CallOpts, candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canPublish", _candidate)
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanPublish(&_BaseLibrary.CallOpts, _candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanPublish(&_BaseLibrary.CallOpts, _candidate)
}

// CanPublish0 is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanPublish0(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canPublish0")
	return *ret0, err
}

// CanPublish0 is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanPublish0() (bool, error) {
	return _BaseLibrary.Contract.CanPublish0(&_BaseLibrary.CallOpts)
}

// CanPublish0 is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanPublish0() (bool, error) {
	return _BaseLibrary.Contract.CanPublish0(&_BaseLibrary.CallOpts)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanReview(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canReview", _candidate)
	return *ret0, err
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanReview(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanReview(&_BaseLibrary.CallOpts, _candidate)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanReview(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanReview(&_BaseLibrary.CallOpts, _candidate)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CommitPending() (bool, error) {
	return _BaseLibrary.Contract.CommitPending(&_BaseLibrary.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CommitPending() (bool, error) {
	return _BaseLibrary.Contract.CommitPending(&_BaseLibrary.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ContentSpace() (common.Address, error) {
	return _BaseLibrary.Contract.ContentSpace(&_BaseLibrary.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseLibrary.Contract.ContentSpace(&_BaseLibrary.CallOpts)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contentTypeContracts", arg0)
	return *ret0, err
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseLibrary.Contract.ContentTypeContracts(&_BaseLibrary.CallOpts, arg0)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseLibrary.Contract.ContentTypeContracts(&_BaseLibrary.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contentTypes", arg0)
	return *ret0, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ContentTypes(&_BaseLibrary.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ContentTypes(&_BaseLibrary.CallOpts, arg0)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contentTypesLength")
	return *ret0, err
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) ContentTypesLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ContentTypesLength(&_BaseLibrary.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) ContentTypesLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ContentTypesLength(&_BaseLibrary.CallOpts)
}

// ContributorGroups is a free data retrieval call binding the contract method 0x2393553b.
//
// Solidity: function contributorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContributorGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contributorGroups", arg0)
	return *ret0, err
}

// ContributorGroups is a free data retrieval call binding the contract method 0x2393553b.
//
// Solidity: function contributorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ContributorGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ContributorGroups(&_BaseLibrary.CallOpts, arg0)
}

// ContributorGroups is a free data retrieval call binding the contract method 0x2393553b.
//
// Solidity: function contributorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ContributorGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ContributorGroups(&_BaseLibrary.CallOpts, arg0)
}

// ContributorGroupsLength is a free data retrieval call binding the contract method 0x470750bb.
//
// Solidity: function contributorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ContributorGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contributorGroupsLength")
	return *ret0, err
}

// ContributorGroupsLength is a free data retrieval call binding the contract method 0x470750bb.
//
// Solidity: function contributorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) ContributorGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ContributorGroupsLength(&_BaseLibrary.CallOpts)
}

// ContributorGroupsLength is a free data retrieval call binding the contract method 0x470750bb.
//
// Solidity: function contributorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) ContributorGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ContributorGroupsLength(&_BaseLibrary.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) CountVersionHashes() (*big.Int, error) {
	return _BaseLibrary.Contract.CountVersionHashes(&_BaseLibrary.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseLibrary.Contract.CountVersionHashes(&_BaseLibrary.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) Creator() (common.Address, error) {
	return _BaseLibrary.Contract.Creator(&_BaseLibrary.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) Creator() (common.Address, error) {
	return _BaseLibrary.Contract.Creator(&_BaseLibrary.CallOpts)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "findTypeByHash", typeHash)
	return *ret0, err
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseLibrary.Contract.FindTypeByHash(&_BaseLibrary.CallOpts, typeHash)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseLibrary.Contract.FindTypeByHash(&_BaseLibrary.CallOpts, typeHash)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseLibrary *BaseLibraryCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseLibrary *BaseLibrarySession) GetMeta(key []byte) ([]byte, error) {
	return _BaseLibrary.Contract.GetMeta(&_BaseLibrary.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseLibrary *BaseLibraryCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseLibrary.Contract.GetMeta(&_BaseLibrary.CallOpts, key)
}

// GetPendingApprovalRequest is a free data retrieval call binding the contract method 0x63dab9d4.
//
// Solidity: function getPendingApprovalRequest(uint256 index) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) GetPendingApprovalRequest(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "getPendingApprovalRequest", index)
	return *ret0, err
}

// GetPendingApprovalRequest is a free data retrieval call binding the contract method 0x63dab9d4.
//
// Solidity: function getPendingApprovalRequest(uint256 index) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) GetPendingApprovalRequest(index *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.GetPendingApprovalRequest(&_BaseLibrary.CallOpts, index)
}

// GetPendingApprovalRequest is a free data retrieval call binding the contract method 0x63dab9d4.
//
// Solidity: function getPendingApprovalRequest(uint256 index) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) GetPendingApprovalRequest(index *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.GetPendingApprovalRequest(&_BaseLibrary.CallOpts, index)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) HasAccess(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "hasAccess", _candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) HasAccess(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.HasAccess(&_BaseLibrary.CallOpts, _candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) HasAccess(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.HasAccess(&_BaseLibrary.CallOpts, _candidate)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseLibrary *BaseLibraryCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseLibrary *BaseLibrarySession) ObjectHash() (string, error) {
	return _BaseLibrary.Contract.ObjectHash(&_BaseLibrary.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseLibrary *BaseLibraryCallerSession) ObjectHash() (string, error) {
	return _BaseLibrary.Contract.ObjectHash(&_BaseLibrary.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) Owner() (common.Address, error) {
	return _BaseLibrary.Contract.Owner(&_BaseLibrary.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) Owner() (common.Address, error) {
	return _BaseLibrary.Contract.Owner(&_BaseLibrary.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ParentAddress() (common.Address, error) {
	return _BaseLibrary.Contract.ParentAddress(&_BaseLibrary.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ParentAddress() (common.Address, error) {
	return _BaseLibrary.Contract.ParentAddress(&_BaseLibrary.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseLibrary *BaseLibraryCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseLibrary *BaseLibrarySession) PendingHash() (string, error) {
	return _BaseLibrary.Contract.PendingHash(&_BaseLibrary.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseLibrary *BaseLibraryCallerSession) PendingHash() (string, error) {
	return _BaseLibrary.Contract.PendingHash(&_BaseLibrary.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "requiresReview")
	return *ret0, err
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) RequiresReview() (bool, error) {
	return _BaseLibrary.Contract.RequiresReview(&_BaseLibrary.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) RequiresReview() (bool, error) {
	return _BaseLibrary.Contract.RequiresReview(&_BaseLibrary.CallOpts)
}

// ReviewerGroups is a free data retrieval call binding the contract method 0x952e464b.
//
// Solidity: function reviewerGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ReviewerGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "reviewerGroups", arg0)
	return *ret0, err
}

// ReviewerGroups is a free data retrieval call binding the contract method 0x952e464b.
//
// Solidity: function reviewerGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ReviewerGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ReviewerGroups(&_BaseLibrary.CallOpts, arg0)
}

// ReviewerGroups is a free data retrieval call binding the contract method 0x952e464b.
//
// Solidity: function reviewerGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ReviewerGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ReviewerGroups(&_BaseLibrary.CallOpts, arg0)
}

// ReviewerGroupsLength is a free data retrieval call binding the contract method 0x21770a84.
//
// Solidity: function reviewerGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ReviewerGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "reviewerGroupsLength")
	return *ret0, err
}

// ReviewerGroupsLength is a free data retrieval call binding the contract method 0x21770a84.
//
// Solidity: function reviewerGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) ReviewerGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ReviewerGroupsLength(&_BaseLibrary.CallOpts)
}

// ReviewerGroupsLength is a free data retrieval call binding the contract method 0x21770a84.
//
// Solidity: function reviewerGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) ReviewerGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ReviewerGroupsLength(&_BaseLibrary.CallOpts)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "validType", content_type)
	return *ret0, err
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) ValidType(content_type common.Address) (bool, error) {
	return _BaseLibrary.Contract.ValidType(&_BaseLibrary.CallOpts, content_type)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseLibrary.Contract.ValidType(&_BaseLibrary.CallOpts, content_type)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibrary *BaseLibraryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibrary *BaseLibrarySession) Version() ([32]byte, error) {
	return _BaseLibrary.Contract.Version(&_BaseLibrary.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibrary *BaseLibraryCallerSession) Version() ([32]byte, error) {
	return _BaseLibrary.Contract.Version(&_BaseLibrary.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseLibrary *BaseLibraryCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseLibrary *BaseLibrarySession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseLibrary.Contract.VersionHashes(&_BaseLibrary.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseLibrary *BaseLibraryCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseLibrary.Contract.VersionHashes(&_BaseLibrary.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseLibrary.Contract.VersionTimestamp(&_BaseLibrary.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseLibrary.Contract.VersionTimestamp(&_BaseLibrary.CallOpts, arg0)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "whitelistedType", content_type)
	return *ret0, err
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseLibrary.Contract.WhitelistedType(&_BaseLibrary.CallOpts, content_type)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseLibrary.Contract.WhitelistedType(&_BaseLibrary.CallOpts, content_type)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) AccessRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "accessRequest")
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseLibrary *BaseLibrarySession) AccessRequest() (*types.Transaction, error) {
	return _BaseLibrary.Contract.AccessRequest(&_BaseLibrary.TransactOpts)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) AccessRequest() (*types.Transaction, error) {
	return _BaseLibrary.Contract.AccessRequest(&_BaseLibrary.TransactOpts)
}

// AddAccessorGroup is a paid mutator transaction binding the contract method 0x1d0f4351.
//
// Solidity: function addAccessorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddAccessorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addAccessorGroup", group)
}

// AddAccessorGroup is a paid mutator transaction binding the contract method 0x1d0f4351.
//
// Solidity: function addAccessorGroup(address group) returns()
func (_BaseLibrary *BaseLibrarySession) AddAccessorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddAccessorGroup(&_BaseLibrary.TransactOpts, group)
}

// AddAccessorGroup is a paid mutator transaction binding the contract method 0x1d0f4351.
//
// Solidity: function addAccessorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) AddAccessorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddAccessorGroup(&_BaseLibrary.TransactOpts, group)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseLibrary *BaseLibrarySession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddContentType(&_BaseLibrary.TransactOpts, content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddContentType(&_BaseLibrary.TransactOpts, content_type, content_contract)
}

// AddContributorGroup is a paid mutator transaction binding the contract method 0x679a9a3c.
//
// Solidity: function addContributorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddContributorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addContributorGroup", group)
}

// AddContributorGroup is a paid mutator transaction binding the contract method 0x679a9a3c.
//
// Solidity: function addContributorGroup(address group) returns()
func (_BaseLibrary *BaseLibrarySession) AddContributorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddContributorGroup(&_BaseLibrary.TransactOpts, group)
}

// AddContributorGroup is a paid mutator transaction binding the contract method 0x679a9a3c.
//
// Solidity: function addContributorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) AddContributorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddContributorGroup(&_BaseLibrary.TransactOpts, group)
}

// AddReviewerGroup is a paid mutator transaction binding the contract method 0xdc3c29c0.
//
// Solidity: function addReviewerGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddReviewerGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addReviewerGroup", group)
}

// AddReviewerGroup is a paid mutator transaction binding the contract method 0xdc3c29c0.
//
// Solidity: function addReviewerGroup(address group) returns()
func (_BaseLibrary *BaseLibrarySession) AddReviewerGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddReviewerGroup(&_BaseLibrary.TransactOpts, group)
}

// AddReviewerGroup is a paid mutator transaction binding the contract method 0xdc3c29c0.
//
// Solidity: function addReviewerGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) AddReviewerGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddReviewerGroup(&_BaseLibrary.TransactOpts, group)
}

// ApproveContent is a paid mutator transaction binding the contract method 0x87e86b2c.
//
// Solidity: function approveContent(address content_contract, bool approved, string note) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) ApproveContent(opts *bind.TransactOpts, content_contract common.Address, approved bool, note string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "approveContent", content_contract, approved, note)
}

// ApproveContent is a paid mutator transaction binding the contract method 0x87e86b2c.
//
// Solidity: function approveContent(address content_contract, bool approved, string note) returns(bool)
func (_BaseLibrary *BaseLibrarySession) ApproveContent(content_contract common.Address, approved bool, note string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.ApproveContent(&_BaseLibrary.TransactOpts, content_contract, approved, note)
}

// ApproveContent is a paid mutator transaction binding the contract method 0x87e86b2c.
//
// Solidity: function approveContent(address content_contract, bool approved, string note) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) ApproveContent(content_contract common.Address, approved bool, note string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.ApproveContent(&_BaseLibrary.TransactOpts, content_contract, approved, note)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseLibrary *BaseLibraryTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseLibrary *BaseLibrarySession) ClearPending() (*types.Transaction, error) {
	return _BaseLibrary.Contract.ClearPending(&_BaseLibrary.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseLibrary *BaseLibraryTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseLibrary.Contract.ClearPending(&_BaseLibrary.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseLibrary *BaseLibraryTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseLibrary *BaseLibrarySession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.Commit(&_BaseLibrary.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.Commit(&_BaseLibrary.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseLibrary *BaseLibrarySession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseLibrary.Contract.ConfirmCommit(&_BaseLibrary.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseLibrary.Contract.ConfirmCommit(&_BaseLibrary.TransactOpts)
}

// CreateContent is a paid mutator transaction binding the contract method 0x1e35d8fa.
//
// Solidity: function createContent(address content_type) returns(address)
func (_BaseLibrary *BaseLibraryTransactor) CreateContent(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "createContent", content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0x1e35d8fa.
//
// Solidity: function createContent(address content_type) returns(address)
func (_BaseLibrary *BaseLibrarySession) CreateContent(content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.CreateContent(&_BaseLibrary.TransactOpts, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0x1e35d8fa.
//
// Solidity: function createContent(address content_type) returns(address)
func (_BaseLibrary *BaseLibraryTransactorSession) CreateContent(content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.CreateContent(&_BaseLibrary.TransactOpts, content_type)
}

// DeleteContent is a paid mutator transaction binding the contract method 0x87fcd0b8.
//
// Solidity: function deleteContent(address _contentAddr) returns()
func (_BaseLibrary *BaseLibraryTransactor) DeleteContent(opts *bind.TransactOpts, _contentAddr common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "deleteContent", _contentAddr)
}

// DeleteContent is a paid mutator transaction binding the contract method 0x87fcd0b8.
//
// Solidity: function deleteContent(address _contentAddr) returns()
func (_BaseLibrary *BaseLibrarySession) DeleteContent(_contentAddr common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.DeleteContent(&_BaseLibrary.TransactOpts, _contentAddr)
}

// DeleteContent is a paid mutator transaction binding the contract method 0x87fcd0b8.
//
// Solidity: function deleteContent(address _contentAddr) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) DeleteContent(_contentAddr common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.DeleteContent(&_BaseLibrary.TransactOpts, _contentAddr)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseLibrary *BaseLibraryTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseLibrary *BaseLibrarySession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.DeleteVersion(&_BaseLibrary.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseLibrary *BaseLibraryTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.DeleteVersion(&_BaseLibrary.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibrary *BaseLibraryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibrary *BaseLibrarySession) Kill() (*types.Transaction, error) {
	return _BaseLibrary.Contract.Kill(&_BaseLibrary.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibrary *BaseLibraryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseLibrary.Contract.Kill(&_BaseLibrary.TransactOpts)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseLibrary *BaseLibraryTransactor) MigrateEditable(opts *bind.TransactOpts, _owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "migrateEditable", _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseLibrary *BaseLibrarySession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseLibrary.Contract.MigrateEditable(&_BaseLibrary.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _BaseLibrary.Contract.MigrateEditable(&_BaseLibrary.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "publish", contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseLibrary *BaseLibrarySession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.Publish(&_BaseLibrary.TransactOpts, contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.Publish(&_BaseLibrary.TransactOpts, contentObj)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseLibrary *BaseLibraryTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseLibrary *BaseLibrarySession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseLibrary.Contract.PutMeta(&_BaseLibrary.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseLibrary.Contract.PutMeta(&_BaseLibrary.TransactOpts, key, value)
}

// RemoveAccessorGroup is a paid mutator transaction binding the contract method 0xe8de515f.
//
// Solidity: function removeAccessorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveAccessorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeAccessorGroup", group)
}

// RemoveAccessorGroup is a paid mutator transaction binding the contract method 0xe8de515f.
//
// Solidity: function removeAccessorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibrarySession) RemoveAccessorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveAccessorGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveAccessorGroup is a paid mutator transaction binding the contract method 0xe8de515f.
//
// Solidity: function removeAccessorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) RemoveAccessorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveAccessorGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseLibrary *BaseLibrarySession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveContentType(&_BaseLibrary.TransactOpts, content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveContentType(&_BaseLibrary.TransactOpts, content_type)
}

// RemoveContributorGroup is a paid mutator transaction binding the contract method 0x386493e0.
//
// Solidity: function removeContributorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveContributorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeContributorGroup", group)
}

// RemoveContributorGroup is a paid mutator transaction binding the contract method 0x386493e0.
//
// Solidity: function removeContributorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibrarySession) RemoveContributorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveContributorGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveContributorGroup is a paid mutator transaction binding the contract method 0x386493e0.
//
// Solidity: function removeContributorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) RemoveContributorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveContributorGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveReviewerGroup is a paid mutator transaction binding the contract method 0x1b969895.
//
// Solidity: function removeReviewerGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveReviewerGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeReviewerGroup", group)
}

// RemoveReviewerGroup is a paid mutator transaction binding the contract method 0x1b969895.
//
// Solidity: function removeReviewerGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibrarySession) RemoveReviewerGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveReviewerGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveReviewerGroup is a paid mutator transaction binding the contract method 0x1b969895.
//
// Solidity: function removeReviewerGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) RemoveReviewerGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveReviewerGroup(&_BaseLibrary.TransactOpts, group)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibrarySession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetAddressKMS(&_BaseLibrary.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetAddressKMS(&_BaseLibrary.TransactOpts, address_KMS)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibrarySession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetGroupRights(&_BaseLibrary.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetGroupRights(&_BaseLibrary.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibrarySession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetRights(&_BaseLibrary.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetRights(&_BaseLibrary.TransactOpts, stakeholder, access_type, access)
}

// SubmitApprovalRequest is a paid mutator transaction binding the contract method 0x49102e61.
//
// Solidity: function submitApprovalRequest() returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) SubmitApprovalRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "submitApprovalRequest")
}

// SubmitApprovalRequest is a paid mutator transaction binding the contract method 0x49102e61.
//
// Solidity: function submitApprovalRequest() returns(bool)
func (_BaseLibrary *BaseLibrarySession) SubmitApprovalRequest() (*types.Transaction, error) {
	return _BaseLibrary.Contract.SubmitApprovalRequest(&_BaseLibrary.TransactOpts)
}

// SubmitApprovalRequest is a paid mutator transaction binding the contract method 0x49102e61.
//
// Solidity: function submitApprovalRequest() returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) SubmitApprovalRequest() (*types.Transaction, error) {
	return _BaseLibrary.Contract.SubmitApprovalRequest(&_BaseLibrary.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibrary *BaseLibraryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibrary *BaseLibrarySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.TransferCreatorship(&_BaseLibrary.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.TransferCreatorship(&_BaseLibrary.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibrary *BaseLibraryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibrary *BaseLibrarySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.TransferOwnership(&_BaseLibrary.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.TransferOwnership(&_BaseLibrary.TransactOpts, newOwner)
}

// UpdateAddressKMS is a paid mutator transaction binding the contract method 0x011e01a5.
//
// Solidity: function updateAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactor) UpdateAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "updateAddressKMS", address_KMS)
}

// UpdateAddressKMS is a paid mutator transaction binding the contract method 0x011e01a5.
//
// Solidity: function updateAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibrarySession) UpdateAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.UpdateAddressKMS(&_BaseLibrary.TransactOpts, address_KMS)
}

// UpdateAddressKMS is a paid mutator transaction binding the contract method 0x011e01a5.
//
// Solidity: function updateAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) UpdateAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.UpdateAddressKMS(&_BaseLibrary.TransactOpts, address_KMS)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseLibrary *BaseLibraryTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseLibrary *BaseLibrarySession) UpdateRequest() (*types.Transaction, error) {
	return _BaseLibrary.Contract.UpdateRequest(&_BaseLibrary.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseLibrary *BaseLibraryTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseLibrary.Contract.UpdateRequest(&_BaseLibrary.TransactOpts)
}

// BaseLibraryAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseLibrary contract.
type BaseLibraryAccessRequestIterator struct {
	Event *BaseLibraryAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessRequest represents a AccessRequest event raised by the BaseLibrary contract.
type BaseLibraryAccessRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseLibraryAccessRequestIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessRequestIterator{contract: _BaseLibrary.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessRequest)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessRequest(log types.Log) (*BaseLibraryAccessRequest, error) {
	event := new(BaseLibraryAccessRequest)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryAccessorGroupAddedIterator is returned from FilterAccessorGroupAdded and is used to iterate over the raw logs and unpacked data for AccessorGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupAddedIterator struct {
	Event *BaseLibraryAccessorGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessorGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessorGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessorGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessorGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessorGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessorGroupAdded represents a AccessorGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAccessorGroupAdded is a free log retrieval operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessorGroupAdded(opts *bind.FilterOpts) (*BaseLibraryAccessorGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessorGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessorGroupAddedIterator{contract: _BaseLibrary.contract, event: "AccessorGroupAdded", logs: logs, sub: sub}, nil
}

// WatchAccessorGroupAdded is a free log subscription operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessorGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessorGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessorGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessorGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessorGroupAdded is a log parse operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessorGroupAdded(log types.Log) (*BaseLibraryAccessorGroupAdded, error) {
	event := new(BaseLibraryAccessorGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryAccessorGroupRemovedIterator is returned from FilterAccessorGroupRemoved and is used to iterate over the raw logs and unpacked data for AccessorGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupRemovedIterator struct {
	Event *BaseLibraryAccessorGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessorGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessorGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessorGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessorGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessorGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessorGroupRemoved represents a AccessorGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAccessorGroupRemoved is a free log retrieval operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessorGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryAccessorGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessorGroupRemovedIterator{contract: _BaseLibrary.contract, event: "AccessorGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchAccessorGroupRemoved is a free log subscription operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessorGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessorGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessorGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessorGroupRemoved is a log parse operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessorGroupRemoved(log types.Log) (*BaseLibraryAccessorGroupRemoved, error) {
	event := new(BaseLibraryAccessorGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryApproveContentIterator is returned from FilterApproveContent and is used to iterate over the raw logs and unpacked data for ApproveContent events raised by the BaseLibrary contract.
type BaseLibraryApproveContentIterator struct {
	Event *BaseLibraryApproveContent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryApproveContentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryApproveContent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryApproveContent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryApproveContentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryApproveContentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryApproveContent represents a ApproveContent event raised by the BaseLibrary contract.
type BaseLibraryApproveContent struct {
	ContentAddress common.Address
	Approved       bool
	Note           string
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApproveContent is a free log retrieval operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) FilterApproveContent(opts *bind.FilterOpts) (*BaseLibraryApproveContentIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ApproveContent")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryApproveContentIterator{contract: _BaseLibrary.contract, event: "ApproveContent", logs: logs, sub: sub}, nil
}

// WatchApproveContent is a free log subscription operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) WatchApproveContent(opts *bind.WatchOpts, sink chan<- *BaseLibraryApproveContent) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ApproveContent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryApproveContent)
				if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveContent is a log parse operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) ParseApproveContent(log types.Log) (*BaseLibraryApproveContent, error) {
	event := new(BaseLibraryApproveContent)
	if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryApproveContentRequestIterator is returned from FilterApproveContentRequest and is used to iterate over the raw logs and unpacked data for ApproveContentRequest events raised by the BaseLibrary contract.
type BaseLibraryApproveContentRequestIterator struct {
	Event *BaseLibraryApproveContentRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryApproveContentRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryApproveContentRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryApproveContentRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryApproveContentRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryApproveContentRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryApproveContentRequest represents a ApproveContentRequest event raised by the BaseLibrary contract.
type BaseLibraryApproveContentRequest struct {
	ContentAddress common.Address
	Submitter      common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApproveContentRequest is a free log retrieval operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) FilterApproveContentRequest(opts *bind.FilterOpts) (*BaseLibraryApproveContentRequestIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ApproveContentRequest")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryApproveContentRequestIterator{contract: _BaseLibrary.contract, event: "ApproveContentRequest", logs: logs, sub: sub}, nil
}

// WatchApproveContentRequest is a free log subscription operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) WatchApproveContentRequest(opts *bind.WatchOpts, sink chan<- *BaseLibraryApproveContentRequest) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ApproveContentRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryApproveContentRequest)
				if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContentRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveContentRequest is a log parse operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) ParseApproveContentRequest(log types.Log) (*BaseLibraryApproveContentRequest, error) {
	event := new(BaseLibraryApproveContentRequest)
	if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContentRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseLibrary contract.
type BaseLibraryCommitPendingIterator struct {
	Event *BaseLibraryCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryCommitPending represents a CommitPending event raised by the BaseLibrary contract.
type BaseLibraryCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseLibraryCommitPendingIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryCommitPendingIterator{contract: _BaseLibrary.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseLibraryCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryCommitPending)
				if err := _BaseLibrary.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseCommitPending(log types.Log) (*BaseLibraryCommitPending, error) {
	event := new(BaseLibraryCommitPending)
	if err := _BaseLibrary.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContentObjectCreatedIterator is returned from FilterContentObjectCreated and is used to iterate over the raw logs and unpacked data for ContentObjectCreated events raised by the BaseLibrary contract.
type BaseLibraryContentObjectCreatedIterator struct {
	Event *BaseLibraryContentObjectCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentObjectCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentObjectCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentObjectCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentObjectCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentObjectCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentObjectCreated represents a ContentObjectCreated event raised by the BaseLibrary contract.
type BaseLibraryContentObjectCreated struct {
	ContentAddress common.Address
	ContentType    common.Address
	SpaceAddress   common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterContentObjectCreated is a free log retrieval operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentObjectCreated(opts *bind.FilterOpts) (*BaseLibraryContentObjectCreatedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentObjectCreated")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentObjectCreatedIterator{contract: _BaseLibrary.contract, event: "ContentObjectCreated", logs: logs, sub: sub}, nil
}

// WatchContentObjectCreated is a free log subscription operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentObjectCreated(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentObjectCreated) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentObjectCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentObjectCreated)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectCreated is a log parse operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentObjectCreated(log types.Log) (*BaseLibraryContentObjectCreated, error) {
	event := new(BaseLibraryContentObjectCreated)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContentObjectDeletedIterator is returned from FilterContentObjectDeleted and is used to iterate over the raw logs and unpacked data for ContentObjectDeleted events raised by the BaseLibrary contract.
type BaseLibraryContentObjectDeletedIterator struct {
	Event *BaseLibraryContentObjectDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentObjectDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentObjectDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentObjectDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentObjectDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentObjectDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentObjectDeleted represents a ContentObjectDeleted event raised by the BaseLibrary contract.
type BaseLibraryContentObjectDeleted struct {
	ContentAddress common.Address
	SpaceAddress   common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterContentObjectDeleted is a free log retrieval operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentObjectDeleted(opts *bind.FilterOpts) (*BaseLibraryContentObjectDeletedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentObjectDeleted")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentObjectDeletedIterator{contract: _BaseLibrary.contract, event: "ContentObjectDeleted", logs: logs, sub: sub}, nil
}

// WatchContentObjectDeleted is a free log subscription operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentObjectDeleted(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentObjectDeleted) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentObjectDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentObjectDeleted)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectDeleted is a log parse operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentObjectDeleted(log types.Log) (*BaseLibraryContentObjectDeleted, error) {
	event := new(BaseLibraryContentObjectDeleted)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectDeleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseLibrary contract.
type BaseLibraryContentTypeAddedIterator struct {
	Event *BaseLibraryContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentTypeAdded represents a ContentTypeAdded event raised by the BaseLibrary contract.
type BaseLibraryContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseLibraryContentTypeAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentTypeAddedIterator{contract: _BaseLibrary.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentTypeAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentTypeAdded(log types.Log) (*BaseLibraryContentTypeAdded, error) {
	event := new(BaseLibraryContentTypeAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseLibrary contract.
type BaseLibraryContentTypeRemovedIterator struct {
	Event *BaseLibraryContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseLibrary contract.
type BaseLibraryContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseLibraryContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentTypeRemovedIterator{contract: _BaseLibrary.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentTypeRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentTypeRemoved(log types.Log) (*BaseLibraryContentTypeRemoved, error) {
	event := new(BaseLibraryContentTypeRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContributorGroupAddedIterator is returned from FilterContributorGroupAdded and is used to iterate over the raw logs and unpacked data for ContributorGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryContributorGroupAddedIterator struct {
	Event *BaseLibraryContributorGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContributorGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContributorGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContributorGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContributorGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContributorGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContributorGroupAdded represents a ContributorGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryContributorGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterContributorGroupAdded is a free log retrieval operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterContributorGroupAdded(opts *bind.FilterOpts) (*BaseLibraryContributorGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContributorGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContributorGroupAddedIterator{contract: _BaseLibrary.contract, event: "ContributorGroupAdded", logs: logs, sub: sub}, nil
}

// WatchContributorGroupAdded is a free log subscription operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchContributorGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryContributorGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContributorGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContributorGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContributorGroupAdded is a log parse operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseContributorGroupAdded(log types.Log) (*BaseLibraryContributorGroupAdded, error) {
	event := new(BaseLibraryContributorGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContributorGroupRemovedIterator is returned from FilterContributorGroupRemoved and is used to iterate over the raw logs and unpacked data for ContributorGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryContributorGroupRemovedIterator struct {
	Event *BaseLibraryContributorGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContributorGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContributorGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContributorGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContributorGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContributorGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContributorGroupRemoved represents a ContributorGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryContributorGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterContributorGroupRemoved is a free log retrieval operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterContributorGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryContributorGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContributorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContributorGroupRemovedIterator{contract: _BaseLibrary.contract, event: "ContributorGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchContributorGroupRemoved is a free log subscription operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchContributorGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryContributorGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContributorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContributorGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContributorGroupRemoved is a log parse operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseContributorGroupRemoved(log types.Log) (*BaseLibraryContributorGroupRemoved, error) {
	event := new(BaseLibraryContributorGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryEditableMigrateIterator is returned from FilterEditableMigrate and is used to iterate over the raw logs and unpacked data for EditableMigrate events raised by the BaseLibrary contract.
type BaseLibraryEditableMigrateIterator struct {
	Event *BaseLibraryEditableMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryEditableMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryEditableMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryEditableMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryEditableMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryEditableMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryEditableMigrate represents a EditableMigrate event raised by the BaseLibrary contract.
type BaseLibraryEditableMigrate struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEditableMigrate is a free log retrieval operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseLibrary *BaseLibraryFilterer) FilterEditableMigrate(opts *bind.FilterOpts) (*BaseLibraryEditableMigrateIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryEditableMigrateIterator{contract: _BaseLibrary.contract, event: "EditableMigrate", logs: logs, sub: sub}, nil
}

// WatchEditableMigrate is a free log subscription operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseLibrary *BaseLibraryFilterer) WatchEditableMigrate(opts *bind.WatchOpts, sink chan<- *BaseLibraryEditableMigrate) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryEditableMigrate)
				if err := _BaseLibrary.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEditableMigrate is a log parse operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_BaseLibrary *BaseLibraryFilterer) ParseEditableMigrate(log types.Log) (*BaseLibraryEditableMigrate, error) {
	event := new(BaseLibraryEditableMigrate)
	if err := _BaseLibrary.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryReviewerGroupAddedIterator is returned from FilterReviewerGroupAdded and is used to iterate over the raw logs and unpacked data for ReviewerGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupAddedIterator struct {
	Event *BaseLibraryReviewerGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryReviewerGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryReviewerGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryReviewerGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryReviewerGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryReviewerGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryReviewerGroupAdded represents a ReviewerGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReviewerGroupAdded is a free log retrieval operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterReviewerGroupAdded(opts *bind.FilterOpts) (*BaseLibraryReviewerGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ReviewerGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryReviewerGroupAddedIterator{contract: _BaseLibrary.contract, event: "ReviewerGroupAdded", logs: logs, sub: sub}, nil
}

// WatchReviewerGroupAdded is a free log subscription operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchReviewerGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryReviewerGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ReviewerGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryReviewerGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewerGroupAdded is a log parse operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseReviewerGroupAdded(log types.Log) (*BaseLibraryReviewerGroupAdded, error) {
	event := new(BaseLibraryReviewerGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryReviewerGroupRemovedIterator is returned from FilterReviewerGroupRemoved and is used to iterate over the raw logs and unpacked data for ReviewerGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupRemovedIterator struct {
	Event *BaseLibraryReviewerGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryReviewerGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryReviewerGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryReviewerGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryReviewerGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryReviewerGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryReviewerGroupRemoved represents a ReviewerGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReviewerGroupRemoved is a free log retrieval operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterReviewerGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryReviewerGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ReviewerGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryReviewerGroupRemovedIterator{contract: _BaseLibrary.contract, event: "ReviewerGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchReviewerGroupRemoved is a free log subscription operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchReviewerGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryReviewerGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ReviewerGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryReviewerGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewerGroupRemoved is a log parse operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseReviewerGroupRemoved(log types.Log) (*BaseLibraryReviewerGroupRemoved, error) {
	event := new(BaseLibraryReviewerGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryUnauthorizedOperationIterator is returned from FilterUnauthorizedOperation and is used to iterate over the raw logs and unpacked data for UnauthorizedOperation events raised by the BaseLibrary contract.
type BaseLibraryUnauthorizedOperationIterator struct {
	Event *BaseLibraryUnauthorizedOperation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUnauthorizedOperationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUnauthorizedOperation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUnauthorizedOperation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUnauthorizedOperationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUnauthorizedOperationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUnauthorizedOperation represents a UnauthorizedOperation event raised by the BaseLibrary contract.
type BaseLibraryUnauthorizedOperation struct {
	OperationCode *big.Int
	Candidate     common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUnauthorizedOperation is a free log retrieval operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) FilterUnauthorizedOperation(opts *bind.FilterOpts) (*BaseLibraryUnauthorizedOperationIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUnauthorizedOperationIterator{contract: _BaseLibrary.contract, event: "UnauthorizedOperation", logs: logs, sub: sub}, nil
}

// WatchUnauthorizedOperation is a free log subscription operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) WatchUnauthorizedOperation(opts *bind.WatchOpts, sink chan<- *BaseLibraryUnauthorizedOperation) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUnauthorizedOperation)
				if err := _BaseLibrary.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnauthorizedOperation is a log parse operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) ParseUnauthorizedOperation(log types.Log) (*BaseLibraryUnauthorizedOperation, error) {
	event := new(BaseLibraryUnauthorizedOperation)
	if err := _BaseLibrary.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryUpdateKmsAddressIterator is returned from FilterUpdateKmsAddress and is used to iterate over the raw logs and unpacked data for UpdateKmsAddress events raised by the BaseLibrary contract.
type BaseLibraryUpdateKmsAddressIterator struct {
	Event *BaseLibraryUpdateKmsAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUpdateKmsAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUpdateKmsAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUpdateKmsAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUpdateKmsAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUpdateKmsAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUpdateKmsAddress represents a UpdateKmsAddress event raised by the BaseLibrary contract.
type BaseLibraryUpdateKmsAddress struct {
	AddressKms common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateKmsAddress is a free log retrieval operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) FilterUpdateKmsAddress(opts *bind.FilterOpts) (*BaseLibraryUpdateKmsAddressIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UpdateKmsAddress")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUpdateKmsAddressIterator{contract: _BaseLibrary.contract, event: "UpdateKmsAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateKmsAddress is a free log subscription operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) WatchUpdateKmsAddress(opts *bind.WatchOpts, sink chan<- *BaseLibraryUpdateKmsAddress) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UpdateKmsAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUpdateKmsAddress)
				if err := _BaseLibrary.contract.UnpackLog(event, "UpdateKmsAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateKmsAddress is a log parse operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) ParseUpdateKmsAddress(log types.Log) (*BaseLibraryUpdateKmsAddress, error) {
	event := new(BaseLibraryUpdateKmsAddress)
	if err := _BaseLibrary.contract.UnpackLog(event, "UpdateKmsAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseLibrary contract.
type BaseLibraryUpdateRequestIterator struct {
	Event *BaseLibraryUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUpdateRequest represents a UpdateRequest event raised by the BaseLibrary contract.
type BaseLibraryUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseLibraryUpdateRequestIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUpdateRequestIterator{contract: _BaseLibrary.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseLibraryUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUpdateRequest)
				if err := _BaseLibrary.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseUpdateRequest(log types.Log) (*BaseLibraryUpdateRequest, error) {
	event := new(BaseLibraryUpdateRequest)
	if err := _BaseLibrary.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseLibrary contract.
type BaseLibraryVersionConfirmIterator struct {
	Event *BaseLibraryVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryVersionConfirm represents a VersionConfirm event raised by the BaseLibrary contract.
type BaseLibraryVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseLibraryVersionConfirmIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryVersionConfirmIterator{contract: _BaseLibrary.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseLibraryVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryVersionConfirm)
				if err := _BaseLibrary.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseVersionConfirm(log types.Log) (*BaseLibraryVersionConfirm, error) {
	event := new(BaseLibraryVersionConfirm)
	if err := _BaseLibrary.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseLibrary contract.
type BaseLibraryVersionDeleteIterator struct {
	Event *BaseLibraryVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryVersionDelete represents a VersionDelete event raised by the BaseLibrary contract.
type BaseLibraryVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseLibraryVersionDeleteIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryVersionDeleteIterator{contract: _BaseLibrary.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseLibraryVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryVersionDelete)
				if err := _BaseLibrary.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) ParseVersionDelete(log types.Log) (*BaseLibraryVersionDelete, error) {
	event := new(BaseLibraryVersionDelete)
	if err := _BaseLibrary.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryFactoryABI is the input ABI used to generate the binding from.
const BaseLibraryFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseLibraryFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseLibraryFactoryFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"40b89f06": "createLibrary(address)",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
}

// BaseLibraryFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseLibraryFactoryBin = ""

// DeployBaseLibraryFactory deploys a new Ethereum contract, binding an instance of BaseLibraryFactory to it.
func DeployBaseLibraryFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseLibraryFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseLibraryFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseLibraryFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseLibraryFactory{BaseLibraryFactoryCaller: BaseLibraryFactoryCaller{contract: contract}, BaseLibraryFactoryTransactor: BaseLibraryFactoryTransactor{contract: contract}, BaseLibraryFactoryFilterer: BaseLibraryFactoryFilterer{contract: contract}}, nil
}

// BaseLibraryFactory is an auto generated Go binding around an Ethereum contract.
type BaseLibraryFactory struct {
	BaseLibraryFactoryCaller     // Read-only binding to the contract
	BaseLibraryFactoryTransactor // Write-only binding to the contract
	BaseLibraryFactoryFilterer   // Log filterer for contract events
}

// BaseLibraryFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseLibraryFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseLibraryFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseLibraryFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseLibraryFactorySession struct {
	Contract     *BaseLibraryFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BaseLibraryFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseLibraryFactoryCallerSession struct {
	Contract *BaseLibraryFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// BaseLibraryFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseLibraryFactoryTransactorSession struct {
	Contract     *BaseLibraryFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// BaseLibraryFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseLibraryFactoryRaw struct {
	Contract *BaseLibraryFactory // Generic contract binding to access the raw methods on
}

// BaseLibraryFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseLibraryFactoryCallerRaw struct {
	Contract *BaseLibraryFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseLibraryFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseLibraryFactoryTransactorRaw struct {
	Contract *BaseLibraryFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseLibraryFactory creates a new instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactory(address common.Address, backend bind.ContractBackend) (*BaseLibraryFactory, error) {
	contract, err := bindBaseLibraryFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactory{BaseLibraryFactoryCaller: BaseLibraryFactoryCaller{contract: contract}, BaseLibraryFactoryTransactor: BaseLibraryFactoryTransactor{contract: contract}, BaseLibraryFactoryFilterer: BaseLibraryFactoryFilterer{contract: contract}}, nil
}

// NewBaseLibraryFactoryCaller creates a new read-only instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseLibraryFactoryCaller, error) {
	contract, err := bindBaseLibraryFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryCaller{contract: contract}, nil
}

// NewBaseLibraryFactoryTransactor creates a new write-only instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseLibraryFactoryTransactor, error) {
	contract, err := bindBaseLibraryFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryTransactor{contract: contract}, nil
}

// NewBaseLibraryFactoryFilterer creates a new log filterer instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseLibraryFactoryFilterer, error) {
	contract, err := bindBaseLibraryFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryFilterer{contract: contract}, nil
}

// bindBaseLibraryFactory binds a generic wrapper to an already deployed contract.
func bindBaseLibraryFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseLibraryFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseLibraryFactory *BaseLibraryFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseLibraryFactory.Contract.BaseLibraryFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseLibraryFactory *BaseLibraryFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.BaseLibraryFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseLibraryFactory *BaseLibraryFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.BaseLibraryFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseLibraryFactory *BaseLibraryFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseLibraryFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibraryFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactorySession) ContentSpace() (common.Address, error) {
	return _BaseLibraryFactory.Contract.ContentSpace(&_BaseLibraryFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseLibraryFactory.Contract.ContentSpace(&_BaseLibraryFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibraryFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactorySession) Creator() (common.Address, error) {
	return _BaseLibraryFactory.Contract.Creator(&_BaseLibraryFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseLibraryFactory.Contract.Creator(&_BaseLibraryFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibraryFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactorySession) Owner() (common.Address, error) {
	return _BaseLibraryFactory.Contract.Owner(&_BaseLibraryFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseLibraryFactory.Contract.Owner(&_BaseLibraryFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseLibraryFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactorySession) Version() ([32]byte, error) {
	return _BaseLibraryFactory.Contract.Version(&_BaseLibraryFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseLibraryFactory.Contract.Version(&_BaseLibraryFactory.CallOpts)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) CreateLibrary(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "createLibrary", address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseLibraryFactory *BaseLibraryFactorySession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.CreateLibrary(&_BaseLibraryFactory.TransactOpts, address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorSession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.CreateLibrary(&_BaseLibraryFactory.TransactOpts, address_KMS)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibraryFactory *BaseLibraryFactorySession) Kill() (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.Kill(&_BaseLibraryFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.Kill(&_BaseLibraryFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibraryFactory *BaseLibraryFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.TransferCreatorship(&_BaseLibraryFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.TransferCreatorship(&_BaseLibraryFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibraryFactory *BaseLibraryFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.TransferOwnership(&_BaseLibraryFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.TransferOwnership(&_BaseLibraryFactory.TransactOpts, newOwner)
}

// ContainerABI is the input ABI used to generate the binding from.
const ContainerABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_objectHash\",\"type\":\"string\"},{\"name\":\"_versionHashesConcat\",\"type\":\"string\"},{\"name\":\"_versionTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"migrateEditable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EditableMigrate\",\"type\":\"event\"}]"

// ContainerFuncSigs maps the 4-byte function signature to its string representation.
var ContainerFuncSigs = map[string]string{
	"0f58a786": "addContentType(address,address)",
	"32eaf21b": "addressKMS()",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"0eaec2c5": "canContribute(address)",
	"26683e14": "canNodePublish(address)",
	"9b55f901": "canPublish(address)",
	"29d00219": "canReview(address)",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"1cdbee5a": "contentTypeContracts(address)",
	"991a3a7c": "contentTypes(uint256)",
	"c65bcbe2": "contentTypesLength()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"1f2caaec": "findTypeByHash(bytes32)",
	"95a078e8": "hasAccess(address)",
	"41c0e1b5": "kill()",
	"6ae5f5e0": "migrateEditable(address,address,string,string,uint256[])",
	"e02dd9c2": "objectHash()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"2cf99422": "publish(address)",
	"fd089196": "removeContentType(address)",
	"3dd71d99": "requiresReview()",
	"c9e8e72d": "setAddressKMS(address)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"29dedde5": "validType(address)",
	"54fd4d50": "version()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"9cb121ba": "whitelistedType(address)",
}

// ContainerBin is the compiled bytecode used for deploying new contracts.
var ContainerBin = ""

// DeployContainer deploys a new Ethereum contract, binding an instance of Container to it.
func DeployContainer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Container, error) {
	parsed, err := abi.JSON(strings.NewReader(ContainerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ContainerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Container{ContainerCaller: ContainerCaller{contract: contract}, ContainerTransactor: ContainerTransactor{contract: contract}, ContainerFilterer: ContainerFilterer{contract: contract}}, nil
}

// Container is an auto generated Go binding around an Ethereum contract.
type Container struct {
	ContainerCaller     // Read-only binding to the contract
	ContainerTransactor // Write-only binding to the contract
	ContainerFilterer   // Log filterer for contract events
}

// ContainerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContainerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContainerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContainerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContainerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContainerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContainerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContainerSession struct {
	Contract     *Container        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContainerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContainerCallerSession struct {
	Contract *ContainerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ContainerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContainerTransactorSession struct {
	Contract     *ContainerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ContainerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContainerRaw struct {
	Contract *Container // Generic contract binding to access the raw methods on
}

// ContainerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContainerCallerRaw struct {
	Contract *ContainerCaller // Generic read-only contract binding to access the raw methods on
}

// ContainerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContainerTransactorRaw struct {
	Contract *ContainerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContainer creates a new instance of Container, bound to a specific deployed contract.
func NewContainer(address common.Address, backend bind.ContractBackend) (*Container, error) {
	contract, err := bindContainer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Container{ContainerCaller: ContainerCaller{contract: contract}, ContainerTransactor: ContainerTransactor{contract: contract}, ContainerFilterer: ContainerFilterer{contract: contract}}, nil
}

// NewContainerCaller creates a new read-only instance of Container, bound to a specific deployed contract.
func NewContainerCaller(address common.Address, caller bind.ContractCaller) (*ContainerCaller, error) {
	contract, err := bindContainer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContainerCaller{contract: contract}, nil
}

// NewContainerTransactor creates a new write-only instance of Container, bound to a specific deployed contract.
func NewContainerTransactor(address common.Address, transactor bind.ContractTransactor) (*ContainerTransactor, error) {
	contract, err := bindContainer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContainerTransactor{contract: contract}, nil
}

// NewContainerFilterer creates a new log filterer instance of Container, bound to a specific deployed contract.
func NewContainerFilterer(address common.Address, filterer bind.ContractFilterer) (*ContainerFilterer, error) {
	contract, err := bindContainer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContainerFilterer{contract: contract}, nil
}

// bindContainer binds a generic wrapper to an already deployed contract.
func bindContainer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContainerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Container *ContainerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Container.Contract.ContainerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Container *ContainerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.Contract.ContainerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Container *ContainerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Container.Contract.ContainerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Container *ContainerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Container.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Container *ContainerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Container *ContainerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Container.Contract.contract.Transact(opts, method, params...)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_Container *ContainerCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_Container *ContainerSession) AddressKMS() (common.Address, error) {
	return _Container.Contract.AddressKMS(&_Container.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_Container *ContainerCallerSession) AddressKMS() (common.Address, error) {
	return _Container.Contract.AddressKMS(&_Container.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Container *ContainerCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Container *ContainerSession) CanCommit() (bool, error) {
	return _Container.Contract.CanCommit(&_Container.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Container *ContainerCallerSession) CanCommit() (bool, error) {
	return _Container.Contract.CanCommit(&_Container.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Container *ContainerCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Container *ContainerSession) CanConfirm() (bool, error) {
	return _Container.Contract.CanConfirm(&_Container.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Container *ContainerCallerSession) CanConfirm() (bool, error) {
	return _Container.Contract.CanConfirm(&_Container.CallOpts)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_Container *ContainerCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canContribute", _candidate)
	return *ret0, err
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_Container *ContainerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _Container.Contract.CanContribute(&_Container.CallOpts, _candidate)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_Container *ContainerCallerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _Container.Contract.CanContribute(&_Container.CallOpts, _candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_Container *ContainerCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canNodePublish", candidate)
	return *ret0, err
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_Container *ContainerSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _Container.Contract.CanNodePublish(&_Container.CallOpts, candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_Container *ContainerCallerSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _Container.Contract.CanNodePublish(&_Container.CallOpts, candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_Container *ContainerCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canPublish", _candidate)
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_Container *ContainerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _Container.Contract.CanPublish(&_Container.CallOpts, _candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_Container *ContainerCallerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _Container.Contract.CanPublish(&_Container.CallOpts, _candidate)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_Container *ContainerCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canReview", arg0)
	return *ret0, err
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_Container *ContainerSession) CanReview(arg0 common.Address) (bool, error) {
	return _Container.Contract.CanReview(&_Container.CallOpts, arg0)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_Container *ContainerCallerSession) CanReview(arg0 common.Address) (bool, error) {
	return _Container.Contract.CanReview(&_Container.CallOpts, arg0)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Container *ContainerCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Container *ContainerSession) CommitPending() (bool, error) {
	return _Container.Contract.CommitPending(&_Container.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Container *ContainerCallerSession) CommitPending() (bool, error) {
	return _Container.Contract.CommitPending(&_Container.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Container *ContainerCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Container *ContainerSession) ContentSpace() (common.Address, error) {
	return _Container.Contract.ContentSpace(&_Container.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Container *ContainerCallerSession) ContentSpace() (common.Address, error) {
	return _Container.Contract.ContentSpace(&_Container.CallOpts)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_Container *ContainerCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "contentTypeContracts", arg0)
	return *ret0, err
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_Container *ContainerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _Container.Contract.ContentTypeContracts(&_Container.CallOpts, arg0)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_Container *ContainerCallerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _Container.Contract.ContentTypeContracts(&_Container.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_Container *ContainerCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "contentTypes", arg0)
	return *ret0, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_Container *ContainerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _Container.Contract.ContentTypes(&_Container.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_Container *ContainerCallerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _Container.Contract.ContentTypes(&_Container.CallOpts, arg0)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_Container *ContainerCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "contentTypesLength")
	return *ret0, err
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_Container *ContainerSession) ContentTypesLength() (*big.Int, error) {
	return _Container.Contract.ContentTypesLength(&_Container.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_Container *ContainerCallerSession) ContentTypesLength() (*big.Int, error) {
	return _Container.Contract.ContentTypesLength(&_Container.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Container *ContainerCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Container *ContainerSession) CountVersionHashes() (*big.Int, error) {
	return _Container.Contract.CountVersionHashes(&_Container.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Container *ContainerCallerSession) CountVersionHashes() (*big.Int, error) {
	return _Container.Contract.CountVersionHashes(&_Container.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Container *ContainerCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Container *ContainerSession) Creator() (common.Address, error) {
	return _Container.Contract.Creator(&_Container.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Container *ContainerCallerSession) Creator() (common.Address, error) {
	return _Container.Contract.Creator(&_Container.CallOpts)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_Container *ContainerCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "findTypeByHash", typeHash)
	return *ret0, err
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_Container *ContainerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _Container.Contract.FindTypeByHash(&_Container.CallOpts, typeHash)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_Container *ContainerCallerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _Container.Contract.FindTypeByHash(&_Container.CallOpts, typeHash)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address ) constant returns(bool)
func (_Container *ContainerCaller) HasAccess(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "hasAccess", arg0)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address ) constant returns(bool)
func (_Container *ContainerSession) HasAccess(arg0 common.Address) (bool, error) {
	return _Container.Contract.HasAccess(&_Container.CallOpts, arg0)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address ) constant returns(bool)
func (_Container *ContainerCallerSession) HasAccess(arg0 common.Address) (bool, error) {
	return _Container.Contract.HasAccess(&_Container.CallOpts, arg0)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Container *ContainerCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Container *ContainerSession) ObjectHash() (string, error) {
	return _Container.Contract.ObjectHash(&_Container.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Container *ContainerCallerSession) ObjectHash() (string, error) {
	return _Container.Contract.ObjectHash(&_Container.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Container *ContainerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Container *ContainerSession) Owner() (common.Address, error) {
	return _Container.Contract.Owner(&_Container.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Container *ContainerCallerSession) Owner() (common.Address, error) {
	return _Container.Contract.Owner(&_Container.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Container *ContainerCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Container *ContainerSession) ParentAddress() (common.Address, error) {
	return _Container.Contract.ParentAddress(&_Container.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Container *ContainerCallerSession) ParentAddress() (common.Address, error) {
	return _Container.Contract.ParentAddress(&_Container.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Container *ContainerCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Container *ContainerSession) PendingHash() (string, error) {
	return _Container.Contract.PendingHash(&_Container.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Container *ContainerCallerSession) PendingHash() (string, error) {
	return _Container.Contract.PendingHash(&_Container.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_Container *ContainerCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "requiresReview")
	return *ret0, err
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_Container *ContainerSession) RequiresReview() (bool, error) {
	return _Container.Contract.RequiresReview(&_Container.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_Container *ContainerCallerSession) RequiresReview() (bool, error) {
	return _Container.Contract.RequiresReview(&_Container.CallOpts)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_Container *ContainerCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "validType", content_type)
	return *ret0, err
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_Container *ContainerSession) ValidType(content_type common.Address) (bool, error) {
	return _Container.Contract.ValidType(&_Container.CallOpts, content_type)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_Container *ContainerCallerSession) ValidType(content_type common.Address) (bool, error) {
	return _Container.Contract.ValidType(&_Container.CallOpts, content_type)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Container *ContainerCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Container *ContainerSession) Version() ([32]byte, error) {
	return _Container.Contract.Version(&_Container.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Container *ContainerCallerSession) Version() ([32]byte, error) {
	return _Container.Contract.Version(&_Container.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Container *ContainerCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Container *ContainerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _Container.Contract.VersionHashes(&_Container.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Container *ContainerCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _Container.Contract.VersionHashes(&_Container.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Container *ContainerCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Container *ContainerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _Container.Contract.VersionTimestamp(&_Container.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Container *ContainerCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _Container.Contract.VersionTimestamp(&_Container.CallOpts, arg0)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_Container *ContainerCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "whitelistedType", content_type)
	return *ret0, err
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_Container *ContainerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _Container.Contract.WhitelistedType(&_Container.CallOpts, content_type)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_Container *ContainerCallerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _Container.Contract.WhitelistedType(&_Container.CallOpts, content_type)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_Container *ContainerTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_Container *ContainerSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _Container.Contract.AddContentType(&_Container.TransactOpts, content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_Container *ContainerTransactorSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _Container.Contract.AddContentType(&_Container.TransactOpts, content_type, content_contract)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Container *ContainerTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Container *ContainerSession) ClearPending() (*types.Transaction, error) {
	return _Container.Contract.ClearPending(&_Container.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Container *ContainerTransactorSession) ClearPending() (*types.Transaction, error) {
	return _Container.Contract.ClearPending(&_Container.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Container *ContainerTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Container *ContainerSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _Container.Contract.Commit(&_Container.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Container *ContainerTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _Container.Contract.Commit(&_Container.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Container *ContainerTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Container *ContainerSession) ConfirmCommit() (*types.Transaction, error) {
	return _Container.Contract.ConfirmCommit(&_Container.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Container *ContainerTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _Container.Contract.ConfirmCommit(&_Container.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Container *ContainerTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Container *ContainerSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _Container.Contract.DeleteVersion(&_Container.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Container *ContainerTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _Container.Contract.DeleteVersion(&_Container.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Container *ContainerTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Container *ContainerSession) Kill() (*types.Transaction, error) {
	return _Container.Contract.Kill(&_Container.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Container *ContainerTransactorSession) Kill() (*types.Transaction, error) {
	return _Container.Contract.Kill(&_Container.TransactOpts)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_Container *ContainerTransactor) MigrateEditable(opts *bind.TransactOpts, _owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "migrateEditable", _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_Container *ContainerSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _Container.Contract.MigrateEditable(&_Container.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_Container *ContainerTransactorSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _Container.Contract.MigrateEditable(&_Container.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_Container *ContainerTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "publish", contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_Container *ContainerSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _Container.Contract.Publish(&_Container.TransactOpts, contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_Container *ContainerTransactorSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _Container.Contract.Publish(&_Container.TransactOpts, contentObj)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_Container *ContainerTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_Container *ContainerSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _Container.Contract.RemoveContentType(&_Container.TransactOpts, content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_Container *ContainerTransactorSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _Container.Contract.RemoveContentType(&_Container.TransactOpts, content_type)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_Container *ContainerTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_Container *ContainerSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _Container.Contract.SetAddressKMS(&_Container.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_Container *ContainerTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _Container.Contract.SetAddressKMS(&_Container.TransactOpts, address_KMS)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Container *ContainerTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Container *ContainerSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Container.Contract.TransferCreatorship(&_Container.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Container *ContainerTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Container.Contract.TransferCreatorship(&_Container.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Container *ContainerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Container *ContainerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Container.Contract.TransferOwnership(&_Container.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Container *ContainerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Container.Contract.TransferOwnership(&_Container.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Container *ContainerTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Container *ContainerSession) UpdateRequest() (*types.Transaction, error) {
	return _Container.Contract.UpdateRequest(&_Container.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Container *ContainerTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _Container.Contract.UpdateRequest(&_Container.TransactOpts)
}

// ContainerCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the Container contract.
type ContainerCommitPendingIterator struct {
	Event *ContainerCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerCommitPending represents a CommitPending event raised by the Container contract.
type ContainerCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) FilterCommitPending(opts *bind.FilterOpts) (*ContainerCommitPendingIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &ContainerCommitPendingIterator{contract: _Container.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *ContainerCommitPending) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerCommitPending)
				if err := _Container.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) ParseCommitPending(log types.Log) (*ContainerCommitPending, error) {
	event := new(ContainerCommitPending)
	if err := _Container.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the Container contract.
type ContainerContentTypeAddedIterator struct {
	Event *ContainerContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerContentTypeAdded represents a ContentTypeAdded event raised by the Container contract.
type ContainerContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*ContainerContentTypeAddedIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &ContainerContentTypeAddedIterator{contract: _Container.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *ContainerContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerContentTypeAdded)
				if err := _Container.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) ParseContentTypeAdded(log types.Log) (*ContainerContentTypeAdded, error) {
	event := new(ContainerContentTypeAdded)
	if err := _Container.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the Container contract.
type ContainerContentTypeRemovedIterator struct {
	Event *ContainerContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerContentTypeRemoved represents a ContentTypeRemoved event raised by the Container contract.
type ContainerContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*ContainerContentTypeRemovedIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &ContainerContentTypeRemovedIterator{contract: _Container.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *ContainerContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerContentTypeRemoved)
				if err := _Container.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) ParseContentTypeRemoved(log types.Log) (*ContainerContentTypeRemoved, error) {
	event := new(ContainerContentTypeRemoved)
	if err := _Container.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerEditableMigrateIterator is returned from FilterEditableMigrate and is used to iterate over the raw logs and unpacked data for EditableMigrate events raised by the Container contract.
type ContainerEditableMigrateIterator struct {
	Event *ContainerEditableMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerEditableMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerEditableMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerEditableMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerEditableMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerEditableMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerEditableMigrate represents a EditableMigrate event raised by the Container contract.
type ContainerEditableMigrate struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEditableMigrate is a free log retrieval operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_Container *ContainerFilterer) FilterEditableMigrate(opts *bind.FilterOpts) (*ContainerEditableMigrateIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return &ContainerEditableMigrateIterator{contract: _Container.contract, event: "EditableMigrate", logs: logs, sub: sub}, nil
}

// WatchEditableMigrate is a free log subscription operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_Container *ContainerFilterer) WatchEditableMigrate(opts *bind.WatchOpts, sink chan<- *ContainerEditableMigrate) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerEditableMigrate)
				if err := _Container.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEditableMigrate is a log parse operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_Container *ContainerFilterer) ParseEditableMigrate(log types.Log) (*ContainerEditableMigrate, error) {
	event := new(ContainerEditableMigrate)
	if err := _Container.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the Container contract.
type ContainerUpdateRequestIterator struct {
	Event *ContainerUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerUpdateRequest represents a UpdateRequest event raised by the Container contract.
type ContainerUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*ContainerUpdateRequestIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &ContainerUpdateRequestIterator{contract: _Container.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *ContainerUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerUpdateRequest)
				if err := _Container.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) ParseUpdateRequest(log types.Log) (*ContainerUpdateRequest, error) {
	event := new(ContainerUpdateRequest)
	if err := _Container.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the Container contract.
type ContainerVersionConfirmIterator struct {
	Event *ContainerVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerVersionConfirm represents a VersionConfirm event raised by the Container contract.
type ContainerVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_Container *ContainerFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*ContainerVersionConfirmIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &ContainerVersionConfirmIterator{contract: _Container.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_Container *ContainerFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *ContainerVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerVersionConfirm)
				if err := _Container.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_Container *ContainerFilterer) ParseVersionConfirm(log types.Log) (*ContainerVersionConfirm, error) {
	event := new(ContainerVersionConfirm)
	if err := _Container.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the Container contract.
type ContainerVersionDeleteIterator struct {
	Event *ContainerVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerVersionDelete represents a VersionDelete event raised by the Container contract.
type ContainerVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*ContainerVersionDeleteIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &ContainerVersionDeleteIterator{contract: _Container.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *ContainerVersionDelete) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerVersionDelete)
				if err := _Container.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) ParseVersionDelete(log types.Log) (*ContainerVersionDelete, error) {
	event := new(ContainerVersionDelete)
	if err := _Container.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentABI is the input ABI used to generate the binding from.
const ContentABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"runAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"runAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"runFinalize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposed_status_code\",\"type\":\"int256\"}],\"name\":\"runStatusChange\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"runDescribeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runKill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"name\":\"runGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"originator\",\"type\":\"address\"}],\"name\":\"runFinalizeExt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_CHARGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposedStatusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"returnStatusCode\",\"type\":\"int256\"}],\"name\":\"RunStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"calculateAccessCharge\",\"type\":\"int256\"}],\"name\":\"RunAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunFinalize\",\"type\":\"event\"}]"

// ContentFuncSigs maps the 4-byte function signature to its string representation.
var ContentFuncSigs = map[string]string{
	"6af27417": "DEFAULT_ACCESS()",
	"f185db0c": "DEFAULT_CHARGE()",
	"b535b03e": "DEFAULT_SEE()",
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"123e0e80": "runAccess(uint256,uint8,bytes32[],address[])",
	"0f82c16f": "runAccessInfo(uint8,bytes32[],address[])",
	"7b1cdb3e": "runCreate()",
	"45080442": "runDescribeStatus(int256)",
	"17685953": "runFinalize(uint256,uint256)",
	"eb81eff0": "runFinalizeExt(uint256,uint256,address)",
	"e870ed91": "runGrant(uint256,bool)",
	"9e99bbea": "runKill()",
	"3513a805": "runStatusChange(int256)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
}

// ContentBin is the compiled bytecode used for deploying new contracts.
var ContentBin = "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f436f6e74656e7432303139313033313136323030304d4c00000000000000000060045560018054600160a060020a03199081163290811790925560028054909116909117905561059a8061007e6000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146101085780630f82c16f14610139578063123e0e80146101fe578063176859531461029d5780633513a805146102ab57806341c0e1b5146102b657806345080442146102cb57806354fd4d50146102e35780636af27417146102f85780636d2e4b1b146103235780637b1cdb3e146103445780638da5cb5b1461034c5780639e99bbea14610344578063af570c0414610361578063b535b03e14610376578063e870ed911461038b578063eb81eff01461039b578063f185db0c146103b5578063f2fde38b146103ca575b005b34801561011457600080fd5b5061011d6103eb565b60408051600160a060020a039092168252519081900360200190f35b34801561014557600080fd5b506040805160206004602480358281013584810280870186019097528086526101cf96843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506103fa9650505050505050565b6040805160ff958616815293851660208501529190931682820152606082019290925290519081900360800190f35b604080516020600460443581810135838102808601850190965280855261028b958335956024803560ff1696369695606495939492019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506104099650505050505050565b60408051918252519081900360200190f35b61028b600435602435610413565b61028b60043561041b565b3480156102c257600080fd5b5061010661041e565b3480156102d757600080fd5b5061028b60043561045a565b3480156102ef57600080fd5b5061028b610460565b34801561030457600080fd5b5061030d610466565b6040805160ff9092168252519081900360200190f35b34801561032f57600080fd5b50610106600160a060020a036004351661046b565b61028b6104c6565b34801561035857600080fd5b5061011d6104cb565b34801561036d57600080fd5b5061011d6104da565b34801561038257600080fd5b5061030d6104e9565b61028b6004356024351515610413565b61028b600435602435600160a060020a03604435166104ee565b3480156103c157600080fd5b5061030d6104f7565b3480156103d657600080fd5b50610106600160a060020a03600435166104fc565b600154600160a060020a031681565b60076000808093509350935093565b6000949350505050565b600092915050565b90565b600254600160a060020a03163214806104415750600254600160a060020a031633145b151561044c57600080fd5b600254600160a060020a0316ff5b50600090565b60045481565b600281565b600154600160a060020a0316321461048257600080fd5b600160a060020a038116151561049757600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600090565b600254600160a060020a031681565b600354600160a060020a031681565b600181565b60009392505050565b600481565b600254600160a060020a031632148061051f5750600254600160a060020a031633145b151561052a57600080fd5b600160a060020a038116151561053f57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820224082fc4e3eec92ac4573e47107823641e4d28a56a46c0a913690c09334c1e10029"

// DeployContent deploys a new Ethereum contract, binding an instance of Content to it.
func DeployContent(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Content, error) {
	parsed, err := abi.JSON(strings.NewReader(ContentABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ContentBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Content{ContentCaller: ContentCaller{contract: contract}, ContentTransactor: ContentTransactor{contract: contract}, ContentFilterer: ContentFilterer{contract: contract}}, nil
}

// Content is an auto generated Go binding around an Ethereum contract.
type Content struct {
	ContentCaller     // Read-only binding to the contract
	ContentTransactor // Write-only binding to the contract
	ContentFilterer   // Log filterer for contract events
}

// ContentCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContentSession struct {
	Contract     *Content          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContentCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContentCallerSession struct {
	Contract *ContentCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ContentTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContentTransactorSession struct {
	Contract     *ContentTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ContentRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContentRaw struct {
	Contract *Content // Generic contract binding to access the raw methods on
}

// ContentCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContentCallerRaw struct {
	Contract *ContentCaller // Generic read-only contract binding to access the raw methods on
}

// ContentTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContentTransactorRaw struct {
	Contract *ContentTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContent creates a new instance of Content, bound to a specific deployed contract.
func NewContent(address common.Address, backend bind.ContractBackend) (*Content, error) {
	contract, err := bindContent(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Content{ContentCaller: ContentCaller{contract: contract}, ContentTransactor: ContentTransactor{contract: contract}, ContentFilterer: ContentFilterer{contract: contract}}, nil
}

// NewContentCaller creates a new read-only instance of Content, bound to a specific deployed contract.
func NewContentCaller(address common.Address, caller bind.ContractCaller) (*ContentCaller, error) {
	contract, err := bindContent(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContentCaller{contract: contract}, nil
}

// NewContentTransactor creates a new write-only instance of Content, bound to a specific deployed contract.
func NewContentTransactor(address common.Address, transactor bind.ContractTransactor) (*ContentTransactor, error) {
	contract, err := bindContent(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContentTransactor{contract: contract}, nil
}

// NewContentFilterer creates a new log filterer instance of Content, bound to a specific deployed contract.
func NewContentFilterer(address common.Address, filterer bind.ContractFilterer) (*ContentFilterer, error) {
	contract, err := bindContent(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContentFilterer{contract: contract}, nil
}

// bindContent binds a generic wrapper to an already deployed contract.
func bindContent(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContentABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Content *ContentRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Content.Contract.ContentCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Content *ContentRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.Contract.ContentTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Content *ContentRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Content.Contract.ContentTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Content *ContentCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Content.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Content *ContentTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Content *ContentTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Content.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_Content *ContentCaller) DEFAULTACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "DEFAULT_ACCESS")
	return *ret0, err
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_Content *ContentSession) DEFAULTACCESS() (uint8, error) {
	return _Content.Contract.DEFAULTACCESS(&_Content.CallOpts)
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_Content *ContentCallerSession) DEFAULTACCESS() (uint8, error) {
	return _Content.Contract.DEFAULTACCESS(&_Content.CallOpts)
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_Content *ContentCaller) DEFAULTCHARGE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "DEFAULT_CHARGE")
	return *ret0, err
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_Content *ContentSession) DEFAULTCHARGE() (uint8, error) {
	return _Content.Contract.DEFAULTCHARGE(&_Content.CallOpts)
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_Content *ContentCallerSession) DEFAULTCHARGE() (uint8, error) {
	return _Content.Contract.DEFAULTCHARGE(&_Content.CallOpts)
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_Content *ContentCaller) DEFAULTSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "DEFAULT_SEE")
	return *ret0, err
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_Content *ContentSession) DEFAULTSEE() (uint8, error) {
	return _Content.Contract.DEFAULTSEE(&_Content.CallOpts)
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_Content *ContentCallerSession) DEFAULTSEE() (uint8, error) {
	return _Content.Contract.DEFAULTSEE(&_Content.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Content *ContentCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Content *ContentSession) ContentSpace() (common.Address, error) {
	return _Content.Contract.ContentSpace(&_Content.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Content *ContentCallerSession) ContentSpace() (common.Address, error) {
	return _Content.Contract.ContentSpace(&_Content.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Content *ContentCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Content *ContentSession) Creator() (common.Address, error) {
	return _Content.Contract.Creator(&_Content.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Content *ContentCallerSession) Creator() (common.Address, error) {
	return _Content.Contract.Creator(&_Content.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Content *ContentCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Content *ContentSession) Owner() (common.Address, error) {
	return _Content.Contract.Owner(&_Content.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Content *ContentCallerSession) Owner() (common.Address, error) {
	return _Content.Contract.Owner(&_Content.CallOpts)
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) constant returns(uint8, uint8, uint8, uint256)
func (_Content *ContentCaller) RunAccessInfo(opts *bind.CallOpts, arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(uint8)
		ret3 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Content.contract.Call(opts, out, "runAccessInfo", arg0, arg1, arg2)
	return *ret0, *ret1, *ret2, *ret3, err
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) constant returns(uint8, uint8, uint8, uint256)
func (_Content *ContentSession) RunAccessInfo(arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	return _Content.Contract.RunAccessInfo(&_Content.CallOpts, arg0, arg1, arg2)
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) constant returns(uint8, uint8, uint8, uint256)
func (_Content *ContentCallerSession) RunAccessInfo(arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	return _Content.Contract.RunAccessInfo(&_Content.CallOpts, arg0, arg1, arg2)
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_Content *ContentCaller) RunDescribeStatus(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "runDescribeStatus", arg0)
	return *ret0, err
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_Content *ContentSession) RunDescribeStatus(arg0 *big.Int) ([32]byte, error) {
	return _Content.Contract.RunDescribeStatus(&_Content.CallOpts, arg0)
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_Content *ContentCallerSession) RunDescribeStatus(arg0 *big.Int) ([32]byte, error) {
	return _Content.Contract.RunDescribeStatus(&_Content.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Content *ContentCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Content *ContentSession) Version() ([32]byte, error) {
	return _Content.Contract.Version(&_Content.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Content *ContentCallerSession) Version() ([32]byte, error) {
	return _Content.Contract.Version(&_Content.CallOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Content *ContentTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Content *ContentSession) Kill() (*types.Transaction, error) {
	return _Content.Contract.Kill(&_Content.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Content *ContentTransactorSession) Kill() (*types.Transaction, error) {
	return _Content.Contract.Kill(&_Content.TransactOpts)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 , uint8 , bytes32[] , address[] ) returns(uint256)
func (_Content *ContentTransactor) RunAccess(opts *bind.TransactOpts, arg0 *big.Int, arg1 uint8, arg2 [][32]byte, arg3 []common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runAccess", arg0, arg1, arg2, arg3)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 , uint8 , bytes32[] , address[] ) returns(uint256)
func (_Content *ContentSession) RunAccess(arg0 *big.Int, arg1 uint8, arg2 [][32]byte, arg3 []common.Address) (*types.Transaction, error) {
	return _Content.Contract.RunAccess(&_Content.TransactOpts, arg0, arg1, arg2, arg3)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 , uint8 , bytes32[] , address[] ) returns(uint256)
func (_Content *ContentTransactorSession) RunAccess(arg0 *big.Int, arg1 uint8, arg2 [][32]byte, arg3 []common.Address) (*types.Transaction, error) {
	return _Content.Contract.RunAccess(&_Content.TransactOpts, arg0, arg1, arg2, arg3)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_Content *ContentTransactor) RunCreate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runCreate")
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_Content *ContentSession) RunCreate() (*types.Transaction, error) {
	return _Content.Contract.RunCreate(&_Content.TransactOpts)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_Content *ContentTransactorSession) RunCreate() (*types.Transaction, error) {
	return _Content.Contract.RunCreate(&_Content.TransactOpts)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 , uint256 ) returns(uint256)
func (_Content *ContentTransactor) RunFinalize(opts *bind.TransactOpts, arg0 *big.Int, arg1 *big.Int) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runFinalize", arg0, arg1)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 , uint256 ) returns(uint256)
func (_Content *ContentSession) RunFinalize(arg0 *big.Int, arg1 *big.Int) (*types.Transaction, error) {
	return _Content.Contract.RunFinalize(&_Content.TransactOpts, arg0, arg1)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 , uint256 ) returns(uint256)
func (_Content *ContentTransactorSession) RunFinalize(arg0 *big.Int, arg1 *big.Int) (*types.Transaction, error) {
	return _Content.Contract.RunFinalize(&_Content.TransactOpts, arg0, arg1)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) returns(uint256)
func (_Content *ContentTransactor) RunFinalizeExt(opts *bind.TransactOpts, requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runFinalizeExt", requestID, score_pct, originator)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) returns(uint256)
func (_Content *ContentSession) RunFinalizeExt(requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _Content.Contract.RunFinalizeExt(&_Content.TransactOpts, requestID, score_pct, originator)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) returns(uint256)
func (_Content *ContentTransactorSession) RunFinalizeExt(requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _Content.Contract.RunFinalizeExt(&_Content.TransactOpts, requestID, score_pct, originator)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) returns(uint256)
func (_Content *ContentTransactor) RunGrant(opts *bind.TransactOpts, arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runGrant", arg0, arg1)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) returns(uint256)
func (_Content *ContentSession) RunGrant(arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _Content.Contract.RunGrant(&_Content.TransactOpts, arg0, arg1)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) returns(uint256)
func (_Content *ContentTransactorSession) RunGrant(arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _Content.Contract.RunGrant(&_Content.TransactOpts, arg0, arg1)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_Content *ContentTransactor) RunKill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runKill")
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_Content *ContentSession) RunKill() (*types.Transaction, error) {
	return _Content.Contract.RunKill(&_Content.TransactOpts)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_Content *ContentTransactorSession) RunKill() (*types.Transaction, error) {
	return _Content.Contract.RunKill(&_Content.TransactOpts)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_Content *ContentTransactor) RunStatusChange(opts *bind.TransactOpts, proposed_status_code *big.Int) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runStatusChange", proposed_status_code)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_Content *ContentSession) RunStatusChange(proposed_status_code *big.Int) (*types.Transaction, error) {
	return _Content.Contract.RunStatusChange(&_Content.TransactOpts, proposed_status_code)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_Content *ContentTransactorSession) RunStatusChange(proposed_status_code *big.Int) (*types.Transaction, error) {
	return _Content.Contract.RunStatusChange(&_Content.TransactOpts, proposed_status_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Content *ContentTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Content *ContentSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Content.Contract.TransferCreatorship(&_Content.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Content *ContentTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Content.Contract.TransferCreatorship(&_Content.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Content *ContentTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Content *ContentSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Content.Contract.TransferOwnership(&_Content.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Content *ContentTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Content.Contract.TransferOwnership(&_Content.TransactOpts, newOwner)
}

// ContentLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the Content contract.
type ContentLogIterator struct {
	Event *ContentLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLog represents a Log event raised by the Content contract.
type ContentLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) FilterLog(opts *bind.FilterOpts) (*ContentLogIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &ContentLogIterator{contract: _Content.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *ContentLog) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLog)
				if err := _Content.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) ParseLog(log types.Log) (*ContentLog, error) {
	event := new(ContentLog)
	if err := _Content.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the Content contract.
type ContentLogAddressIterator struct {
	Event *ContentLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogAddress represents a LogAddress event raised by the Content contract.
type ContentLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) FilterLogAddress(opts *bind.FilterOpts) (*ContentLogAddressIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &ContentLogAddressIterator{contract: _Content.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *ContentLogAddress) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogAddress)
				if err := _Content.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) ParseLogAddress(log types.Log) (*ContentLogAddress, error) {
	event := new(ContentLogAddress)
	if err := _Content.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the Content contract.
type ContentLogBoolIterator struct {
	Event *ContentLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogBool represents a LogBool event raised by the Content contract.
type ContentLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) FilterLogBool(opts *bind.FilterOpts) (*ContentLogBoolIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &ContentLogBoolIterator{contract: _Content.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *ContentLogBool) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogBool)
				if err := _Content.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) ParseLogBool(log types.Log) (*ContentLogBool, error) {
	event := new(ContentLogBool)
	if err := _Content.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the Content contract.
type ContentLogBytes32Iterator struct {
	Event *ContentLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogBytes32 represents a LogBytes32 event raised by the Content contract.
type ContentLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*ContentLogBytes32Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &ContentLogBytes32Iterator{contract: _Content.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *ContentLogBytes32) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogBytes32)
				if err := _Content.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) ParseLogBytes32(log types.Log) (*ContentLogBytes32, error) {
	event := new(ContentLogBytes32)
	if err := _Content.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the Content contract.
type ContentLogInt256Iterator struct {
	Event *ContentLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogInt256 represents a LogInt256 event raised by the Content contract.
type ContentLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) FilterLogInt256(opts *bind.FilterOpts) (*ContentLogInt256Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &ContentLogInt256Iterator{contract: _Content.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *ContentLogInt256) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogInt256)
				if err := _Content.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) ParseLogInt256(log types.Log) (*ContentLogInt256, error) {
	event := new(ContentLogInt256)
	if err := _Content.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the Content contract.
type ContentLogPaymentIterator struct {
	Event *ContentLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogPayment represents a LogPayment event raised by the Content contract.
type ContentLogPayment struct {
	Label  string
	Payee  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) FilterLogPayment(opts *bind.FilterOpts) (*ContentLogPaymentIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &ContentLogPaymentIterator{contract: _Content.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *ContentLogPayment) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogPayment)
				if err := _Content.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) ParseLogPayment(log types.Log) (*ContentLogPayment, error) {
	event := new(ContentLogPayment)
	if err := _Content.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the Content contract.
type ContentLogUint256Iterator struct {
	Event *ContentLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogUint256 represents a LogUint256 event raised by the Content contract.
type ContentLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) FilterLogUint256(opts *bind.FilterOpts) (*ContentLogUint256Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &ContentLogUint256Iterator{contract: _Content.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *ContentLogUint256) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogUint256)
				if err := _Content.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) ParseLogUint256(log types.Log) (*ContentLogUint256, error) {
	event := new(ContentLogUint256)
	if err := _Content.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunAccessIterator is returned from FilterRunAccess and is used to iterate over the raw logs and unpacked data for RunAccess events raised by the Content contract.
type ContentRunAccessIterator struct {
	Event *ContentRunAccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunAccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunAccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunAccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunAccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunAccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunAccess represents a RunAccess event raised by the Content contract.
type ContentRunAccess struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunAccess is a free log retrieval operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_Content *ContentFilterer) FilterRunAccess(opts *bind.FilterOpts) (*ContentRunAccessIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return &ContentRunAccessIterator{contract: _Content.contract, event: "RunAccess", logs: logs, sub: sub}, nil
}

// WatchRunAccess is a free log subscription operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_Content *ContentFilterer) WatchRunAccess(opts *bind.WatchOpts, sink chan<- *ContentRunAccess) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunAccess)
				if err := _Content.contract.UnpackLog(event, "RunAccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccess is a log parse operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_Content *ContentFilterer) ParseRunAccess(log types.Log) (*ContentRunAccess, error) {
	event := new(ContentRunAccess)
	if err := _Content.contract.UnpackLog(event, "RunAccess", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunAccessChargeIterator is returned from FilterRunAccessCharge and is used to iterate over the raw logs and unpacked data for RunAccessCharge events raised by the Content contract.
type ContentRunAccessChargeIterator struct {
	Event *ContentRunAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunAccessCharge represents a RunAccessCharge event raised by the Content contract.
type ContentRunAccessCharge struct {
	Level                 uint8
	CalculateAccessCharge *big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterRunAccessCharge is a free log retrieval operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_Content *ContentFilterer) FilterRunAccessCharge(opts *bind.FilterOpts) (*ContentRunAccessChargeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return &ContentRunAccessChargeIterator{contract: _Content.contract, event: "RunAccessCharge", logs: logs, sub: sub}, nil
}

// WatchRunAccessCharge is a free log subscription operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_Content *ContentFilterer) WatchRunAccessCharge(opts *bind.WatchOpts, sink chan<- *ContentRunAccessCharge) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunAccessCharge)
				if err := _Content.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccessCharge is a log parse operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_Content *ContentFilterer) ParseRunAccessCharge(log types.Log) (*ContentRunAccessCharge, error) {
	event := new(ContentRunAccessCharge)
	if err := _Content.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunCreateIterator is returned from FilterRunCreate and is used to iterate over the raw logs and unpacked data for RunCreate events raised by the Content contract.
type ContentRunCreateIterator struct {
	Event *ContentRunCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunCreate represents a RunCreate event raised by the Content contract.
type ContentRunCreate struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunCreate is a free log retrieval operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) FilterRunCreate(opts *bind.FilterOpts) (*ContentRunCreateIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return &ContentRunCreateIterator{contract: _Content.contract, event: "RunCreate", logs: logs, sub: sub}, nil
}

// WatchRunCreate is a free log subscription operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) WatchRunCreate(opts *bind.WatchOpts, sink chan<- *ContentRunCreate) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunCreate)
				if err := _Content.contract.UnpackLog(event, "RunCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunCreate is a log parse operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) ParseRunCreate(log types.Log) (*ContentRunCreate, error) {
	event := new(ContentRunCreate)
	if err := _Content.contract.UnpackLog(event, "RunCreate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunFinalizeIterator is returned from FilterRunFinalize and is used to iterate over the raw logs and unpacked data for RunFinalize events raised by the Content contract.
type ContentRunFinalizeIterator struct {
	Event *ContentRunFinalize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunFinalizeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunFinalize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunFinalize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunFinalizeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunFinalizeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunFinalize represents a RunFinalize event raised by the Content contract.
type ContentRunFinalize struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunFinalize is a free log retrieval operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_Content *ContentFilterer) FilterRunFinalize(opts *bind.FilterOpts) (*ContentRunFinalizeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return &ContentRunFinalizeIterator{contract: _Content.contract, event: "RunFinalize", logs: logs, sub: sub}, nil
}

// WatchRunFinalize is a free log subscription operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_Content *ContentFilterer) WatchRunFinalize(opts *bind.WatchOpts, sink chan<- *ContentRunFinalize) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunFinalize)
				if err := _Content.contract.UnpackLog(event, "RunFinalize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunFinalize is a log parse operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_Content *ContentFilterer) ParseRunFinalize(log types.Log) (*ContentRunFinalize, error) {
	event := new(ContentRunFinalize)
	if err := _Content.contract.UnpackLog(event, "RunFinalize", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunKillIterator is returned from FilterRunKill and is used to iterate over the raw logs and unpacked data for RunKill events raised by the Content contract.
type ContentRunKillIterator struct {
	Event *ContentRunKill // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunKillIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunKill)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunKill)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunKillIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunKillIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunKill represents a RunKill event raised by the Content contract.
type ContentRunKill struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunKill is a free log retrieval operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) FilterRunKill(opts *bind.FilterOpts) (*ContentRunKillIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return &ContentRunKillIterator{contract: _Content.contract, event: "RunKill", logs: logs, sub: sub}, nil
}

// WatchRunKill is a free log subscription operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) WatchRunKill(opts *bind.WatchOpts, sink chan<- *ContentRunKill) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunKill)
				if err := _Content.contract.UnpackLog(event, "RunKill", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunKill is a log parse operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) ParseRunKill(log types.Log) (*ContentRunKill, error) {
	event := new(ContentRunKill)
	if err := _Content.contract.UnpackLog(event, "RunKill", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunStatusChangeIterator is returned from FilterRunStatusChange and is used to iterate over the raw logs and unpacked data for RunStatusChange events raised by the Content contract.
type ContentRunStatusChangeIterator struct {
	Event *ContentRunStatusChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunStatusChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunStatusChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunStatusChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunStatusChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunStatusChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunStatusChange represents a RunStatusChange event raised by the Content contract.
type ContentRunStatusChange struct {
	ProposedStatusCode *big.Int
	ReturnStatusCode   *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRunStatusChange is a free log retrieval operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) FilterRunStatusChange(opts *bind.FilterOpts) (*ContentRunStatusChangeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return &ContentRunStatusChangeIterator{contract: _Content.contract, event: "RunStatusChange", logs: logs, sub: sub}, nil
}

// WatchRunStatusChange is a free log subscription operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) WatchRunStatusChange(opts *bind.WatchOpts, sink chan<- *ContentRunStatusChange) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunStatusChange)
				if err := _Content.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunStatusChange is a log parse operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) ParseRunStatusChange(log types.Log) (*ContentRunStatusChange, error) {
	event := new(ContentRunStatusChange)
	if err := _Content.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableABI is the input ABI used to generate the binding from.
const EditableABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_objectHash\",\"type\":\"string\"},{\"name\":\"_versionHashesConcat\",\"type\":\"string\"},{\"name\":\"_versionTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"migrateEditable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EditableMigrate\",\"type\":\"event\"}]"

// EditableFuncSigs maps the 4-byte function signature to its string representation.
var EditableFuncSigs = map[string]string{
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"41c0e1b5": "kill()",
	"6ae5f5e0": "migrateEditable(address,address,string,string,uint256[])",
	"e02dd9c2": "objectHash()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"54fd4d50": "version()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
}

// EditableBin is the compiled bytecode used for deploying new contracts.
var EditableBin = ""

// DeployEditable deploys a new Ethereum contract, binding an instance of Editable to it.
func DeployEditable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Editable, error) {
	parsed, err := abi.JSON(strings.NewReader(EditableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(EditableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Editable{EditableCaller: EditableCaller{contract: contract}, EditableTransactor: EditableTransactor{contract: contract}, EditableFilterer: EditableFilterer{contract: contract}}, nil
}

// Editable is an auto generated Go binding around an Ethereum contract.
type Editable struct {
	EditableCaller     // Read-only binding to the contract
	EditableTransactor // Write-only binding to the contract
	EditableFilterer   // Log filterer for contract events
}

// EditableCaller is an auto generated read-only Go binding around an Ethereum contract.
type EditableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EditableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EditableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EditableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EditableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EditableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EditableSession struct {
	Contract     *Editable         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EditableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EditableCallerSession struct {
	Contract *EditableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// EditableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EditableTransactorSession struct {
	Contract     *EditableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// EditableRaw is an auto generated low-level Go binding around an Ethereum contract.
type EditableRaw struct {
	Contract *Editable // Generic contract binding to access the raw methods on
}

// EditableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EditableCallerRaw struct {
	Contract *EditableCaller // Generic read-only contract binding to access the raw methods on
}

// EditableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EditableTransactorRaw struct {
	Contract *EditableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEditable creates a new instance of Editable, bound to a specific deployed contract.
func NewEditable(address common.Address, backend bind.ContractBackend) (*Editable, error) {
	contract, err := bindEditable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Editable{EditableCaller: EditableCaller{contract: contract}, EditableTransactor: EditableTransactor{contract: contract}, EditableFilterer: EditableFilterer{contract: contract}}, nil
}

// NewEditableCaller creates a new read-only instance of Editable, bound to a specific deployed contract.
func NewEditableCaller(address common.Address, caller bind.ContractCaller) (*EditableCaller, error) {
	contract, err := bindEditable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EditableCaller{contract: contract}, nil
}

// NewEditableTransactor creates a new write-only instance of Editable, bound to a specific deployed contract.
func NewEditableTransactor(address common.Address, transactor bind.ContractTransactor) (*EditableTransactor, error) {
	contract, err := bindEditable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EditableTransactor{contract: contract}, nil
}

// NewEditableFilterer creates a new log filterer instance of Editable, bound to a specific deployed contract.
func NewEditableFilterer(address common.Address, filterer bind.ContractFilterer) (*EditableFilterer, error) {
	contract, err := bindEditable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EditableFilterer{contract: contract}, nil
}

// bindEditable binds a generic wrapper to an already deployed contract.
func bindEditable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EditableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Editable *EditableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Editable.Contract.EditableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Editable *EditableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.Contract.EditableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Editable *EditableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Editable.Contract.EditableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Editable *EditableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Editable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Editable *EditableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Editable *EditableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Editable.Contract.contract.Transact(opts, method, params...)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Editable *EditableCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Editable *EditableSession) CanCommit() (bool, error) {
	return _Editable.Contract.CanCommit(&_Editable.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Editable *EditableCallerSession) CanCommit() (bool, error) {
	return _Editable.Contract.CanCommit(&_Editable.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Editable *EditableCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Editable *EditableSession) CanConfirm() (bool, error) {
	return _Editable.Contract.CanConfirm(&_Editable.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Editable *EditableCallerSession) CanConfirm() (bool, error) {
	return _Editable.Contract.CanConfirm(&_Editable.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Editable *EditableCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Editable *EditableSession) CommitPending() (bool, error) {
	return _Editable.Contract.CommitPending(&_Editable.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Editable *EditableCallerSession) CommitPending() (bool, error) {
	return _Editable.Contract.CommitPending(&_Editable.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Editable *EditableCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Editable *EditableSession) ContentSpace() (common.Address, error) {
	return _Editable.Contract.ContentSpace(&_Editable.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Editable *EditableCallerSession) ContentSpace() (common.Address, error) {
	return _Editable.Contract.ContentSpace(&_Editable.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Editable *EditableCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Editable *EditableSession) CountVersionHashes() (*big.Int, error) {
	return _Editable.Contract.CountVersionHashes(&_Editable.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Editable *EditableCallerSession) CountVersionHashes() (*big.Int, error) {
	return _Editable.Contract.CountVersionHashes(&_Editable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Editable *EditableCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Editable *EditableSession) Creator() (common.Address, error) {
	return _Editable.Contract.Creator(&_Editable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Editable *EditableCallerSession) Creator() (common.Address, error) {
	return _Editable.Contract.Creator(&_Editable.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Editable *EditableCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Editable *EditableSession) ObjectHash() (string, error) {
	return _Editable.Contract.ObjectHash(&_Editable.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Editable *EditableCallerSession) ObjectHash() (string, error) {
	return _Editable.Contract.ObjectHash(&_Editable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Editable *EditableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Editable *EditableSession) Owner() (common.Address, error) {
	return _Editable.Contract.Owner(&_Editable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Editable *EditableCallerSession) Owner() (common.Address, error) {
	return _Editable.Contract.Owner(&_Editable.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Editable *EditableCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Editable *EditableSession) ParentAddress() (common.Address, error) {
	return _Editable.Contract.ParentAddress(&_Editable.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Editable *EditableCallerSession) ParentAddress() (common.Address, error) {
	return _Editable.Contract.ParentAddress(&_Editable.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Editable *EditableCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Editable *EditableSession) PendingHash() (string, error) {
	return _Editable.Contract.PendingHash(&_Editable.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Editable *EditableCallerSession) PendingHash() (string, error) {
	return _Editable.Contract.PendingHash(&_Editable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Editable *EditableCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Editable *EditableSession) Version() ([32]byte, error) {
	return _Editable.Contract.Version(&_Editable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Editable *EditableCallerSession) Version() ([32]byte, error) {
	return _Editable.Contract.Version(&_Editable.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Editable *EditableCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Editable *EditableSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _Editable.Contract.VersionHashes(&_Editable.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Editable *EditableCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _Editable.Contract.VersionHashes(&_Editable.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Editable *EditableCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Editable *EditableSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _Editable.Contract.VersionTimestamp(&_Editable.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Editable *EditableCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _Editable.Contract.VersionTimestamp(&_Editable.CallOpts, arg0)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Editable *EditableTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Editable *EditableSession) ClearPending() (*types.Transaction, error) {
	return _Editable.Contract.ClearPending(&_Editable.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Editable *EditableTransactorSession) ClearPending() (*types.Transaction, error) {
	return _Editable.Contract.ClearPending(&_Editable.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Editable *EditableTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Editable *EditableSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _Editable.Contract.Commit(&_Editable.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Editable *EditableTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _Editable.Contract.Commit(&_Editable.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Editable *EditableTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Editable *EditableSession) ConfirmCommit() (*types.Transaction, error) {
	return _Editable.Contract.ConfirmCommit(&_Editable.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Editable *EditableTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _Editable.Contract.ConfirmCommit(&_Editable.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Editable *EditableTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Editable *EditableSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _Editable.Contract.DeleteVersion(&_Editable.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Editable *EditableTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _Editable.Contract.DeleteVersion(&_Editable.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Editable *EditableTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Editable *EditableSession) Kill() (*types.Transaction, error) {
	return _Editable.Contract.Kill(&_Editable.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Editable *EditableTransactorSession) Kill() (*types.Transaction, error) {
	return _Editable.Contract.Kill(&_Editable.TransactOpts)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_Editable *EditableTransactor) MigrateEditable(opts *bind.TransactOpts, _owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "migrateEditable", _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_Editable *EditableSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _Editable.Contract.MigrateEditable(&_Editable.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// MigrateEditable is a paid mutator transaction binding the contract method 0x6ae5f5e0.
//
// Solidity: function migrateEditable(address _owner, address _creator, string _objectHash, string _versionHashesConcat, uint256[] _versionTimestamps) returns()
func (_Editable *EditableTransactorSession) MigrateEditable(_owner common.Address, _creator common.Address, _objectHash string, _versionHashesConcat string, _versionTimestamps []*big.Int) (*types.Transaction, error) {
	return _Editable.Contract.MigrateEditable(&_Editable.TransactOpts, _owner, _creator, _objectHash, _versionHashesConcat, _versionTimestamps)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Editable *EditableTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Editable *EditableSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Editable.Contract.TransferCreatorship(&_Editable.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Editable *EditableTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Editable.Contract.TransferCreatorship(&_Editable.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Editable *EditableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Editable *EditableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Editable.Contract.TransferOwnership(&_Editable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Editable *EditableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Editable.Contract.TransferOwnership(&_Editable.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Editable *EditableTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Editable *EditableSession) UpdateRequest() (*types.Transaction, error) {
	return _Editable.Contract.UpdateRequest(&_Editable.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Editable *EditableTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _Editable.Contract.UpdateRequest(&_Editable.TransactOpts)
}

// EditableCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the Editable contract.
type EditableCommitPendingIterator struct {
	Event *EditableCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableCommitPending represents a CommitPending event raised by the Editable contract.
type EditableCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) FilterCommitPending(opts *bind.FilterOpts) (*EditableCommitPendingIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &EditableCommitPendingIterator{contract: _Editable.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *EditableCommitPending) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableCommitPending)
				if err := _Editable.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) ParseCommitPending(log types.Log) (*EditableCommitPending, error) {
	event := new(EditableCommitPending)
	if err := _Editable.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableEditableMigrateIterator is returned from FilterEditableMigrate and is used to iterate over the raw logs and unpacked data for EditableMigrate events raised by the Editable contract.
type EditableEditableMigrateIterator struct {
	Event *EditableEditableMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableEditableMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableEditableMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableEditableMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableEditableMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableEditableMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableEditableMigrate represents a EditableMigrate event raised by the Editable contract.
type EditableEditableMigrate struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEditableMigrate is a free log retrieval operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_Editable *EditableFilterer) FilterEditableMigrate(opts *bind.FilterOpts) (*EditableEditableMigrateIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return &EditableEditableMigrateIterator{contract: _Editable.contract, event: "EditableMigrate", logs: logs, sub: sub}, nil
}

// WatchEditableMigrate is a free log subscription operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_Editable *EditableFilterer) WatchEditableMigrate(opts *bind.WatchOpts, sink chan<- *EditableEditableMigrate) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "EditableMigrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableEditableMigrate)
				if err := _Editable.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEditableMigrate is a log parse operation binding the contract event 0xae42e2c7c216f9825995a71bdcb1b3c6a6bd9f42a627045658b12fa2da78ce58.
//
// Solidity: event EditableMigrate()
func (_Editable *EditableFilterer) ParseEditableMigrate(log types.Log) (*EditableEditableMigrate, error) {
	event := new(EditableEditableMigrate)
	if err := _Editable.contract.UnpackLog(event, "EditableMigrate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the Editable contract.
type EditableUpdateRequestIterator struct {
	Event *EditableUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableUpdateRequest represents a UpdateRequest event raised by the Editable contract.
type EditableUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*EditableUpdateRequestIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &EditableUpdateRequestIterator{contract: _Editable.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *EditableUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableUpdateRequest)
				if err := _Editable.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) ParseUpdateRequest(log types.Log) (*EditableUpdateRequest, error) {
	event := new(EditableUpdateRequest)
	if err := _Editable.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the Editable contract.
type EditableVersionConfirmIterator struct {
	Event *EditableVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableVersionConfirm represents a VersionConfirm event raised by the Editable contract.
type EditableVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_Editable *EditableFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*EditableVersionConfirmIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &EditableVersionConfirmIterator{contract: _Editable.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_Editable *EditableFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *EditableVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableVersionConfirm)
				if err := _Editable.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_Editable *EditableFilterer) ParseVersionConfirm(log types.Log) (*EditableVersionConfirm, error) {
	event := new(EditableVersionConfirm)
	if err := _Editable.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the Editable contract.
type EditableVersionDeleteIterator struct {
	Event *EditableVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableVersionDelete represents a VersionDelete event raised by the Editable contract.
type EditableVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*EditableVersionDeleteIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &EditableVersionDeleteIterator{contract: _Editable.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *EditableVersionDelete) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableVersionDelete)
				if err := _Editable.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) ParseVersionDelete(log types.Log) (*EditableVersionDelete, error) {
	event := new(EditableVersionDelete)
	if err := _Editable.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamABI is the input ABI used to generate the binding from.
const LvRecordableStreamABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"percentPlayed\",\"type\":\"uint8\"},{\"name\":\"originator\",\"type\":\"address\"},{\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"logRecordingPlaybackCompleted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"originator\",\"type\":\"address\"},{\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"logRecordingPlaybackStarted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"runAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"runAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"runFinalize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recordingStream\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"logRecordingStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposed_status_code\",\"type\":\"int256\"}],\"name\":\"runStatusChange\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"runDescribeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_handle\",\"type\":\"string\"}],\"name\":\"startStream\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"membershipGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recordingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stream\",\"type\":\"address\"}],\"name\":\"setRecordingStream\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"programId\",\"type\":\"string\"},{\"name\":\"programStart\",\"type\":\"uint256\"},{\"name\":\"programEnd\",\"type\":\"uint256\"},{\"name\":\"programTitle\",\"type\":\"string\"}],\"name\":\"logRecordedProgramId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRecording\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rightsHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addMembershipGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accessor\",\"type\":\"address\"},{\"name\":\"rightsHolderDecision\",\"type\":\"bool\"}],\"name\":\"logRecordingAuthorization\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runKill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rightsHolder\",\"type\":\"address\"}],\"name\":\"setRightsHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"hasMembership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasRightsHolderPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopStream\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"logRecordingTimes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableRecording\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"logRecordingDeletion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"authorizeRecording\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeMembershipGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"name\":\"runGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"originator\",\"type\":\"address\"}],\"name\":\"runFinalizeExt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"membershipGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_CHARGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"handle\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rightsHolder\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"provider\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"membership\",\"type\":\"bool\"}],\"name\":\"AuthorizeRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recObj\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recContract\",\"type\":\"address\"}],\"name\":\"CreateRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recObj\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recContract\",\"type\":\"address\"}],\"name\":\"DeleteRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recObj\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recEndTime\",\"type\":\"uint256\"}],\"name\":\"SetRecordingTimes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recObj\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recStatus\",\"type\":\"string\"}],\"name\":\"SetRecordingStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recObj\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessTimestamp\",\"type\":\"uint256\"}],\"name\":\"RecordingPlaybackStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recObj\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percentPlayed\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"finalizeTimestamp\",\"type\":\"uint256\"}],\"name\":\"RecordingPlaybackCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recObj\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"programId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"programStart\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"programEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"programTitle\",\"type\":\"string\"}],\"name\":\"RecordedProgramId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"MembershipGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"MembershipGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StartStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StopStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EnableRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DisableRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposedStatusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"returnStatusCode\",\"type\":\"int256\"}],\"name\":\"RunStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"calculateAccessCharge\",\"type\":\"int256\"}],\"name\":\"RunAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunFinalize\",\"type\":\"event\"}]"

// LvRecordableStreamFuncSigs maps the 4-byte function signature to its string representation.
var LvRecordableStreamFuncSigs = map[string]string{
	"6af27417": "DEFAULT_ACCESS()",
	"f185db0c": "DEFAULT_CHARGE()",
	"b535b03e": "DEFAULT_SEE()",
	"90657ca0": "addMembershipGroup(address)",
	"c992f43a": "authorizeRecording(address)",
	"d52e6679": "canRecord()",
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"c949eb64": "disableRecording()",
	"793a648c": "enableRecording()",
	"3197cbb6": "endTime()",
	"fd0da099": "handle()",
	"a88db6ad": "hasMembership(address)",
	"af7e5678": "hasRightsHolderPermission()",
	"41c0e1b5": "kill()",
	"782f1a6f": "logRecordedProgramId(string,uint256,uint256,string)",
	"9156d1fd": "logRecordingAuthorization(address,bool)",
	"c96444f0": "logRecordingDeletion()",
	"01a392bf": "logRecordingPlaybackCompleted(uint256,uint8,address,uint256)",
	"04fbef35": "logRecordingPlaybackStarted(uint256,address,uint256)",
	"2b45298e": "logRecordingStatus()",
	"c2ccedad": "logRecordingTimes()",
	"5f7231ab": "membershipGroups(uint256)",
	"ecedf6d7": "membershipGroupsLength()",
	"8da5cb5b": "owner()",
	"684e9657": "recordingEnabled()",
	"21130b6d": "recordingStream()",
	"e1db5840": "removeMembershipGroup(address)",
	"81e20e6e": "rightsHolder()",
	"123e0e80": "runAccess(uint256,uint8,bytes32[],address[])",
	"0f82c16f": "runAccessInfo(uint8,bytes32[],address[])",
	"7b1cdb3e": "runCreate()",
	"45080442": "runDescribeStatus(int256)",
	"17685953": "runFinalize(uint256,uint256)",
	"eb81eff0": "runFinalizeExt(uint256,uint256,address)",
	"e870ed91": "runGrant(uint256,bool)",
	"9e99bbea": "runKill()",
	"3513a805": "runStatusChange(int256)",
	"6856ff59": "setRecordingStream(address)",
	"a1cd0b53": "setRightsHolder(address)",
	"5d39c071": "startStream(string)",
	"78e97925": "startTime()",
	"c01d76d5": "stopStream()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
}

// LvRecordableStreamBin is the compiled bytecode used for deploying new contracts.
var LvRecordableStreamBin = "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f436f6e74656e7432303139313033313136323030304d4c0000000000000000006004557f4c7652656353747265616d32303139313033313137343530304d4c00000000006005556001805432600160a060020a0319918216811790925560028054909116821790553314620000ab57600a8054600160a060020a031916331790555b600060068190556007819055604080516020810191829052829052620000d59160099190620000dc565b5062000181565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011f57805160ff19168380011785556200014f565b828001600101855582156200014f579182015b828111156200014f57825182559160200191906001019062000132565b506200015d92915062000161565b5090565b6200017e91905b808211156200015d576000815560010162000168565b90565b61386e80620001916000396000f3006080604052600436106102165763ffffffff60e060020a60003504166301a392bf811461021857806302d05d3f1461024557806304fbef35146102765780630f82c16f1461029d578063123e0e8014610362578063176859531461040157806321130b6d1461040f5780632b45298e146104245780633197cbb61461044f5780633513a8051461046457806341c0e1b51461046f578063450804421461048457806354fd4d501461049c5780635d39c071146104b15780635f7231ab1461050a578063684e9657146105225780636856ff591461054b5780636af274171461056c5780636d2e4b1b14610581578063782f1a6f146105a257806378e9792514610646578063793a648c1461065b5780637b1cdb3e1461067057806381e20e6e146106785780638da5cb5b1461068d57806390657ca0146106a25780639156d1fd146106c35780639e99bbea14610704578063a1cd0b531461070c578063a88db6ad1461072d578063af570c041461074e578063af7e567814610763578063b535b03e14610778578063c01d76d51461078d578063c2ccedad146107a2578063c949eb64146107b7578063c96444f0146107cc578063c992f43a146107e1578063d52e667914610802578063e1db584014610817578063e870ed9114610838578063eb81eff014610848578063ecedf6d714610862578063f185db0c14610877578063f2fde38b1461088c578063fd0da099146108ad575b005b34801561022457600080fd5b5061021660043560ff60243516600160a060020a0360443516606435610937565b34801561025157600080fd5b5061025a610a0e565b60408051600160a060020a039092168252519081900360200190f35b34801561028257600080fd5b50610216600435600160a060020a0360243516604435610a1d565b3480156102a957600080fd5b5060408051602060046024803582810135848102808701860190975280865261033396843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610aea9650505050505050565b6040805160ff958616815293851660208501529190931682820152606082019290925290519081900360800190f35b60408051602060046044358181013583810280860185019096528085526103ef958335956024803560ff1696369695606495939492019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610af99650505050505050565b60408051918252519081900360200190f35b6103ef600435602435610b03565b34801561041b57600080fd5b5061025a610b0b565b34801561043057600080fd5b50610439610b1a565b6040805160ff9092168252519081900360200190f35b34801561045b57600080fd5b506103ef610d8a565b6103ef600435610d90565b34801561047b57600080fd5b50610216610d93565b34801561049057600080fd5b506103ef600435610dcf565b3480156104a857600080fd5b506103ef610dd5565b3480156104bd57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610216943694929360249392840191908190840183828082843750949750610ddb9650505050505050565b34801561051657600080fd5b5061025a600435610e5d565b34801561052e57600080fd5b50610537610e85565b604080519115158252519081900360200190f35b34801561055757600080fd5b50610216600160a060020a0360043516610e8e565b34801561057857600080fd5b50610439610ede565b34801561058d57600080fd5b50610216600160a060020a0360043516610ee3565b3480156105ae57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261021694369492936024939284019190819084018382808284375050604080516020888301358a018035601f8101839004830284018301909452838352979a89359a8a8301359a91999098506060909101965091945090810192508190840183828082843750949750610f319650505050505050565b34801561065257600080fd5b506103ef611101565b34801561066757600080fd5b50610216611107565b6103ef611177565b34801561068457600080fd5b5061025a6113ff565b34801561069957600080fd5b5061025a61140e565b3480156106ae57600080fd5b50610216600160a060020a036004351661141d565b3480156106cf57600080fd5b506106e9600160a060020a0360043516602435151561163c565b60408051921515835290151560208301528051918290030190f35b6103ef6116f4565b34801561071857600080fd5b50610216600160a060020a03600435166116f9565b34801561073957600080fd5b50610537600160a060020a03600435166117c8565b34801561075a57600080fd5b5061025a6118ec565b34801561076f57600080fd5b506105376118fb565b34801561078457600080fd5b506104396119bc565b34801561079957600080fd5b506102166119c1565b3480156107ae57600080fd5b50610216611a48565b3480156107c357600080fd5b50610216611c21565b3480156107d857600080fd5b50610216611c8e565b3480156107ed57600080fd5b50610537600160a060020a0360043516611d50565b34801561080e57600080fd5b50610537611e34565b34801561082357600080fd5b50610537600160a060020a0360043516611e61565b6103ef6004356024351515610b03565b6103ef600435602435600160a060020a0360443516612085565b34801561086e57600080fd5b506103ef61208e565b34801561088357600080fd5b50610439612094565b34801561089857600080fd5b50610216600160a060020a0360043516612099565b3480156108b957600080fd5b506108c26120fe565b6040805160208082528351818301528351919283929083019185019080838360005b838110156108fc5781810151838201526020016108e4565b50505050905090810190601f1680156109295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60003390507f208745b583bd0c257eced13411dc4b50e9a3a9c1ef0cc2f95b30a7457ec50cc1428483600160a060020a031663129b97756040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b505050506040513d60208110156109c757600080fd5b505160408051938452600160a060020a0392831660208501529116828201526060820188905260ff8716608083015260a08201859052519081900360c00190a15050505050565b600154600160a060020a031681565b60003390507f182a726f966f22c96d651085c2a7143482b8d96fb0964ff2664ab8bdf2b703aa428483600160a060020a031663129b97756040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a8357600080fd5b505af1158015610a97573d6000803e3d6000fd5b505050506040513d6020811015610aad57600080fd5b505160408051938452600160a060020a0392831660208501529116828201526060820187905260808201859052519081900360a00190a150505050565b60076000808093509350935093565b6000949350505050565b600092915050565b600a54600160a060020a031681565b600080600033915081600160a060020a031663922386c56040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610b6057600080fd5b505af1158015610b74573d6000803e3d6000fd5b505050506040513d6020811015610b8a57600080fd5b50519050600a60ff82161415610c8b577f93ee8bc66b5d08a5dc39e788b1f78aa5f9ff2deda9e1387aa1fe22f9c329ed85423284600160a060020a031663129b97756040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610bfb57600080fd5b505af1158015610c0f573d6000803e3d6000fd5b505050506040513d6020811015610c2557600080fd5b505160408051938452600160a060020a0392831660208501529116828201526080606083018190526009908301527f7265636f7264696e67000000000000000000000000000000000000000000000060a0830152519081900360c00190a1809250610d85565b8060ff1660641415610d81577f93ee8bc66b5d08a5dc39e788b1f78aa5f9ff2deda9e1387aa1fe22f9c329ed85423284600160a060020a031663129b97756040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610cf857600080fd5b505af1158015610d0c573d6000803e3d6000fd5b505050506040513d6020811015610d2257600080fd5b505160408051938452600160a060020a0392831660208501529116828201526080606083018190526008908301527f636f6d706c65746500000000000000000000000000000000000000000000000060a0830152519081900360c00190a15b8092505b505090565b60075481565b90565b600254600160a060020a0316321480610db65750600254600160a060020a031633145b1515610dc157600080fd5b600254600160a060020a0316ff5b50600090565b60055481565b600254600160a060020a0316321480610dfe5750600254600160a060020a031633145b1515610e0957600080fd5b8051610e1c906009906020840190612372565b50426006819055600060075560408051918252517f8d7e6a8f23ccc8845c41fd09bebe570a0885272343268bbdfd71090b878b4b219181900360200190a150565b600c805482908110610e6b57fe5b600091825260209091200154600160a060020a0316905081565b60085460ff1681565b600254600160a060020a0316321480610eb15750600254600160a060020a031633145b1515610ebc57600080fd5b600a8054600160a060020a031916600160a060020a0392909216919091179055565b600281565b600154600160a060020a03163214610efa57600080fd5b600160a060020a0381161515610f0f57600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b60003390507fe3b30c4da7320d1a542eb57f205a34d2fc36ecd114595f3d50be2a73b3426e6b423283600160a060020a031663129b97756040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f9757600080fd5b505af1158015610fab573d6000803e3d6000fd5b505050506040513d6020811015610fc157600080fd5b8101908080519060200190929190505050888888886040518088815260200187600160a060020a0316600160a060020a0316815260200186600160a060020a0316600160a060020a031681526020018060200185815260200184815260200180602001838103835287818151815260200191508051906020019080838360005b83811015611059578181015183820152602001611041565b50505050905090810190601f1680156110865780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156110b95781810151838201526020016110a1565b50505050905090810190601f1680156110e65780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a15050505050565b60065481565b600254600160a060020a031632148061112a5750600254600160a060020a031633145b151561113557600080fd5b6008805460ff191660011790556040805142815290517fe1182e14924c528bfb564fb8d4feefe9766244f88b00051f28182e635e9a1ae89181900360200190a1565b600a5460009081908190819081908190600160a060020a031615156111b05761119f33610e8e565b6111a7611107565b600095506113f7565b600b54600160a060020a03161561127157600b54600a54604080517f6135c504000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015232602482015290519190921696508691636135c5049160448083019260209291908290030181600087803b15801561123557600080fd5b505af1158015611249573d6000803e3d6000fd5b505050506040513d602081101561125f57600080fd5b5051151561126c57600080fd5b611285565b61127a32611d50565b151561128557600080fd5b61128d6123ec565b604051809103906000f0801580156112a9573d6000803e3d6000fd5b50604080517fa4a22c590000000000000000000000000000000000000000000000000000000081523360048201529051919450849350600160a060020a0384169163a4a22c599160248082019260009290919082900301818387803b15801561131157600080fd5b505af1158015611325573d6000803e3d6000fd5b5050604080517fe5385303000000000000000000000000000000000000000000000000000000008152600160a060020a0387166004820152905133945084935063e53853039250602480830192600092919082900301818387803b15801561138c57600080fd5b505af11580156113a0573d6000803e3d6000fd5b5050604080514281523260208201523381830152600160a060020a038716606082015290517f41b90676ca6c9f288172c8f4f1f0253bfc527115acd3f7a972a5219ea4b0d0c59350908190036080019150a1600095505b505050505090565b600b54600160a060020a031681565b600254600160a060020a031681565b6002546000908190600160a060020a03163214806114455750600254600160a060020a031633145b151561145057600080fd5b600d54915061146183600c8461218c565b600d8190558210156116375760408051428152600160a060020a038516602082015281517f467a7c1305f91e354a8a1e9046906d4d1a4852f958a073a392555d809be313a7929181900390910190a182905080600160a060020a0316633def5140600a60009054906101000a9004600160a060020a031683600160a060020a031663d1aeb6516040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561151657600080fd5b505af115801561152a573d6000803e3d6000fd5b505050506040513d602081101561154057600080fd5b5051604080517f479a0c510000000000000000000000000000000000000000000000000000000081529051600160a060020a0387169163479a0c519160048083019260209291908290030181600087803b15801561159d57600080fd5b505af11580156115b1573d6000803e3d6000fd5b505050506040513d60208110156115c757600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff92831660248501529116604483015251606480830192600092919082900301818387803b15801561161e57600080fd5b505af1158015611632573d6000803e3d6000fd5b505050505b505050565b600b5460009081908190600160a060020a031633148061166d5750600b54600160a060020a031615801561166d5750835b151561167857600080fd5b611681856117c8565b60085460408051428152600160a060020a03891660208201528715158183015260ff909216151560608301528215156080830152519192507fe36c3ab835cea1a8af00f744c77bb77bbbd33d20062bee3f9aceb6518d08e45e919081900360a00190a160085460ff169590945092505050565b600090565b600254600090600160a060020a031632148061171f5750600254600160a060020a031633145b151561172a57600080fd5b50600b8054600160a060020a031916600160a060020a038381169190911791829055600a54604080517fad284b120000000000000000000000000000000000000000000000000000000081529183166004830152519290911691829163ad284b1291602480830192600092919082900301818387803b1580156117ac57600080fd5b505af11580156117c0573d6000803e3d6000fd5b505050505050565b6000806000600d54600014156117e157600192506118e5565b600091505b600d548210156118e057600c8054839081106117fe57fe5b600091825260209091200154600160a060020a0316156118d557600c80548390811061182657fe5b6000918252602080832090910154604080517f95a078e8000000000000000000000000000000000000000000000000000000008152600160a060020a038981166004830152915191909216945084936395a078e893602480850194919392918390030190829087803b15801561189b57600080fd5b505af11580156118af573d6000803e3d6000fd5b505050506040513d60208110156118c557600080fd5b5051156118d557600192506118e5565b6001909101906117e6565b600092505b5050919050565b600354600160a060020a031681565b600b546000908190600160a060020a0316156119b35750600b54600a54604080517f250fc29a000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015290519190921691829163250fc29a916024808201926020929091908290030181600087803b15801561198057600080fd5b505af1158015611994573d6000803e3d6000fd5b505050506040513d60208110156119aa57600080fd5b505191506119b8565b600191505b5090565b600181565b600254600160a060020a03163214806119e45750600254600160a060020a031633145b15156119ef57600080fd5b604080516020810191829052600090819052611a0d91600991612372565b5042600781905560408051918252517f1b01b687e3428bc184341f729ec8a57bdd569536206cfb59e5d0cecb30dfcb7e9181900360200190a1565b60003390507f8e6b298cf577550234f0d0de33a4910d4bf1c4e08fe31b1173b2c6232297b3f4423283600160a060020a031663129b97756040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611aae57600080fd5b505af1158015611ac2573d6000803e3d6000fd5b505050506040513d6020811015611ad857600080fd5b5051604080517f78e979250000000000000000000000000000000000000000000000000000000081529051600160a060020a038716916378e979259160048083019260209291908290030181600087803b158015611b3557600080fd5b505af1158015611b49573d6000803e3d6000fd5b505050506040513d6020811015611b5f57600080fd5b5051604080517f3197cbb60000000000000000000000000000000000000000000000000000000081529051600160a060020a03881691633197cbb69160048083019260209291908290030181600087803b158015611bbc57600080fd5b505af1158015611bd0573d6000803e3d6000fd5b505050506040513d6020811015611be657600080fd5b505160408051958652600160a060020a039485166020870152929093168483015260608401526080830191909152519081900360a00190a150565b600254600160a060020a0316321480611c445750600254600160a060020a031633145b1515611c4f57600080fd5b6008805460ff191690556040805142815290517f3a5d2272abc5c09c8e771719f0eeca97e31d2fc425f6c34cf1d7a712b5fb6bfd9181900360200190a1565b60003390507f9d3bb073bb2ef4d4a880f32fbbc665abfad2b29f532a231d93ab2207396f0b25423283600160a060020a031663129b97756040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611cf457600080fd5b505af1158015611d08573d6000803e3d6000fd5b505050506040513d6020811015611d1e57600080fd5b505160408051938452600160a060020a039283166020850152911682820152336060830152519081900360800190a150565b600b5460009081908190600160a060020a031615611e0f57600b54600a54604080517f6135c504000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015232602482015290519190921693508391636135c5049160448083019260209291908290030181600087803b158015611ddc57600080fd5b505af1158015611df0573d6000803e3d6000fd5b505050506040513d6020811015611e0657600080fd5b505192506118e5565b611e1a32600161163c565b91508190508015611e2d575060085460ff165b92506118e5565b60085460009060ff168015611e4d5750611e4d326117c8565b15610dcf57611e5a6118fb565b9050610d90565b60025460009081908190600160a060020a0316321480611e8b5750600254600160a060020a031633145b1515611e9657600080fd5b600d549150611ea784600c8461225b565b600d8190558211156118e05760408051428152600160a060020a038616602082015281517f7b4822b1021af568bad37d56a35fbc255dc67153c544aa4116a289632a4e5955929181900390910190a183905080600160a060020a0316633def5140600a60009054906101000a9004600160a060020a031683600160a060020a031663d1aeb6516040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611f5c57600080fd5b505af1158015611f70573d6000803e3d6000fd5b505050506040513d6020811015611f8657600080fd5b5051604080517f8232f3f10000000000000000000000000000000000000000000000000000000081529051600160a060020a03871691638232f3f19160048083019260209291908290030181600087803b158015611fe357600080fd5b505af1158015611ff7573d6000803e3d6000fd5b505050506040513d602081101561200d57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff92831660248501529116604483015251606480830192600092919082900301818387803b15801561206457600080fd5b505af1158015612078573d6000803e3d6000fd5b50505050600192506118e5565b60009392505050565b600d5481565b600481565b600254600160a060020a03163214806120bc5750600254600160a060020a031633145b15156120c757600080fd5b600160a060020a03811615156120dc57600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b6009805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156121845780601f1061215957610100808354040283529160200191612184565b820191906000526020600020905b81548152906001019060200180831161216757829003601f168201915b505050505081565b6000805b828110156121d55783818154811015156121a657fe5b600091825260209091200154600160a060020a03868116911614156121cd57829150612253565b600101612190565b8354831015612220578484848154811015156121ed57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555061224c565b8354600181018555600085815260209020018054600160a060020a031916600160a060020a0387161790555b8260010191505b509392505050565b6000805b8281101561236957838181548110151561227557fe5b600091825260209091200154600160a060020a03868116911614156123615783818154811015156122a257fe5b60009182526020909120018054600160a060020a0319169055600019830181146123565783600184038154811015156122d757fe5b6000918252602090912001548454600160a060020a03909116908590839081106122fd57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550836001840381548110151561233c57fe5b60009182526020909120018054600160a060020a03191690555b600183039150612253565b60010161225f565b50909392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106123b357805160ff19168380011785556123e0565b828001600101855582156123e0579182015b828111156123e05782518255916020019190600101906123c5565b506119b89291506123fc565b60405161142c8061241783390190565b610d9091905b808211156119b85760008155600101612402560060806040527f4f776e61626c6532303139303532383139333830304d4c00000000000000000060009081557f436f6e74656e7432303139313033313136323030304d4c0000000000000000006004557f4c765265636f7264696e6732303139313033313230343130304d4c00000000006005556001805432600160a060020a03199182168117909255600280549091169091179055600681905560078190556008805461010060a860020a03191661010033021760ff19169055600a819055600c8190556113599081906100d390396000f3006080604052600436106101715763ffffffff60e060020a60003504166302d05d3f81146101735780630f82c16f146101a4578063123e0e8014610269578063129b977514610308578063172cc9211461031d57806317685953146103fa57806322434836146104085780633197cbb6146104235780633513a805146104385780633e0a322d1461044357806341c0e1b51461045b578063450804421461047057806354fd4d50146104885780635ebfe0711461049d5780636af27417146104b25780636d2e4b1b146104dd57806378e97925146104fe5780637b1cdb3e146105135780638da5cb5b1461051b578063922386c5146105305780639e99bbea14610545578063a3b2d3d51461054d578063a4a22c5914610568578063af570c0414610589578063b535b03e1461059e578063c9f3d94c146105b3578063ccb98ffc146105c8578063e870ed91146105e0578063eb81eff0146105f0578063f185db0c1461060a578063f2fde38b1461061f575b005b34801561017f57600080fd5b50610188610640565b60408051600160a060020a039092168252519081900360200190f35b3480156101b057600080fd5b5060408051602060046024803582810135848102808701860190975280865261023a96843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061064f9650505050505050565b6040805160ff958616815293851660208501529190931682820152606082019290925290519081900360800190f35b60408051602060046044358181013583810280860185019096528085526102f6958335956024803560ff1696369695606495939492019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061065e9650505050505050565b60408051918252519081900360200190f35b34801561031457600080fd5b50610188610860565b34801561032957600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261017194369492936024939284019190819084018382808284375050604080516020888301358a018035601f8101839004830284018301909452838352979a89359a8a8301359a91999098506060909101965091945090810192508190840183828082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061086f9650505050505050565b6102f6600435602435610a9b565b34801561041457600080fd5b50610171600435602435610b3f565b34801561042f57600080fd5b506102f6610c00565b6102f6600435610c06565b34801561044f57600080fd5b50610171600435610c09565b34801561046757600080fd5b50610171610d09565b34801561047c57600080fd5b506102f6600435610d45565b34801561049457600080fd5b506102f6610d4b565b3480156104a957600080fd5b50610188610d51565b3480156104be57600080fd5b506104c7610d65565b6040805160ff9092168252519081900360200190f35b3480156104e957600080fd5b50610171600160a060020a0360043516610d6a565b34801561050a57600080fd5b506102f6610dc5565b6102f6610dcb565b34801561052757600080fd5b50610188610dd0565b34801561053c57600080fd5b506104c7610ddf565b6102f6610de8565b34801561055957600080fd5b5061017160ff60043516610e62565b34801561057457600080fd5b50610171600160a060020a0360043516610f6a565b34801561059557600080fd5b50610188610fc7565b3480156105aa57600080fd5b506104c7610fd6565b3480156105bf57600080fd5b506102f6610fdb565b3480156105d457600080fd5b50610171600435611077565b6102f66004356024351515611127565b6102f6600435602435600160a060020a036044351661112f565b34801561061657600080fd5b506104c76112b6565b34801561062b57600080fd5b50610171600160a060020a03600435166112bb565b600154600160a060020a031681565b60076000808093509350935093565b60008060008560ff16111561085457600860019054906101000a9004600160a060020a0316905082600081518110151561069457fe5b90602001906020020151600160a060020a03166000141561073957604080517f04fbef35000000000000000000000000000000000000000000000000000000008152600481018890523260248201524260448201529051600160a060020a038316916304fbef3591606480830192600092919082900301818387803b15801561071c57600080fd5b505af1158015610730573d6000803e3d6000fd5b50505050610854565b600a80546001019055600b54600c54101561077357600a54600b600c5481548110151561076257fe5b6000918252602090912001556107aa565b600a54600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901555b600c54600101600c8190555080600160a060020a03166304fbef35600a548560008151811015156107d757fe5b90602001906020020151896040518463ffffffff1660e060020a0281526004018084815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050600060405180830381600087803b15801561083b57600080fd5b505af115801561084f573d6000803e3d6000fd5b505050505b50600095945050505050565b600954600160a060020a031681565b600254600090600160a060020a03163214806108955750600254600160a060020a031633145b15156108a057600080fd5b600860019054906101000a9004600160a060020a0316905080600160a060020a031663782f1a6f878787876040518563ffffffff1660e060020a028152600401808060200185815260200184815260200180602001838103835287818151815260200191508051906020019080838360005b8381101561092a578181015183820152602001610912565b50505050905090810190601f1680156109575780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561098a578181015183820152602001610972565b50505050905090810190601f1680156109b75780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b1580156109da57600080fd5b505af11580156109ee573d6000803e3d6000fd5b505050507f453384b91e17e6c44d171f27d5d32a864cf9cc9740578ffd6552d323aa97337242876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a58578181015183820152602001610a40565b50505050905090810190601f168015610a855780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050505050565b600854604080517f01a392bf0000000000000000000000000000000000000000000000000000000081526004810185905260ff8416602482015232604482015242606482015290516000926101009004600160a060020a03169182916301a392bf91608480820192879290919082900301818387803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b506000979650505050505050565b60068290556007819055604080514281526020810184905280820183905290516000917f3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c54919081900360600190a1600860019054906101000a9004600160a060020a0316905080600160a060020a031663c2ccedad6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610be357600080fd5b505af1158015610bf7573d6000803e3d6000fd5b50505050505050565b60075481565b90565b600254600090600160a060020a0316321480610c2f5750600254600160a060020a031633145b1515610c3a57600080fd5b811515610c4a5742600655610c50565b60068290555b60065460075460408051428152602081019390935282810191909152517f3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c549181900360600190a1600860019054906101000a9004600160a060020a0316905080600160a060020a031663c2ccedad6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610ced57600080fd5b505af1158015610d01573d6000803e3d6000fd5b505050505050565b600254600160a060020a0316321480610d2c5750600254600160a060020a031633145b1515610d3757600080fd5b600254600160a060020a0316ff5b50600090565b60055481565b6008546101009004600160a060020a031681565b600281565b600154600160a060020a03163214610d8157600080fd5b600160a060020a0381161515610d9657600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60065481565b600090565b600254600160a060020a031681565b60085460ff1681565b600080600860019054906101000a9004600160a060020a0316905080600160a060020a031663c96444f06040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610e4157600080fd5b505af1158015610e55573d6000803e3d6000fd5b50505050606491505b5090565b600254600090600160a060020a0316321480610e885750600254600160a060020a031633145b1515610e9357600080fd5b6008805460ff191660ff84811691909117918290556040805142815292909116602083015280517f6fff8c8938f3906f27a679f8d6b6652c28d82df5e27e55ef5cdc5f96b06dee099281900390910190a1600860019054906101000a9004600160a060020a0316905080600160a060020a0316632b45298e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f3a57600080fd5b505af1158015610f4e573d6000803e3d6000fd5b505050506040513d6020811015610f6457600080fd5b50505050565b600254600160a060020a0316321480610f8d5750600254600160a060020a031633145b1515610f9857600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600181565b600080600860019054906101000a9004600160a060020a0316905080600160a060020a031663d52e66796040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561103457600080fd5b505af1158015611048573d6000803e3d6000fd5b505050506040513d602081101561105e57600080fd5b50511561106e5760009150610e5e565b600a9150610e5e565b60008115156110895742600755610c50565b6007829055600654604080514281526020810192909252818101849052517f3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c549181900360600190a1600860019054906101000a9004600160a060020a0316905080600160a060020a031663c2ccedad6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610ced57600080fd5b600092915050565b600854600c546000916101009004600160a060020a0316908210156112195780600160a060020a03166301a392bf600b6001600c540381548110151561117157fe5b60009182526020822001546040805160e060020a63ffffffff8616028152600481019290925260ff89166024830152600160a060020a0388166044830152606482018a9052516084808301939282900301818387803b1580156111d357600080fd5b505af11580156111e7573d6000803e3d6000fd5b50505050600b6001600c54038154811015156111ff57fe5b6000918252602082200155600c80546000190190556112ab565b604080517f01a392bf00000000000000000000000000000000000000000000000000000000815260006004820181905260ff87166024830152600160a060020a038681166044840152606483018990529251928416926301a392bf92608480820193929182900301818387803b15801561129257600080fd5b505af11580156112a6573d6000803e3d6000fd5b505050505b506000949350505050565b600481565b600254600160a060020a03163214806112de5750600254600160a060020a031633145b15156112e957600080fd5b600160a060020a03811615156112fe57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820dc4b9d63283f440cf61d4e3beb2023760778297e229f75259c8cbe28696a0d5e0029a165627a7a72305820c769d3917d65c7cb7d9b16f57e1954aac1a3eee65e2651979ebbdd56294e335c0029"

// DeployLvRecordableStream deploys a new Ethereum contract, binding an instance of LvRecordableStream to it.
func DeployLvRecordableStream(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LvRecordableStream, error) {
	parsed, err := abi.JSON(strings.NewReader(LvRecordableStreamABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LvRecordableStreamBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LvRecordableStream{LvRecordableStreamCaller: LvRecordableStreamCaller{contract: contract}, LvRecordableStreamTransactor: LvRecordableStreamTransactor{contract: contract}, LvRecordableStreamFilterer: LvRecordableStreamFilterer{contract: contract}}, nil
}

// LvRecordableStream is an auto generated Go binding around an Ethereum contract.
type LvRecordableStream struct {
	LvRecordableStreamCaller     // Read-only binding to the contract
	LvRecordableStreamTransactor // Write-only binding to the contract
	LvRecordableStreamFilterer   // Log filterer for contract events
}

// LvRecordableStreamCaller is an auto generated read-only Go binding around an Ethereum contract.
type LvRecordableStreamCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvRecordableStreamTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LvRecordableStreamTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvRecordableStreamFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LvRecordableStreamFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvRecordableStreamSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LvRecordableStreamSession struct {
	Contract     *LvRecordableStream // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// LvRecordableStreamCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LvRecordableStreamCallerSession struct {
	Contract *LvRecordableStreamCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// LvRecordableStreamTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LvRecordableStreamTransactorSession struct {
	Contract     *LvRecordableStreamTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// LvRecordableStreamRaw is an auto generated low-level Go binding around an Ethereum contract.
type LvRecordableStreamRaw struct {
	Contract *LvRecordableStream // Generic contract binding to access the raw methods on
}

// LvRecordableStreamCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LvRecordableStreamCallerRaw struct {
	Contract *LvRecordableStreamCaller // Generic read-only contract binding to access the raw methods on
}

// LvRecordableStreamTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LvRecordableStreamTransactorRaw struct {
	Contract *LvRecordableStreamTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLvRecordableStream creates a new instance of LvRecordableStream, bound to a specific deployed contract.
func NewLvRecordableStream(address common.Address, backend bind.ContractBackend) (*LvRecordableStream, error) {
	contract, err := bindLvRecordableStream(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LvRecordableStream{LvRecordableStreamCaller: LvRecordableStreamCaller{contract: contract}, LvRecordableStreamTransactor: LvRecordableStreamTransactor{contract: contract}, LvRecordableStreamFilterer: LvRecordableStreamFilterer{contract: contract}}, nil
}

// NewLvRecordableStreamCaller creates a new read-only instance of LvRecordableStream, bound to a specific deployed contract.
func NewLvRecordableStreamCaller(address common.Address, caller bind.ContractCaller) (*LvRecordableStreamCaller, error) {
	contract, err := bindLvRecordableStream(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamCaller{contract: contract}, nil
}

// NewLvRecordableStreamTransactor creates a new write-only instance of LvRecordableStream, bound to a specific deployed contract.
func NewLvRecordableStreamTransactor(address common.Address, transactor bind.ContractTransactor) (*LvRecordableStreamTransactor, error) {
	contract, err := bindLvRecordableStream(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamTransactor{contract: contract}, nil
}

// NewLvRecordableStreamFilterer creates a new log filterer instance of LvRecordableStream, bound to a specific deployed contract.
func NewLvRecordableStreamFilterer(address common.Address, filterer bind.ContractFilterer) (*LvRecordableStreamFilterer, error) {
	contract, err := bindLvRecordableStream(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamFilterer{contract: contract}, nil
}

// bindLvRecordableStream binds a generic wrapper to an already deployed contract.
func bindLvRecordableStream(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LvRecordableStreamABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LvRecordableStream *LvRecordableStreamRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LvRecordableStream.Contract.LvRecordableStreamCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LvRecordableStream *LvRecordableStreamRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LvRecordableStreamTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LvRecordableStream *LvRecordableStreamRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LvRecordableStreamTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LvRecordableStream *LvRecordableStreamCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LvRecordableStream.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LvRecordableStream *LvRecordableStreamTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LvRecordableStream *LvRecordableStreamTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_LvRecordableStream *LvRecordableStreamCaller) DEFAULTACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "DEFAULT_ACCESS")
	return *ret0, err
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_LvRecordableStream *LvRecordableStreamSession) DEFAULTACCESS() (uint8, error) {
	return _LvRecordableStream.Contract.DEFAULTACCESS(&_LvRecordableStream.CallOpts)
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_LvRecordableStream *LvRecordableStreamCallerSession) DEFAULTACCESS() (uint8, error) {
	return _LvRecordableStream.Contract.DEFAULTACCESS(&_LvRecordableStream.CallOpts)
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_LvRecordableStream *LvRecordableStreamCaller) DEFAULTCHARGE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "DEFAULT_CHARGE")
	return *ret0, err
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_LvRecordableStream *LvRecordableStreamSession) DEFAULTCHARGE() (uint8, error) {
	return _LvRecordableStream.Contract.DEFAULTCHARGE(&_LvRecordableStream.CallOpts)
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_LvRecordableStream *LvRecordableStreamCallerSession) DEFAULTCHARGE() (uint8, error) {
	return _LvRecordableStream.Contract.DEFAULTCHARGE(&_LvRecordableStream.CallOpts)
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_LvRecordableStream *LvRecordableStreamCaller) DEFAULTSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "DEFAULT_SEE")
	return *ret0, err
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_LvRecordableStream *LvRecordableStreamSession) DEFAULTSEE() (uint8, error) {
	return _LvRecordableStream.Contract.DEFAULTSEE(&_LvRecordableStream.CallOpts)
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_LvRecordableStream *LvRecordableStreamCallerSession) DEFAULTSEE() (uint8, error) {
	return _LvRecordableStream.Contract.DEFAULTSEE(&_LvRecordableStream.CallOpts)
}

// CanRecord is a free data retrieval call binding the contract method 0xd52e6679.
//
// Solidity: function canRecord() constant returns(bool)
func (_LvRecordableStream *LvRecordableStreamCaller) CanRecord(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "canRecord")
	return *ret0, err
}

// CanRecord is a free data retrieval call binding the contract method 0xd52e6679.
//
// Solidity: function canRecord() constant returns(bool)
func (_LvRecordableStream *LvRecordableStreamSession) CanRecord() (bool, error) {
	return _LvRecordableStream.Contract.CanRecord(&_LvRecordableStream.CallOpts)
}

// CanRecord is a free data retrieval call binding the contract method 0xd52e6679.
//
// Solidity: function canRecord() constant returns(bool)
func (_LvRecordableStream *LvRecordableStreamCallerSession) CanRecord() (bool, error) {
	return _LvRecordableStream.Contract.CanRecord(&_LvRecordableStream.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamSession) ContentSpace() (common.Address, error) {
	return _LvRecordableStream.Contract.ContentSpace(&_LvRecordableStream.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamCallerSession) ContentSpace() (common.Address, error) {
	return _LvRecordableStream.Contract.ContentSpace(&_LvRecordableStream.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamSession) Creator() (common.Address, error) {
	return _LvRecordableStream.Contract.Creator(&_LvRecordableStream.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamCallerSession) Creator() (common.Address, error) {
	return _LvRecordableStream.Contract.Creator(&_LvRecordableStream.CallOpts)
}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() constant returns(uint256)
func (_LvRecordableStream *LvRecordableStreamCaller) EndTime(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "endTime")
	return *ret0, err
}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() constant returns(uint256)
func (_LvRecordableStream *LvRecordableStreamSession) EndTime() (*big.Int, error) {
	return _LvRecordableStream.Contract.EndTime(&_LvRecordableStream.CallOpts)
}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() constant returns(uint256)
func (_LvRecordableStream *LvRecordableStreamCallerSession) EndTime() (*big.Int, error) {
	return _LvRecordableStream.Contract.EndTime(&_LvRecordableStream.CallOpts)
}

// Handle is a free data retrieval call binding the contract method 0xfd0da099.
//
// Solidity: function handle() constant returns(string)
func (_LvRecordableStream *LvRecordableStreamCaller) Handle(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "handle")
	return *ret0, err
}

// Handle is a free data retrieval call binding the contract method 0xfd0da099.
//
// Solidity: function handle() constant returns(string)
func (_LvRecordableStream *LvRecordableStreamSession) Handle() (string, error) {
	return _LvRecordableStream.Contract.Handle(&_LvRecordableStream.CallOpts)
}

// Handle is a free data retrieval call binding the contract method 0xfd0da099.
//
// Solidity: function handle() constant returns(string)
func (_LvRecordableStream *LvRecordableStreamCallerSession) Handle() (string, error) {
	return _LvRecordableStream.Contract.Handle(&_LvRecordableStream.CallOpts)
}

// HasMembership is a free data retrieval call binding the contract method 0xa88db6ad.
//
// Solidity: function hasMembership(address accessor) constant returns(bool)
func (_LvRecordableStream *LvRecordableStreamCaller) HasMembership(opts *bind.CallOpts, accessor common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "hasMembership", accessor)
	return *ret0, err
}

// HasMembership is a free data retrieval call binding the contract method 0xa88db6ad.
//
// Solidity: function hasMembership(address accessor) constant returns(bool)
func (_LvRecordableStream *LvRecordableStreamSession) HasMembership(accessor common.Address) (bool, error) {
	return _LvRecordableStream.Contract.HasMembership(&_LvRecordableStream.CallOpts, accessor)
}

// HasMembership is a free data retrieval call binding the contract method 0xa88db6ad.
//
// Solidity: function hasMembership(address accessor) constant returns(bool)
func (_LvRecordableStream *LvRecordableStreamCallerSession) HasMembership(accessor common.Address) (bool, error) {
	return _LvRecordableStream.Contract.HasMembership(&_LvRecordableStream.CallOpts, accessor)
}

// HasRightsHolderPermission is a free data retrieval call binding the contract method 0xaf7e5678.
//
// Solidity: function hasRightsHolderPermission() constant returns(bool)
func (_LvRecordableStream *LvRecordableStreamCaller) HasRightsHolderPermission(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "hasRightsHolderPermission")
	return *ret0, err
}

// HasRightsHolderPermission is a free data retrieval call binding the contract method 0xaf7e5678.
//
// Solidity: function hasRightsHolderPermission() constant returns(bool)
func (_LvRecordableStream *LvRecordableStreamSession) HasRightsHolderPermission() (bool, error) {
	return _LvRecordableStream.Contract.HasRightsHolderPermission(&_LvRecordableStream.CallOpts)
}

// HasRightsHolderPermission is a free data retrieval call binding the contract method 0xaf7e5678.
//
// Solidity: function hasRightsHolderPermission() constant returns(bool)
func (_LvRecordableStream *LvRecordableStreamCallerSession) HasRightsHolderPermission() (bool, error) {
	return _LvRecordableStream.Contract.HasRightsHolderPermission(&_LvRecordableStream.CallOpts)
}

// MembershipGroups is a free data retrieval call binding the contract method 0x5f7231ab.
//
// Solidity: function membershipGroups(uint256 ) constant returns(address)
func (_LvRecordableStream *LvRecordableStreamCaller) MembershipGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "membershipGroups", arg0)
	return *ret0, err
}

// MembershipGroups is a free data retrieval call binding the contract method 0x5f7231ab.
//
// Solidity: function membershipGroups(uint256 ) constant returns(address)
func (_LvRecordableStream *LvRecordableStreamSession) MembershipGroups(arg0 *big.Int) (common.Address, error) {
	return _LvRecordableStream.Contract.MembershipGroups(&_LvRecordableStream.CallOpts, arg0)
}

// MembershipGroups is a free data retrieval call binding the contract method 0x5f7231ab.
//
// Solidity: function membershipGroups(uint256 ) constant returns(address)
func (_LvRecordableStream *LvRecordableStreamCallerSession) MembershipGroups(arg0 *big.Int) (common.Address, error) {
	return _LvRecordableStream.Contract.MembershipGroups(&_LvRecordableStream.CallOpts, arg0)
}

// MembershipGroupsLength is a free data retrieval call binding the contract method 0xecedf6d7.
//
// Solidity: function membershipGroupsLength() constant returns(uint256)
func (_LvRecordableStream *LvRecordableStreamCaller) MembershipGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "membershipGroupsLength")
	return *ret0, err
}

// MembershipGroupsLength is a free data retrieval call binding the contract method 0xecedf6d7.
//
// Solidity: function membershipGroupsLength() constant returns(uint256)
func (_LvRecordableStream *LvRecordableStreamSession) MembershipGroupsLength() (*big.Int, error) {
	return _LvRecordableStream.Contract.MembershipGroupsLength(&_LvRecordableStream.CallOpts)
}

// MembershipGroupsLength is a free data retrieval call binding the contract method 0xecedf6d7.
//
// Solidity: function membershipGroupsLength() constant returns(uint256)
func (_LvRecordableStream *LvRecordableStreamCallerSession) MembershipGroupsLength() (*big.Int, error) {
	return _LvRecordableStream.Contract.MembershipGroupsLength(&_LvRecordableStream.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamSession) Owner() (common.Address, error) {
	return _LvRecordableStream.Contract.Owner(&_LvRecordableStream.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamCallerSession) Owner() (common.Address, error) {
	return _LvRecordableStream.Contract.Owner(&_LvRecordableStream.CallOpts)
}

// RecordingEnabled is a free data retrieval call binding the contract method 0x684e9657.
//
// Solidity: function recordingEnabled() constant returns(bool)
func (_LvRecordableStream *LvRecordableStreamCaller) RecordingEnabled(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "recordingEnabled")
	return *ret0, err
}

// RecordingEnabled is a free data retrieval call binding the contract method 0x684e9657.
//
// Solidity: function recordingEnabled() constant returns(bool)
func (_LvRecordableStream *LvRecordableStreamSession) RecordingEnabled() (bool, error) {
	return _LvRecordableStream.Contract.RecordingEnabled(&_LvRecordableStream.CallOpts)
}

// RecordingEnabled is a free data retrieval call binding the contract method 0x684e9657.
//
// Solidity: function recordingEnabled() constant returns(bool)
func (_LvRecordableStream *LvRecordableStreamCallerSession) RecordingEnabled() (bool, error) {
	return _LvRecordableStream.Contract.RecordingEnabled(&_LvRecordableStream.CallOpts)
}

// RecordingStream is a free data retrieval call binding the contract method 0x21130b6d.
//
// Solidity: function recordingStream() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamCaller) RecordingStream(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "recordingStream")
	return *ret0, err
}

// RecordingStream is a free data retrieval call binding the contract method 0x21130b6d.
//
// Solidity: function recordingStream() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamSession) RecordingStream() (common.Address, error) {
	return _LvRecordableStream.Contract.RecordingStream(&_LvRecordableStream.CallOpts)
}

// RecordingStream is a free data retrieval call binding the contract method 0x21130b6d.
//
// Solidity: function recordingStream() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamCallerSession) RecordingStream() (common.Address, error) {
	return _LvRecordableStream.Contract.RecordingStream(&_LvRecordableStream.CallOpts)
}

// RightsHolder is a free data retrieval call binding the contract method 0x81e20e6e.
//
// Solidity: function rightsHolder() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamCaller) RightsHolder(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "rightsHolder")
	return *ret0, err
}

// RightsHolder is a free data retrieval call binding the contract method 0x81e20e6e.
//
// Solidity: function rightsHolder() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamSession) RightsHolder() (common.Address, error) {
	return _LvRecordableStream.Contract.RightsHolder(&_LvRecordableStream.CallOpts)
}

// RightsHolder is a free data retrieval call binding the contract method 0x81e20e6e.
//
// Solidity: function rightsHolder() constant returns(address)
func (_LvRecordableStream *LvRecordableStreamCallerSession) RightsHolder() (common.Address, error) {
	return _LvRecordableStream.Contract.RightsHolder(&_LvRecordableStream.CallOpts)
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) constant returns(uint8, uint8, uint8, uint256)
func (_LvRecordableStream *LvRecordableStreamCaller) RunAccessInfo(opts *bind.CallOpts, arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(uint8)
		ret3 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _LvRecordableStream.contract.Call(opts, out, "runAccessInfo", arg0, arg1, arg2)
	return *ret0, *ret1, *ret2, *ret3, err
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) constant returns(uint8, uint8, uint8, uint256)
func (_LvRecordableStream *LvRecordableStreamSession) RunAccessInfo(arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	return _LvRecordableStream.Contract.RunAccessInfo(&_LvRecordableStream.CallOpts, arg0, arg1, arg2)
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) constant returns(uint8, uint8, uint8, uint256)
func (_LvRecordableStream *LvRecordableStreamCallerSession) RunAccessInfo(arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	return _LvRecordableStream.Contract.RunAccessInfo(&_LvRecordableStream.CallOpts, arg0, arg1, arg2)
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_LvRecordableStream *LvRecordableStreamCaller) RunDescribeStatus(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "runDescribeStatus", arg0)
	return *ret0, err
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_LvRecordableStream *LvRecordableStreamSession) RunDescribeStatus(arg0 *big.Int) ([32]byte, error) {
	return _LvRecordableStream.Contract.RunDescribeStatus(&_LvRecordableStream.CallOpts, arg0)
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_LvRecordableStream *LvRecordableStreamCallerSession) RunDescribeStatus(arg0 *big.Int) ([32]byte, error) {
	return _LvRecordableStream.Contract.RunDescribeStatus(&_LvRecordableStream.CallOpts, arg0)
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() constant returns(uint256)
func (_LvRecordableStream *LvRecordableStreamCaller) StartTime(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "startTime")
	return *ret0, err
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() constant returns(uint256)
func (_LvRecordableStream *LvRecordableStreamSession) StartTime() (*big.Int, error) {
	return _LvRecordableStream.Contract.StartTime(&_LvRecordableStream.CallOpts)
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() constant returns(uint256)
func (_LvRecordableStream *LvRecordableStreamCallerSession) StartTime() (*big.Int, error) {
	return _LvRecordableStream.Contract.StartTime(&_LvRecordableStream.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_LvRecordableStream *LvRecordableStreamCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _LvRecordableStream.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_LvRecordableStream *LvRecordableStreamSession) Version() ([32]byte, error) {
	return _LvRecordableStream.Contract.Version(&_LvRecordableStream.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_LvRecordableStream *LvRecordableStreamCallerSession) Version() ([32]byte, error) {
	return _LvRecordableStream.Contract.Version(&_LvRecordableStream.CallOpts)
}

// AddMembershipGroup is a paid mutator transaction binding the contract method 0x90657ca0.
//
// Solidity: function addMembershipGroup(address group) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) AddMembershipGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "addMembershipGroup", group)
}

// AddMembershipGroup is a paid mutator transaction binding the contract method 0x90657ca0.
//
// Solidity: function addMembershipGroup(address group) returns()
func (_LvRecordableStream *LvRecordableStreamSession) AddMembershipGroup(group common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.AddMembershipGroup(&_LvRecordableStream.TransactOpts, group)
}

// AddMembershipGroup is a paid mutator transaction binding the contract method 0x90657ca0.
//
// Solidity: function addMembershipGroup(address group) returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) AddMembershipGroup(group common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.AddMembershipGroup(&_LvRecordableStream.TransactOpts, group)
}

// AuthorizeRecording is a paid mutator transaction binding the contract method 0xc992f43a.
//
// Solidity: function authorizeRecording(address accessor) returns(bool)
func (_LvRecordableStream *LvRecordableStreamTransactor) AuthorizeRecording(opts *bind.TransactOpts, accessor common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "authorizeRecording", accessor)
}

// AuthorizeRecording is a paid mutator transaction binding the contract method 0xc992f43a.
//
// Solidity: function authorizeRecording(address accessor) returns(bool)
func (_LvRecordableStream *LvRecordableStreamSession) AuthorizeRecording(accessor common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.AuthorizeRecording(&_LvRecordableStream.TransactOpts, accessor)
}

// AuthorizeRecording is a paid mutator transaction binding the contract method 0xc992f43a.
//
// Solidity: function authorizeRecording(address accessor) returns(bool)
func (_LvRecordableStream *LvRecordableStreamTransactorSession) AuthorizeRecording(accessor common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.AuthorizeRecording(&_LvRecordableStream.TransactOpts, accessor)
}

// DisableRecording is a paid mutator transaction binding the contract method 0xc949eb64.
//
// Solidity: function disableRecording() returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) DisableRecording(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "disableRecording")
}

// DisableRecording is a paid mutator transaction binding the contract method 0xc949eb64.
//
// Solidity: function disableRecording() returns()
func (_LvRecordableStream *LvRecordableStreamSession) DisableRecording() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.DisableRecording(&_LvRecordableStream.TransactOpts)
}

// DisableRecording is a paid mutator transaction binding the contract method 0xc949eb64.
//
// Solidity: function disableRecording() returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) DisableRecording() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.DisableRecording(&_LvRecordableStream.TransactOpts)
}

// EnableRecording is a paid mutator transaction binding the contract method 0x793a648c.
//
// Solidity: function enableRecording() returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) EnableRecording(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "enableRecording")
}

// EnableRecording is a paid mutator transaction binding the contract method 0x793a648c.
//
// Solidity: function enableRecording() returns()
func (_LvRecordableStream *LvRecordableStreamSession) EnableRecording() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.EnableRecording(&_LvRecordableStream.TransactOpts)
}

// EnableRecording is a paid mutator transaction binding the contract method 0x793a648c.
//
// Solidity: function enableRecording() returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) EnableRecording() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.EnableRecording(&_LvRecordableStream.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_LvRecordableStream *LvRecordableStreamSession) Kill() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.Kill(&_LvRecordableStream.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) Kill() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.Kill(&_LvRecordableStream.TransactOpts)
}

// LogRecordedProgramId is a paid mutator transaction binding the contract method 0x782f1a6f.
//
// Solidity: function logRecordedProgramId(string programId, uint256 programStart, uint256 programEnd, string programTitle) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) LogRecordedProgramId(opts *bind.TransactOpts, programId string, programStart *big.Int, programEnd *big.Int, programTitle string) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "logRecordedProgramId", programId, programStart, programEnd, programTitle)
}

// LogRecordedProgramId is a paid mutator transaction binding the contract method 0x782f1a6f.
//
// Solidity: function logRecordedProgramId(string programId, uint256 programStart, uint256 programEnd, string programTitle) returns()
func (_LvRecordableStream *LvRecordableStreamSession) LogRecordedProgramId(programId string, programStart *big.Int, programEnd *big.Int, programTitle string) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LogRecordedProgramId(&_LvRecordableStream.TransactOpts, programId, programStart, programEnd, programTitle)
}

// LogRecordedProgramId is a paid mutator transaction binding the contract method 0x782f1a6f.
//
// Solidity: function logRecordedProgramId(string programId, uint256 programStart, uint256 programEnd, string programTitle) returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) LogRecordedProgramId(programId string, programStart *big.Int, programEnd *big.Int, programTitle string) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LogRecordedProgramId(&_LvRecordableStream.TransactOpts, programId, programStart, programEnd, programTitle)
}

// LogRecordingAuthorization is a paid mutator transaction binding the contract method 0x9156d1fd.
//
// Solidity: function logRecordingAuthorization(address accessor, bool rightsHolderDecision) returns(bool, bool)
func (_LvRecordableStream *LvRecordableStreamTransactor) LogRecordingAuthorization(opts *bind.TransactOpts, accessor common.Address, rightsHolderDecision bool) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "logRecordingAuthorization", accessor, rightsHolderDecision)
}

// LogRecordingAuthorization is a paid mutator transaction binding the contract method 0x9156d1fd.
//
// Solidity: function logRecordingAuthorization(address accessor, bool rightsHolderDecision) returns(bool, bool)
func (_LvRecordableStream *LvRecordableStreamSession) LogRecordingAuthorization(accessor common.Address, rightsHolderDecision bool) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LogRecordingAuthorization(&_LvRecordableStream.TransactOpts, accessor, rightsHolderDecision)
}

// LogRecordingAuthorization is a paid mutator transaction binding the contract method 0x9156d1fd.
//
// Solidity: function logRecordingAuthorization(address accessor, bool rightsHolderDecision) returns(bool, bool)
func (_LvRecordableStream *LvRecordableStreamTransactorSession) LogRecordingAuthorization(accessor common.Address, rightsHolderDecision bool) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LogRecordingAuthorization(&_LvRecordableStream.TransactOpts, accessor, rightsHolderDecision)
}

// LogRecordingDeletion is a paid mutator transaction binding the contract method 0xc96444f0.
//
// Solidity: function logRecordingDeletion() returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) LogRecordingDeletion(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "logRecordingDeletion")
}

// LogRecordingDeletion is a paid mutator transaction binding the contract method 0xc96444f0.
//
// Solidity: function logRecordingDeletion() returns()
func (_LvRecordableStream *LvRecordableStreamSession) LogRecordingDeletion() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LogRecordingDeletion(&_LvRecordableStream.TransactOpts)
}

// LogRecordingDeletion is a paid mutator transaction binding the contract method 0xc96444f0.
//
// Solidity: function logRecordingDeletion() returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) LogRecordingDeletion() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LogRecordingDeletion(&_LvRecordableStream.TransactOpts)
}

// LogRecordingPlaybackCompleted is a paid mutator transaction binding the contract method 0x01a392bf.
//
// Solidity: function logRecordingPlaybackCompleted(uint256 requestID, uint8 percentPlayed, address originator, uint256 requestTimestamp) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) LogRecordingPlaybackCompleted(opts *bind.TransactOpts, requestID *big.Int, percentPlayed uint8, originator common.Address, requestTimestamp *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "logRecordingPlaybackCompleted", requestID, percentPlayed, originator, requestTimestamp)
}

// LogRecordingPlaybackCompleted is a paid mutator transaction binding the contract method 0x01a392bf.
//
// Solidity: function logRecordingPlaybackCompleted(uint256 requestID, uint8 percentPlayed, address originator, uint256 requestTimestamp) returns()
func (_LvRecordableStream *LvRecordableStreamSession) LogRecordingPlaybackCompleted(requestID *big.Int, percentPlayed uint8, originator common.Address, requestTimestamp *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LogRecordingPlaybackCompleted(&_LvRecordableStream.TransactOpts, requestID, percentPlayed, originator, requestTimestamp)
}

// LogRecordingPlaybackCompleted is a paid mutator transaction binding the contract method 0x01a392bf.
//
// Solidity: function logRecordingPlaybackCompleted(uint256 requestID, uint8 percentPlayed, address originator, uint256 requestTimestamp) returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) LogRecordingPlaybackCompleted(requestID *big.Int, percentPlayed uint8, originator common.Address, requestTimestamp *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LogRecordingPlaybackCompleted(&_LvRecordableStream.TransactOpts, requestID, percentPlayed, originator, requestTimestamp)
}

// LogRecordingPlaybackStarted is a paid mutator transaction binding the contract method 0x04fbef35.
//
// Solidity: function logRecordingPlaybackStarted(uint256 requestID, address originator, uint256 requestTimestamp) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) LogRecordingPlaybackStarted(opts *bind.TransactOpts, requestID *big.Int, originator common.Address, requestTimestamp *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "logRecordingPlaybackStarted", requestID, originator, requestTimestamp)
}

// LogRecordingPlaybackStarted is a paid mutator transaction binding the contract method 0x04fbef35.
//
// Solidity: function logRecordingPlaybackStarted(uint256 requestID, address originator, uint256 requestTimestamp) returns()
func (_LvRecordableStream *LvRecordableStreamSession) LogRecordingPlaybackStarted(requestID *big.Int, originator common.Address, requestTimestamp *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LogRecordingPlaybackStarted(&_LvRecordableStream.TransactOpts, requestID, originator, requestTimestamp)
}

// LogRecordingPlaybackStarted is a paid mutator transaction binding the contract method 0x04fbef35.
//
// Solidity: function logRecordingPlaybackStarted(uint256 requestID, address originator, uint256 requestTimestamp) returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) LogRecordingPlaybackStarted(requestID *big.Int, originator common.Address, requestTimestamp *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LogRecordingPlaybackStarted(&_LvRecordableStream.TransactOpts, requestID, originator, requestTimestamp)
}

// LogRecordingStatus is a paid mutator transaction binding the contract method 0x2b45298e.
//
// Solidity: function logRecordingStatus() returns(uint8)
func (_LvRecordableStream *LvRecordableStreamTransactor) LogRecordingStatus(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "logRecordingStatus")
}

// LogRecordingStatus is a paid mutator transaction binding the contract method 0x2b45298e.
//
// Solidity: function logRecordingStatus() returns(uint8)
func (_LvRecordableStream *LvRecordableStreamSession) LogRecordingStatus() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LogRecordingStatus(&_LvRecordableStream.TransactOpts)
}

// LogRecordingStatus is a paid mutator transaction binding the contract method 0x2b45298e.
//
// Solidity: function logRecordingStatus() returns(uint8)
func (_LvRecordableStream *LvRecordableStreamTransactorSession) LogRecordingStatus() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LogRecordingStatus(&_LvRecordableStream.TransactOpts)
}

// LogRecordingTimes is a paid mutator transaction binding the contract method 0xc2ccedad.
//
// Solidity: function logRecordingTimes() returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) LogRecordingTimes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "logRecordingTimes")
}

// LogRecordingTimes is a paid mutator transaction binding the contract method 0xc2ccedad.
//
// Solidity: function logRecordingTimes() returns()
func (_LvRecordableStream *LvRecordableStreamSession) LogRecordingTimes() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LogRecordingTimes(&_LvRecordableStream.TransactOpts)
}

// LogRecordingTimes is a paid mutator transaction binding the contract method 0xc2ccedad.
//
// Solidity: function logRecordingTimes() returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) LogRecordingTimes() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.LogRecordingTimes(&_LvRecordableStream.TransactOpts)
}

// RemoveMembershipGroup is a paid mutator transaction binding the contract method 0xe1db5840.
//
// Solidity: function removeMembershipGroup(address group) returns(bool)
func (_LvRecordableStream *LvRecordableStreamTransactor) RemoveMembershipGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "removeMembershipGroup", group)
}

// RemoveMembershipGroup is a paid mutator transaction binding the contract method 0xe1db5840.
//
// Solidity: function removeMembershipGroup(address group) returns(bool)
func (_LvRecordableStream *LvRecordableStreamSession) RemoveMembershipGroup(group common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RemoveMembershipGroup(&_LvRecordableStream.TransactOpts, group)
}

// RemoveMembershipGroup is a paid mutator transaction binding the contract method 0xe1db5840.
//
// Solidity: function removeMembershipGroup(address group) returns(bool)
func (_LvRecordableStream *LvRecordableStreamTransactorSession) RemoveMembershipGroup(group common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RemoveMembershipGroup(&_LvRecordableStream.TransactOpts, group)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 , uint8 , bytes32[] , address[] ) returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunAccess(opts *bind.TransactOpts, arg0 *big.Int, arg1 uint8, arg2 [][32]byte, arg3 []common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runAccess", arg0, arg1, arg2, arg3)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 , uint8 , bytes32[] , address[] ) returns(uint256)
func (_LvRecordableStream *LvRecordableStreamSession) RunAccess(arg0 *big.Int, arg1 uint8, arg2 [][32]byte, arg3 []common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RunAccess(&_LvRecordableStream.TransactOpts, arg0, arg1, arg2, arg3)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 , uint8 , bytes32[] , address[] ) returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactorSession) RunAccess(arg0 *big.Int, arg1 uint8, arg2 [][32]byte, arg3 []common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RunAccess(&_LvRecordableStream.TransactOpts, arg0, arg1, arg2, arg3)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunCreate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runCreate")
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_LvRecordableStream *LvRecordableStreamSession) RunCreate() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RunCreate(&_LvRecordableStream.TransactOpts)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactorSession) RunCreate() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RunCreate(&_LvRecordableStream.TransactOpts)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 , uint256 ) returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunFinalize(opts *bind.TransactOpts, arg0 *big.Int, arg1 *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runFinalize", arg0, arg1)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 , uint256 ) returns(uint256)
func (_LvRecordableStream *LvRecordableStreamSession) RunFinalize(arg0 *big.Int, arg1 *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RunFinalize(&_LvRecordableStream.TransactOpts, arg0, arg1)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 , uint256 ) returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactorSession) RunFinalize(arg0 *big.Int, arg1 *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RunFinalize(&_LvRecordableStream.TransactOpts, arg0, arg1)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunFinalizeExt(opts *bind.TransactOpts, requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runFinalizeExt", requestID, score_pct, originator)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) returns(uint256)
func (_LvRecordableStream *LvRecordableStreamSession) RunFinalizeExt(requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RunFinalizeExt(&_LvRecordableStream.TransactOpts, requestID, score_pct, originator)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactorSession) RunFinalizeExt(requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RunFinalizeExt(&_LvRecordableStream.TransactOpts, requestID, score_pct, originator)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunGrant(opts *bind.TransactOpts, arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runGrant", arg0, arg1)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) returns(uint256)
func (_LvRecordableStream *LvRecordableStreamSession) RunGrant(arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RunGrant(&_LvRecordableStream.TransactOpts, arg0, arg1)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactorSession) RunGrant(arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RunGrant(&_LvRecordableStream.TransactOpts, arg0, arg1)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunKill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runKill")
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_LvRecordableStream *LvRecordableStreamSession) RunKill() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RunKill(&_LvRecordableStream.TransactOpts)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactorSession) RunKill() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RunKill(&_LvRecordableStream.TransactOpts)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunStatusChange(opts *bind.TransactOpts, proposed_status_code *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runStatusChange", proposed_status_code)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_LvRecordableStream *LvRecordableStreamSession) RunStatusChange(proposed_status_code *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RunStatusChange(&_LvRecordableStream.TransactOpts, proposed_status_code)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_LvRecordableStream *LvRecordableStreamTransactorSession) RunStatusChange(proposed_status_code *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.RunStatusChange(&_LvRecordableStream.TransactOpts, proposed_status_code)
}

// SetRecordingStream is a paid mutator transaction binding the contract method 0x6856ff59.
//
// Solidity: function setRecordingStream(address stream) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) SetRecordingStream(opts *bind.TransactOpts, stream common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "setRecordingStream", stream)
}

// SetRecordingStream is a paid mutator transaction binding the contract method 0x6856ff59.
//
// Solidity: function setRecordingStream(address stream) returns()
func (_LvRecordableStream *LvRecordableStreamSession) SetRecordingStream(stream common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.SetRecordingStream(&_LvRecordableStream.TransactOpts, stream)
}

// SetRecordingStream is a paid mutator transaction binding the contract method 0x6856ff59.
//
// Solidity: function setRecordingStream(address stream) returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) SetRecordingStream(stream common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.SetRecordingStream(&_LvRecordableStream.TransactOpts, stream)
}

// SetRightsHolder is a paid mutator transaction binding the contract method 0xa1cd0b53.
//
// Solidity: function setRightsHolder(address _rightsHolder) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) SetRightsHolder(opts *bind.TransactOpts, _rightsHolder common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "setRightsHolder", _rightsHolder)
}

// SetRightsHolder is a paid mutator transaction binding the contract method 0xa1cd0b53.
//
// Solidity: function setRightsHolder(address _rightsHolder) returns()
func (_LvRecordableStream *LvRecordableStreamSession) SetRightsHolder(_rightsHolder common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.SetRightsHolder(&_LvRecordableStream.TransactOpts, _rightsHolder)
}

// SetRightsHolder is a paid mutator transaction binding the contract method 0xa1cd0b53.
//
// Solidity: function setRightsHolder(address _rightsHolder) returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) SetRightsHolder(_rightsHolder common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.SetRightsHolder(&_LvRecordableStream.TransactOpts, _rightsHolder)
}

// StartStream is a paid mutator transaction binding the contract method 0x5d39c071.
//
// Solidity: function startStream(string _handle) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) StartStream(opts *bind.TransactOpts, _handle string) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "startStream", _handle)
}

// StartStream is a paid mutator transaction binding the contract method 0x5d39c071.
//
// Solidity: function startStream(string _handle) returns()
func (_LvRecordableStream *LvRecordableStreamSession) StartStream(_handle string) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.StartStream(&_LvRecordableStream.TransactOpts, _handle)
}

// StartStream is a paid mutator transaction binding the contract method 0x5d39c071.
//
// Solidity: function startStream(string _handle) returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) StartStream(_handle string) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.StartStream(&_LvRecordableStream.TransactOpts, _handle)
}

// StopStream is a paid mutator transaction binding the contract method 0xc01d76d5.
//
// Solidity: function stopStream() returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) StopStream(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "stopStream")
}

// StopStream is a paid mutator transaction binding the contract method 0xc01d76d5.
//
// Solidity: function stopStream() returns()
func (_LvRecordableStream *LvRecordableStreamSession) StopStream() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.StopStream(&_LvRecordableStream.TransactOpts)
}

// StopStream is a paid mutator transaction binding the contract method 0xc01d76d5.
//
// Solidity: function stopStream() returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) StopStream() (*types.Transaction, error) {
	return _LvRecordableStream.Contract.StopStream(&_LvRecordableStream.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_LvRecordableStream *LvRecordableStreamSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.TransferCreatorship(&_LvRecordableStream.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.TransferCreatorship(&_LvRecordableStream.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LvRecordableStream *LvRecordableStreamSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.TransferOwnership(&_LvRecordableStream.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LvRecordableStream *LvRecordableStreamTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.Contract.TransferOwnership(&_LvRecordableStream.TransactOpts, newOwner)
}

// LvRecordableStreamAuthorizeRecordingIterator is returned from FilterAuthorizeRecording and is used to iterate over the raw logs and unpacked data for AuthorizeRecording events raised by the LvRecordableStream contract.
type LvRecordableStreamAuthorizeRecordingIterator struct {
	Event *LvRecordableStreamAuthorizeRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamAuthorizeRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamAuthorizeRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamAuthorizeRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamAuthorizeRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamAuthorizeRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamAuthorizeRecording represents a AuthorizeRecording event raised by the LvRecordableStream contract.
type LvRecordableStreamAuthorizeRecording struct {
	Timestamp    *big.Int
	Accessor     common.Address
	RightsHolder bool
	Provider     bool
	Membership   bool
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAuthorizeRecording is a free log retrieval operation binding the contract event 0xe36c3ab835cea1a8af00f744c77bb77bbbd33d20062bee3f9aceb6518d08e45e.
//
// Solidity: event AuthorizeRecording(uint256 timestamp, address accessor, bool rightsHolder, bool provider, bool membership)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterAuthorizeRecording(opts *bind.FilterOpts) (*LvRecordableStreamAuthorizeRecordingIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "AuthorizeRecording")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamAuthorizeRecordingIterator{contract: _LvRecordableStream.contract, event: "AuthorizeRecording", logs: logs, sub: sub}, nil
}

// WatchAuthorizeRecording is a free log subscription operation binding the contract event 0xe36c3ab835cea1a8af00f744c77bb77bbbd33d20062bee3f9aceb6518d08e45e.
//
// Solidity: event AuthorizeRecording(uint256 timestamp, address accessor, bool rightsHolder, bool provider, bool membership)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchAuthorizeRecording(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamAuthorizeRecording) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "AuthorizeRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamAuthorizeRecording)
				if err := _LvRecordableStream.contract.UnpackLog(event, "AuthorizeRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorizeRecording is a log parse operation binding the contract event 0xe36c3ab835cea1a8af00f744c77bb77bbbd33d20062bee3f9aceb6518d08e45e.
//
// Solidity: event AuthorizeRecording(uint256 timestamp, address accessor, bool rightsHolder, bool provider, bool membership)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseAuthorizeRecording(log types.Log) (*LvRecordableStreamAuthorizeRecording, error) {
	event := new(LvRecordableStreamAuthorizeRecording)
	if err := _LvRecordableStream.contract.UnpackLog(event, "AuthorizeRecording", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamCreateRecordingIterator is returned from FilterCreateRecording and is used to iterate over the raw logs and unpacked data for CreateRecording events raised by the LvRecordableStream contract.
type LvRecordableStreamCreateRecordingIterator struct {
	Event *LvRecordableStreamCreateRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamCreateRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamCreateRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamCreateRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamCreateRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamCreateRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamCreateRecording represents a CreateRecording event raised by the LvRecordableStream contract.
type LvRecordableStreamCreateRecording struct {
	Timestamp   *big.Int
	Accessor    common.Address
	RecObj      common.Address
	RecContract common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCreateRecording is a free log retrieval operation binding the contract event 0x41b90676ca6c9f288172c8f4f1f0253bfc527115acd3f7a972a5219ea4b0d0c5.
//
// Solidity: event CreateRecording(uint256 timestamp, address accessor, address recObj, address recContract)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterCreateRecording(opts *bind.FilterOpts) (*LvRecordableStreamCreateRecordingIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "CreateRecording")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamCreateRecordingIterator{contract: _LvRecordableStream.contract, event: "CreateRecording", logs: logs, sub: sub}, nil
}

// WatchCreateRecording is a free log subscription operation binding the contract event 0x41b90676ca6c9f288172c8f4f1f0253bfc527115acd3f7a972a5219ea4b0d0c5.
//
// Solidity: event CreateRecording(uint256 timestamp, address accessor, address recObj, address recContract)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchCreateRecording(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamCreateRecording) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "CreateRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamCreateRecording)
				if err := _LvRecordableStream.contract.UnpackLog(event, "CreateRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateRecording is a log parse operation binding the contract event 0x41b90676ca6c9f288172c8f4f1f0253bfc527115acd3f7a972a5219ea4b0d0c5.
//
// Solidity: event CreateRecording(uint256 timestamp, address accessor, address recObj, address recContract)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseCreateRecording(log types.Log) (*LvRecordableStreamCreateRecording, error) {
	event := new(LvRecordableStreamCreateRecording)
	if err := _LvRecordableStream.contract.UnpackLog(event, "CreateRecording", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamDeleteRecordingIterator is returned from FilterDeleteRecording and is used to iterate over the raw logs and unpacked data for DeleteRecording events raised by the LvRecordableStream contract.
type LvRecordableStreamDeleteRecordingIterator struct {
	Event *LvRecordableStreamDeleteRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamDeleteRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamDeleteRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamDeleteRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamDeleteRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamDeleteRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamDeleteRecording represents a DeleteRecording event raised by the LvRecordableStream contract.
type LvRecordableStreamDeleteRecording struct {
	Timestamp   *big.Int
	Accessor    common.Address
	RecObj      common.Address
	RecContract common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDeleteRecording is a free log retrieval operation binding the contract event 0x9d3bb073bb2ef4d4a880f32fbbc665abfad2b29f532a231d93ab2207396f0b25.
//
// Solidity: event DeleteRecording(uint256 timestamp, address accessor, address recObj, address recContract)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterDeleteRecording(opts *bind.FilterOpts) (*LvRecordableStreamDeleteRecordingIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "DeleteRecording")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamDeleteRecordingIterator{contract: _LvRecordableStream.contract, event: "DeleteRecording", logs: logs, sub: sub}, nil
}

// WatchDeleteRecording is a free log subscription operation binding the contract event 0x9d3bb073bb2ef4d4a880f32fbbc665abfad2b29f532a231d93ab2207396f0b25.
//
// Solidity: event DeleteRecording(uint256 timestamp, address accessor, address recObj, address recContract)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchDeleteRecording(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamDeleteRecording) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "DeleteRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamDeleteRecording)
				if err := _LvRecordableStream.contract.UnpackLog(event, "DeleteRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeleteRecording is a log parse operation binding the contract event 0x9d3bb073bb2ef4d4a880f32fbbc665abfad2b29f532a231d93ab2207396f0b25.
//
// Solidity: event DeleteRecording(uint256 timestamp, address accessor, address recObj, address recContract)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseDeleteRecording(log types.Log) (*LvRecordableStreamDeleteRecording, error) {
	event := new(LvRecordableStreamDeleteRecording)
	if err := _LvRecordableStream.contract.UnpackLog(event, "DeleteRecording", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamDisableRecordingIterator is returned from FilterDisableRecording and is used to iterate over the raw logs and unpacked data for DisableRecording events raised by the LvRecordableStream contract.
type LvRecordableStreamDisableRecordingIterator struct {
	Event *LvRecordableStreamDisableRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamDisableRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamDisableRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamDisableRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamDisableRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamDisableRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamDisableRecording represents a DisableRecording event raised by the LvRecordableStream contract.
type LvRecordableStreamDisableRecording struct {
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDisableRecording is a free log retrieval operation binding the contract event 0x3a5d2272abc5c09c8e771719f0eeca97e31d2fc425f6c34cf1d7a712b5fb6bfd.
//
// Solidity: event DisableRecording(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterDisableRecording(opts *bind.FilterOpts) (*LvRecordableStreamDisableRecordingIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "DisableRecording")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamDisableRecordingIterator{contract: _LvRecordableStream.contract, event: "DisableRecording", logs: logs, sub: sub}, nil
}

// WatchDisableRecording is a free log subscription operation binding the contract event 0x3a5d2272abc5c09c8e771719f0eeca97e31d2fc425f6c34cf1d7a712b5fb6bfd.
//
// Solidity: event DisableRecording(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchDisableRecording(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamDisableRecording) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "DisableRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamDisableRecording)
				if err := _LvRecordableStream.contract.UnpackLog(event, "DisableRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisableRecording is a log parse operation binding the contract event 0x3a5d2272abc5c09c8e771719f0eeca97e31d2fc425f6c34cf1d7a712b5fb6bfd.
//
// Solidity: event DisableRecording(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseDisableRecording(log types.Log) (*LvRecordableStreamDisableRecording, error) {
	event := new(LvRecordableStreamDisableRecording)
	if err := _LvRecordableStream.contract.UnpackLog(event, "DisableRecording", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamEnableRecordingIterator is returned from FilterEnableRecording and is used to iterate over the raw logs and unpacked data for EnableRecording events raised by the LvRecordableStream contract.
type LvRecordableStreamEnableRecordingIterator struct {
	Event *LvRecordableStreamEnableRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamEnableRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamEnableRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamEnableRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamEnableRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamEnableRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamEnableRecording represents a EnableRecording event raised by the LvRecordableStream contract.
type LvRecordableStreamEnableRecording struct {
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterEnableRecording is a free log retrieval operation binding the contract event 0xe1182e14924c528bfb564fb8d4feefe9766244f88b00051f28182e635e9a1ae8.
//
// Solidity: event EnableRecording(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterEnableRecording(opts *bind.FilterOpts) (*LvRecordableStreamEnableRecordingIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "EnableRecording")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamEnableRecordingIterator{contract: _LvRecordableStream.contract, event: "EnableRecording", logs: logs, sub: sub}, nil
}

// WatchEnableRecording is a free log subscription operation binding the contract event 0xe1182e14924c528bfb564fb8d4feefe9766244f88b00051f28182e635e9a1ae8.
//
// Solidity: event EnableRecording(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchEnableRecording(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamEnableRecording) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "EnableRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamEnableRecording)
				if err := _LvRecordableStream.contract.UnpackLog(event, "EnableRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEnableRecording is a log parse operation binding the contract event 0xe1182e14924c528bfb564fb8d4feefe9766244f88b00051f28182e635e9a1ae8.
//
// Solidity: event EnableRecording(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseEnableRecording(log types.Log) (*LvRecordableStreamEnableRecording, error) {
	event := new(LvRecordableStreamEnableRecording)
	if err := _LvRecordableStream.contract.UnpackLog(event, "EnableRecording", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the LvRecordableStream contract.
type LvRecordableStreamLogIterator struct {
	Event *LvRecordableStreamLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamLog represents a Log event raised by the LvRecordableStream contract.
type LvRecordableStreamLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterLog(opts *bind.FilterOpts) (*LvRecordableStreamLogIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamLogIterator{contract: _LvRecordableStream.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamLog) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamLog)
				if err := _LvRecordableStream.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseLog(log types.Log) (*LvRecordableStreamLog, error) {
	event := new(LvRecordableStreamLog)
	if err := _LvRecordableStream.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the LvRecordableStream contract.
type LvRecordableStreamLogAddressIterator struct {
	Event *LvRecordableStreamLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamLogAddress represents a LogAddress event raised by the LvRecordableStream contract.
type LvRecordableStreamLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterLogAddress(opts *bind.FilterOpts) (*LvRecordableStreamLogAddressIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamLogAddressIterator{contract: _LvRecordableStream.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamLogAddress) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamLogAddress)
				if err := _LvRecordableStream.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseLogAddress(log types.Log) (*LvRecordableStreamLogAddress, error) {
	event := new(LvRecordableStreamLogAddress)
	if err := _LvRecordableStream.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the LvRecordableStream contract.
type LvRecordableStreamLogBoolIterator struct {
	Event *LvRecordableStreamLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamLogBool represents a LogBool event raised by the LvRecordableStream contract.
type LvRecordableStreamLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterLogBool(opts *bind.FilterOpts) (*LvRecordableStreamLogBoolIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamLogBoolIterator{contract: _LvRecordableStream.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamLogBool) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamLogBool)
				if err := _LvRecordableStream.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseLogBool(log types.Log) (*LvRecordableStreamLogBool, error) {
	event := new(LvRecordableStreamLogBool)
	if err := _LvRecordableStream.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the LvRecordableStream contract.
type LvRecordableStreamLogBytes32Iterator struct {
	Event *LvRecordableStreamLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamLogBytes32 represents a LogBytes32 event raised by the LvRecordableStream contract.
type LvRecordableStreamLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*LvRecordableStreamLogBytes32Iterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamLogBytes32Iterator{contract: _LvRecordableStream.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamLogBytes32) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamLogBytes32)
				if err := _LvRecordableStream.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseLogBytes32(log types.Log) (*LvRecordableStreamLogBytes32, error) {
	event := new(LvRecordableStreamLogBytes32)
	if err := _LvRecordableStream.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the LvRecordableStream contract.
type LvRecordableStreamLogInt256Iterator struct {
	Event *LvRecordableStreamLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamLogInt256 represents a LogInt256 event raised by the LvRecordableStream contract.
type LvRecordableStreamLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterLogInt256(opts *bind.FilterOpts) (*LvRecordableStreamLogInt256Iterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamLogInt256Iterator{contract: _LvRecordableStream.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamLogInt256) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamLogInt256)
				if err := _LvRecordableStream.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseLogInt256(log types.Log) (*LvRecordableStreamLogInt256, error) {
	event := new(LvRecordableStreamLogInt256)
	if err := _LvRecordableStream.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the LvRecordableStream contract.
type LvRecordableStreamLogPaymentIterator struct {
	Event *LvRecordableStreamLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamLogPayment represents a LogPayment event raised by the LvRecordableStream contract.
type LvRecordableStreamLogPayment struct {
	Label  string
	Payee  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterLogPayment(opts *bind.FilterOpts) (*LvRecordableStreamLogPaymentIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamLogPaymentIterator{contract: _LvRecordableStream.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamLogPayment) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamLogPayment)
				if err := _LvRecordableStream.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseLogPayment(log types.Log) (*LvRecordableStreamLogPayment, error) {
	event := new(LvRecordableStreamLogPayment)
	if err := _LvRecordableStream.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the LvRecordableStream contract.
type LvRecordableStreamLogUint256Iterator struct {
	Event *LvRecordableStreamLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamLogUint256 represents a LogUint256 event raised by the LvRecordableStream contract.
type LvRecordableStreamLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterLogUint256(opts *bind.FilterOpts) (*LvRecordableStreamLogUint256Iterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamLogUint256Iterator{contract: _LvRecordableStream.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamLogUint256) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamLogUint256)
				if err := _LvRecordableStream.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseLogUint256(log types.Log) (*LvRecordableStreamLogUint256, error) {
	event := new(LvRecordableStreamLogUint256)
	if err := _LvRecordableStream.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamMembershipGroupAddedIterator is returned from FilterMembershipGroupAdded and is used to iterate over the raw logs and unpacked data for MembershipGroupAdded events raised by the LvRecordableStream contract.
type LvRecordableStreamMembershipGroupAddedIterator struct {
	Event *LvRecordableStreamMembershipGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamMembershipGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamMembershipGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamMembershipGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamMembershipGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamMembershipGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamMembershipGroupAdded represents a MembershipGroupAdded event raised by the LvRecordableStream contract.
type LvRecordableStreamMembershipGroupAdded struct {
	Timestamp *big.Int
	Group     common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMembershipGroupAdded is a free log retrieval operation binding the contract event 0x467a7c1305f91e354a8a1e9046906d4d1a4852f958a073a392555d809be313a7.
//
// Solidity: event MembershipGroupAdded(uint256 timestamp, address group)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterMembershipGroupAdded(opts *bind.FilterOpts) (*LvRecordableStreamMembershipGroupAddedIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "MembershipGroupAdded")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamMembershipGroupAddedIterator{contract: _LvRecordableStream.contract, event: "MembershipGroupAdded", logs: logs, sub: sub}, nil
}

// WatchMembershipGroupAdded is a free log subscription operation binding the contract event 0x467a7c1305f91e354a8a1e9046906d4d1a4852f958a073a392555d809be313a7.
//
// Solidity: event MembershipGroupAdded(uint256 timestamp, address group)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchMembershipGroupAdded(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamMembershipGroupAdded) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "MembershipGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamMembershipGroupAdded)
				if err := _LvRecordableStream.contract.UnpackLog(event, "MembershipGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMembershipGroupAdded is a log parse operation binding the contract event 0x467a7c1305f91e354a8a1e9046906d4d1a4852f958a073a392555d809be313a7.
//
// Solidity: event MembershipGroupAdded(uint256 timestamp, address group)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseMembershipGroupAdded(log types.Log) (*LvRecordableStreamMembershipGroupAdded, error) {
	event := new(LvRecordableStreamMembershipGroupAdded)
	if err := _LvRecordableStream.contract.UnpackLog(event, "MembershipGroupAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamMembershipGroupRemovedIterator is returned from FilterMembershipGroupRemoved and is used to iterate over the raw logs and unpacked data for MembershipGroupRemoved events raised by the LvRecordableStream contract.
type LvRecordableStreamMembershipGroupRemovedIterator struct {
	Event *LvRecordableStreamMembershipGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamMembershipGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamMembershipGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamMembershipGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamMembershipGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamMembershipGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamMembershipGroupRemoved represents a MembershipGroupRemoved event raised by the LvRecordableStream contract.
type LvRecordableStreamMembershipGroupRemoved struct {
	Timestamp *big.Int
	Group     common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMembershipGroupRemoved is a free log retrieval operation binding the contract event 0x7b4822b1021af568bad37d56a35fbc255dc67153c544aa4116a289632a4e5955.
//
// Solidity: event MembershipGroupRemoved(uint256 timestamp, address group)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterMembershipGroupRemoved(opts *bind.FilterOpts) (*LvRecordableStreamMembershipGroupRemovedIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "MembershipGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamMembershipGroupRemovedIterator{contract: _LvRecordableStream.contract, event: "MembershipGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchMembershipGroupRemoved is a free log subscription operation binding the contract event 0x7b4822b1021af568bad37d56a35fbc255dc67153c544aa4116a289632a4e5955.
//
// Solidity: event MembershipGroupRemoved(uint256 timestamp, address group)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchMembershipGroupRemoved(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamMembershipGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "MembershipGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamMembershipGroupRemoved)
				if err := _LvRecordableStream.contract.UnpackLog(event, "MembershipGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMembershipGroupRemoved is a log parse operation binding the contract event 0x7b4822b1021af568bad37d56a35fbc255dc67153c544aa4116a289632a4e5955.
//
// Solidity: event MembershipGroupRemoved(uint256 timestamp, address group)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseMembershipGroupRemoved(log types.Log) (*LvRecordableStreamMembershipGroupRemoved, error) {
	event := new(LvRecordableStreamMembershipGroupRemoved)
	if err := _LvRecordableStream.contract.UnpackLog(event, "MembershipGroupRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamRecordedProgramIdIterator is returned from FilterRecordedProgramId and is used to iterate over the raw logs and unpacked data for RecordedProgramId events raised by the LvRecordableStream contract.
type LvRecordableStreamRecordedProgramIdIterator struct {
	Event *LvRecordableStreamRecordedProgramId // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRecordedProgramIdIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRecordedProgramId)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRecordedProgramId)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRecordedProgramIdIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRecordedProgramIdIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRecordedProgramId represents a RecordedProgramId event raised by the LvRecordableStream contract.
type LvRecordableStreamRecordedProgramId struct {
	Timestamp    *big.Int
	Accessor     common.Address
	RecObj       common.Address
	ProgramId    string
	ProgramStart *big.Int
	ProgramEnd   *big.Int
	ProgramTitle string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRecordedProgramId is a free log retrieval operation binding the contract event 0xe3b30c4da7320d1a542eb57f205a34d2fc36ecd114595f3d50be2a73b3426e6b.
//
// Solidity: event RecordedProgramId(uint256 timestamp, address accessor, address recObj, string programId, uint256 programStart, uint256 programEnd, string programTitle)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRecordedProgramId(opts *bind.FilterOpts) (*LvRecordableStreamRecordedProgramIdIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RecordedProgramId")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRecordedProgramIdIterator{contract: _LvRecordableStream.contract, event: "RecordedProgramId", logs: logs, sub: sub}, nil
}

// WatchRecordedProgramId is a free log subscription operation binding the contract event 0xe3b30c4da7320d1a542eb57f205a34d2fc36ecd114595f3d50be2a73b3426e6b.
//
// Solidity: event RecordedProgramId(uint256 timestamp, address accessor, address recObj, string programId, uint256 programStart, uint256 programEnd, string programTitle)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRecordedProgramId(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRecordedProgramId) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RecordedProgramId")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRecordedProgramId)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RecordedProgramId", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRecordedProgramId is a log parse operation binding the contract event 0xe3b30c4da7320d1a542eb57f205a34d2fc36ecd114595f3d50be2a73b3426e6b.
//
// Solidity: event RecordedProgramId(uint256 timestamp, address accessor, address recObj, string programId, uint256 programStart, uint256 programEnd, string programTitle)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRecordedProgramId(log types.Log) (*LvRecordableStreamRecordedProgramId, error) {
	event := new(LvRecordableStreamRecordedProgramId)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RecordedProgramId", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamRecordingPlaybackCompletedIterator is returned from FilterRecordingPlaybackCompleted and is used to iterate over the raw logs and unpacked data for RecordingPlaybackCompleted events raised by the LvRecordableStream contract.
type LvRecordableStreamRecordingPlaybackCompletedIterator struct {
	Event *LvRecordableStreamRecordingPlaybackCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRecordingPlaybackCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRecordingPlaybackCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRecordingPlaybackCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRecordingPlaybackCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRecordingPlaybackCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRecordingPlaybackCompleted represents a RecordingPlaybackCompleted event raised by the LvRecordableStream contract.
type LvRecordableStreamRecordingPlaybackCompleted struct {
	Timestamp         *big.Int
	Accessor          common.Address
	RecObj            common.Address
	RequestID         *big.Int
	PercentPlayed     uint8
	FinalizeTimestamp *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRecordingPlaybackCompleted is a free log retrieval operation binding the contract event 0x208745b583bd0c257eced13411dc4b50e9a3a9c1ef0cc2f95b30a7457ec50cc1.
//
// Solidity: event RecordingPlaybackCompleted(uint256 timestamp, address accessor, address recObj, uint256 requestID, uint8 percentPlayed, uint256 finalizeTimestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRecordingPlaybackCompleted(opts *bind.FilterOpts) (*LvRecordableStreamRecordingPlaybackCompletedIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RecordingPlaybackCompleted")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRecordingPlaybackCompletedIterator{contract: _LvRecordableStream.contract, event: "RecordingPlaybackCompleted", logs: logs, sub: sub}, nil
}

// WatchRecordingPlaybackCompleted is a free log subscription operation binding the contract event 0x208745b583bd0c257eced13411dc4b50e9a3a9c1ef0cc2f95b30a7457ec50cc1.
//
// Solidity: event RecordingPlaybackCompleted(uint256 timestamp, address accessor, address recObj, uint256 requestID, uint8 percentPlayed, uint256 finalizeTimestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRecordingPlaybackCompleted(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRecordingPlaybackCompleted) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RecordingPlaybackCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRecordingPlaybackCompleted)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RecordingPlaybackCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRecordingPlaybackCompleted is a log parse operation binding the contract event 0x208745b583bd0c257eced13411dc4b50e9a3a9c1ef0cc2f95b30a7457ec50cc1.
//
// Solidity: event RecordingPlaybackCompleted(uint256 timestamp, address accessor, address recObj, uint256 requestID, uint8 percentPlayed, uint256 finalizeTimestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRecordingPlaybackCompleted(log types.Log) (*LvRecordableStreamRecordingPlaybackCompleted, error) {
	event := new(LvRecordableStreamRecordingPlaybackCompleted)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RecordingPlaybackCompleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamRecordingPlaybackStartedIterator is returned from FilterRecordingPlaybackStarted and is used to iterate over the raw logs and unpacked data for RecordingPlaybackStarted events raised by the LvRecordableStream contract.
type LvRecordableStreamRecordingPlaybackStartedIterator struct {
	Event *LvRecordableStreamRecordingPlaybackStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRecordingPlaybackStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRecordingPlaybackStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRecordingPlaybackStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRecordingPlaybackStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRecordingPlaybackStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRecordingPlaybackStarted represents a RecordingPlaybackStarted event raised by the LvRecordableStream contract.
type LvRecordableStreamRecordingPlaybackStarted struct {
	Timestamp       *big.Int
	Accessor        common.Address
	RecObj          common.Address
	RequestID       *big.Int
	AccessTimestamp *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterRecordingPlaybackStarted is a free log retrieval operation binding the contract event 0x182a726f966f22c96d651085c2a7143482b8d96fb0964ff2664ab8bdf2b703aa.
//
// Solidity: event RecordingPlaybackStarted(uint256 timestamp, address accessor, address recObj, uint256 requestID, uint256 accessTimestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRecordingPlaybackStarted(opts *bind.FilterOpts) (*LvRecordableStreamRecordingPlaybackStartedIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RecordingPlaybackStarted")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRecordingPlaybackStartedIterator{contract: _LvRecordableStream.contract, event: "RecordingPlaybackStarted", logs: logs, sub: sub}, nil
}

// WatchRecordingPlaybackStarted is a free log subscription operation binding the contract event 0x182a726f966f22c96d651085c2a7143482b8d96fb0964ff2664ab8bdf2b703aa.
//
// Solidity: event RecordingPlaybackStarted(uint256 timestamp, address accessor, address recObj, uint256 requestID, uint256 accessTimestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRecordingPlaybackStarted(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRecordingPlaybackStarted) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RecordingPlaybackStarted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRecordingPlaybackStarted)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RecordingPlaybackStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRecordingPlaybackStarted is a log parse operation binding the contract event 0x182a726f966f22c96d651085c2a7143482b8d96fb0964ff2664ab8bdf2b703aa.
//
// Solidity: event RecordingPlaybackStarted(uint256 timestamp, address accessor, address recObj, uint256 requestID, uint256 accessTimestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRecordingPlaybackStarted(log types.Log) (*LvRecordableStreamRecordingPlaybackStarted, error) {
	event := new(LvRecordableStreamRecordingPlaybackStarted)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RecordingPlaybackStarted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamRunAccessIterator is returned from FilterRunAccess and is used to iterate over the raw logs and unpacked data for RunAccess events raised by the LvRecordableStream contract.
type LvRecordableStreamRunAccessIterator struct {
	Event *LvRecordableStreamRunAccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRunAccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRunAccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRunAccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRunAccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRunAccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRunAccess represents a RunAccess event raised by the LvRecordableStream contract.
type LvRecordableStreamRunAccess struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunAccess is a free log retrieval operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRunAccess(opts *bind.FilterOpts) (*LvRecordableStreamRunAccessIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRunAccessIterator{contract: _LvRecordableStream.contract, event: "RunAccess", logs: logs, sub: sub}, nil
}

// WatchRunAccess is a free log subscription operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRunAccess(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRunAccess) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRunAccess)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RunAccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccess is a log parse operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRunAccess(log types.Log) (*LvRecordableStreamRunAccess, error) {
	event := new(LvRecordableStreamRunAccess)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RunAccess", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamRunAccessChargeIterator is returned from FilterRunAccessCharge and is used to iterate over the raw logs and unpacked data for RunAccessCharge events raised by the LvRecordableStream contract.
type LvRecordableStreamRunAccessChargeIterator struct {
	Event *LvRecordableStreamRunAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRunAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRunAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRunAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRunAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRunAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRunAccessCharge represents a RunAccessCharge event raised by the LvRecordableStream contract.
type LvRecordableStreamRunAccessCharge struct {
	Level                 uint8
	CalculateAccessCharge *big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterRunAccessCharge is a free log retrieval operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRunAccessCharge(opts *bind.FilterOpts) (*LvRecordableStreamRunAccessChargeIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRunAccessChargeIterator{contract: _LvRecordableStream.contract, event: "RunAccessCharge", logs: logs, sub: sub}, nil
}

// WatchRunAccessCharge is a free log subscription operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRunAccessCharge(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRunAccessCharge) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRunAccessCharge)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccessCharge is a log parse operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRunAccessCharge(log types.Log) (*LvRecordableStreamRunAccessCharge, error) {
	event := new(LvRecordableStreamRunAccessCharge)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamRunCreateIterator is returned from FilterRunCreate and is used to iterate over the raw logs and unpacked data for RunCreate events raised by the LvRecordableStream contract.
type LvRecordableStreamRunCreateIterator struct {
	Event *LvRecordableStreamRunCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRunCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRunCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRunCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRunCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRunCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRunCreate represents a RunCreate event raised by the LvRecordableStream contract.
type LvRecordableStreamRunCreate struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunCreate is a free log retrieval operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRunCreate(opts *bind.FilterOpts) (*LvRecordableStreamRunCreateIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRunCreateIterator{contract: _LvRecordableStream.contract, event: "RunCreate", logs: logs, sub: sub}, nil
}

// WatchRunCreate is a free log subscription operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRunCreate(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRunCreate) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRunCreate)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RunCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunCreate is a log parse operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRunCreate(log types.Log) (*LvRecordableStreamRunCreate, error) {
	event := new(LvRecordableStreamRunCreate)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RunCreate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamRunFinalizeIterator is returned from FilterRunFinalize and is used to iterate over the raw logs and unpacked data for RunFinalize events raised by the LvRecordableStream contract.
type LvRecordableStreamRunFinalizeIterator struct {
	Event *LvRecordableStreamRunFinalize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRunFinalizeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRunFinalize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRunFinalize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRunFinalizeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRunFinalizeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRunFinalize represents a RunFinalize event raised by the LvRecordableStream contract.
type LvRecordableStreamRunFinalize struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunFinalize is a free log retrieval operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRunFinalize(opts *bind.FilterOpts) (*LvRecordableStreamRunFinalizeIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRunFinalizeIterator{contract: _LvRecordableStream.contract, event: "RunFinalize", logs: logs, sub: sub}, nil
}

// WatchRunFinalize is a free log subscription operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRunFinalize(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRunFinalize) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRunFinalize)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RunFinalize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunFinalize is a log parse operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRunFinalize(log types.Log) (*LvRecordableStreamRunFinalize, error) {
	event := new(LvRecordableStreamRunFinalize)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RunFinalize", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamRunKillIterator is returned from FilterRunKill and is used to iterate over the raw logs and unpacked data for RunKill events raised by the LvRecordableStream contract.
type LvRecordableStreamRunKillIterator struct {
	Event *LvRecordableStreamRunKill // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRunKillIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRunKill)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRunKill)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRunKillIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRunKillIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRunKill represents a RunKill event raised by the LvRecordableStream contract.
type LvRecordableStreamRunKill struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunKill is a free log retrieval operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRunKill(opts *bind.FilterOpts) (*LvRecordableStreamRunKillIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRunKillIterator{contract: _LvRecordableStream.contract, event: "RunKill", logs: logs, sub: sub}, nil
}

// WatchRunKill is a free log subscription operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRunKill(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRunKill) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRunKill)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RunKill", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunKill is a log parse operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRunKill(log types.Log) (*LvRecordableStreamRunKill, error) {
	event := new(LvRecordableStreamRunKill)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RunKill", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamRunStatusChangeIterator is returned from FilterRunStatusChange and is used to iterate over the raw logs and unpacked data for RunStatusChange events raised by the LvRecordableStream contract.
type LvRecordableStreamRunStatusChangeIterator struct {
	Event *LvRecordableStreamRunStatusChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRunStatusChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRunStatusChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRunStatusChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRunStatusChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRunStatusChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRunStatusChange represents a RunStatusChange event raised by the LvRecordableStream contract.
type LvRecordableStreamRunStatusChange struct {
	ProposedStatusCode *big.Int
	ReturnStatusCode   *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRunStatusChange is a free log retrieval operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRunStatusChange(opts *bind.FilterOpts) (*LvRecordableStreamRunStatusChangeIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRunStatusChangeIterator{contract: _LvRecordableStream.contract, event: "RunStatusChange", logs: logs, sub: sub}, nil
}

// WatchRunStatusChange is a free log subscription operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRunStatusChange(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRunStatusChange) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRunStatusChange)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunStatusChange is a log parse operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRunStatusChange(log types.Log) (*LvRecordableStreamRunStatusChange, error) {
	event := new(LvRecordableStreamRunStatusChange)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamSetRecordingStatusIterator is returned from FilterSetRecordingStatus and is used to iterate over the raw logs and unpacked data for SetRecordingStatus events raised by the LvRecordableStream contract.
type LvRecordableStreamSetRecordingStatusIterator struct {
	Event *LvRecordableStreamSetRecordingStatus // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamSetRecordingStatusIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamSetRecordingStatus)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamSetRecordingStatus)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamSetRecordingStatusIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamSetRecordingStatusIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamSetRecordingStatus represents a SetRecordingStatus event raised by the LvRecordableStream contract.
type LvRecordableStreamSetRecordingStatus struct {
	Timestamp *big.Int
	Accessor  common.Address
	RecObj    common.Address
	RecStatus string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetRecordingStatus is a free log retrieval operation binding the contract event 0x93ee8bc66b5d08a5dc39e788b1f78aa5f9ff2deda9e1387aa1fe22f9c329ed85.
//
// Solidity: event SetRecordingStatus(uint256 timestamp, address accessor, address recObj, string recStatus)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterSetRecordingStatus(opts *bind.FilterOpts) (*LvRecordableStreamSetRecordingStatusIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "SetRecordingStatus")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamSetRecordingStatusIterator{contract: _LvRecordableStream.contract, event: "SetRecordingStatus", logs: logs, sub: sub}, nil
}

// WatchSetRecordingStatus is a free log subscription operation binding the contract event 0x93ee8bc66b5d08a5dc39e788b1f78aa5f9ff2deda9e1387aa1fe22f9c329ed85.
//
// Solidity: event SetRecordingStatus(uint256 timestamp, address accessor, address recObj, string recStatus)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchSetRecordingStatus(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamSetRecordingStatus) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "SetRecordingStatus")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamSetRecordingStatus)
				if err := _LvRecordableStream.contract.UnpackLog(event, "SetRecordingStatus", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetRecordingStatus is a log parse operation binding the contract event 0x93ee8bc66b5d08a5dc39e788b1f78aa5f9ff2deda9e1387aa1fe22f9c329ed85.
//
// Solidity: event SetRecordingStatus(uint256 timestamp, address accessor, address recObj, string recStatus)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseSetRecordingStatus(log types.Log) (*LvRecordableStreamSetRecordingStatus, error) {
	event := new(LvRecordableStreamSetRecordingStatus)
	if err := _LvRecordableStream.contract.UnpackLog(event, "SetRecordingStatus", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamSetRecordingTimesIterator is returned from FilterSetRecordingTimes and is used to iterate over the raw logs and unpacked data for SetRecordingTimes events raised by the LvRecordableStream contract.
type LvRecordableStreamSetRecordingTimesIterator struct {
	Event *LvRecordableStreamSetRecordingTimes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamSetRecordingTimesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamSetRecordingTimes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamSetRecordingTimes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamSetRecordingTimesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamSetRecordingTimesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamSetRecordingTimes represents a SetRecordingTimes event raised by the LvRecordableStream contract.
type LvRecordableStreamSetRecordingTimes struct {
	Timestamp    *big.Int
	Accessor     common.Address
	RecObj       common.Address
	RecStartTime *big.Int
	RecEndTime   *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSetRecordingTimes is a free log retrieval operation binding the contract event 0x8e6b298cf577550234f0d0de33a4910d4bf1c4e08fe31b1173b2c6232297b3f4.
//
// Solidity: event SetRecordingTimes(uint256 timestamp, address accessor, address recObj, uint256 recStartTime, uint256 recEndTime)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterSetRecordingTimes(opts *bind.FilterOpts) (*LvRecordableStreamSetRecordingTimesIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "SetRecordingTimes")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamSetRecordingTimesIterator{contract: _LvRecordableStream.contract, event: "SetRecordingTimes", logs: logs, sub: sub}, nil
}

// WatchSetRecordingTimes is a free log subscription operation binding the contract event 0x8e6b298cf577550234f0d0de33a4910d4bf1c4e08fe31b1173b2c6232297b3f4.
//
// Solidity: event SetRecordingTimes(uint256 timestamp, address accessor, address recObj, uint256 recStartTime, uint256 recEndTime)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchSetRecordingTimes(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamSetRecordingTimes) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "SetRecordingTimes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamSetRecordingTimes)
				if err := _LvRecordableStream.contract.UnpackLog(event, "SetRecordingTimes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetRecordingTimes is a log parse operation binding the contract event 0x8e6b298cf577550234f0d0de33a4910d4bf1c4e08fe31b1173b2c6232297b3f4.
//
// Solidity: event SetRecordingTimes(uint256 timestamp, address accessor, address recObj, uint256 recStartTime, uint256 recEndTime)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseSetRecordingTimes(log types.Log) (*LvRecordableStreamSetRecordingTimes, error) {
	event := new(LvRecordableStreamSetRecordingTimes)
	if err := _LvRecordableStream.contract.UnpackLog(event, "SetRecordingTimes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamStartStreamIterator is returned from FilterStartStream and is used to iterate over the raw logs and unpacked data for StartStream events raised by the LvRecordableStream contract.
type LvRecordableStreamStartStreamIterator struct {
	Event *LvRecordableStreamStartStream // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamStartStreamIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamStartStream)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamStartStream)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamStartStreamIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamStartStreamIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamStartStream represents a StartStream event raised by the LvRecordableStream contract.
type LvRecordableStreamStartStream struct {
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStartStream is a free log retrieval operation binding the contract event 0x8d7e6a8f23ccc8845c41fd09bebe570a0885272343268bbdfd71090b878b4b21.
//
// Solidity: event StartStream(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterStartStream(opts *bind.FilterOpts) (*LvRecordableStreamStartStreamIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "StartStream")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamStartStreamIterator{contract: _LvRecordableStream.contract, event: "StartStream", logs: logs, sub: sub}, nil
}

// WatchStartStream is a free log subscription operation binding the contract event 0x8d7e6a8f23ccc8845c41fd09bebe570a0885272343268bbdfd71090b878b4b21.
//
// Solidity: event StartStream(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchStartStream(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamStartStream) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "StartStream")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamStartStream)
				if err := _LvRecordableStream.contract.UnpackLog(event, "StartStream", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStartStream is a log parse operation binding the contract event 0x8d7e6a8f23ccc8845c41fd09bebe570a0885272343268bbdfd71090b878b4b21.
//
// Solidity: event StartStream(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseStartStream(log types.Log) (*LvRecordableStreamStartStream, error) {
	event := new(LvRecordableStreamStartStream)
	if err := _LvRecordableStream.contract.UnpackLog(event, "StartStream", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordableStreamStopStreamIterator is returned from FilterStopStream and is used to iterate over the raw logs and unpacked data for StopStream events raised by the LvRecordableStream contract.
type LvRecordableStreamStopStreamIterator struct {
	Event *LvRecordableStreamStopStream // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamStopStreamIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamStopStream)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamStopStream)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamStopStreamIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamStopStreamIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamStopStream represents a StopStream event raised by the LvRecordableStream contract.
type LvRecordableStreamStopStream struct {
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStopStream is a free log retrieval operation binding the contract event 0x1b01b687e3428bc184341f729ec8a57bdd569536206cfb59e5d0cecb30dfcb7e.
//
// Solidity: event StopStream(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterStopStream(opts *bind.FilterOpts) (*LvRecordableStreamStopStreamIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "StopStream")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamStopStreamIterator{contract: _LvRecordableStream.contract, event: "StopStream", logs: logs, sub: sub}, nil
}

// WatchStopStream is a free log subscription operation binding the contract event 0x1b01b687e3428bc184341f729ec8a57bdd569536206cfb59e5d0cecb30dfcb7e.
//
// Solidity: event StopStream(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchStopStream(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamStopStream) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "StopStream")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamStopStream)
				if err := _LvRecordableStream.contract.UnpackLog(event, "StopStream", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStopStream is a log parse operation binding the contract event 0x1b01b687e3428bc184341f729ec8a57bdd569536206cfb59e5d0cecb30dfcb7e.
//
// Solidity: event StopStream(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseStopStream(log types.Log) (*LvRecordableStreamStopStream, error) {
	event := new(LvRecordableStreamStopStream)
	if err := _LvRecordableStream.contract.UnpackLog(event, "StopStream", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingABI is the input ABI used to generate the binding from.
const LvRecordingABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"runAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"custom_values\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"runAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"programId\",\"type\":\"string\"},{\"name\":\"programStart\",\"type\":\"uint256\"},{\"name\":\"programEnd\",\"type\":\"uint256\"},{\"name\":\"programTitle\",\"type\":\"string\"},{\"name\":\"signature\",\"type\":\"bytes1[]\"}],\"name\":\"logProgramId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"}],\"name\":\"runFinalize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setTimes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposed_status_code\",\"type\":\"int256\"}],\"name\":\"runStatusChange\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"runDescribeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recordingStreamContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recordingStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runKill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recordingStatus\",\"type\":\"uint8\"}],\"name\":\"updateRecordingStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contentAddress\",\"type\":\"address\"}],\"name\":\"setContentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"name\":\"runGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"originator\",\"type\":\"address\"}],\"name\":\"runFinalizeExt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_CHARGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"SetTimes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"UpdateRecordingStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"programId\",\"type\":\"string\"}],\"name\":\"RecordProgramId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposedStatusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"returnStatusCode\",\"type\":\"int256\"}],\"name\":\"RunStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"calculateAccessCharge\",\"type\":\"int256\"}],\"name\":\"RunAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunFinalize\",\"type\":\"event\"}]"

// LvRecordingFuncSigs maps the 4-byte function signature to its string representation.
var LvRecordingFuncSigs = map[string]string{
	"6af27417": "DEFAULT_ACCESS()",
	"f185db0c": "DEFAULT_CHARGE()",
	"b535b03e": "DEFAULT_SEE()",
	"129b9775": "contentAddress()",
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"3197cbb6": "endTime()",
	"41c0e1b5": "kill()",
	"172cc921": "logProgramId(string,uint256,uint256,string,bytes1[])",
	"8da5cb5b": "owner()",
	"922386c5": "recordingStatus()",
	"5ebfe071": "recordingStreamContract()",
	"123e0e80": "runAccess(uint256,uint8,bytes32[],address[])",
	"0f82c16f": "runAccessInfo(uint8,bytes32[],address[])",
	"7b1cdb3e": "runCreate()",
	"45080442": "runDescribeStatus(int256)",
	"c9f3d94c": "runEdit()",
	"17685953": "runFinalize(uint256,uint256)",
	"eb81eff0": "runFinalizeExt(uint256,uint256,address)",
	"e870ed91": "runGrant(uint256,bool)",
	"9e99bbea": "runKill()",
	"3513a805": "runStatusChange(int256)",
	"a4a22c59": "setContentAddress(address)",
	"ccb98ffc": "setEndTime(uint256)",
	"3e0a322d": "setStartTime(uint256)",
	"22434836": "setTimes(uint256,uint256)",
	"78e97925": "startTime()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"a3b2d3d5": "updateRecordingStatus(uint8)",
	"54fd4d50": "version()",
}

// LvRecordingBin is the compiled bytecode used for deploying new contracts.
var LvRecordingBin = "0x60806040527f4f776e61626c6532303139303532383139333830304d4c00000000000000000060009081557f436f6e74656e7432303139313033313136323030304d4c0000000000000000006004557f4c765265636f7264696e6732303139313033313230343130304d4c00000000006005556001805432600160a060020a03199182168117909255600280549091169091179055600681905560078190556008805461010060a860020a03191661010033021760ff19169055600a819055600c8190556113599081906100d390396000f3006080604052600436106101715763ffffffff60e060020a60003504166302d05d3f81146101735780630f82c16f146101a4578063123e0e8014610269578063129b977514610308578063172cc9211461031d57806317685953146103fa57806322434836146104085780633197cbb6146104235780633513a805146104385780633e0a322d1461044357806341c0e1b51461045b578063450804421461047057806354fd4d50146104885780635ebfe0711461049d5780636af27417146104b25780636d2e4b1b146104dd57806378e97925146104fe5780637b1cdb3e146105135780638da5cb5b1461051b578063922386c5146105305780639e99bbea14610545578063a3b2d3d51461054d578063a4a22c5914610568578063af570c0414610589578063b535b03e1461059e578063c9f3d94c146105b3578063ccb98ffc146105c8578063e870ed91146105e0578063eb81eff0146105f0578063f185db0c1461060a578063f2fde38b1461061f575b005b34801561017f57600080fd5b50610188610640565b60408051600160a060020a039092168252519081900360200190f35b3480156101b057600080fd5b5060408051602060046024803582810135848102808701860190975280865261023a96843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061064f9650505050505050565b6040805160ff958616815293851660208501529190931682820152606082019290925290519081900360800190f35b60408051602060046044358181013583810280860185019096528085526102f6958335956024803560ff1696369695606495939492019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061065e9650505050505050565b60408051918252519081900360200190f35b34801561031457600080fd5b50610188610860565b34801561032957600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261017194369492936024939284019190819084018382808284375050604080516020888301358a018035601f8101839004830284018301909452838352979a89359a8a8301359a91999098506060909101965091945090810192508190840183828082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061086f9650505050505050565b6102f6600435602435610a9b565b34801561041457600080fd5b50610171600435602435610b3f565b34801561042f57600080fd5b506102f6610c00565b6102f6600435610c06565b34801561044f57600080fd5b50610171600435610c09565b34801561046757600080fd5b50610171610d09565b34801561047c57600080fd5b506102f6600435610d45565b34801561049457600080fd5b506102f6610d4b565b3480156104a957600080fd5b50610188610d51565b3480156104be57600080fd5b506104c7610d65565b6040805160ff9092168252519081900360200190f35b3480156104e957600080fd5b50610171600160a060020a0360043516610d6a565b34801561050a57600080fd5b506102f6610dc5565b6102f6610dcb565b34801561052757600080fd5b50610188610dd0565b34801561053c57600080fd5b506104c7610ddf565b6102f6610de8565b34801561055957600080fd5b5061017160ff60043516610e62565b34801561057457600080fd5b50610171600160a060020a0360043516610f6a565b34801561059557600080fd5b50610188610fc7565b3480156105aa57600080fd5b506104c7610fd6565b3480156105bf57600080fd5b506102f6610fdb565b3480156105d457600080fd5b50610171600435611077565b6102f66004356024351515611127565b6102f6600435602435600160a060020a036044351661112f565b34801561061657600080fd5b506104c76112b6565b34801561062b57600080fd5b50610171600160a060020a03600435166112bb565b600154600160a060020a031681565b60076000808093509350935093565b60008060008560ff16111561085457600860019054906101000a9004600160a060020a0316905082600081518110151561069457fe5b90602001906020020151600160a060020a03166000141561073957604080517f04fbef35000000000000000000000000000000000000000000000000000000008152600481018890523260248201524260448201529051600160a060020a038316916304fbef3591606480830192600092919082900301818387803b15801561071c57600080fd5b505af1158015610730573d6000803e3d6000fd5b50505050610854565b600a80546001019055600b54600c54101561077357600a54600b600c5481548110151561076257fe5b6000918252602090912001556107aa565b600a54600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901555b600c54600101600c8190555080600160a060020a03166304fbef35600a548560008151811015156107d757fe5b90602001906020020151896040518463ffffffff1660e060020a0281526004018084815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050600060405180830381600087803b15801561083b57600080fd5b505af115801561084f573d6000803e3d6000fd5b505050505b50600095945050505050565b600954600160a060020a031681565b600254600090600160a060020a03163214806108955750600254600160a060020a031633145b15156108a057600080fd5b600860019054906101000a9004600160a060020a0316905080600160a060020a031663782f1a6f878787876040518563ffffffff1660e060020a028152600401808060200185815260200184815260200180602001838103835287818151815260200191508051906020019080838360005b8381101561092a578181015183820152602001610912565b50505050905090810190601f1680156109575780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561098a578181015183820152602001610972565b50505050905090810190601f1680156109b75780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b1580156109da57600080fd5b505af11580156109ee573d6000803e3d6000fd5b505050507f453384b91e17e6c44d171f27d5d32a864cf9cc9740578ffd6552d323aa97337242876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a58578181015183820152602001610a40565b50505050905090810190601f168015610a855780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050505050565b600854604080517f01a392bf0000000000000000000000000000000000000000000000000000000081526004810185905260ff8416602482015232604482015242606482015290516000926101009004600160a060020a03169182916301a392bf91608480820192879290919082900301818387803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b506000979650505050505050565b60068290556007819055604080514281526020810184905280820183905290516000917f3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c54919081900360600190a1600860019054906101000a9004600160a060020a0316905080600160a060020a031663c2ccedad6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610be357600080fd5b505af1158015610bf7573d6000803e3d6000fd5b50505050505050565b60075481565b90565b600254600090600160a060020a0316321480610c2f5750600254600160a060020a031633145b1515610c3a57600080fd5b811515610c4a5742600655610c50565b60068290555b60065460075460408051428152602081019390935282810191909152517f3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c549181900360600190a1600860019054906101000a9004600160a060020a0316905080600160a060020a031663c2ccedad6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610ced57600080fd5b505af1158015610d01573d6000803e3d6000fd5b505050505050565b600254600160a060020a0316321480610d2c5750600254600160a060020a031633145b1515610d3757600080fd5b600254600160a060020a0316ff5b50600090565b60055481565b6008546101009004600160a060020a031681565b600281565b600154600160a060020a03163214610d8157600080fd5b600160a060020a0381161515610d9657600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60065481565b600090565b600254600160a060020a031681565b60085460ff1681565b600080600860019054906101000a9004600160a060020a0316905080600160a060020a031663c96444f06040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610e4157600080fd5b505af1158015610e55573d6000803e3d6000fd5b50505050606491505b5090565b600254600090600160a060020a0316321480610e885750600254600160a060020a031633145b1515610e9357600080fd5b6008805460ff191660ff84811691909117918290556040805142815292909116602083015280517f6fff8c8938f3906f27a679f8d6b6652c28d82df5e27e55ef5cdc5f96b06dee099281900390910190a1600860019054906101000a9004600160a060020a0316905080600160a060020a0316632b45298e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f3a57600080fd5b505af1158015610f4e573d6000803e3d6000fd5b505050506040513d6020811015610f6457600080fd5b50505050565b600254600160a060020a0316321480610f8d5750600254600160a060020a031633145b1515610f9857600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600181565b600080600860019054906101000a9004600160a060020a0316905080600160a060020a031663d52e66796040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561103457600080fd5b505af1158015611048573d6000803e3d6000fd5b505050506040513d602081101561105e57600080fd5b50511561106e5760009150610e5e565b600a9150610e5e565b60008115156110895742600755610c50565b6007829055600654604080514281526020810192909252818101849052517f3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c549181900360600190a1600860019054906101000a9004600160a060020a0316905080600160a060020a031663c2ccedad6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610ced57600080fd5b600092915050565b600854600c546000916101009004600160a060020a0316908210156112195780600160a060020a03166301a392bf600b6001600c540381548110151561117157fe5b60009182526020822001546040805160e060020a63ffffffff8616028152600481019290925260ff89166024830152600160a060020a0388166044830152606482018a9052516084808301939282900301818387803b1580156111d357600080fd5b505af11580156111e7573d6000803e3d6000fd5b50505050600b6001600c54038154811015156111ff57fe5b6000918252602082200155600c80546000190190556112ab565b604080517f01a392bf00000000000000000000000000000000000000000000000000000000815260006004820181905260ff87166024830152600160a060020a038681166044840152606483018990529251928416926301a392bf92608480820193929182900301818387803b15801561129257600080fd5b505af11580156112a6573d6000803e3d6000fd5b505050505b506000949350505050565b600481565b600254600160a060020a03163214806112de5750600254600160a060020a031633145b15156112e957600080fd5b600160a060020a03811615156112fe57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820dc4b9d63283f440cf61d4e3beb2023760778297e229f75259c8cbe28696a0d5e0029"

// DeployLvRecording deploys a new Ethereum contract, binding an instance of LvRecording to it.
func DeployLvRecording(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LvRecording, error) {
	parsed, err := abi.JSON(strings.NewReader(LvRecordingABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LvRecordingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LvRecording{LvRecordingCaller: LvRecordingCaller{contract: contract}, LvRecordingTransactor: LvRecordingTransactor{contract: contract}, LvRecordingFilterer: LvRecordingFilterer{contract: contract}}, nil
}

// LvRecording is an auto generated Go binding around an Ethereum contract.
type LvRecording struct {
	LvRecordingCaller     // Read-only binding to the contract
	LvRecordingTransactor // Write-only binding to the contract
	LvRecordingFilterer   // Log filterer for contract events
}

// LvRecordingCaller is an auto generated read-only Go binding around an Ethereum contract.
type LvRecordingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvRecordingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LvRecordingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvRecordingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LvRecordingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvRecordingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LvRecordingSession struct {
	Contract     *LvRecording      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LvRecordingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LvRecordingCallerSession struct {
	Contract *LvRecordingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// LvRecordingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LvRecordingTransactorSession struct {
	Contract     *LvRecordingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// LvRecordingRaw is an auto generated low-level Go binding around an Ethereum contract.
type LvRecordingRaw struct {
	Contract *LvRecording // Generic contract binding to access the raw methods on
}

// LvRecordingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LvRecordingCallerRaw struct {
	Contract *LvRecordingCaller // Generic read-only contract binding to access the raw methods on
}

// LvRecordingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LvRecordingTransactorRaw struct {
	Contract *LvRecordingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLvRecording creates a new instance of LvRecording, bound to a specific deployed contract.
func NewLvRecording(address common.Address, backend bind.ContractBackend) (*LvRecording, error) {
	contract, err := bindLvRecording(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LvRecording{LvRecordingCaller: LvRecordingCaller{contract: contract}, LvRecordingTransactor: LvRecordingTransactor{contract: contract}, LvRecordingFilterer: LvRecordingFilterer{contract: contract}}, nil
}

// NewLvRecordingCaller creates a new read-only instance of LvRecording, bound to a specific deployed contract.
func NewLvRecordingCaller(address common.Address, caller bind.ContractCaller) (*LvRecordingCaller, error) {
	contract, err := bindLvRecording(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LvRecordingCaller{contract: contract}, nil
}

// NewLvRecordingTransactor creates a new write-only instance of LvRecording, bound to a specific deployed contract.
func NewLvRecordingTransactor(address common.Address, transactor bind.ContractTransactor) (*LvRecordingTransactor, error) {
	contract, err := bindLvRecording(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LvRecordingTransactor{contract: contract}, nil
}

// NewLvRecordingFilterer creates a new log filterer instance of LvRecording, bound to a specific deployed contract.
func NewLvRecordingFilterer(address common.Address, filterer bind.ContractFilterer) (*LvRecordingFilterer, error) {
	contract, err := bindLvRecording(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LvRecordingFilterer{contract: contract}, nil
}

// bindLvRecording binds a generic wrapper to an already deployed contract.
func bindLvRecording(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LvRecordingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LvRecording *LvRecordingRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LvRecording.Contract.LvRecordingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LvRecording *LvRecordingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecording.Contract.LvRecordingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LvRecording *LvRecordingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LvRecording.Contract.LvRecordingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LvRecording *LvRecordingCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LvRecording.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LvRecording *LvRecordingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecording.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LvRecording *LvRecordingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LvRecording.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_LvRecording *LvRecordingCaller) DEFAULTACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _LvRecording.contract.Call(opts, out, "DEFAULT_ACCESS")
	return *ret0, err
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_LvRecording *LvRecordingSession) DEFAULTACCESS() (uint8, error) {
	return _LvRecording.Contract.DEFAULTACCESS(&_LvRecording.CallOpts)
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_LvRecording *LvRecordingCallerSession) DEFAULTACCESS() (uint8, error) {
	return _LvRecording.Contract.DEFAULTACCESS(&_LvRecording.CallOpts)
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_LvRecording *LvRecordingCaller) DEFAULTCHARGE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _LvRecording.contract.Call(opts, out, "DEFAULT_CHARGE")
	return *ret0, err
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_LvRecording *LvRecordingSession) DEFAULTCHARGE() (uint8, error) {
	return _LvRecording.Contract.DEFAULTCHARGE(&_LvRecording.CallOpts)
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_LvRecording *LvRecordingCallerSession) DEFAULTCHARGE() (uint8, error) {
	return _LvRecording.Contract.DEFAULTCHARGE(&_LvRecording.CallOpts)
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_LvRecording *LvRecordingCaller) DEFAULTSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _LvRecording.contract.Call(opts, out, "DEFAULT_SEE")
	return *ret0, err
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_LvRecording *LvRecordingSession) DEFAULTSEE() (uint8, error) {
	return _LvRecording.Contract.DEFAULTSEE(&_LvRecording.CallOpts)
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_LvRecording *LvRecordingCallerSession) DEFAULTSEE() (uint8, error) {
	return _LvRecording.Contract.DEFAULTSEE(&_LvRecording.CallOpts)
}

// ContentAddress is a free data retrieval call binding the contract method 0x129b9775.
//
// Solidity: function contentAddress() constant returns(address)
func (_LvRecording *LvRecordingCaller) ContentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LvRecording.contract.Call(opts, out, "contentAddress")
	return *ret0, err
}

// ContentAddress is a free data retrieval call binding the contract method 0x129b9775.
//
// Solidity: function contentAddress() constant returns(address)
func (_LvRecording *LvRecordingSession) ContentAddress() (common.Address, error) {
	return _LvRecording.Contract.ContentAddress(&_LvRecording.CallOpts)
}

// ContentAddress is a free data retrieval call binding the contract method 0x129b9775.
//
// Solidity: function contentAddress() constant returns(address)
func (_LvRecording *LvRecordingCallerSession) ContentAddress() (common.Address, error) {
	return _LvRecording.Contract.ContentAddress(&_LvRecording.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_LvRecording *LvRecordingCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LvRecording.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_LvRecording *LvRecordingSession) ContentSpace() (common.Address, error) {
	return _LvRecording.Contract.ContentSpace(&_LvRecording.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_LvRecording *LvRecordingCallerSession) ContentSpace() (common.Address, error) {
	return _LvRecording.Contract.ContentSpace(&_LvRecording.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_LvRecording *LvRecordingCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LvRecording.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_LvRecording *LvRecordingSession) Creator() (common.Address, error) {
	return _LvRecording.Contract.Creator(&_LvRecording.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_LvRecording *LvRecordingCallerSession) Creator() (common.Address, error) {
	return _LvRecording.Contract.Creator(&_LvRecording.CallOpts)
}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() constant returns(uint256)
func (_LvRecording *LvRecordingCaller) EndTime(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _LvRecording.contract.Call(opts, out, "endTime")
	return *ret0, err
}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() constant returns(uint256)
func (_LvRecording *LvRecordingSession) EndTime() (*big.Int, error) {
	return _LvRecording.Contract.EndTime(&_LvRecording.CallOpts)
}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() constant returns(uint256)
func (_LvRecording *LvRecordingCallerSession) EndTime() (*big.Int, error) {
	return _LvRecording.Contract.EndTime(&_LvRecording.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_LvRecording *LvRecordingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LvRecording.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_LvRecording *LvRecordingSession) Owner() (common.Address, error) {
	return _LvRecording.Contract.Owner(&_LvRecording.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_LvRecording *LvRecordingCallerSession) Owner() (common.Address, error) {
	return _LvRecording.Contract.Owner(&_LvRecording.CallOpts)
}

// RecordingStatus is a free data retrieval call binding the contract method 0x922386c5.
//
// Solidity: function recordingStatus() constant returns(uint8)
func (_LvRecording *LvRecordingCaller) RecordingStatus(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _LvRecording.contract.Call(opts, out, "recordingStatus")
	return *ret0, err
}

// RecordingStatus is a free data retrieval call binding the contract method 0x922386c5.
//
// Solidity: function recordingStatus() constant returns(uint8)
func (_LvRecording *LvRecordingSession) RecordingStatus() (uint8, error) {
	return _LvRecording.Contract.RecordingStatus(&_LvRecording.CallOpts)
}

// RecordingStatus is a free data retrieval call binding the contract method 0x922386c5.
//
// Solidity: function recordingStatus() constant returns(uint8)
func (_LvRecording *LvRecordingCallerSession) RecordingStatus() (uint8, error) {
	return _LvRecording.Contract.RecordingStatus(&_LvRecording.CallOpts)
}

// RecordingStreamContract is a free data retrieval call binding the contract method 0x5ebfe071.
//
// Solidity: function recordingStreamContract() constant returns(address)
func (_LvRecording *LvRecordingCaller) RecordingStreamContract(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LvRecording.contract.Call(opts, out, "recordingStreamContract")
	return *ret0, err
}

// RecordingStreamContract is a free data retrieval call binding the contract method 0x5ebfe071.
//
// Solidity: function recordingStreamContract() constant returns(address)
func (_LvRecording *LvRecordingSession) RecordingStreamContract() (common.Address, error) {
	return _LvRecording.Contract.RecordingStreamContract(&_LvRecording.CallOpts)
}

// RecordingStreamContract is a free data retrieval call binding the contract method 0x5ebfe071.
//
// Solidity: function recordingStreamContract() constant returns(address)
func (_LvRecording *LvRecordingCallerSession) RecordingStreamContract() (common.Address, error) {
	return _LvRecording.Contract.RecordingStreamContract(&_LvRecording.CallOpts)
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) constant returns(uint8, uint8, uint8, uint256)
func (_LvRecording *LvRecordingCaller) RunAccessInfo(opts *bind.CallOpts, arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(uint8)
		ret3 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _LvRecording.contract.Call(opts, out, "runAccessInfo", arg0, arg1, arg2)
	return *ret0, *ret1, *ret2, *ret3, err
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) constant returns(uint8, uint8, uint8, uint256)
func (_LvRecording *LvRecordingSession) RunAccessInfo(arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	return _LvRecording.Contract.RunAccessInfo(&_LvRecording.CallOpts, arg0, arg1, arg2)
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) constant returns(uint8, uint8, uint8, uint256)
func (_LvRecording *LvRecordingCallerSession) RunAccessInfo(arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	return _LvRecording.Contract.RunAccessInfo(&_LvRecording.CallOpts, arg0, arg1, arg2)
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_LvRecording *LvRecordingCaller) RunDescribeStatus(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _LvRecording.contract.Call(opts, out, "runDescribeStatus", arg0)
	return *ret0, err
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_LvRecording *LvRecordingSession) RunDescribeStatus(arg0 *big.Int) ([32]byte, error) {
	return _LvRecording.Contract.RunDescribeStatus(&_LvRecording.CallOpts, arg0)
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_LvRecording *LvRecordingCallerSession) RunDescribeStatus(arg0 *big.Int) ([32]byte, error) {
	return _LvRecording.Contract.RunDescribeStatus(&_LvRecording.CallOpts, arg0)
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() constant returns(uint256)
func (_LvRecording *LvRecordingCaller) StartTime(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _LvRecording.contract.Call(opts, out, "startTime")
	return *ret0, err
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() constant returns(uint256)
func (_LvRecording *LvRecordingSession) StartTime() (*big.Int, error) {
	return _LvRecording.Contract.StartTime(&_LvRecording.CallOpts)
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() constant returns(uint256)
func (_LvRecording *LvRecordingCallerSession) StartTime() (*big.Int, error) {
	return _LvRecording.Contract.StartTime(&_LvRecording.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_LvRecording *LvRecordingCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _LvRecording.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_LvRecording *LvRecordingSession) Version() ([32]byte, error) {
	return _LvRecording.Contract.Version(&_LvRecording.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_LvRecording *LvRecordingCallerSession) Version() ([32]byte, error) {
	return _LvRecording.Contract.Version(&_LvRecording.CallOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_LvRecording *LvRecordingTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_LvRecording *LvRecordingSession) Kill() (*types.Transaction, error) {
	return _LvRecording.Contract.Kill(&_LvRecording.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_LvRecording *LvRecordingTransactorSession) Kill() (*types.Transaction, error) {
	return _LvRecording.Contract.Kill(&_LvRecording.TransactOpts)
}

// LogProgramId is a paid mutator transaction binding the contract method 0x172cc921.
//
// Solidity: function logProgramId(string programId, uint256 programStart, uint256 programEnd, string programTitle, bytes1[] signature) returns()
func (_LvRecording *LvRecordingTransactor) LogProgramId(opts *bind.TransactOpts, programId string, programStart *big.Int, programEnd *big.Int, programTitle string, signature [][1]byte) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "logProgramId", programId, programStart, programEnd, programTitle, signature)
}

// LogProgramId is a paid mutator transaction binding the contract method 0x172cc921.
//
// Solidity: function logProgramId(string programId, uint256 programStart, uint256 programEnd, string programTitle, bytes1[] signature) returns()
func (_LvRecording *LvRecordingSession) LogProgramId(programId string, programStart *big.Int, programEnd *big.Int, programTitle string, signature [][1]byte) (*types.Transaction, error) {
	return _LvRecording.Contract.LogProgramId(&_LvRecording.TransactOpts, programId, programStart, programEnd, programTitle, signature)
}

// LogProgramId is a paid mutator transaction binding the contract method 0x172cc921.
//
// Solidity: function logProgramId(string programId, uint256 programStart, uint256 programEnd, string programTitle, bytes1[] signature) returns()
func (_LvRecording *LvRecordingTransactorSession) LogProgramId(programId string, programStart *big.Int, programEnd *big.Int, programTitle string, signature [][1]byte) (*types.Transaction, error) {
	return _LvRecording.Contract.LogProgramId(&_LvRecording.TransactOpts, programId, programStart, programEnd, programTitle, signature)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 requestID, uint8 level, bytes32[] custom_values, address[] stakeholders) returns(uint256)
func (_LvRecording *LvRecordingTransactor) RunAccess(opts *bind.TransactOpts, requestID *big.Int, level uint8, custom_values [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runAccess", requestID, level, custom_values, stakeholders)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 requestID, uint8 level, bytes32[] custom_values, address[] stakeholders) returns(uint256)
func (_LvRecording *LvRecordingSession) RunAccess(requestID *big.Int, level uint8, custom_values [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _LvRecording.Contract.RunAccess(&_LvRecording.TransactOpts, requestID, level, custom_values, stakeholders)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 requestID, uint8 level, bytes32[] custom_values, address[] stakeholders) returns(uint256)
func (_LvRecording *LvRecordingTransactorSession) RunAccess(requestID *big.Int, level uint8, custom_values [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _LvRecording.Contract.RunAccess(&_LvRecording.TransactOpts, requestID, level, custom_values, stakeholders)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_LvRecording *LvRecordingTransactor) RunCreate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runCreate")
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_LvRecording *LvRecordingSession) RunCreate() (*types.Transaction, error) {
	return _LvRecording.Contract.RunCreate(&_LvRecording.TransactOpts)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_LvRecording *LvRecordingTransactorSession) RunCreate() (*types.Transaction, error) {
	return _LvRecording.Contract.RunCreate(&_LvRecording.TransactOpts)
}

// RunEdit is a paid mutator transaction binding the contract method 0xc9f3d94c.
//
// Solidity: function runEdit() returns(uint256)
func (_LvRecording *LvRecordingTransactor) RunEdit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runEdit")
}

// RunEdit is a paid mutator transaction binding the contract method 0xc9f3d94c.
//
// Solidity: function runEdit() returns(uint256)
func (_LvRecording *LvRecordingSession) RunEdit() (*types.Transaction, error) {
	return _LvRecording.Contract.RunEdit(&_LvRecording.TransactOpts)
}

// RunEdit is a paid mutator transaction binding the contract method 0xc9f3d94c.
//
// Solidity: function runEdit() returns(uint256)
func (_LvRecording *LvRecordingTransactorSession) RunEdit() (*types.Transaction, error) {
	return _LvRecording.Contract.RunEdit(&_LvRecording.TransactOpts)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 requestID, uint256 score_pct) returns(uint256)
func (_LvRecording *LvRecordingTransactor) RunFinalize(opts *bind.TransactOpts, requestID *big.Int, score_pct *big.Int) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runFinalize", requestID, score_pct)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 requestID, uint256 score_pct) returns(uint256)
func (_LvRecording *LvRecordingSession) RunFinalize(requestID *big.Int, score_pct *big.Int) (*types.Transaction, error) {
	return _LvRecording.Contract.RunFinalize(&_LvRecording.TransactOpts, requestID, score_pct)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 requestID, uint256 score_pct) returns(uint256)
func (_LvRecording *LvRecordingTransactorSession) RunFinalize(requestID *big.Int, score_pct *big.Int) (*types.Transaction, error) {
	return _LvRecording.Contract.RunFinalize(&_LvRecording.TransactOpts, requestID, score_pct)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) returns(uint256)
func (_LvRecording *LvRecordingTransactor) RunFinalizeExt(opts *bind.TransactOpts, requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runFinalizeExt", requestID, score_pct, originator)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) returns(uint256)
func (_LvRecording *LvRecordingSession) RunFinalizeExt(requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _LvRecording.Contract.RunFinalizeExt(&_LvRecording.TransactOpts, requestID, score_pct, originator)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) returns(uint256)
func (_LvRecording *LvRecordingTransactorSession) RunFinalizeExt(requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _LvRecording.Contract.RunFinalizeExt(&_LvRecording.TransactOpts, requestID, score_pct, originator)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) returns(uint256)
func (_LvRecording *LvRecordingTransactor) RunGrant(opts *bind.TransactOpts, arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runGrant", arg0, arg1)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) returns(uint256)
func (_LvRecording *LvRecordingSession) RunGrant(arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _LvRecording.Contract.RunGrant(&_LvRecording.TransactOpts, arg0, arg1)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) returns(uint256)
func (_LvRecording *LvRecordingTransactorSession) RunGrant(arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _LvRecording.Contract.RunGrant(&_LvRecording.TransactOpts, arg0, arg1)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_LvRecording *LvRecordingTransactor) RunKill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runKill")
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_LvRecording *LvRecordingSession) RunKill() (*types.Transaction, error) {
	return _LvRecording.Contract.RunKill(&_LvRecording.TransactOpts)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_LvRecording *LvRecordingTransactorSession) RunKill() (*types.Transaction, error) {
	return _LvRecording.Contract.RunKill(&_LvRecording.TransactOpts)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_LvRecording *LvRecordingTransactor) RunStatusChange(opts *bind.TransactOpts, proposed_status_code *big.Int) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runStatusChange", proposed_status_code)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_LvRecording *LvRecordingSession) RunStatusChange(proposed_status_code *big.Int) (*types.Transaction, error) {
	return _LvRecording.Contract.RunStatusChange(&_LvRecording.TransactOpts, proposed_status_code)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_LvRecording *LvRecordingTransactorSession) RunStatusChange(proposed_status_code *big.Int) (*types.Transaction, error) {
	return _LvRecording.Contract.RunStatusChange(&_LvRecording.TransactOpts, proposed_status_code)
}

// SetContentAddress is a paid mutator transaction binding the contract method 0xa4a22c59.
//
// Solidity: function setContentAddress(address _contentAddress) returns()
func (_LvRecording *LvRecordingTransactor) SetContentAddress(opts *bind.TransactOpts, _contentAddress common.Address) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "setContentAddress", _contentAddress)
}

// SetContentAddress is a paid mutator transaction binding the contract method 0xa4a22c59.
//
// Solidity: function setContentAddress(address _contentAddress) returns()
func (_LvRecording *LvRecordingSession) SetContentAddress(_contentAddress common.Address) (*types.Transaction, error) {
	return _LvRecording.Contract.SetContentAddress(&_LvRecording.TransactOpts, _contentAddress)
}

// SetContentAddress is a paid mutator transaction binding the contract method 0xa4a22c59.
//
// Solidity: function setContentAddress(address _contentAddress) returns()
func (_LvRecording *LvRecordingTransactorSession) SetContentAddress(_contentAddress common.Address) (*types.Transaction, error) {
	return _LvRecording.Contract.SetContentAddress(&_LvRecording.TransactOpts, _contentAddress)
}

// SetEndTime is a paid mutator transaction binding the contract method 0xccb98ffc.
//
// Solidity: function setEndTime(uint256 _endTime) returns()
func (_LvRecording *LvRecordingTransactor) SetEndTime(opts *bind.TransactOpts, _endTime *big.Int) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "setEndTime", _endTime)
}

// SetEndTime is a paid mutator transaction binding the contract method 0xccb98ffc.
//
// Solidity: function setEndTime(uint256 _endTime) returns()
func (_LvRecording *LvRecordingSession) SetEndTime(_endTime *big.Int) (*types.Transaction, error) {
	return _LvRecording.Contract.SetEndTime(&_LvRecording.TransactOpts, _endTime)
}

// SetEndTime is a paid mutator transaction binding the contract method 0xccb98ffc.
//
// Solidity: function setEndTime(uint256 _endTime) returns()
func (_LvRecording *LvRecordingTransactorSession) SetEndTime(_endTime *big.Int) (*types.Transaction, error) {
	return _LvRecording.Contract.SetEndTime(&_LvRecording.TransactOpts, _endTime)
}

// SetStartTime is a paid mutator transaction binding the contract method 0x3e0a322d.
//
// Solidity: function setStartTime(uint256 _startTime) returns()
func (_LvRecording *LvRecordingTransactor) SetStartTime(opts *bind.TransactOpts, _startTime *big.Int) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "setStartTime", _startTime)
}

// SetStartTime is a paid mutator transaction binding the contract method 0x3e0a322d.
//
// Solidity: function setStartTime(uint256 _startTime) returns()
func (_LvRecording *LvRecordingSession) SetStartTime(_startTime *big.Int) (*types.Transaction, error) {
	return _LvRecording.Contract.SetStartTime(&_LvRecording.TransactOpts, _startTime)
}

// SetStartTime is a paid mutator transaction binding the contract method 0x3e0a322d.
//
// Solidity: function setStartTime(uint256 _startTime) returns()
func (_LvRecording *LvRecordingTransactorSession) SetStartTime(_startTime *big.Int) (*types.Transaction, error) {
	return _LvRecording.Contract.SetStartTime(&_LvRecording.TransactOpts, _startTime)
}

// SetTimes is a paid mutator transaction binding the contract method 0x22434836.
//
// Solidity: function setTimes(uint256 _startTime, uint256 _endTime) returns()
func (_LvRecording *LvRecordingTransactor) SetTimes(opts *bind.TransactOpts, _startTime *big.Int, _endTime *big.Int) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "setTimes", _startTime, _endTime)
}

// SetTimes is a paid mutator transaction binding the contract method 0x22434836.
//
// Solidity: function setTimes(uint256 _startTime, uint256 _endTime) returns()
func (_LvRecording *LvRecordingSession) SetTimes(_startTime *big.Int, _endTime *big.Int) (*types.Transaction, error) {
	return _LvRecording.Contract.SetTimes(&_LvRecording.TransactOpts, _startTime, _endTime)
}

// SetTimes is a paid mutator transaction binding the contract method 0x22434836.
//
// Solidity: function setTimes(uint256 _startTime, uint256 _endTime) returns()
func (_LvRecording *LvRecordingTransactorSession) SetTimes(_startTime *big.Int, _endTime *big.Int) (*types.Transaction, error) {
	return _LvRecording.Contract.SetTimes(&_LvRecording.TransactOpts, _startTime, _endTime)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_LvRecording *LvRecordingTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_LvRecording *LvRecordingSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _LvRecording.Contract.TransferCreatorship(&_LvRecording.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_LvRecording *LvRecordingTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _LvRecording.Contract.TransferCreatorship(&_LvRecording.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LvRecording *LvRecordingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LvRecording *LvRecordingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LvRecording.Contract.TransferOwnership(&_LvRecording.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LvRecording *LvRecordingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LvRecording.Contract.TransferOwnership(&_LvRecording.TransactOpts, newOwner)
}

// UpdateRecordingStatus is a paid mutator transaction binding the contract method 0xa3b2d3d5.
//
// Solidity: function updateRecordingStatus(uint8 _recordingStatus) returns()
func (_LvRecording *LvRecordingTransactor) UpdateRecordingStatus(opts *bind.TransactOpts, _recordingStatus uint8) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "updateRecordingStatus", _recordingStatus)
}

// UpdateRecordingStatus is a paid mutator transaction binding the contract method 0xa3b2d3d5.
//
// Solidity: function updateRecordingStatus(uint8 _recordingStatus) returns()
func (_LvRecording *LvRecordingSession) UpdateRecordingStatus(_recordingStatus uint8) (*types.Transaction, error) {
	return _LvRecording.Contract.UpdateRecordingStatus(&_LvRecording.TransactOpts, _recordingStatus)
}

// UpdateRecordingStatus is a paid mutator transaction binding the contract method 0xa3b2d3d5.
//
// Solidity: function updateRecordingStatus(uint8 _recordingStatus) returns()
func (_LvRecording *LvRecordingTransactorSession) UpdateRecordingStatus(_recordingStatus uint8) (*types.Transaction, error) {
	return _LvRecording.Contract.UpdateRecordingStatus(&_LvRecording.TransactOpts, _recordingStatus)
}

// LvRecordingLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the LvRecording contract.
type LvRecordingLogIterator struct {
	Event *LvRecordingLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingLog represents a Log event raised by the LvRecording contract.
type LvRecordingLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvRecording *LvRecordingFilterer) FilterLog(opts *bind.FilterOpts) (*LvRecordingLogIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &LvRecordingLogIterator{contract: _LvRecording.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvRecording *LvRecordingFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *LvRecordingLog) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingLog)
				if err := _LvRecording.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvRecording *LvRecordingFilterer) ParseLog(log types.Log) (*LvRecordingLog, error) {
	event := new(LvRecordingLog)
	if err := _LvRecording.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the LvRecording contract.
type LvRecordingLogAddressIterator struct {
	Event *LvRecordingLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingLogAddress represents a LogAddress event raised by the LvRecording contract.
type LvRecordingLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvRecording *LvRecordingFilterer) FilterLogAddress(opts *bind.FilterOpts) (*LvRecordingLogAddressIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &LvRecordingLogAddressIterator{contract: _LvRecording.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvRecording *LvRecordingFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *LvRecordingLogAddress) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingLogAddress)
				if err := _LvRecording.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvRecording *LvRecordingFilterer) ParseLogAddress(log types.Log) (*LvRecordingLogAddress, error) {
	event := new(LvRecordingLogAddress)
	if err := _LvRecording.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the LvRecording contract.
type LvRecordingLogBoolIterator struct {
	Event *LvRecordingLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingLogBool represents a LogBool event raised by the LvRecording contract.
type LvRecordingLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvRecording *LvRecordingFilterer) FilterLogBool(opts *bind.FilterOpts) (*LvRecordingLogBoolIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &LvRecordingLogBoolIterator{contract: _LvRecording.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvRecording *LvRecordingFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *LvRecordingLogBool) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingLogBool)
				if err := _LvRecording.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvRecording *LvRecordingFilterer) ParseLogBool(log types.Log) (*LvRecordingLogBool, error) {
	event := new(LvRecordingLogBool)
	if err := _LvRecording.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the LvRecording contract.
type LvRecordingLogBytes32Iterator struct {
	Event *LvRecordingLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingLogBytes32 represents a LogBytes32 event raised by the LvRecording contract.
type LvRecordingLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvRecording *LvRecordingFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*LvRecordingLogBytes32Iterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &LvRecordingLogBytes32Iterator{contract: _LvRecording.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvRecording *LvRecordingFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *LvRecordingLogBytes32) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingLogBytes32)
				if err := _LvRecording.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvRecording *LvRecordingFilterer) ParseLogBytes32(log types.Log) (*LvRecordingLogBytes32, error) {
	event := new(LvRecordingLogBytes32)
	if err := _LvRecording.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the LvRecording contract.
type LvRecordingLogInt256Iterator struct {
	Event *LvRecordingLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingLogInt256 represents a LogInt256 event raised by the LvRecording contract.
type LvRecordingLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvRecording *LvRecordingFilterer) FilterLogInt256(opts *bind.FilterOpts) (*LvRecordingLogInt256Iterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &LvRecordingLogInt256Iterator{contract: _LvRecording.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvRecording *LvRecordingFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *LvRecordingLogInt256) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingLogInt256)
				if err := _LvRecording.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvRecording *LvRecordingFilterer) ParseLogInt256(log types.Log) (*LvRecordingLogInt256, error) {
	event := new(LvRecordingLogInt256)
	if err := _LvRecording.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the LvRecording contract.
type LvRecordingLogPaymentIterator struct {
	Event *LvRecordingLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingLogPayment represents a LogPayment event raised by the LvRecording contract.
type LvRecordingLogPayment struct {
	Label  string
	Payee  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvRecording *LvRecordingFilterer) FilterLogPayment(opts *bind.FilterOpts) (*LvRecordingLogPaymentIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &LvRecordingLogPaymentIterator{contract: _LvRecording.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvRecording *LvRecordingFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *LvRecordingLogPayment) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingLogPayment)
				if err := _LvRecording.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvRecording *LvRecordingFilterer) ParseLogPayment(log types.Log) (*LvRecordingLogPayment, error) {
	event := new(LvRecordingLogPayment)
	if err := _LvRecording.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the LvRecording contract.
type LvRecordingLogUint256Iterator struct {
	Event *LvRecordingLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingLogUint256 represents a LogUint256 event raised by the LvRecording contract.
type LvRecordingLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvRecording *LvRecordingFilterer) FilterLogUint256(opts *bind.FilterOpts) (*LvRecordingLogUint256Iterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &LvRecordingLogUint256Iterator{contract: _LvRecording.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvRecording *LvRecordingFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *LvRecordingLogUint256) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingLogUint256)
				if err := _LvRecording.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvRecording *LvRecordingFilterer) ParseLogUint256(log types.Log) (*LvRecordingLogUint256, error) {
	event := new(LvRecordingLogUint256)
	if err := _LvRecording.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingRecordProgramIdIterator is returned from FilterRecordProgramId and is used to iterate over the raw logs and unpacked data for RecordProgramId events raised by the LvRecording contract.
type LvRecordingRecordProgramIdIterator struct {
	Event *LvRecordingRecordProgramId // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingRecordProgramIdIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingRecordProgramId)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingRecordProgramId)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingRecordProgramIdIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingRecordProgramIdIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingRecordProgramId represents a RecordProgramId event raised by the LvRecording contract.
type LvRecordingRecordProgramId struct {
	Timestamp *big.Int
	ProgramId string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRecordProgramId is a free log retrieval operation binding the contract event 0x453384b91e17e6c44d171f27d5d32a864cf9cc9740578ffd6552d323aa973372.
//
// Solidity: event RecordProgramId(uint256 timestamp, string programId)
func (_LvRecording *LvRecordingFilterer) FilterRecordProgramId(opts *bind.FilterOpts) (*LvRecordingRecordProgramIdIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "RecordProgramId")
	if err != nil {
		return nil, err
	}
	return &LvRecordingRecordProgramIdIterator{contract: _LvRecording.contract, event: "RecordProgramId", logs: logs, sub: sub}, nil
}

// WatchRecordProgramId is a free log subscription operation binding the contract event 0x453384b91e17e6c44d171f27d5d32a864cf9cc9740578ffd6552d323aa973372.
//
// Solidity: event RecordProgramId(uint256 timestamp, string programId)
func (_LvRecording *LvRecordingFilterer) WatchRecordProgramId(opts *bind.WatchOpts, sink chan<- *LvRecordingRecordProgramId) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "RecordProgramId")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingRecordProgramId)
				if err := _LvRecording.contract.UnpackLog(event, "RecordProgramId", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRecordProgramId is a log parse operation binding the contract event 0x453384b91e17e6c44d171f27d5d32a864cf9cc9740578ffd6552d323aa973372.
//
// Solidity: event RecordProgramId(uint256 timestamp, string programId)
func (_LvRecording *LvRecordingFilterer) ParseRecordProgramId(log types.Log) (*LvRecordingRecordProgramId, error) {
	event := new(LvRecordingRecordProgramId)
	if err := _LvRecording.contract.UnpackLog(event, "RecordProgramId", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingRunAccessIterator is returned from FilterRunAccess and is used to iterate over the raw logs and unpacked data for RunAccess events raised by the LvRecording contract.
type LvRecordingRunAccessIterator struct {
	Event *LvRecordingRunAccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingRunAccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingRunAccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingRunAccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingRunAccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingRunAccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingRunAccess represents a RunAccess event raised by the LvRecording contract.
type LvRecordingRunAccess struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunAccess is a free log retrieval operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvRecording *LvRecordingFilterer) FilterRunAccess(opts *bind.FilterOpts) (*LvRecordingRunAccessIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return &LvRecordingRunAccessIterator{contract: _LvRecording.contract, event: "RunAccess", logs: logs, sub: sub}, nil
}

// WatchRunAccess is a free log subscription operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvRecording *LvRecordingFilterer) WatchRunAccess(opts *bind.WatchOpts, sink chan<- *LvRecordingRunAccess) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingRunAccess)
				if err := _LvRecording.contract.UnpackLog(event, "RunAccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccess is a log parse operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvRecording *LvRecordingFilterer) ParseRunAccess(log types.Log) (*LvRecordingRunAccess, error) {
	event := new(LvRecordingRunAccess)
	if err := _LvRecording.contract.UnpackLog(event, "RunAccess", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingRunAccessChargeIterator is returned from FilterRunAccessCharge and is used to iterate over the raw logs and unpacked data for RunAccessCharge events raised by the LvRecording contract.
type LvRecordingRunAccessChargeIterator struct {
	Event *LvRecordingRunAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingRunAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingRunAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingRunAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingRunAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingRunAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingRunAccessCharge represents a RunAccessCharge event raised by the LvRecording contract.
type LvRecordingRunAccessCharge struct {
	Level                 uint8
	CalculateAccessCharge *big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterRunAccessCharge is a free log retrieval operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvRecording *LvRecordingFilterer) FilterRunAccessCharge(opts *bind.FilterOpts) (*LvRecordingRunAccessChargeIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return &LvRecordingRunAccessChargeIterator{contract: _LvRecording.contract, event: "RunAccessCharge", logs: logs, sub: sub}, nil
}

// WatchRunAccessCharge is a free log subscription operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvRecording *LvRecordingFilterer) WatchRunAccessCharge(opts *bind.WatchOpts, sink chan<- *LvRecordingRunAccessCharge) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingRunAccessCharge)
				if err := _LvRecording.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccessCharge is a log parse operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvRecording *LvRecordingFilterer) ParseRunAccessCharge(log types.Log) (*LvRecordingRunAccessCharge, error) {
	event := new(LvRecordingRunAccessCharge)
	if err := _LvRecording.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingRunCreateIterator is returned from FilterRunCreate and is used to iterate over the raw logs and unpacked data for RunCreate events raised by the LvRecording contract.
type LvRecordingRunCreateIterator struct {
	Event *LvRecordingRunCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingRunCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingRunCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingRunCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingRunCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingRunCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingRunCreate represents a RunCreate event raised by the LvRecording contract.
type LvRecordingRunCreate struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunCreate is a free log retrieval operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvRecording *LvRecordingFilterer) FilterRunCreate(opts *bind.FilterOpts) (*LvRecordingRunCreateIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return &LvRecordingRunCreateIterator{contract: _LvRecording.contract, event: "RunCreate", logs: logs, sub: sub}, nil
}

// WatchRunCreate is a free log subscription operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvRecording *LvRecordingFilterer) WatchRunCreate(opts *bind.WatchOpts, sink chan<- *LvRecordingRunCreate) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingRunCreate)
				if err := _LvRecording.contract.UnpackLog(event, "RunCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunCreate is a log parse operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvRecording *LvRecordingFilterer) ParseRunCreate(log types.Log) (*LvRecordingRunCreate, error) {
	event := new(LvRecordingRunCreate)
	if err := _LvRecording.contract.UnpackLog(event, "RunCreate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingRunFinalizeIterator is returned from FilterRunFinalize and is used to iterate over the raw logs and unpacked data for RunFinalize events raised by the LvRecording contract.
type LvRecordingRunFinalizeIterator struct {
	Event *LvRecordingRunFinalize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingRunFinalizeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingRunFinalize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingRunFinalize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingRunFinalizeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingRunFinalizeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingRunFinalize represents a RunFinalize event raised by the LvRecording contract.
type LvRecordingRunFinalize struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunFinalize is a free log retrieval operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvRecording *LvRecordingFilterer) FilterRunFinalize(opts *bind.FilterOpts) (*LvRecordingRunFinalizeIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return &LvRecordingRunFinalizeIterator{contract: _LvRecording.contract, event: "RunFinalize", logs: logs, sub: sub}, nil
}

// WatchRunFinalize is a free log subscription operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvRecording *LvRecordingFilterer) WatchRunFinalize(opts *bind.WatchOpts, sink chan<- *LvRecordingRunFinalize) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingRunFinalize)
				if err := _LvRecording.contract.UnpackLog(event, "RunFinalize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunFinalize is a log parse operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvRecording *LvRecordingFilterer) ParseRunFinalize(log types.Log) (*LvRecordingRunFinalize, error) {
	event := new(LvRecordingRunFinalize)
	if err := _LvRecording.contract.UnpackLog(event, "RunFinalize", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingRunKillIterator is returned from FilterRunKill and is used to iterate over the raw logs and unpacked data for RunKill events raised by the LvRecording contract.
type LvRecordingRunKillIterator struct {
	Event *LvRecordingRunKill // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingRunKillIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingRunKill)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingRunKill)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingRunKillIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingRunKillIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingRunKill represents a RunKill event raised by the LvRecording contract.
type LvRecordingRunKill struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunKill is a free log retrieval operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvRecording *LvRecordingFilterer) FilterRunKill(opts *bind.FilterOpts) (*LvRecordingRunKillIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return &LvRecordingRunKillIterator{contract: _LvRecording.contract, event: "RunKill", logs: logs, sub: sub}, nil
}

// WatchRunKill is a free log subscription operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvRecording *LvRecordingFilterer) WatchRunKill(opts *bind.WatchOpts, sink chan<- *LvRecordingRunKill) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingRunKill)
				if err := _LvRecording.contract.UnpackLog(event, "RunKill", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunKill is a log parse operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvRecording *LvRecordingFilterer) ParseRunKill(log types.Log) (*LvRecordingRunKill, error) {
	event := new(LvRecordingRunKill)
	if err := _LvRecording.contract.UnpackLog(event, "RunKill", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingRunStatusChangeIterator is returned from FilterRunStatusChange and is used to iterate over the raw logs and unpacked data for RunStatusChange events raised by the LvRecording contract.
type LvRecordingRunStatusChangeIterator struct {
	Event *LvRecordingRunStatusChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingRunStatusChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingRunStatusChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingRunStatusChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingRunStatusChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingRunStatusChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingRunStatusChange represents a RunStatusChange event raised by the LvRecording contract.
type LvRecordingRunStatusChange struct {
	ProposedStatusCode *big.Int
	ReturnStatusCode   *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRunStatusChange is a free log retrieval operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvRecording *LvRecordingFilterer) FilterRunStatusChange(opts *bind.FilterOpts) (*LvRecordingRunStatusChangeIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return &LvRecordingRunStatusChangeIterator{contract: _LvRecording.contract, event: "RunStatusChange", logs: logs, sub: sub}, nil
}

// WatchRunStatusChange is a free log subscription operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvRecording *LvRecordingFilterer) WatchRunStatusChange(opts *bind.WatchOpts, sink chan<- *LvRecordingRunStatusChange) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingRunStatusChange)
				if err := _LvRecording.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunStatusChange is a log parse operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvRecording *LvRecordingFilterer) ParseRunStatusChange(log types.Log) (*LvRecordingRunStatusChange, error) {
	event := new(LvRecordingRunStatusChange)
	if err := _LvRecording.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingSetTimesIterator is returned from FilterSetTimes and is used to iterate over the raw logs and unpacked data for SetTimes events raised by the LvRecording contract.
type LvRecordingSetTimesIterator struct {
	Event *LvRecordingSetTimes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingSetTimesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingSetTimes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingSetTimes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingSetTimesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingSetTimesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingSetTimes represents a SetTimes event raised by the LvRecording contract.
type LvRecordingSetTimes struct {
	Timestamp *big.Int
	StartTime *big.Int
	EndTime   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetTimes is a free log retrieval operation binding the contract event 0x3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c54.
//
// Solidity: event SetTimes(uint256 timestamp, uint256 startTime, uint256 endTime)
func (_LvRecording *LvRecordingFilterer) FilterSetTimes(opts *bind.FilterOpts) (*LvRecordingSetTimesIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "SetTimes")
	if err != nil {
		return nil, err
	}
	return &LvRecordingSetTimesIterator{contract: _LvRecording.contract, event: "SetTimes", logs: logs, sub: sub}, nil
}

// WatchSetTimes is a free log subscription operation binding the contract event 0x3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c54.
//
// Solidity: event SetTimes(uint256 timestamp, uint256 startTime, uint256 endTime)
func (_LvRecording *LvRecordingFilterer) WatchSetTimes(opts *bind.WatchOpts, sink chan<- *LvRecordingSetTimes) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "SetTimes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingSetTimes)
				if err := _LvRecording.contract.UnpackLog(event, "SetTimes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetTimes is a log parse operation binding the contract event 0x3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c54.
//
// Solidity: event SetTimes(uint256 timestamp, uint256 startTime, uint256 endTime)
func (_LvRecording *LvRecordingFilterer) ParseSetTimes(log types.Log) (*LvRecordingSetTimes, error) {
	event := new(LvRecordingSetTimes)
	if err := _LvRecording.contract.UnpackLog(event, "SetTimes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvRecordingUpdateRecordingStatusIterator is returned from FilterUpdateRecordingStatus and is used to iterate over the raw logs and unpacked data for UpdateRecordingStatus events raised by the LvRecording contract.
type LvRecordingUpdateRecordingStatusIterator struct {
	Event *LvRecordingUpdateRecordingStatus // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingUpdateRecordingStatusIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingUpdateRecordingStatus)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingUpdateRecordingStatus)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingUpdateRecordingStatusIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingUpdateRecordingStatusIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingUpdateRecordingStatus represents a UpdateRecordingStatus event raised by the LvRecording contract.
type LvRecordingUpdateRecordingStatus struct {
	Timestamp *big.Int
	Status    uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterUpdateRecordingStatus is a free log retrieval operation binding the contract event 0x6fff8c8938f3906f27a679f8d6b6652c28d82df5e27e55ef5cdc5f96b06dee09.
//
// Solidity: event UpdateRecordingStatus(uint256 timestamp, uint8 status)
func (_LvRecording *LvRecordingFilterer) FilterUpdateRecordingStatus(opts *bind.FilterOpts) (*LvRecordingUpdateRecordingStatusIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "UpdateRecordingStatus")
	if err != nil {
		return nil, err
	}
	return &LvRecordingUpdateRecordingStatusIterator{contract: _LvRecording.contract, event: "UpdateRecordingStatus", logs: logs, sub: sub}, nil
}

// WatchUpdateRecordingStatus is a free log subscription operation binding the contract event 0x6fff8c8938f3906f27a679f8d6b6652c28d82df5e27e55ef5cdc5f96b06dee09.
//
// Solidity: event UpdateRecordingStatus(uint256 timestamp, uint8 status)
func (_LvRecording *LvRecordingFilterer) WatchUpdateRecordingStatus(opts *bind.WatchOpts, sink chan<- *LvRecordingUpdateRecordingStatus) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "UpdateRecordingStatus")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingUpdateRecordingStatus)
				if err := _LvRecording.contract.UnpackLog(event, "UpdateRecordingStatus", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRecordingStatus is a log parse operation binding the contract event 0x6fff8c8938f3906f27a679f8d6b6652c28d82df5e27e55ef5cdc5f96b06dee09.
//
// Solidity: event UpdateRecordingStatus(uint256 timestamp, uint8 status)
func (_LvRecording *LvRecordingFilterer) ParseUpdateRecordingStatus(log types.Log) (*LvRecordingUpdateRecordingStatus, error) {
	event := new(LvRecordingUpdateRecordingStatus)
	if err := _LvRecording.contract.UnpackLog(event, "UpdateRecordingStatus", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderABI is the input ABI used to generate the binding from.
const LvStreamRightsHolderABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"runAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"runAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"runFinalize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stream\",\"type\":\"address\"}],\"name\":\"disableRecording\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"recordingStreams\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposed_status_code\",\"type\":\"int256\"}],\"name\":\"runStatusChange\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"runDescribeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stream\",\"type\":\"address\"}],\"name\":\"enableRecording\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stream\",\"type\":\"address\"},{\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"authorizeRecording\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runKill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stream\",\"type\":\"address\"}],\"name\":\"registerStream\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"name\":\"runGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"originator\",\"type\":\"address\"}],\"name\":\"runFinalizeExt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_CHARGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stream\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rightsHolder\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"provider\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"membership\",\"type\":\"bool\"}],\"name\":\"AuthorizeRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stream\",\"type\":\"address\"}],\"name\":\"EnableRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stream\",\"type\":\"address\"}],\"name\":\"DisableRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposedStatusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"returnStatusCode\",\"type\":\"int256\"}],\"name\":\"RunStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"calculateAccessCharge\",\"type\":\"int256\"}],\"name\":\"RunAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunFinalize\",\"type\":\"event\"}]"

// LvStreamRightsHolderFuncSigs maps the 4-byte function signature to its string representation.
var LvStreamRightsHolderFuncSigs = map[string]string{
	"6af27417": "DEFAULT_ACCESS()",
	"f185db0c": "DEFAULT_CHARGE()",
	"b535b03e": "DEFAULT_SEE()",
	"6135c504": "authorizeRecording(address,address)",
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"20abe3ae": "disableRecording(address)",
	"514eecff": "enableRecording(address)",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"250fc29a": "recordingStreams(address)",
	"ad284b12": "registerStream(address)",
	"123e0e80": "runAccess(uint256,uint8,bytes32[],address[])",
	"0f82c16f": "runAccessInfo(uint8,bytes32[],address[])",
	"7b1cdb3e": "runCreate()",
	"45080442": "runDescribeStatus(int256)",
	"17685953": "runFinalize(uint256,uint256)",
	"eb81eff0": "runFinalizeExt(uint256,uint256,address)",
	"e870ed91": "runGrant(uint256,bool)",
	"9e99bbea": "runKill()",
	"3513a805": "runStatusChange(int256)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
}

// LvStreamRightsHolderBin is the compiled bytecode used for deploying new contracts.
var LvStreamRightsHolderBin = "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f436f6e74656e7432303139313033313136323030304d4c0000000000000000006004557f4c765374726d526967687473486c647232303139313032393132313930304d4c60055560018054600160a060020a031990811632908117909255600280549091169091179055610a93806100a26000396000f30060806040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461013f5780630f82c16f14610170578063123e0e801461023557806317685953146102d457806320abe3ae146102e2578063250fc29a146103035780633513a8051461033857806341c0e1b5146103435780634508044214610358578063514eecff1461037057806354fd4d50146103915780636135c504146103a65780636af27417146103cd5780636d2e4b1b146103f85780637b1cdb3e146104195780638da5cb5b146104215780639e99bbea14610419578063ad284b1214610436578063af570c0414610457578063b535b03e1461046c578063e870ed9114610481578063eb81eff014610491578063f185db0c146104ab578063f2fde38b146104c0575b005b34801561014b57600080fd5b506101546104e1565b60408051600160a060020a039092168252519081900360200190f35b34801561017c57600080fd5b5060408051602060046024803582810135848102808701860190975280865261020696843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506104f09650505050505050565b6040805160ff958616815293851660208501529190931682820152606082019290925290519081900360800190f35b60408051602060046044358181013583810280860185019096528085526102c2958335956024803560ff1696369695606495939492019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506104ff9650505050505050565b60408051918252519081900360200190f35b6102c2600435602435610509565b3480156102ee57600080fd5b5061013d600160a060020a0360043516610511565b34801561030f57600080fd5b50610324600160a060020a036004351661059e565b604080519115158252519081900360200190f35b6102c26004356105b3565b34801561034f57600080fd5b5061013d6105b6565b34801561036457600080fd5b506102c26004356105f2565b34801561037c57600080fd5b5061013d600160a060020a03600435166105f8565b34801561039d57600080fd5b506102c2610688565b3480156103b257600080fd5b50610324600160a060020a036004358116906024351661068e565b3480156103d957600080fd5b506103e2610857565b6040805160ff9092168252519081900360200190f35b34801561040457600080fd5b5061013d600160a060020a036004351661085c565b6102c26108b7565b34801561042d57600080fd5b506101546108bc565b34801561044257600080fd5b5061013d600160a060020a03600435166108cb565b34801561046357600080fd5b506101546109d3565b34801561047857600080fd5b506103e26109e2565b6102c26004356024351515610509565b6102c2600435602435600160a060020a03604435166109e7565b3480156104b757600080fd5b506103e26109f0565b3480156104cc57600080fd5b5061013d600160a060020a03600435166109f5565b600154600160a060020a031681565b60076000808093509350935093565b6000949350505050565b600092915050565b600254600160a060020a03163214806105345750600254600160a060020a031633145b151561053f57600080fd5b600160a060020a038116600081815260066020908152604091829020805460ff1916905581514281529081019290925280517faeba60bf43bc8bad9685cf80e62ae6d5cd753813786f1821576545517a3e49cb9281900390910190a150565b60066020526000908152604090205460ff1681565b90565b600254600160a060020a03163214806105d95750600254600160a060020a031633145b15156105e457600080fd5b600254600160a060020a0316ff5b50600090565b600254600160a060020a031632148061061b5750600254600160a060020a031633145b151561062657600080fd5b600160a060020a038116600081815260066020908152604091829020805460ff1916600117905581514281529081019290925280517fc9861f7825199418647d352092481fbd508dc7420e7a6e2f0f41be183d6e2c8d9281900390910190a150565b60055481565b600160a060020a03821660008181526006602090815260408083205481517f2310167f0000000000000000000000000000000000000000000000000000000081529151939460ff9091169387938693849384939092632310167f926004808201939182900301818787803b15801561070557600080fd5b505af1158015610719573d6000803e3d6000fd5b505050506040513d602081101561072f57600080fd5b5051604080517f9156d1fd000000000000000000000000000000000000000000000000000000008152600160a060020a038a8116600483015288151560248301528251939650861692639156d1fd926044808401939192918290030181600087803b15801561079d57600080fd5b505af11580156107b1573d6000803e3d6000fd5b505050506040513d60408110156107c757600080fd5b50805160209182015160408051428152600160a060020a03808e1695820195909552938b16848201528815156060850152821515608085015281151560a08501525191945092507fb72dd3ed580fe54dae87f5560d5617f1425b22e33e0a8e6ca80bf5cca95055359181900360c00190a18480156108425750815b801561084b5750805b98975050505050505050565b600281565b600154600160a060020a0316321461087357600080fd5b600160a060020a038116151561088857600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600090565b600254600160a060020a031681565b600081905032600160a060020a031681600160a060020a0316638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561093157600080fd5b505af1158015610945573d6000803e3d6000fd5b505050506040513d602081101561095b57600080fd5b5051600160a060020a03161461097057600080fd5b600160a060020a038216600081815260066020908152604091829020805460ff1916600117905581514281529081019290925280517fc9861f7825199418647d352092481fbd508dc7420e7a6e2f0f41be183d6e2c8d9281900390910190a15050565b600354600160a060020a031681565b600181565b60009392505050565b600481565b600254600160a060020a0316321480610a185750600254600160a060020a031633145b1515610a2357600080fd5b600160a060020a0381161515610a3857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820e8224bd0a22794ca897d65c49db0fbc2949b4ad40abfd78b4a015802fa952e650029"

// DeployLvStreamRightsHolder deploys a new Ethereum contract, binding an instance of LvStreamRightsHolder to it.
func DeployLvStreamRightsHolder(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LvStreamRightsHolder, error) {
	parsed, err := abi.JSON(strings.NewReader(LvStreamRightsHolderABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LvStreamRightsHolderBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LvStreamRightsHolder{LvStreamRightsHolderCaller: LvStreamRightsHolderCaller{contract: contract}, LvStreamRightsHolderTransactor: LvStreamRightsHolderTransactor{contract: contract}, LvStreamRightsHolderFilterer: LvStreamRightsHolderFilterer{contract: contract}}, nil
}

// LvStreamRightsHolder is an auto generated Go binding around an Ethereum contract.
type LvStreamRightsHolder struct {
	LvStreamRightsHolderCaller     // Read-only binding to the contract
	LvStreamRightsHolderTransactor // Write-only binding to the contract
	LvStreamRightsHolderFilterer   // Log filterer for contract events
}

// LvStreamRightsHolderCaller is an auto generated read-only Go binding around an Ethereum contract.
type LvStreamRightsHolderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvStreamRightsHolderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LvStreamRightsHolderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvStreamRightsHolderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LvStreamRightsHolderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvStreamRightsHolderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LvStreamRightsHolderSession struct {
	Contract     *LvStreamRightsHolder // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// LvStreamRightsHolderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LvStreamRightsHolderCallerSession struct {
	Contract *LvStreamRightsHolderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// LvStreamRightsHolderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LvStreamRightsHolderTransactorSession struct {
	Contract     *LvStreamRightsHolderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// LvStreamRightsHolderRaw is an auto generated low-level Go binding around an Ethereum contract.
type LvStreamRightsHolderRaw struct {
	Contract *LvStreamRightsHolder // Generic contract binding to access the raw methods on
}

// LvStreamRightsHolderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LvStreamRightsHolderCallerRaw struct {
	Contract *LvStreamRightsHolderCaller // Generic read-only contract binding to access the raw methods on
}

// LvStreamRightsHolderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LvStreamRightsHolderTransactorRaw struct {
	Contract *LvStreamRightsHolderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLvStreamRightsHolder creates a new instance of LvStreamRightsHolder, bound to a specific deployed contract.
func NewLvStreamRightsHolder(address common.Address, backend bind.ContractBackend) (*LvStreamRightsHolder, error) {
	contract, err := bindLvStreamRightsHolder(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolder{LvStreamRightsHolderCaller: LvStreamRightsHolderCaller{contract: contract}, LvStreamRightsHolderTransactor: LvStreamRightsHolderTransactor{contract: contract}, LvStreamRightsHolderFilterer: LvStreamRightsHolderFilterer{contract: contract}}, nil
}

// NewLvStreamRightsHolderCaller creates a new read-only instance of LvStreamRightsHolder, bound to a specific deployed contract.
func NewLvStreamRightsHolderCaller(address common.Address, caller bind.ContractCaller) (*LvStreamRightsHolderCaller, error) {
	contract, err := bindLvStreamRightsHolder(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderCaller{contract: contract}, nil
}

// NewLvStreamRightsHolderTransactor creates a new write-only instance of LvStreamRightsHolder, bound to a specific deployed contract.
func NewLvStreamRightsHolderTransactor(address common.Address, transactor bind.ContractTransactor) (*LvStreamRightsHolderTransactor, error) {
	contract, err := bindLvStreamRightsHolder(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderTransactor{contract: contract}, nil
}

// NewLvStreamRightsHolderFilterer creates a new log filterer instance of LvStreamRightsHolder, bound to a specific deployed contract.
func NewLvStreamRightsHolderFilterer(address common.Address, filterer bind.ContractFilterer) (*LvStreamRightsHolderFilterer, error) {
	contract, err := bindLvStreamRightsHolder(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderFilterer{contract: contract}, nil
}

// bindLvStreamRightsHolder binds a generic wrapper to an already deployed contract.
func bindLvStreamRightsHolder(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LvStreamRightsHolderABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LvStreamRightsHolder *LvStreamRightsHolderRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LvStreamRightsHolder.Contract.LvStreamRightsHolderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LvStreamRightsHolder *LvStreamRightsHolderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.LvStreamRightsHolderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LvStreamRightsHolder *LvStreamRightsHolderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.LvStreamRightsHolderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LvStreamRightsHolder *LvStreamRightsHolderCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LvStreamRightsHolder.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) DEFAULTACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _LvStreamRightsHolder.contract.Call(opts, out, "DEFAULT_ACCESS")
	return *ret0, err
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) DEFAULTACCESS() (uint8, error) {
	return _LvStreamRightsHolder.Contract.DEFAULTACCESS(&_LvStreamRightsHolder.CallOpts)
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_LvStreamRightsHolder *LvStreamRightsHolderCallerSession) DEFAULTACCESS() (uint8, error) {
	return _LvStreamRightsHolder.Contract.DEFAULTACCESS(&_LvStreamRightsHolder.CallOpts)
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) DEFAULTCHARGE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _LvStreamRightsHolder.contract.Call(opts, out, "DEFAULT_CHARGE")
	return *ret0, err
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) DEFAULTCHARGE() (uint8, error) {
	return _LvStreamRightsHolder.Contract.DEFAULTCHARGE(&_LvStreamRightsHolder.CallOpts)
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_LvStreamRightsHolder *LvStreamRightsHolderCallerSession) DEFAULTCHARGE() (uint8, error) {
	return _LvStreamRightsHolder.Contract.DEFAULTCHARGE(&_LvStreamRightsHolder.CallOpts)
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) DEFAULTSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _LvStreamRightsHolder.contract.Call(opts, out, "DEFAULT_SEE")
	return *ret0, err
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) DEFAULTSEE() (uint8, error) {
	return _LvStreamRightsHolder.Contract.DEFAULTSEE(&_LvStreamRightsHolder.CallOpts)
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_LvStreamRightsHolder *LvStreamRightsHolderCallerSession) DEFAULTSEE() (uint8, error) {
	return _LvStreamRightsHolder.Contract.DEFAULTSEE(&_LvStreamRightsHolder.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LvStreamRightsHolder.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) ContentSpace() (common.Address, error) {
	return _LvStreamRightsHolder.Contract.ContentSpace(&_LvStreamRightsHolder.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_LvStreamRightsHolder *LvStreamRightsHolderCallerSession) ContentSpace() (common.Address, error) {
	return _LvStreamRightsHolder.Contract.ContentSpace(&_LvStreamRightsHolder.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LvStreamRightsHolder.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) Creator() (common.Address, error) {
	return _LvStreamRightsHolder.Contract.Creator(&_LvStreamRightsHolder.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_LvStreamRightsHolder *LvStreamRightsHolderCallerSession) Creator() (common.Address, error) {
	return _LvStreamRightsHolder.Contract.Creator(&_LvStreamRightsHolder.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LvStreamRightsHolder.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) Owner() (common.Address, error) {
	return _LvStreamRightsHolder.Contract.Owner(&_LvStreamRightsHolder.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_LvStreamRightsHolder *LvStreamRightsHolderCallerSession) Owner() (common.Address, error) {
	return _LvStreamRightsHolder.Contract.Owner(&_LvStreamRightsHolder.CallOpts)
}

// RecordingStreams is a free data retrieval call binding the contract method 0x250fc29a.
//
// Solidity: function recordingStreams(address ) constant returns(bool)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) RecordingStreams(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _LvStreamRightsHolder.contract.Call(opts, out, "recordingStreams", arg0)
	return *ret0, err
}

// RecordingStreams is a free data retrieval call binding the contract method 0x250fc29a.
//
// Solidity: function recordingStreams(address ) constant returns(bool)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) RecordingStreams(arg0 common.Address) (bool, error) {
	return _LvStreamRightsHolder.Contract.RecordingStreams(&_LvStreamRightsHolder.CallOpts, arg0)
}

// RecordingStreams is a free data retrieval call binding the contract method 0x250fc29a.
//
// Solidity: function recordingStreams(address ) constant returns(bool)
func (_LvStreamRightsHolder *LvStreamRightsHolderCallerSession) RecordingStreams(arg0 common.Address) (bool, error) {
	return _LvStreamRightsHolder.Contract.RecordingStreams(&_LvStreamRightsHolder.CallOpts, arg0)
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) constant returns(uint8, uint8, uint8, uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) RunAccessInfo(opts *bind.CallOpts, arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(uint8)
		ret3 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _LvStreamRightsHolder.contract.Call(opts, out, "runAccessInfo", arg0, arg1, arg2)
	return *ret0, *ret1, *ret2, *ret3, err
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) constant returns(uint8, uint8, uint8, uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) RunAccessInfo(arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	return _LvStreamRightsHolder.Contract.RunAccessInfo(&_LvStreamRightsHolder.CallOpts, arg0, arg1, arg2)
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) constant returns(uint8, uint8, uint8, uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderCallerSession) RunAccessInfo(arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	return _LvStreamRightsHolder.Contract.RunAccessInfo(&_LvStreamRightsHolder.CallOpts, arg0, arg1, arg2)
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) RunDescribeStatus(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _LvStreamRightsHolder.contract.Call(opts, out, "runDescribeStatus", arg0)
	return *ret0, err
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) RunDescribeStatus(arg0 *big.Int) ([32]byte, error) {
	return _LvStreamRightsHolder.Contract.RunDescribeStatus(&_LvStreamRightsHolder.CallOpts, arg0)
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_LvStreamRightsHolder *LvStreamRightsHolderCallerSession) RunDescribeStatus(arg0 *big.Int) ([32]byte, error) {
	return _LvStreamRightsHolder.Contract.RunDescribeStatus(&_LvStreamRightsHolder.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _LvStreamRightsHolder.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) Version() ([32]byte, error) {
	return _LvStreamRightsHolder.Contract.Version(&_LvStreamRightsHolder.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_LvStreamRightsHolder *LvStreamRightsHolderCallerSession) Version() ([32]byte, error) {
	return _LvStreamRightsHolder.Contract.Version(&_LvStreamRightsHolder.CallOpts)
}

// AuthorizeRecording is a paid mutator transaction binding the contract method 0x6135c504.
//
// Solidity: function authorizeRecording(address stream, address accessor) returns(bool)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) AuthorizeRecording(opts *bind.TransactOpts, stream common.Address, accessor common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "authorizeRecording", stream, accessor)
}

// AuthorizeRecording is a paid mutator transaction binding the contract method 0x6135c504.
//
// Solidity: function authorizeRecording(address stream, address accessor) returns(bool)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) AuthorizeRecording(stream common.Address, accessor common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.AuthorizeRecording(&_LvStreamRightsHolder.TransactOpts, stream, accessor)
}

// AuthorizeRecording is a paid mutator transaction binding the contract method 0x6135c504.
//
// Solidity: function authorizeRecording(address stream, address accessor) returns(bool)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorSession) AuthorizeRecording(stream common.Address, accessor common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.AuthorizeRecording(&_LvStreamRightsHolder.TransactOpts, stream, accessor)
}

// DisableRecording is a paid mutator transaction binding the contract method 0x20abe3ae.
//
// Solidity: function disableRecording(address stream) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) DisableRecording(opts *bind.TransactOpts, stream common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "disableRecording", stream)
}

// DisableRecording is a paid mutator transaction binding the contract method 0x20abe3ae.
//
// Solidity: function disableRecording(address stream) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) DisableRecording(stream common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.DisableRecording(&_LvStreamRightsHolder.TransactOpts, stream)
}

// DisableRecording is a paid mutator transaction binding the contract method 0x20abe3ae.
//
// Solidity: function disableRecording(address stream) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorSession) DisableRecording(stream common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.DisableRecording(&_LvStreamRightsHolder.TransactOpts, stream)
}

// EnableRecording is a paid mutator transaction binding the contract method 0x514eecff.
//
// Solidity: function enableRecording(address stream) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) EnableRecording(opts *bind.TransactOpts, stream common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "enableRecording", stream)
}

// EnableRecording is a paid mutator transaction binding the contract method 0x514eecff.
//
// Solidity: function enableRecording(address stream) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) EnableRecording(stream common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.EnableRecording(&_LvStreamRightsHolder.TransactOpts, stream)
}

// EnableRecording is a paid mutator transaction binding the contract method 0x514eecff.
//
// Solidity: function enableRecording(address stream) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorSession) EnableRecording(stream common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.EnableRecording(&_LvStreamRightsHolder.TransactOpts, stream)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) Kill() (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.Kill(&_LvStreamRightsHolder.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorSession) Kill() (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.Kill(&_LvStreamRightsHolder.TransactOpts)
}

// RegisterStream is a paid mutator transaction binding the contract method 0xad284b12.
//
// Solidity: function registerStream(address stream) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RegisterStream(opts *bind.TransactOpts, stream common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "registerStream", stream)
}

// RegisterStream is a paid mutator transaction binding the contract method 0xad284b12.
//
// Solidity: function registerStream(address stream) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) RegisterStream(stream common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RegisterStream(&_LvStreamRightsHolder.TransactOpts, stream)
}

// RegisterStream is a paid mutator transaction binding the contract method 0xad284b12.
//
// Solidity: function registerStream(address stream) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorSession) RegisterStream(stream common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RegisterStream(&_LvStreamRightsHolder.TransactOpts, stream)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 , uint8 , bytes32[] , address[] ) returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunAccess(opts *bind.TransactOpts, arg0 *big.Int, arg1 uint8, arg2 [][32]byte, arg3 []common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runAccess", arg0, arg1, arg2, arg3)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 , uint8 , bytes32[] , address[] ) returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) RunAccess(arg0 *big.Int, arg1 uint8, arg2 [][32]byte, arg3 []common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RunAccess(&_LvStreamRightsHolder.TransactOpts, arg0, arg1, arg2, arg3)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 , uint8 , bytes32[] , address[] ) returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorSession) RunAccess(arg0 *big.Int, arg1 uint8, arg2 [][32]byte, arg3 []common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RunAccess(&_LvStreamRightsHolder.TransactOpts, arg0, arg1, arg2, arg3)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunCreate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runCreate")
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) RunCreate() (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RunCreate(&_LvStreamRightsHolder.TransactOpts)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorSession) RunCreate() (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RunCreate(&_LvStreamRightsHolder.TransactOpts)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 , uint256 ) returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunFinalize(opts *bind.TransactOpts, arg0 *big.Int, arg1 *big.Int) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runFinalize", arg0, arg1)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 , uint256 ) returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) RunFinalize(arg0 *big.Int, arg1 *big.Int) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RunFinalize(&_LvStreamRightsHolder.TransactOpts, arg0, arg1)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 , uint256 ) returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorSession) RunFinalize(arg0 *big.Int, arg1 *big.Int) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RunFinalize(&_LvStreamRightsHolder.TransactOpts, arg0, arg1)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunFinalizeExt(opts *bind.TransactOpts, requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runFinalizeExt", requestID, score_pct, originator)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) RunFinalizeExt(requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RunFinalizeExt(&_LvStreamRightsHolder.TransactOpts, requestID, score_pct, originator)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorSession) RunFinalizeExt(requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RunFinalizeExt(&_LvStreamRightsHolder.TransactOpts, requestID, score_pct, originator)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunGrant(opts *bind.TransactOpts, arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runGrant", arg0, arg1)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) RunGrant(arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RunGrant(&_LvStreamRightsHolder.TransactOpts, arg0, arg1)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorSession) RunGrant(arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RunGrant(&_LvStreamRightsHolder.TransactOpts, arg0, arg1)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunKill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runKill")
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) RunKill() (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RunKill(&_LvStreamRightsHolder.TransactOpts)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorSession) RunKill() (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RunKill(&_LvStreamRightsHolder.TransactOpts)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunStatusChange(opts *bind.TransactOpts, proposed_status_code *big.Int) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runStatusChange", proposed_status_code)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) RunStatusChange(proposed_status_code *big.Int) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RunStatusChange(&_LvStreamRightsHolder.TransactOpts, proposed_status_code)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorSession) RunStatusChange(proposed_status_code *big.Int) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.RunStatusChange(&_LvStreamRightsHolder.TransactOpts, proposed_status_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.TransferCreatorship(&_LvStreamRightsHolder.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.TransferCreatorship(&_LvStreamRightsHolder.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.TransferOwnership(&_LvStreamRightsHolder.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.Contract.TransferOwnership(&_LvStreamRightsHolder.TransactOpts, newOwner)
}

// LvStreamRightsHolderAuthorizeRecordingIterator is returned from FilterAuthorizeRecording and is used to iterate over the raw logs and unpacked data for AuthorizeRecording events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderAuthorizeRecordingIterator struct {
	Event *LvStreamRightsHolderAuthorizeRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderAuthorizeRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderAuthorizeRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderAuthorizeRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderAuthorizeRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderAuthorizeRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderAuthorizeRecording represents a AuthorizeRecording event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderAuthorizeRecording struct {
	Timestamp    *big.Int
	Stream       common.Address
	Accessor     common.Address
	RightsHolder bool
	Provider     bool
	Membership   bool
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAuthorizeRecording is a free log retrieval operation binding the contract event 0xb72dd3ed580fe54dae87f5560d5617f1425b22e33e0a8e6ca80bf5cca9505535.
//
// Solidity: event AuthorizeRecording(uint256 timestamp, address stream, address accessor, bool rightsHolder, bool provider, bool membership)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterAuthorizeRecording(opts *bind.FilterOpts) (*LvStreamRightsHolderAuthorizeRecordingIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "AuthorizeRecording")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderAuthorizeRecordingIterator{contract: _LvStreamRightsHolder.contract, event: "AuthorizeRecording", logs: logs, sub: sub}, nil
}

// WatchAuthorizeRecording is a free log subscription operation binding the contract event 0xb72dd3ed580fe54dae87f5560d5617f1425b22e33e0a8e6ca80bf5cca9505535.
//
// Solidity: event AuthorizeRecording(uint256 timestamp, address stream, address accessor, bool rightsHolder, bool provider, bool membership)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchAuthorizeRecording(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderAuthorizeRecording) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "AuthorizeRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderAuthorizeRecording)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "AuthorizeRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorizeRecording is a log parse operation binding the contract event 0xb72dd3ed580fe54dae87f5560d5617f1425b22e33e0a8e6ca80bf5cca9505535.
//
// Solidity: event AuthorizeRecording(uint256 timestamp, address stream, address accessor, bool rightsHolder, bool provider, bool membership)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseAuthorizeRecording(log types.Log) (*LvStreamRightsHolderAuthorizeRecording, error) {
	event := new(LvStreamRightsHolderAuthorizeRecording)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "AuthorizeRecording", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderDisableRecordingIterator is returned from FilterDisableRecording and is used to iterate over the raw logs and unpacked data for DisableRecording events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderDisableRecordingIterator struct {
	Event *LvStreamRightsHolderDisableRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderDisableRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderDisableRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderDisableRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderDisableRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderDisableRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderDisableRecording represents a DisableRecording event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderDisableRecording struct {
	Timestamp *big.Int
	Stream    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDisableRecording is a free log retrieval operation binding the contract event 0xaeba60bf43bc8bad9685cf80e62ae6d5cd753813786f1821576545517a3e49cb.
//
// Solidity: event DisableRecording(uint256 timestamp, address stream)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterDisableRecording(opts *bind.FilterOpts) (*LvStreamRightsHolderDisableRecordingIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "DisableRecording")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderDisableRecordingIterator{contract: _LvStreamRightsHolder.contract, event: "DisableRecording", logs: logs, sub: sub}, nil
}

// WatchDisableRecording is a free log subscription operation binding the contract event 0xaeba60bf43bc8bad9685cf80e62ae6d5cd753813786f1821576545517a3e49cb.
//
// Solidity: event DisableRecording(uint256 timestamp, address stream)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchDisableRecording(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderDisableRecording) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "DisableRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderDisableRecording)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "DisableRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisableRecording is a log parse operation binding the contract event 0xaeba60bf43bc8bad9685cf80e62ae6d5cd753813786f1821576545517a3e49cb.
//
// Solidity: event DisableRecording(uint256 timestamp, address stream)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseDisableRecording(log types.Log) (*LvStreamRightsHolderDisableRecording, error) {
	event := new(LvStreamRightsHolderDisableRecording)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "DisableRecording", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderEnableRecordingIterator is returned from FilterEnableRecording and is used to iterate over the raw logs and unpacked data for EnableRecording events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderEnableRecordingIterator struct {
	Event *LvStreamRightsHolderEnableRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderEnableRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderEnableRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderEnableRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderEnableRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderEnableRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderEnableRecording represents a EnableRecording event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderEnableRecording struct {
	Timestamp *big.Int
	Stream    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterEnableRecording is a free log retrieval operation binding the contract event 0xc9861f7825199418647d352092481fbd508dc7420e7a6e2f0f41be183d6e2c8d.
//
// Solidity: event EnableRecording(uint256 timestamp, address stream)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterEnableRecording(opts *bind.FilterOpts) (*LvStreamRightsHolderEnableRecordingIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "EnableRecording")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderEnableRecordingIterator{contract: _LvStreamRightsHolder.contract, event: "EnableRecording", logs: logs, sub: sub}, nil
}

// WatchEnableRecording is a free log subscription operation binding the contract event 0xc9861f7825199418647d352092481fbd508dc7420e7a6e2f0f41be183d6e2c8d.
//
// Solidity: event EnableRecording(uint256 timestamp, address stream)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchEnableRecording(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderEnableRecording) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "EnableRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderEnableRecording)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "EnableRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEnableRecording is a log parse operation binding the contract event 0xc9861f7825199418647d352092481fbd508dc7420e7a6e2f0f41be183d6e2c8d.
//
// Solidity: event EnableRecording(uint256 timestamp, address stream)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseEnableRecording(log types.Log) (*LvStreamRightsHolderEnableRecording, error) {
	event := new(LvStreamRightsHolderEnableRecording)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "EnableRecording", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogIterator struct {
	Event *LvStreamRightsHolderLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderLog represents a Log event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterLog(opts *bind.FilterOpts) (*LvStreamRightsHolderLogIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderLogIterator{contract: _LvStreamRightsHolder.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderLog) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderLog)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseLog(log types.Log) (*LvStreamRightsHolderLog, error) {
	event := new(LvStreamRightsHolderLog)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogAddressIterator struct {
	Event *LvStreamRightsHolderLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderLogAddress represents a LogAddress event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterLogAddress(opts *bind.FilterOpts) (*LvStreamRightsHolderLogAddressIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderLogAddressIterator{contract: _LvStreamRightsHolder.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderLogAddress) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderLogAddress)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseLogAddress(log types.Log) (*LvStreamRightsHolderLogAddress, error) {
	event := new(LvStreamRightsHolderLogAddress)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogBoolIterator struct {
	Event *LvStreamRightsHolderLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderLogBool represents a LogBool event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterLogBool(opts *bind.FilterOpts) (*LvStreamRightsHolderLogBoolIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderLogBoolIterator{contract: _LvStreamRightsHolder.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderLogBool) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderLogBool)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseLogBool(log types.Log) (*LvStreamRightsHolderLogBool, error) {
	event := new(LvStreamRightsHolderLogBool)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogBytes32Iterator struct {
	Event *LvStreamRightsHolderLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderLogBytes32 represents a LogBytes32 event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*LvStreamRightsHolderLogBytes32Iterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderLogBytes32Iterator{contract: _LvStreamRightsHolder.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderLogBytes32) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderLogBytes32)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseLogBytes32(log types.Log) (*LvStreamRightsHolderLogBytes32, error) {
	event := new(LvStreamRightsHolderLogBytes32)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogInt256Iterator struct {
	Event *LvStreamRightsHolderLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderLogInt256 represents a LogInt256 event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterLogInt256(opts *bind.FilterOpts) (*LvStreamRightsHolderLogInt256Iterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderLogInt256Iterator{contract: _LvStreamRightsHolder.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderLogInt256) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderLogInt256)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseLogInt256(log types.Log) (*LvStreamRightsHolderLogInt256, error) {
	event := new(LvStreamRightsHolderLogInt256)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogPaymentIterator struct {
	Event *LvStreamRightsHolderLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderLogPayment represents a LogPayment event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogPayment struct {
	Label  string
	Payee  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterLogPayment(opts *bind.FilterOpts) (*LvStreamRightsHolderLogPaymentIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderLogPaymentIterator{contract: _LvStreamRightsHolder.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderLogPayment) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderLogPayment)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseLogPayment(log types.Log) (*LvStreamRightsHolderLogPayment, error) {
	event := new(LvStreamRightsHolderLogPayment)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogUint256Iterator struct {
	Event *LvStreamRightsHolderLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderLogUint256 represents a LogUint256 event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterLogUint256(opts *bind.FilterOpts) (*LvStreamRightsHolderLogUint256Iterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderLogUint256Iterator{contract: _LvStreamRightsHolder.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderLogUint256) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderLogUint256)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseLogUint256(log types.Log) (*LvStreamRightsHolderLogUint256, error) {
	event := new(LvStreamRightsHolderLogUint256)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderRunAccessIterator is returned from FilterRunAccess and is used to iterate over the raw logs and unpacked data for RunAccess events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunAccessIterator struct {
	Event *LvStreamRightsHolderRunAccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderRunAccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderRunAccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderRunAccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderRunAccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderRunAccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderRunAccess represents a RunAccess event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunAccess struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunAccess is a free log retrieval operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterRunAccess(opts *bind.FilterOpts) (*LvStreamRightsHolderRunAccessIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderRunAccessIterator{contract: _LvStreamRightsHolder.contract, event: "RunAccess", logs: logs, sub: sub}, nil
}

// WatchRunAccess is a free log subscription operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchRunAccess(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderRunAccess) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderRunAccess)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunAccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccess is a log parse operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseRunAccess(log types.Log) (*LvStreamRightsHolderRunAccess, error) {
	event := new(LvStreamRightsHolderRunAccess)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunAccess", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderRunAccessChargeIterator is returned from FilterRunAccessCharge and is used to iterate over the raw logs and unpacked data for RunAccessCharge events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunAccessChargeIterator struct {
	Event *LvStreamRightsHolderRunAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderRunAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderRunAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderRunAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderRunAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderRunAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderRunAccessCharge represents a RunAccessCharge event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunAccessCharge struct {
	Level                 uint8
	CalculateAccessCharge *big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterRunAccessCharge is a free log retrieval operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterRunAccessCharge(opts *bind.FilterOpts) (*LvStreamRightsHolderRunAccessChargeIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderRunAccessChargeIterator{contract: _LvStreamRightsHolder.contract, event: "RunAccessCharge", logs: logs, sub: sub}, nil
}

// WatchRunAccessCharge is a free log subscription operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchRunAccessCharge(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderRunAccessCharge) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderRunAccessCharge)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccessCharge is a log parse operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseRunAccessCharge(log types.Log) (*LvStreamRightsHolderRunAccessCharge, error) {
	event := new(LvStreamRightsHolderRunAccessCharge)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderRunCreateIterator is returned from FilterRunCreate and is used to iterate over the raw logs and unpacked data for RunCreate events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunCreateIterator struct {
	Event *LvStreamRightsHolderRunCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderRunCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderRunCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderRunCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderRunCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderRunCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderRunCreate represents a RunCreate event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunCreate struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunCreate is a free log retrieval operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterRunCreate(opts *bind.FilterOpts) (*LvStreamRightsHolderRunCreateIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderRunCreateIterator{contract: _LvStreamRightsHolder.contract, event: "RunCreate", logs: logs, sub: sub}, nil
}

// WatchRunCreate is a free log subscription operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchRunCreate(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderRunCreate) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderRunCreate)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunCreate is a log parse operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseRunCreate(log types.Log) (*LvStreamRightsHolderRunCreate, error) {
	event := new(LvStreamRightsHolderRunCreate)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunCreate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderRunFinalizeIterator is returned from FilterRunFinalize and is used to iterate over the raw logs and unpacked data for RunFinalize events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunFinalizeIterator struct {
	Event *LvStreamRightsHolderRunFinalize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderRunFinalizeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderRunFinalize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderRunFinalize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderRunFinalizeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderRunFinalizeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderRunFinalize represents a RunFinalize event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunFinalize struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunFinalize is a free log retrieval operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterRunFinalize(opts *bind.FilterOpts) (*LvStreamRightsHolderRunFinalizeIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderRunFinalizeIterator{contract: _LvStreamRightsHolder.contract, event: "RunFinalize", logs: logs, sub: sub}, nil
}

// WatchRunFinalize is a free log subscription operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchRunFinalize(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderRunFinalize) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderRunFinalize)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunFinalize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunFinalize is a log parse operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseRunFinalize(log types.Log) (*LvStreamRightsHolderRunFinalize, error) {
	event := new(LvStreamRightsHolderRunFinalize)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunFinalize", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderRunKillIterator is returned from FilterRunKill and is used to iterate over the raw logs and unpacked data for RunKill events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunKillIterator struct {
	Event *LvStreamRightsHolderRunKill // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderRunKillIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderRunKill)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderRunKill)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderRunKillIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderRunKillIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderRunKill represents a RunKill event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunKill struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunKill is a free log retrieval operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterRunKill(opts *bind.FilterOpts) (*LvStreamRightsHolderRunKillIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderRunKillIterator{contract: _LvStreamRightsHolder.contract, event: "RunKill", logs: logs, sub: sub}, nil
}

// WatchRunKill is a free log subscription operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchRunKill(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderRunKill) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderRunKill)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunKill", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunKill is a log parse operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseRunKill(log types.Log) (*LvStreamRightsHolderRunKill, error) {
	event := new(LvStreamRightsHolderRunKill)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunKill", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LvStreamRightsHolderRunStatusChangeIterator is returned from FilterRunStatusChange and is used to iterate over the raw logs and unpacked data for RunStatusChange events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunStatusChangeIterator struct {
	Event *LvStreamRightsHolderRunStatusChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderRunStatusChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderRunStatusChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderRunStatusChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderRunStatusChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderRunStatusChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderRunStatusChange represents a RunStatusChange event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunStatusChange struct {
	ProposedStatusCode *big.Int
	ReturnStatusCode   *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRunStatusChange is a free log retrieval operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterRunStatusChange(opts *bind.FilterOpts) (*LvStreamRightsHolderRunStatusChangeIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderRunStatusChangeIterator{contract: _LvStreamRightsHolder.contract, event: "RunStatusChange", logs: logs, sub: sub}, nil
}

// WatchRunStatusChange is a free log subscription operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchRunStatusChange(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderRunStatusChange) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderRunStatusChange)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunStatusChange is a log parse operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseRunStatusChange(log types.Log) (*LvStreamRightsHolderRunStatusChange, error) {
	event := new(LvStreamRightsHolderRunStatusChange)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MetaObjectABI is the input ABI used to generate the binding from.
const MetaObjectABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// MetaObjectFuncSigs maps the 4-byte function signature to its string representation.
var MetaObjectFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"ac55c906": "getMeta(bytes)",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"e542b7cb": "putMeta(bytes,bytes)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
}

// MetaObjectBin is the compiled bytecode used for deploying new contracts.
var MetaObjectBin = "0x60806040527f4f776e61626c6532303139303532383139333830304d4c00000000000000000060005560018054600160a060020a0319908116329081179092556002805490911690911790556107728061005a6000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461009a57806341c0e1b5146100cb57806354fd4d50146100e05780636d2e4b1b146101075780638da5cb5b14610128578063ac55c9061461013d578063af570c041461020b578063e542b7cb14610220578063f2fde38b146102b7575b005b3480156100a657600080fd5b506100af6102d8565b60408051600160a060020a039092168252519081900360200190f35b3480156100d757600080fd5b506100986102e7565b3480156100ec57600080fd5b506100f5610323565b60408051918252519081900360200190f35b34801561011357600080fd5b50610098600160a060020a0360043516610329565b34801561013457600080fd5b506100af610384565b34801561014957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101969436949293602493928401919081908401838280828437509497506103939650505050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d05781810151838201526020016101b8565b50505050905090810190601f1680156101fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021757600080fd5b506100af610542565b34801561022c57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261009894369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506105519650505050505050565b3480156102c357600080fd5b50610098600160a060020a0360043516610639565b600154600160a060020a031681565b600254600160a060020a031632148061030a5750600254600160a060020a031633145b151561031557600080fd5b600254600160a060020a0316ff5b60005481565b600154600160a060020a0316321461034057600080fd5b600160a060020a038116151561035557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b60606000806020845111151561044d57505081518083015160008181526004602090815260409182902080548351601f6002610100600185161502600019019093169290920491820184900484028101840190945280845293949390918301828280156104415780601f1061041657610100808354040283529160200191610441565b820191906000526020600020905b81548152906001019060200180831161042457829003601f168201915b5050505050925061053b565b6005846040518082805190602001908083835b6020831061047f5780518252601f199092019160209182019101610460565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156105335780601f1061050857610100808354040283529160200191610533565b820191906000526020600020905b81548152906001019060200180831161051657829003601f168201915b505050505092505b5050919050565b600354600160a060020a031681565b6002546000908190600160a060020a03163214806105795750600254600160a060020a031633145b151561058457600080fd5b83516020106105bd575050815180830151600081815260046020908152604090912084519293926105b7928601906106ab565b50610633565b826005856040518082805190602001908083835b602083106105f05780518252601f1990920191602091820191016105d1565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161063195919491909101925090506106ab565b505b50505050565b600254600160a060020a031632148061065c5750600254600160a060020a031633145b151561066757600080fd5b600160a060020a038116151561067c57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106106ec57805160ff1916838001178555610719565b82800160010185558215610719579182015b828111156107195782518255916020019190600101906106fe565b50610725929150610729565b5090565b61074391905b80821115610725576000815560010161072f565b905600a165627a7a723058209fbf03dedf3500733c67e56e8a53c5bdfa4c6775d3917737178e26735385fb580029"

// DeployMetaObject deploys a new Ethereum contract, binding an instance of MetaObject to it.
func DeployMetaObject(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MetaObject, error) {
	parsed, err := abi.JSON(strings.NewReader(MetaObjectABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MetaObjectBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MetaObject{MetaObjectCaller: MetaObjectCaller{contract: contract}, MetaObjectTransactor: MetaObjectTransactor{contract: contract}, MetaObjectFilterer: MetaObjectFilterer{contract: contract}}, nil
}

// MetaObject is an auto generated Go binding around an Ethereum contract.
type MetaObject struct {
	MetaObjectCaller     // Read-only binding to the contract
	MetaObjectTransactor // Write-only binding to the contract
	MetaObjectFilterer   // Log filterer for contract events
}

// MetaObjectCaller is an auto generated read-only Go binding around an Ethereum contract.
type MetaObjectCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaObjectTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MetaObjectTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaObjectFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MetaObjectFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaObjectSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MetaObjectSession struct {
	Contract     *MetaObject       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MetaObjectCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MetaObjectCallerSession struct {
	Contract *MetaObjectCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MetaObjectTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MetaObjectTransactorSession struct {
	Contract     *MetaObjectTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MetaObjectRaw is an auto generated low-level Go binding around an Ethereum contract.
type MetaObjectRaw struct {
	Contract *MetaObject // Generic contract binding to access the raw methods on
}

// MetaObjectCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MetaObjectCallerRaw struct {
	Contract *MetaObjectCaller // Generic read-only contract binding to access the raw methods on
}

// MetaObjectTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MetaObjectTransactorRaw struct {
	Contract *MetaObjectTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMetaObject creates a new instance of MetaObject, bound to a specific deployed contract.
func NewMetaObject(address common.Address, backend bind.ContractBackend) (*MetaObject, error) {
	contract, err := bindMetaObject(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MetaObject{MetaObjectCaller: MetaObjectCaller{contract: contract}, MetaObjectTransactor: MetaObjectTransactor{contract: contract}, MetaObjectFilterer: MetaObjectFilterer{contract: contract}}, nil
}

// NewMetaObjectCaller creates a new read-only instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectCaller(address common.Address, caller bind.ContractCaller) (*MetaObjectCaller, error) {
	contract, err := bindMetaObject(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MetaObjectCaller{contract: contract}, nil
}

// NewMetaObjectTransactor creates a new write-only instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectTransactor(address common.Address, transactor bind.ContractTransactor) (*MetaObjectTransactor, error) {
	contract, err := bindMetaObject(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MetaObjectTransactor{contract: contract}, nil
}

// NewMetaObjectFilterer creates a new log filterer instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectFilterer(address common.Address, filterer bind.ContractFilterer) (*MetaObjectFilterer, error) {
	contract, err := bindMetaObject(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MetaObjectFilterer{contract: contract}, nil
}

// bindMetaObject binds a generic wrapper to an already deployed contract.
func bindMetaObject(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MetaObjectABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MetaObject *MetaObjectRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MetaObject.Contract.MetaObjectCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MetaObject *MetaObjectRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetaObject.Contract.MetaObjectTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MetaObject *MetaObjectRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MetaObject.Contract.MetaObjectTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MetaObject *MetaObjectCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MetaObject.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MetaObject *MetaObjectTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetaObject.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MetaObject *MetaObjectTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MetaObject.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_MetaObject *MetaObjectCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_MetaObject *MetaObjectSession) ContentSpace() (common.Address, error) {
	return _MetaObject.Contract.ContentSpace(&_MetaObject.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_MetaObject *MetaObjectCallerSession) ContentSpace() (common.Address, error) {
	return _MetaObject.Contract.ContentSpace(&_MetaObject.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_MetaObject *MetaObjectCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_MetaObject *MetaObjectSession) Creator() (common.Address, error) {
	return _MetaObject.Contract.Creator(&_MetaObject.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_MetaObject *MetaObjectCallerSession) Creator() (common.Address, error) {
	return _MetaObject.Contract.Creator(&_MetaObject.CallOpts)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_MetaObject *MetaObjectCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_MetaObject *MetaObjectSession) GetMeta(key []byte) ([]byte, error) {
	return _MetaObject.Contract.GetMeta(&_MetaObject.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_MetaObject *MetaObjectCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _MetaObject.Contract.GetMeta(&_MetaObject.CallOpts, key)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_MetaObject *MetaObjectCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_MetaObject *MetaObjectSession) Owner() (common.Address, error) {
	return _MetaObject.Contract.Owner(&_MetaObject.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_MetaObject *MetaObjectCallerSession) Owner() (common.Address, error) {
	return _MetaObject.Contract.Owner(&_MetaObject.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_MetaObject *MetaObjectCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_MetaObject *MetaObjectSession) Version() ([32]byte, error) {
	return _MetaObject.Contract.Version(&_MetaObject.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_MetaObject *MetaObjectCallerSession) Version() ([32]byte, error) {
	return _MetaObject.Contract.Version(&_MetaObject.CallOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_MetaObject *MetaObjectTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_MetaObject *MetaObjectSession) Kill() (*types.Transaction, error) {
	return _MetaObject.Contract.Kill(&_MetaObject.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_MetaObject *MetaObjectTransactorSession) Kill() (*types.Transaction, error) {
	return _MetaObject.Contract.Kill(&_MetaObject.TransactOpts)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_MetaObject *MetaObjectTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_MetaObject *MetaObjectSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _MetaObject.Contract.PutMeta(&_MetaObject.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_MetaObject *MetaObjectTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _MetaObject.Contract.PutMeta(&_MetaObject.TransactOpts, key, value)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_MetaObject *MetaObjectTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_MetaObject *MetaObjectSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _MetaObject.Contract.TransferCreatorship(&_MetaObject.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_MetaObject *MetaObjectTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _MetaObject.Contract.TransferCreatorship(&_MetaObject.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MetaObject *MetaObjectTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MetaObject *MetaObjectSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MetaObject.Contract.TransferOwnership(&_MetaObject.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MetaObject *MetaObjectTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MetaObject.Contract.TransferOwnership(&_MetaObject.TransactOpts, newOwner)
}

// NodeABI is the input ABI used to generate the binding from.
const NodeABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"label\",\"type\":\"string\"}],\"name\":\"log\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"}]"

// NodeFuncSigs maps the 4-byte function signature to its string representation.
var NodeFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"41304fac": "log(string)",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
}

// NodeBin is the compiled bytecode used for deploying new contracts.
var NodeBin = "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f4e6f646532303139303331353130353130304d4c00000000000000000000000060045560018054600160a060020a0319908116329081179092556002805490911690911790556103f38061007e6000396000f30060806040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461008f57806341304fac146100c057806341c0e1b51461011957806354fd4d501461012e5780636d2e4b1b146101555780638da5cb5b14610176578063af570c041461018b578063f2fde38b146101a0575b005b34801561009b57600080fd5b506100a46101c1565b60408051600160a060020a039092168252519081900360200190f35b3480156100cc57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261008d9436949293602493928401919081908401838280828437509497506101d09650505050505050565b34801561012557600080fd5b5061008d61029a565b34801561013a57600080fd5b506101436102d6565b60408051918252519081900360200190f35b34801561016157600080fd5b5061008d600160a060020a03600435166102dc565b34801561018257600080fd5b506100a4610337565b34801561019757600080fd5b506100a4610346565b3480156101ac57600080fd5b5061008d600160a060020a0360043516610355565b600154600160a060020a031681565b600254600160a060020a03163214806101f35750600254600160a060020a031633145b15156101fe57600080fd5b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025d578181015183820152602001610245565b50505050905090810190601f16801561028a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b600254600160a060020a03163214806102bd5750600254600160a060020a031633145b15156102c857600080fd5b600254600160a060020a0316ff5b60045481565b600154600160a060020a031632146102f357600080fd5b600160a060020a038116151561030857600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600354600160a060020a031681565b600254600160a060020a03163214806103785750600254600160a060020a031633145b151561038357600080fd5b600160a060020a038116151561039857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820a0cadc6a40fa46faebaa611e56e79afcbcdd3066d57a7976356003cfb35e2d530029"

// DeployNode deploys a new Ethereum contract, binding an instance of Node to it.
func DeployNode(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Node, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(NodeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Node{NodeCaller: NodeCaller{contract: contract}, NodeTransactor: NodeTransactor{contract: contract}, NodeFilterer: NodeFilterer{contract: contract}}, nil
}

// Node is an auto generated Go binding around an Ethereum contract.
type Node struct {
	NodeCaller     // Read-only binding to the contract
	NodeTransactor // Write-only binding to the contract
	NodeFilterer   // Log filterer for contract events
}

// NodeCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodeSession struct {
	Contract     *Node             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodeCallerSession struct {
	Contract *NodeCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// NodeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodeTransactorSession struct {
	Contract     *NodeTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodeRaw struct {
	Contract *Node // Generic contract binding to access the raw methods on
}

// NodeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodeCallerRaw struct {
	Contract *NodeCaller // Generic read-only contract binding to access the raw methods on
}

// NodeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodeTransactorRaw struct {
	Contract *NodeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNode creates a new instance of Node, bound to a specific deployed contract.
func NewNode(address common.Address, backend bind.ContractBackend) (*Node, error) {
	contract, err := bindNode(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Node{NodeCaller: NodeCaller{contract: contract}, NodeTransactor: NodeTransactor{contract: contract}, NodeFilterer: NodeFilterer{contract: contract}}, nil
}

// NewNodeCaller creates a new read-only instance of Node, bound to a specific deployed contract.
func NewNodeCaller(address common.Address, caller bind.ContractCaller) (*NodeCaller, error) {
	contract, err := bindNode(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeCaller{contract: contract}, nil
}

// NewNodeTransactor creates a new write-only instance of Node, bound to a specific deployed contract.
func NewNodeTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeTransactor, error) {
	contract, err := bindNode(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeTransactor{contract: contract}, nil
}

// NewNodeFilterer creates a new log filterer instance of Node, bound to a specific deployed contract.
func NewNodeFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeFilterer, error) {
	contract, err := bindNode(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeFilterer{contract: contract}, nil
}

// bindNode binds a generic wrapper to an already deployed contract.
func bindNode(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Node *NodeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Node.Contract.NodeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Node *NodeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Node.Contract.NodeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Node *NodeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Node.Contract.NodeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Node *NodeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Node.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Node *NodeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Node.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Node *NodeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Node.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Node *NodeCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Node.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Node *NodeSession) ContentSpace() (common.Address, error) {
	return _Node.Contract.ContentSpace(&_Node.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Node *NodeCallerSession) ContentSpace() (common.Address, error) {
	return _Node.Contract.ContentSpace(&_Node.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Node *NodeCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Node.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Node *NodeSession) Creator() (common.Address, error) {
	return _Node.Contract.Creator(&_Node.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Node *NodeCallerSession) Creator() (common.Address, error) {
	return _Node.Contract.Creator(&_Node.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Node *NodeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Node.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Node *NodeSession) Owner() (common.Address, error) {
	return _Node.Contract.Owner(&_Node.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Node *NodeCallerSession) Owner() (common.Address, error) {
	return _Node.Contract.Owner(&_Node.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Node *NodeCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Node.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Node *NodeSession) Version() ([32]byte, error) {
	return _Node.Contract.Version(&_Node.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Node *NodeCallerSession) Version() ([32]byte, error) {
	return _Node.Contract.Version(&_Node.CallOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Node *NodeTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Node *NodeSession) Kill() (*types.Transaction, error) {
	return _Node.Contract.Kill(&_Node.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Node *NodeTransactorSession) Kill() (*types.Transaction, error) {
	return _Node.Contract.Kill(&_Node.TransactOpts)
}

// Log is a paid mutator transaction binding the contract method 0x41304fac.
//
// Solidity: function log(string label) returns()
func (_Node *NodeTransactor) Log(opts *bind.TransactOpts, label string) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "log", label)
}

// Log is a paid mutator transaction binding the contract method 0x41304fac.
//
// Solidity: function log(string label) returns()
func (_Node *NodeSession) Log(label string) (*types.Transaction, error) {
	return _Node.Contract.Log(&_Node.TransactOpts, label)
}

// Log is a paid mutator transaction binding the contract method 0x41304fac.
//
// Solidity: function log(string label) returns()
func (_Node *NodeTransactorSession) Log(label string) (*types.Transaction, error) {
	return _Node.Contract.Log(&_Node.TransactOpts, label)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Node *NodeTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Node *NodeSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Node.Contract.TransferCreatorship(&_Node.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Node *NodeTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Node.Contract.TransferCreatorship(&_Node.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Node *NodeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Node *NodeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Node.Contract.TransferOwnership(&_Node.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Node *NodeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Node.Contract.TransferOwnership(&_Node.TransactOpts, newOwner)
}

// NodeLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the Node contract.
type NodeLogIterator struct {
	Event *NodeLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLog represents a Log event raised by the Node contract.
type NodeLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) FilterLog(opts *bind.FilterOpts) (*NodeLogIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &NodeLogIterator{contract: _Node.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *NodeLog) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLog)
				if err := _Node.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) ParseLog(log types.Log) (*NodeLog, error) {
	event := new(NodeLog)
	if err := _Node.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the Node contract.
type NodeLogAddressIterator struct {
	Event *NodeLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogAddress represents a LogAddress event raised by the Node contract.
type NodeLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) FilterLogAddress(opts *bind.FilterOpts) (*NodeLogAddressIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &NodeLogAddressIterator{contract: _Node.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *NodeLogAddress) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogAddress)
				if err := _Node.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) ParseLogAddress(log types.Log) (*NodeLogAddress, error) {
	event := new(NodeLogAddress)
	if err := _Node.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the Node contract.
type NodeLogBoolIterator struct {
	Event *NodeLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogBool represents a LogBool event raised by the Node contract.
type NodeLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) FilterLogBool(opts *bind.FilterOpts) (*NodeLogBoolIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &NodeLogBoolIterator{contract: _Node.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *NodeLogBool) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogBool)
				if err := _Node.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) ParseLogBool(log types.Log) (*NodeLogBool, error) {
	event := new(NodeLogBool)
	if err := _Node.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the Node contract.
type NodeLogBytes32Iterator struct {
	Event *NodeLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogBytes32 represents a LogBytes32 event raised by the Node contract.
type NodeLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*NodeLogBytes32Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &NodeLogBytes32Iterator{contract: _Node.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *NodeLogBytes32) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogBytes32)
				if err := _Node.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) ParseLogBytes32(log types.Log) (*NodeLogBytes32, error) {
	event := new(NodeLogBytes32)
	if err := _Node.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the Node contract.
type NodeLogInt256Iterator struct {
	Event *NodeLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogInt256 represents a LogInt256 event raised by the Node contract.
type NodeLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) FilterLogInt256(opts *bind.FilterOpts) (*NodeLogInt256Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &NodeLogInt256Iterator{contract: _Node.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *NodeLogInt256) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogInt256)
				if err := _Node.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) ParseLogInt256(log types.Log) (*NodeLogInt256, error) {
	event := new(NodeLogInt256)
	if err := _Node.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the Node contract.
type NodeLogUint256Iterator struct {
	Event *NodeLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogUint256 represents a LogUint256 event raised by the Node contract.
type NodeLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) FilterLogUint256(opts *bind.FilterOpts) (*NodeLogUint256Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &NodeLogUint256Iterator{contract: _Node.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *NodeLogUint256) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogUint256)
				if err := _Node.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) ParseLogUint256(log types.Log) (*NodeLogUint256, error) {
	event := new(NodeLogUint256)
	if err := _Node.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeSpaceABI is the input ABI used to generate the binding from.
const NodeSpaceABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"submitNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numActiveNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"removeNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"approveNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPendingNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"AddNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"RemoveNode\",\"type\":\"event\"}]"

// NodeSpaceFuncSigs maps the 4-byte function signature to its string representation.
var NodeSpaceFuncSigs = map[string]string{
	"52f82dd8": "activeNodeAddresses(uint256)",
	"5272ae17": "activeNodeLocators(uint256)",
	"64f0f050": "addNode(address,bytes)",
	"dd4c97a0": "approveNode(address)",
	"26683e14": "canNodePublish(address)",
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"43f59ec7": "numActiveNodes()",
	"f41a1587": "numPendingNodes()",
	"8da5cb5b": "owner()",
	"6be9514c": "pendingNodeAddresses(uint256)",
	"69e30ff8": "pendingNodeLocators(uint256)",
	"b2b99ec9": "removeNode(address)",
	"160eee74": "submitNode(bytes)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
}

// NodeSpaceBin is the compiled bytecode used for deploying new contracts.
var NodeSpaceBin = "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f4e6f6465537061636532303139303532383137303130304d4c0000000000000060045560018054600160a060020a0319908116329081179092556002805490911690911790556114718061007e6000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146100fd578063160eee741461012e57806326683e141461018757806341c0e1b5146101bc57806343f59ec7146101d15780635272ae17146101f857806352f82dd81461028557806354fd4d501461029d57806364f0f050146102b257806369e30ff8146103195780636be9514c146103315780636d2e4b1b146103495780638da5cb5b1461036a578063af570c041461037f578063b2b99ec914610394578063dd4c97a0146103b5578063f2fde38b146103d6578063f41a1587146103f7575b005b34801561010957600080fd5b5061011261040c565b60408051600160a060020a039092168252519081900360200190f35b34801561013a57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100fb94369492936024939284019190819084018382808284375094975061041b9650505050505050565b34801561019357600080fd5b506101a8600160a060020a03600435166107db565b604080519115158252519081900360200190f35b3480156101c857600080fd5b506100fb610839565b3480156101dd57600080fd5b506101e6610875565b60408051918252519081900360200190f35b34801561020457600080fd5b5061021060043561087c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024a578181015183820152602001610232565b50505050905090810190601f1680156102775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029157600080fd5b50610112600435610923565b3480156102a957600080fd5b506101e661094b565b3480156102be57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100fb958335600160a060020a03169536956044949193909101919081908401838280828437509497506109519650505050505050565b34801561032557600080fd5b50610210600435610ba3565b34801561033d57600080fd5b50610112600435610bb1565b34801561035557600080fd5b506100fb600160a060020a0360043516610bbf565b34801561037657600080fd5b50610112610c1a565b34801561038b57600080fd5b50610112610c29565b3480156103a057600080fd5b506100fb600160a060020a0360043516610c38565b3480156103c157600080fd5b506100fb600160a060020a0360043516610d08565b3480156103e257600080fd5b506100fb600160a060020a0360043516610f5b565b34801561040357600080fd5b506101e6610fcd565b600154600160a060020a031681565b610551600780548060200260200160405190810160405280929190818152602001828054801561047457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610456575b50505050506008805480602002602001604051908101604052809291908181526020016000905b828210156105465760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156105325780601f1061050757610100808354040283529160200191610532565b820191906000526020600020905b81548152906001019060200180831161051557829003601f168201915b50505050508152602001906001019061049b565b505050503384610fd3565b1561055b57600080fd5b61068660058054806020026020016040519081016040528092919081815260200182805480156105b457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610596575b50505050506006805480602002602001604051908101604052809291908181526020016000905b828210156105465760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156106725780601f1061064757610100808354040283529160200191610672565b820191906000526020600020905b81548152906001019060200180831161065557829003601f168201915b5050505050815260200190600101906105db565b1561069057600080fd5b60075460641161069f57600080fd5b600880546001810180835560009290925282516106e3917ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190602085019061128a565b50506007805460018101825560009182527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801805473ffffffffffffffffffffffffffffffffffffffff19163390811790915560408051828152602081810183815286519383019390935285517fae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d958794926060850192908601918190849084905b8381101561079d578181015183820152602001610785565b50505050905090810190601f1680156107ca5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b6000805b60055481101561082e5782600160a060020a031660058281548110151561080257fe5b600091825260209091200154600160a060020a031614156108265760019150610833565b6001016107df565b600091505b50919050565b600254600160a060020a031632148061085c5750600254600160a060020a031633145b151561086757600080fd5b600254600160a060020a0316ff5b6006545b90565b600680548290811061088a57fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529350909183018282801561091b5780601f106108f05761010080835404028352916020019161091b565b820191906000526020600020905b8154815290600101906020018083116108fe57829003601f168201915b505050505081565b600580548290811061093157fe5b600091825260209091200154600160a060020a0316905081565b60045481565b600254600160a060020a03163214806109745750600254600160a060020a031633145b151561097f57600080fd5b610ab560058054806020026020016040519081016040528092919081815260200182805480156109d857602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116109ba575b50505050506006805480602002602001604051908101604052809291908181526020016000905b82821015610aaa5760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610a965780601f10610a6b57610100808354040283529160200191610a96565b820191906000526020600020905b815481529060010190602001808311610a7957829003601f168201915b5050505050815260200190600101906109ff565b505050508484610fd3565b15610abf57600080fd5b6005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790556006805491820180825560009190915282519091610b5a917ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90910190602085019061128a565b505060408051338152600160a060020a038416602082015281517f2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4929181900390910190a15050565b600880548290811061088a57fe5b600780548290811061093157fe5b600154600160a060020a03163214610bd657600080fd5b600160a060020a0381161515610beb57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600354600160a060020a031681565b600254600090600160a060020a0316321480610c5e5750600254600160a060020a031633145b1515610c6957600080fd5b5060005b600554811015610d045781600160a060020a0316600582815481101515610c9057fe5b600091825260209091200154600160a060020a03161415610cfc57610cb88160056006611121565b60408051338152600160a060020a038416602082015281517f41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d929181900390910190a15b600101610c6d565b5050565b6002546000908190600160a060020a0316321480610d305750600254600160a060020a031633145b1515610d3b57600080fd5b5060009050805b600754811015610f4a5782600160a060020a0316600782815481101515610d6557fe5b600091825260209091200154600160a060020a03161415610f42576005600782815481101515610d9157fe5b600091825260208083209091015483546001810185559383529120909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055600880546006919083908110610deb57fe5b60009182526020808320845460018181018088559686529290942092018054610e2f9493909301929091600261010091831615919091026000190190911604611308565b50507fd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54600782815481101515610e6157fe5b60009182526020909120015460088054600160a060020a039092169184908110610e8757fe5b600091825260209182902060408051600160a060020a0386168152938401818152919092018054600260001961010060018416150201909116049284018390529291606083019084908015610f1d5780601f10610ef257610100808354040283529160200191610f1d565b820191906000526020600020905b815481529060010190602001808311610f0057829003601f168201915b5050935050505060405180910390a1610f398160076008611121565b60019150610f4a565b600101610d42565b811515610f5657600080fd5b505050565b600254600160a060020a0316321480610f7e5750600254600160a060020a031633145b1515610f8957600080fd5b600160a060020a0381161515610f9e57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60085490565b60008084518651141515610fe657600080fd5b5060005b855181101561111357826040518082805190602001908083835b602083106110235780518252601f199092019160209182019101611004565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091208851909350889250849150811061105f57fe5b906020019060200201516040518082805190602001908083835b602083106110985780518252601f199092019160209182019101611079565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614806110fd575083600160a060020a031686828151811015156110e857fe5b90602001906020020151600160a060020a0316145b1561110b5760019150611118565b600101610fea565b600091505b50949350505050565b8154831080156111315750805483105b151561113c57600080fd5b81546000190183146112035780548190600019810190811061115a57fe5b90600052602060002001818481548110151561117257fe5b90600052602060002001908054600181600116156101000203166002900461119b929190611308565b508154829060001981019081106111ae57fe5b6000918252602090912001548254600160a060020a03909116908390859081106111d457fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b80548190600019810190811061121557fe5b90600052602060002001600061122b919061137d565b805461123b8260001983016113c4565b5081548290600019810190811061124e57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916905581546112848360001983016113e8565b50505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112cb57805160ff19168380011785556112f8565b828001600101855582156112f8579182015b828111156112f85782518255916020019190600101906112dd565b50611304929150611408565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061134157805485556112f8565b828001600101855582156112f857600052602060002091601f016020900482015b828111156112f8578254825591600101919060010190611362565b50805460018160011615610100020316600290046000825580601f106113a357506113c1565b601f0160209004906000526020600020908101906113c19190611408565b50565b815481835581811115610f5657600083815260209020610f56918101908301611422565b815481835581811115610f5657600083815260209020610f569181019083015b61087991905b80821115611304576000815560010161140e565b61087991905b8082111561130457600061143c828261137d565b506001016114285600a165627a7a72305820daee00cb0cbbb4d8f7c978b9859338b31034cc94127d896e8539aeb50c6c2ce10029"

// DeployNodeSpace deploys a new Ethereum contract, binding an instance of NodeSpace to it.
func DeployNodeSpace(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodeSpace, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeSpaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(NodeSpaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodeSpace{NodeSpaceCaller: NodeSpaceCaller{contract: contract}, NodeSpaceTransactor: NodeSpaceTransactor{contract: contract}, NodeSpaceFilterer: NodeSpaceFilterer{contract: contract}}, nil
}

// NodeSpace is an auto generated Go binding around an Ethereum contract.
type NodeSpace struct {
	NodeSpaceCaller     // Read-only binding to the contract
	NodeSpaceTransactor // Write-only binding to the contract
	NodeSpaceFilterer   // Log filterer for contract events
}

// NodeSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodeSpaceSession struct {
	Contract     *NodeSpace        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodeSpaceCallerSession struct {
	Contract *NodeSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// NodeSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodeSpaceTransactorSession struct {
	Contract     *NodeSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// NodeSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodeSpaceRaw struct {
	Contract *NodeSpace // Generic contract binding to access the raw methods on
}

// NodeSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodeSpaceCallerRaw struct {
	Contract *NodeSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// NodeSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodeSpaceTransactorRaw struct {
	Contract *NodeSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNodeSpace creates a new instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpace(address common.Address, backend bind.ContractBackend) (*NodeSpace, error) {
	contract, err := bindNodeSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodeSpace{NodeSpaceCaller: NodeSpaceCaller{contract: contract}, NodeSpaceTransactor: NodeSpaceTransactor{contract: contract}, NodeSpaceFilterer: NodeSpaceFilterer{contract: contract}}, nil
}

// NewNodeSpaceCaller creates a new read-only instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceCaller(address common.Address, caller bind.ContractCaller) (*NodeSpaceCaller, error) {
	contract, err := bindNodeSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceCaller{contract: contract}, nil
}

// NewNodeSpaceTransactor creates a new write-only instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeSpaceTransactor, error) {
	contract, err := bindNodeSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceTransactor{contract: contract}, nil
}

// NewNodeSpaceFilterer creates a new log filterer instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeSpaceFilterer, error) {
	contract, err := bindNodeSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceFilterer{contract: contract}, nil
}

// bindNodeSpace binds a generic wrapper to an already deployed contract.
func bindNodeSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeSpace *NodeSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _NodeSpace.Contract.NodeSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeSpace *NodeSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeSpace.Contract.NodeSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeSpace *NodeSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeSpace.Contract.NodeSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeSpace *NodeSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _NodeSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeSpace *NodeSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeSpace *NodeSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeSpace.Contract.contract.Transact(opts, method, params...)
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceCaller) ActiveNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "activeNodeAddresses", arg0)
	return *ret0, err
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceSession) ActiveNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _NodeSpace.Contract.ActiveNodeAddresses(&_NodeSpace.CallOpts, arg0)
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) ActiveNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _NodeSpace.Contract.ActiveNodeAddresses(&_NodeSpace.CallOpts, arg0)
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceCaller) ActiveNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "activeNodeLocators", arg0)
	return *ret0, err
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceSession) ActiveNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _NodeSpace.Contract.ActiveNodeLocators(&_NodeSpace.CallOpts, arg0)
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceCallerSession) ActiveNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _NodeSpace.Contract.ActiveNodeLocators(&_NodeSpace.CallOpts, arg0)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_NodeSpace *NodeSpaceCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "canNodePublish", candidate)
	return *ret0, err
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_NodeSpace *NodeSpaceSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _NodeSpace.Contract.CanNodePublish(&_NodeSpace.CallOpts, candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_NodeSpace *NodeSpaceCallerSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _NodeSpace.Contract.CanNodePublish(&_NodeSpace.CallOpts, candidate)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_NodeSpace *NodeSpaceCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_NodeSpace *NodeSpaceSession) ContentSpace() (common.Address, error) {
	return _NodeSpace.Contract.ContentSpace(&_NodeSpace.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) ContentSpace() (common.Address, error) {
	return _NodeSpace.Contract.ContentSpace(&_NodeSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_NodeSpace *NodeSpaceCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_NodeSpace *NodeSpaceSession) Creator() (common.Address, error) {
	return _NodeSpace.Contract.Creator(&_NodeSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) Creator() (common.Address, error) {
	return _NodeSpace.Contract.Creator(&_NodeSpace.CallOpts)
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceCaller) NumActiveNodes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "numActiveNodes")
	return *ret0, err
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceSession) NumActiveNodes() (*big.Int, error) {
	return _NodeSpace.Contract.NumActiveNodes(&_NodeSpace.CallOpts)
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceCallerSession) NumActiveNodes() (*big.Int, error) {
	return _NodeSpace.Contract.NumActiveNodes(&_NodeSpace.CallOpts)
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceCaller) NumPendingNodes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "numPendingNodes")
	return *ret0, err
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceSession) NumPendingNodes() (*big.Int, error) {
	return _NodeSpace.Contract.NumPendingNodes(&_NodeSpace.CallOpts)
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceCallerSession) NumPendingNodes() (*big.Int, error) {
	return _NodeSpace.Contract.NumPendingNodes(&_NodeSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_NodeSpace *NodeSpaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_NodeSpace *NodeSpaceSession) Owner() (common.Address, error) {
	return _NodeSpace.Contract.Owner(&_NodeSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) Owner() (common.Address, error) {
	return _NodeSpace.Contract.Owner(&_NodeSpace.CallOpts)
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceCaller) PendingNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "pendingNodeAddresses", arg0)
	return *ret0, err
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceSession) PendingNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _NodeSpace.Contract.PendingNodeAddresses(&_NodeSpace.CallOpts, arg0)
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) PendingNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _NodeSpace.Contract.PendingNodeAddresses(&_NodeSpace.CallOpts, arg0)
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceCaller) PendingNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "pendingNodeLocators", arg0)
	return *ret0, err
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceSession) PendingNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _NodeSpace.Contract.PendingNodeLocators(&_NodeSpace.CallOpts, arg0)
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceCallerSession) PendingNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _NodeSpace.Contract.PendingNodeLocators(&_NodeSpace.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_NodeSpace *NodeSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_NodeSpace *NodeSpaceSession) Version() ([32]byte, error) {
	return _NodeSpace.Contract.Version(&_NodeSpace.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_NodeSpace *NodeSpaceCallerSession) Version() ([32]byte, error) {
	return _NodeSpace.Contract.Version(&_NodeSpace.CallOpts)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactor) AddNode(opts *bind.TransactOpts, _nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "addNode", _nodeAddr, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_NodeSpace *NodeSpaceSession) AddNode(_nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.Contract.AddNode(&_NodeSpace.TransactOpts, _nodeAddr, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactorSession) AddNode(_nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.Contract.AddNode(&_NodeSpace.TransactOpts, _nodeAddr, _locator)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactor) ApproveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "approveNode", _nodeAddr)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceSession) ApproveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.ApproveNode(&_NodeSpace.TransactOpts, _nodeAddr)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactorSession) ApproveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.ApproveNode(&_NodeSpace.TransactOpts, _nodeAddr)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_NodeSpace *NodeSpaceTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_NodeSpace *NodeSpaceSession) Kill() (*types.Transaction, error) {
	return _NodeSpace.Contract.Kill(&_NodeSpace.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_NodeSpace *NodeSpaceTransactorSession) Kill() (*types.Transaction, error) {
	return _NodeSpace.Contract.Kill(&_NodeSpace.TransactOpts)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactor) RemoveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "removeNode", _nodeAddr)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceSession) RemoveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.RemoveNode(&_NodeSpace.TransactOpts, _nodeAddr)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactorSession) RemoveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.RemoveNode(&_NodeSpace.TransactOpts, _nodeAddr)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactor) SubmitNode(opts *bind.TransactOpts, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "submitNode", _locator)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_NodeSpace *NodeSpaceSession) SubmitNode(_locator []byte) (*types.Transaction, error) {
	return _NodeSpace.Contract.SubmitNode(&_NodeSpace.TransactOpts, _locator)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactorSession) SubmitNode(_locator []byte) (*types.Transaction, error) {
	return _NodeSpace.Contract.SubmitNode(&_NodeSpace.TransactOpts, _locator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_NodeSpace *NodeSpaceTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_NodeSpace *NodeSpaceSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.TransferCreatorship(&_NodeSpace.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_NodeSpace *NodeSpaceTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.TransferCreatorship(&_NodeSpace.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeSpace *NodeSpaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeSpace *NodeSpaceSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.TransferOwnership(&_NodeSpace.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeSpace *NodeSpaceTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.TransferOwnership(&_NodeSpace.TransactOpts, newOwner)
}

// NodeSpaceAddNodeIterator is returned from FilterAddNode and is used to iterate over the raw logs and unpacked data for AddNode events raised by the NodeSpace contract.
type NodeSpaceAddNodeIterator struct {
	Event *NodeSpaceAddNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceAddNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceAddNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceAddNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceAddNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceAddNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceAddNode represents a AddNode event raised by the NodeSpace contract.
type NodeSpaceAddNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddNode is a free log retrieval operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) FilterAddNode(opts *bind.FilterOpts) (*NodeSpaceAddNodeIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceAddNodeIterator{contract: _NodeSpace.contract, event: "AddNode", logs: logs, sub: sub}, nil
}

// WatchAddNode is a free log subscription operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) WatchAddNode(opts *bind.WatchOpts, sink chan<- *NodeSpaceAddNode) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceAddNode)
				if err := _NodeSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddNode is a log parse operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) ParseAddNode(log types.Log) (*NodeSpaceAddNode, error) {
	event := new(NodeSpaceAddNode)
	if err := _NodeSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeSpaceNodeApprovedIterator is returned from FilterNodeApproved and is used to iterate over the raw logs and unpacked data for NodeApproved events raised by the NodeSpace contract.
type NodeSpaceNodeApprovedIterator struct {
	Event *NodeSpaceNodeApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceNodeApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceNodeApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceNodeApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceNodeApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceNodeApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceNodeApproved represents a NodeApproved event raised by the NodeSpace contract.
type NodeSpaceNodeApproved struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeApproved is a free log retrieval operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) FilterNodeApproved(opts *bind.FilterOpts) (*NodeSpaceNodeApprovedIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceNodeApprovedIterator{contract: _NodeSpace.contract, event: "NodeApproved", logs: logs, sub: sub}, nil
}

// WatchNodeApproved is a free log subscription operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) WatchNodeApproved(opts *bind.WatchOpts, sink chan<- *NodeSpaceNodeApproved) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceNodeApproved)
				if err := _NodeSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeApproved is a log parse operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) ParseNodeApproved(log types.Log) (*NodeSpaceNodeApproved, error) {
	event := new(NodeSpaceNodeApproved)
	if err := _NodeSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeSpaceNodeSubmittedIterator is returned from FilterNodeSubmitted and is used to iterate over the raw logs and unpacked data for NodeSubmitted events raised by the NodeSpace contract.
type NodeSpaceNodeSubmittedIterator struct {
	Event *NodeSpaceNodeSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceNodeSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceNodeSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceNodeSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceNodeSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceNodeSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceNodeSubmitted represents a NodeSubmitted event raised by the NodeSpace contract.
type NodeSpaceNodeSubmitted struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeSubmitted is a free log retrieval operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) FilterNodeSubmitted(opts *bind.FilterOpts) (*NodeSpaceNodeSubmittedIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceNodeSubmittedIterator{contract: _NodeSpace.contract, event: "NodeSubmitted", logs: logs, sub: sub}, nil
}

// WatchNodeSubmitted is a free log subscription operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) WatchNodeSubmitted(opts *bind.WatchOpts, sink chan<- *NodeSpaceNodeSubmitted) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceNodeSubmitted)
				if err := _NodeSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeSubmitted is a log parse operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) ParseNodeSubmitted(log types.Log) (*NodeSpaceNodeSubmitted, error) {
	event := new(NodeSpaceNodeSubmitted)
	if err := _NodeSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeSpaceRemoveNodeIterator is returned from FilterRemoveNode and is used to iterate over the raw logs and unpacked data for RemoveNode events raised by the NodeSpace contract.
type NodeSpaceRemoveNodeIterator struct {
	Event *NodeSpaceRemoveNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceRemoveNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceRemoveNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceRemoveNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceRemoveNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceRemoveNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceRemoveNode represents a RemoveNode event raised by the NodeSpace contract.
type NodeSpaceRemoveNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoveNode is a free log retrieval operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) FilterRemoveNode(opts *bind.FilterOpts) (*NodeSpaceRemoveNodeIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceRemoveNodeIterator{contract: _NodeSpace.contract, event: "RemoveNode", logs: logs, sub: sub}, nil
}

// WatchRemoveNode is a free log subscription operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) WatchRemoveNode(opts *bind.WatchOpts, sink chan<- *NodeSpaceRemoveNode) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceRemoveNode)
				if err := _NodeSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveNode is a log parse operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) ParseRemoveNode(log types.Log) (*NodeSpaceRemoveNode, error) {
	event := new(NodeSpaceRemoveNode)
	if err := _NodeSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OwnableABI is the input ABI used to generate the binding from.
const OwnableABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// OwnableFuncSigs maps the 4-byte function signature to its string representation.
var OwnableFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
}

// OwnableBin is the compiled bytecode used for deploying new contracts.
var OwnableBin = "0x60806040527f4f776e61626c6532303139303532383139333830304d4c00000000000000000060005560018054600160a060020a0319908116329081179092556002805490911690911790556102c58061005a6000396000f3006080604052600436106100825763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461008457806341c0e1b5146100b557806354fd4d50146100ca5780636d2e4b1b146100f15780638da5cb5b14610112578063af570c0414610127578063f2fde38b1461013c575b005b34801561009057600080fd5b5061009961015d565b60408051600160a060020a039092168252519081900360200190f35b3480156100c157600080fd5b5061008261016c565b3480156100d657600080fd5b506100df6101a8565b60408051918252519081900360200190f35b3480156100fd57600080fd5b50610082600160a060020a03600435166101ae565b34801561011e57600080fd5b50610099610209565b34801561013357600080fd5b50610099610218565b34801561014857600080fd5b50610082600160a060020a0360043516610227565b600154600160a060020a031681565b600254600160a060020a031632148061018f5750600254600160a060020a031633145b151561019a57600080fd5b600254600160a060020a0316ff5b60005481565b600154600160a060020a031632146101c557600080fd5b600160a060020a03811615156101da57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600354600160a060020a031681565b600254600160a060020a031632148061024a5750600254600160a060020a031633145b151561025557600080fd5b600160a060020a038116151561026a57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058202030e25ff945e7e5e45b40f381021faaa2cc504bbd8da600d01654da7024f4d60029"

// DeployOwnable deploys a new Ethereum contract, binding an instance of Ownable to it.
func DeployOwnable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Ownable, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OwnableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// Ownable is an auto generated Go binding around an Ethereum contract.
type Ownable struct {
	OwnableCaller     // Read-only binding to the contract
	OwnableTransactor // Write-only binding to the contract
	OwnableFilterer   // Log filterer for contract events
}

// OwnableCaller is an auto generated read-only Go binding around an Ethereum contract.
type OwnableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OwnableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OwnableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OwnableSession struct {
	Contract     *Ownable          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OwnableCallerSession struct {
	Contract *OwnableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OwnableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OwnableTransactorSession struct {
	Contract     *OwnableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OwnableRaw is an auto generated low-level Go binding around an Ethereum contract.
type OwnableRaw struct {
	Contract *Ownable // Generic contract binding to access the raw methods on
}

// OwnableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OwnableCallerRaw struct {
	Contract *OwnableCaller // Generic read-only contract binding to access the raw methods on
}

// OwnableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OwnableTransactorRaw struct {
	Contract *OwnableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOwnable creates a new instance of Ownable, bound to a specific deployed contract.
func NewOwnable(address common.Address, backend bind.ContractBackend) (*Ownable, error) {
	contract, err := bindOwnable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// NewOwnableCaller creates a new read-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableCaller(address common.Address, caller bind.ContractCaller) (*OwnableCaller, error) {
	contract, err := bindOwnable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableCaller{contract: contract}, nil
}

// NewOwnableTransactor creates a new write-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnableTransactor, error) {
	contract, err := bindOwnable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableTransactor{contract: contract}, nil
}

// NewOwnableFilterer creates a new log filterer instance of Ownable, bound to a specific deployed contract.
func NewOwnableFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnableFilterer, error) {
	contract, err := bindOwnable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnableFilterer{contract: contract}, nil
}

// bindOwnable binds a generic wrapper to an already deployed contract.
func bindOwnable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.OwnableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Ownable *OwnableCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Ownable *OwnableSession) ContentSpace() (common.Address, error) {
	return _Ownable.Contract.ContentSpace(&_Ownable.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Ownable *OwnableCallerSession) ContentSpace() (common.Address, error) {
	return _Ownable.Contract.ContentSpace(&_Ownable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Ownable *OwnableCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Ownable *OwnableSession) Creator() (common.Address, error) {
	return _Ownable.Contract.Creator(&_Ownable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Ownable *OwnableCallerSession) Creator() (common.Address, error) {
	return _Ownable.Contract.Creator(&_Ownable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Ownable *OwnableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Ownable *OwnableSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Ownable *OwnableCallerSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Ownable *OwnableCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Ownable *OwnableSession) Version() ([32]byte, error) {
	return _Ownable.Contract.Version(&_Ownable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Ownable *OwnableCallerSession) Version() ([32]byte, error) {
	return _Ownable.Contract.Version(&_Ownable.CallOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Ownable *OwnableTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Ownable *OwnableSession) Kill() (*types.Transaction, error) {
	return _Ownable.Contract.Kill(&_Ownable.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Ownable *OwnableTransactorSession) Kill() (*types.Transaction, error) {
	return _Ownable.Contract.Kill(&_Ownable.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Ownable *OwnableTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Ownable *OwnableSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferCreatorship(&_Ownable.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Ownable *OwnableTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferCreatorship(&_Ownable.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// PrecompileABI is the input ABI used to generate the binding from.
const PrecompileABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"KMS\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// PrecompileFuncSigs maps the 4-byte function signature to its string representation.
var PrecompileFuncSigs = map[string]string{
	"a6ca541e": "KMS()",
}

// PrecompileBin is the compiled bytecode used for deploying new contracts.
var PrecompileBin = "0x60a361002f600b82828239805160001a6073146000811461001f57610021565bfe5b5030600052607381538281f300730000000000000000000000000000000000000000301460806040526004361060555763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a6ca541e8114605a575b600080fd5b60606072565b60408051918252519081900360200190f35b600b815600a165627a7a72305820719f0be5fd7cee5e28408366d0973b083a447040534cce47347b6102674f83c70029"

// DeployPrecompile deploys a new Ethereum contract, binding an instance of Precompile to it.
func DeployPrecompile(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Precompile, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompileABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PrecompileBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Precompile{PrecompileCaller: PrecompileCaller{contract: contract}, PrecompileTransactor: PrecompileTransactor{contract: contract}, PrecompileFilterer: PrecompileFilterer{contract: contract}}, nil
}

// Precompile is an auto generated Go binding around an Ethereum contract.
type Precompile struct {
	PrecompileCaller     // Read-only binding to the contract
	PrecompileTransactor // Write-only binding to the contract
	PrecompileFilterer   // Log filterer for contract events
}

// PrecompileCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrecompileCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompileTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrecompileTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompileFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrecompileFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompileSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrecompileSession struct {
	Contract     *Precompile       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrecompileCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrecompileCallerSession struct {
	Contract *PrecompileCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// PrecompileTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrecompileTransactorSession struct {
	Contract     *PrecompileTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// PrecompileRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrecompileRaw struct {
	Contract *Precompile // Generic contract binding to access the raw methods on
}

// PrecompileCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrecompileCallerRaw struct {
	Contract *PrecompileCaller // Generic read-only contract binding to access the raw methods on
}

// PrecompileTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrecompileTransactorRaw struct {
	Contract *PrecompileTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrecompile creates a new instance of Precompile, bound to a specific deployed contract.
func NewPrecompile(address common.Address, backend bind.ContractBackend) (*Precompile, error) {
	contract, err := bindPrecompile(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Precompile{PrecompileCaller: PrecompileCaller{contract: contract}, PrecompileTransactor: PrecompileTransactor{contract: contract}, PrecompileFilterer: PrecompileFilterer{contract: contract}}, nil
}

// NewPrecompileCaller creates a new read-only instance of Precompile, bound to a specific deployed contract.
func NewPrecompileCaller(address common.Address, caller bind.ContractCaller) (*PrecompileCaller, error) {
	contract, err := bindPrecompile(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompileCaller{contract: contract}, nil
}

// NewPrecompileTransactor creates a new write-only instance of Precompile, bound to a specific deployed contract.
func NewPrecompileTransactor(address common.Address, transactor bind.ContractTransactor) (*PrecompileTransactor, error) {
	contract, err := bindPrecompile(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompileTransactor{contract: contract}, nil
}

// NewPrecompileFilterer creates a new log filterer instance of Precompile, bound to a specific deployed contract.
func NewPrecompileFilterer(address common.Address, filterer bind.ContractFilterer) (*PrecompileFilterer, error) {
	contract, err := bindPrecompile(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrecompileFilterer{contract: contract}, nil
}

// bindPrecompile binds a generic wrapper to an already deployed contract.
func bindPrecompile(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompileABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompile *PrecompileRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Precompile.Contract.PrecompileCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompile *PrecompileRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompile.Contract.PrecompileTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompile *PrecompileRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompile.Contract.PrecompileTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompile *PrecompileCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Precompile.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompile *PrecompileTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompile.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompile *PrecompileTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompile.Contract.contract.Transact(opts, method, params...)
}

// KMS is a free data retrieval call binding the contract method 0xa6ca541e.
//
// Solidity: function KMS() constant returns(int256)
func (_Precompile *PrecompileCaller) KMS(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Precompile.contract.Call(opts, out, "KMS")
	return *ret0, err
}

// KMS is a free data retrieval call binding the contract method 0xa6ca541e.
//
// Solidity: function KMS() constant returns(int256)
func (_Precompile *PrecompileSession) KMS() (*big.Int, error) {
	return _Precompile.Contract.KMS(&_Precompile.CallOpts)
}

// KMS is a free data retrieval call binding the contract method 0xa6ca541e.
//
// Solidity: function KMS() constant returns(int256)
func (_Precompile *PrecompileCallerSession) KMS() (*big.Int, error) {
	return _Precompile.Contract.KMS(&_Precompile.CallOpts)
}

// TransactableABI is the input ABI used to generate the binding from.
const TransactableABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_guarantor\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// TransactableFuncSigs maps the 4-byte function signature to its string representation.
var TransactableFuncSigs = map[string]string{
	"508ad278": "execute(address,uint8,bytes32,bytes32,address,uint256,uint256)",
	"f50b2efe": "validateTimestamp(uint256)",
	"763d5ee6": "validateTransaction(uint8,bytes32,bytes32,address,uint256,uint256)",
}

// Transactable is an auto generated Go binding around an Ethereum contract.
type Transactable struct {
	TransactableCaller     // Read-only binding to the contract
	TransactableTransactor // Write-only binding to the contract
	TransactableFilterer   // Log filterer for contract events
}

// TransactableCaller is an auto generated read-only Go binding around an Ethereum contract.
type TransactableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransactableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TransactableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransactableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TransactableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransactableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TransactableSession struct {
	Contract     *Transactable     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TransactableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TransactableCallerSession struct {
	Contract *TransactableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// TransactableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TransactableTransactorSession struct {
	Contract     *TransactableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TransactableRaw is an auto generated low-level Go binding around an Ethereum contract.
type TransactableRaw struct {
	Contract *Transactable // Generic contract binding to access the raw methods on
}

// TransactableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TransactableCallerRaw struct {
	Contract *TransactableCaller // Generic read-only contract binding to access the raw methods on
}

// TransactableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TransactableTransactorRaw struct {
	Contract *TransactableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTransactable creates a new instance of Transactable, bound to a specific deployed contract.
func NewTransactable(address common.Address, backend bind.ContractBackend) (*Transactable, error) {
	contract, err := bindTransactable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Transactable{TransactableCaller: TransactableCaller{contract: contract}, TransactableTransactor: TransactableTransactor{contract: contract}, TransactableFilterer: TransactableFilterer{contract: contract}}, nil
}

// NewTransactableCaller creates a new read-only instance of Transactable, bound to a specific deployed contract.
func NewTransactableCaller(address common.Address, caller bind.ContractCaller) (*TransactableCaller, error) {
	contract, err := bindTransactable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TransactableCaller{contract: contract}, nil
}

// NewTransactableTransactor creates a new write-only instance of Transactable, bound to a specific deployed contract.
func NewTransactableTransactor(address common.Address, transactor bind.ContractTransactor) (*TransactableTransactor, error) {
	contract, err := bindTransactable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TransactableTransactor{contract: contract}, nil
}

// NewTransactableFilterer creates a new log filterer instance of Transactable, bound to a specific deployed contract.
func NewTransactableFilterer(address common.Address, filterer bind.ContractFilterer) (*TransactableFilterer, error) {
	contract, err := bindTransactable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TransactableFilterer{contract: contract}, nil
}

// bindTransactable binds a generic wrapper to an already deployed contract.
func bindTransactable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TransactableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transactable *TransactableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Transactable.Contract.TransactableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transactable *TransactableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transactable.Contract.TransactableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transactable *TransactableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transactable.Contract.TransactableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transactable *TransactableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Transactable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transactable *TransactableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transactable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transactable *TransactableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transactable.Contract.contract.Transact(opts, method, params...)
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool, uint256)
func (_Transactable *TransactableCaller) ValidateTimestamp(opts *bind.CallOpts, _ts *big.Int) (bool, *big.Int, error) {
	var (
		ret0 = new(bool)
		ret1 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _Transactable.contract.Call(opts, out, "validateTimestamp", _ts)
	return *ret0, *ret1, err
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool, uint256)
func (_Transactable *TransactableSession) ValidateTimestamp(_ts *big.Int) (bool, *big.Int, error) {
	return _Transactable.Contract.ValidateTimestamp(&_Transactable.CallOpts, _ts)
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool, uint256)
func (_Transactable *TransactableCallerSession) ValidateTimestamp(_ts *big.Int) (bool, *big.Int, error) {
	return _Transactable.Contract.ValidateTimestamp(&_Transactable.CallOpts, _ts)
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_Transactable *TransactableCaller) ValidateTransaction(opts *bind.CallOpts, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Transactable.contract.Call(opts, out, "validateTransaction", _v, _r, _s, _dest, _value, _ts)
	return *ret0, err
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_Transactable *TransactableSession) ValidateTransaction(_v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	return _Transactable.Contract.ValidateTransaction(&_Transactable.CallOpts, _v, _r, _s, _dest, _value, _ts)
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_Transactable *TransactableCallerSession) ValidateTransaction(_v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	return _Transactable.Contract.ValidateTransaction(&_Transactable.CallOpts, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_Transactable *TransactableTransactor) Execute(opts *bind.TransactOpts, _guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _Transactable.contract.Transact(opts, "execute", _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_Transactable *TransactableSession) Execute(_guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _Transactable.Contract.Execute(&_Transactable.TransactOpts, _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_Transactable *TransactableTransactorSession) Execute(_guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _Transactable.Contract.Execute(&_Transactable.TransactOpts, _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// UserSpaceABI is the input ABI used to generate the binding from.
const UserSpaceABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// UserSpaceFuncSigs maps the 4-byte function signature to its string representation.
var UserSpaceFuncSigs = map[string]string{
	"63e6ffdd": "userWallets(address)",
	"54fd4d50": "version()",
}

// UserSpaceBin is the compiled bytecode used for deploying new contracts.
var UserSpaceBin = "0x60806040527f55736572537061636532303139303530363135353330304d4c0000000000000060005534801561003457600080fd5b5061011f806100446000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166354fd4d508114604d57806363e6ffdd146071575b600080fd5b348015605857600080fd5b50605f60c5565b60408051918252519081900360200190f35b348015607c57600080fd5b50609c73ffffffffffffffffffffffffffffffffffffffff6004351660cb565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60005481565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820cb4412e43f970b448291787b8fa2d608eb1bdff36422b6f22d3a5016f2ee35350029"

// DeployUserSpace deploys a new Ethereum contract, binding an instance of UserSpace to it.
func DeployUserSpace(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UserSpace, error) {
	parsed, err := abi.JSON(strings.NewReader(UserSpaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(UserSpaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UserSpace{UserSpaceCaller: UserSpaceCaller{contract: contract}, UserSpaceTransactor: UserSpaceTransactor{contract: contract}, UserSpaceFilterer: UserSpaceFilterer{contract: contract}}, nil
}

// UserSpace is an auto generated Go binding around an Ethereum contract.
type UserSpace struct {
	UserSpaceCaller     // Read-only binding to the contract
	UserSpaceTransactor // Write-only binding to the contract
	UserSpaceFilterer   // Log filterer for contract events
}

// UserSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type UserSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UserSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UserSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UserSpaceSession struct {
	Contract     *UserSpace        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UserSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UserSpaceCallerSession struct {
	Contract *UserSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// UserSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UserSpaceTransactorSession struct {
	Contract     *UserSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// UserSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type UserSpaceRaw struct {
	Contract *UserSpace // Generic contract binding to access the raw methods on
}

// UserSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UserSpaceCallerRaw struct {
	Contract *UserSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// UserSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UserSpaceTransactorRaw struct {
	Contract *UserSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUserSpace creates a new instance of UserSpace, bound to a specific deployed contract.
func NewUserSpace(address common.Address, backend bind.ContractBackend) (*UserSpace, error) {
	contract, err := bindUserSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UserSpace{UserSpaceCaller: UserSpaceCaller{contract: contract}, UserSpaceTransactor: UserSpaceTransactor{contract: contract}, UserSpaceFilterer: UserSpaceFilterer{contract: contract}}, nil
}

// NewUserSpaceCaller creates a new read-only instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceCaller(address common.Address, caller bind.ContractCaller) (*UserSpaceCaller, error) {
	contract, err := bindUserSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UserSpaceCaller{contract: contract}, nil
}

// NewUserSpaceTransactor creates a new write-only instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*UserSpaceTransactor, error) {
	contract, err := bindUserSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UserSpaceTransactor{contract: contract}, nil
}

// NewUserSpaceFilterer creates a new log filterer instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*UserSpaceFilterer, error) {
	contract, err := bindUserSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UserSpaceFilterer{contract: contract}, nil
}

// bindUserSpace binds a generic wrapper to an already deployed contract.
func bindUserSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UserSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserSpace *UserSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UserSpace.Contract.UserSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserSpace *UserSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserSpace.Contract.UserSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserSpace *UserSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserSpace.Contract.UserSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserSpace *UserSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UserSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserSpace *UserSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserSpace *UserSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserSpace.Contract.contract.Transact(opts, method, params...)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address ) constant returns(address)
func (_UserSpace *UserSpaceCaller) UserWallets(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _UserSpace.contract.Call(opts, out, "userWallets", arg0)
	return *ret0, err
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address ) constant returns(address)
func (_UserSpace *UserSpaceSession) UserWallets(arg0 common.Address) (common.Address, error) {
	return _UserSpace.Contract.UserWallets(&_UserSpace.CallOpts, arg0)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address ) constant returns(address)
func (_UserSpace *UserSpaceCallerSession) UserWallets(arg0 common.Address) (common.Address, error) {
	return _UserSpace.Contract.UserWallets(&_UserSpace.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_UserSpace *UserSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _UserSpace.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_UserSpace *UserSpaceSession) Version() ([32]byte, error) {
	return _UserSpace.Contract.Version(&_UserSpace.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_UserSpace *UserSpaceCallerSession) Version() ([32]byte, error) {
	return _UserSpace.Contract.Version(&_UserSpace.CallOpts)
}

// StringsABI is the input ABI used to generate the binding from.
const StringsABI = "[]"

// StringsBin is the compiled bytecode used for deploying new contracts.
var StringsBin = "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a723058206e6c14bce8e602c7f0db5f5094177331faff62e07db020bc46a38aa92e09dfb40029"

// DeployStrings deploys a new Ethereum contract, binding an instance of Strings to it.
func DeployStrings(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Strings, error) {
	parsed, err := abi.JSON(strings.NewReader(StringsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StringsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Strings{StringsCaller: StringsCaller{contract: contract}, StringsTransactor: StringsTransactor{contract: contract}, StringsFilterer: StringsFilterer{contract: contract}}, nil
}

// Strings is an auto generated Go binding around an Ethereum contract.
type Strings struct {
	StringsCaller     // Read-only binding to the contract
	StringsTransactor // Write-only binding to the contract
	StringsFilterer   // Log filterer for contract events
}

// StringsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StringsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StringsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StringsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StringsSession struct {
	Contract     *Strings          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StringsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StringsCallerSession struct {
	Contract *StringsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StringsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StringsTransactorSession struct {
	Contract     *StringsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StringsRaw is an auto generated low-level Go binding around an Ethereum contract.
type StringsRaw struct {
	Contract *Strings // Generic contract binding to access the raw methods on
}

// StringsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StringsCallerRaw struct {
	Contract *StringsCaller // Generic read-only contract binding to access the raw methods on
}

// StringsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StringsTransactorRaw struct {
	Contract *StringsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStrings creates a new instance of Strings, bound to a specific deployed contract.
func NewStrings(address common.Address, backend bind.ContractBackend) (*Strings, error) {
	contract, err := bindStrings(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Strings{StringsCaller: StringsCaller{contract: contract}, StringsTransactor: StringsTransactor{contract: contract}, StringsFilterer: StringsFilterer{contract: contract}}, nil
}

// NewStringsCaller creates a new read-only instance of Strings, bound to a specific deployed contract.
func NewStringsCaller(address common.Address, caller bind.ContractCaller) (*StringsCaller, error) {
	contract, err := bindStrings(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StringsCaller{contract: contract}, nil
}

// NewStringsTransactor creates a new write-only instance of Strings, bound to a specific deployed contract.
func NewStringsTransactor(address common.Address, transactor bind.ContractTransactor) (*StringsTransactor, error) {
	contract, err := bindStrings(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StringsTransactor{contract: contract}, nil
}

// NewStringsFilterer creates a new log filterer instance of Strings, bound to a specific deployed contract.
func NewStringsFilterer(address common.Address, filterer bind.ContractFilterer) (*StringsFilterer, error) {
	contract, err := bindStrings(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StringsFilterer{contract: contract}, nil
}

// bindStrings binds a generic wrapper to an already deployed contract.
func bindStrings(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StringsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Strings *StringsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Strings.Contract.StringsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Strings *StringsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Strings.Contract.StringsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Strings *StringsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Strings.Contract.StringsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Strings *StringsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Strings.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Strings *StringsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Strings.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Strings *StringsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Strings.Contract.contract.Transact(opts, method, params...)
}

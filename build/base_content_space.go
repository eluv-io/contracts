// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AccessIndexorABI is the input ABI used to generate the binding from.
const AccessIndexorABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"others\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indexType\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setEntityRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"}]"

// AccessIndexorFuncSigs maps the 4-byte function signature to its string representation.
var AccessIndexorFuncSigs = map[string]string{
	"18689733": "ACCESS_CONFIRMED()",
	"8232f3f1": "ACCESS_NONE()",
	"479a0c51": "ACCESS_TENTATIVE()",
	"091600e6": "CATEGORY_CONTENT_OBJECT()",
	"68a0469a": "CATEGORY_CONTENT_TYPE()",
	"6373a411": "CATEGORY_CONTRACT()",
	"12915a30": "CATEGORY_GROUP()",
	"16aed232": "CATEGORY_LIBRARY()",
	"d1aeb651": "TYPE_ACCESS()",
	"5d97b6c2": "TYPE_EDIT()",
	"96eba03d": "TYPE_SEE()",
	"30e66949": "accessGroups()",
	"a00b38c4": "checkDirectRights(uint8,address,uint8)",
	"7fb52f1a": "checkRights(uint8,address,uint8)",
	"d30f8cd0": "cleanUpAccessGroups()",
	"2fa5c842": "cleanUpAll()",
	"048bd529": "cleanUpContentObjects()",
	"85e0a200": "cleanUpContentTypes()",
	"92297d7b": "cleanUpLibraries()",
	"a980892d": "contentObjects()",
	"af570c04": "contentSpace()",
	"9f46133e": "contentTypes()",
	"7709bc78": "contractExists(address)",
	"6c0f79b6": "contracts()",
	"02d05d3f": "creator()",
	"2d474cbd": "getAccessGroup(uint256)",
	"304f4a7b": "getAccessGroupRights(address)",
	"0dc10d3f": "getAccessGroupsLength()",
	"cf8a7503": "getContentObject(uint256)",
	"69881c0c": "getContentObjectRights(address)",
	"ebe9314e": "getContentObjectsLength()",
	"aa3f6952": "getContentType(uint256)",
	"a4081d62": "getContentTypeRights(address)",
	"5c1d3059": "getContentTypesLength()",
	"6ebc8c86": "getContract(uint256)",
	"08d865d7": "getContractRights(address)",
	"fccc134f": "getContractsLength()",
	"cb86806d": "getLibrariesLength()",
	"d15d62a7": "getLibrary(uint256)",
	"fb52222c": "getLibraryRights(address)",
	"42e7ba7b": "hasManagerAccess(address)",
	"41c0e1b5": "kill()",
	"c4b1978d": "libraries()",
	"51a7fc87": "others()",
	"8da5cb5b": "owner()",
	"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
	"b8ff1dba": "setAccessRights()",
	"3def5140": "setContentObjectRights(address,uint8,uint8)",
	"055af48f": "setContentSpace(address)",
	"8635adb5": "setContentTypeRights(address,uint8,uint8)",
	"224dcba0": "setContractRights(address,uint8,uint8)",
	"5d7cf830": "setEntityRights(uint8,address,uint8,uint8)",
	"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// AccessIndexorBin is the compiled bytecode used for deploying new contracts.
var AccessIndexorBin = ""

// DeployAccessIndexor deploys a new Ethereum contract, binding an instance of AccessIndexor to it.
func DeployAccessIndexor(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccessIndexor, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessIndexorABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AccessIndexorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessIndexor{AccessIndexorCaller: AccessIndexorCaller{contract: contract}, AccessIndexorTransactor: AccessIndexorTransactor{contract: contract}, AccessIndexorFilterer: AccessIndexorFilterer{contract: contract}}, nil
}

// AccessIndexor is an auto generated Go binding around an Ethereum contract.
type AccessIndexor struct {
	AccessIndexorCaller     // Read-only binding to the contract
	AccessIndexorTransactor // Write-only binding to the contract
	AccessIndexorFilterer   // Log filterer for contract events
}

// AccessIndexorCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessIndexorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessIndexorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessIndexorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessIndexorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessIndexorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessIndexorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessIndexorSession struct {
	Contract     *AccessIndexor    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccessIndexorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessIndexorCallerSession struct {
	Contract *AccessIndexorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// AccessIndexorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessIndexorTransactorSession struct {
	Contract     *AccessIndexorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// AccessIndexorRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessIndexorRaw struct {
	Contract *AccessIndexor // Generic contract binding to access the raw methods on
}

// AccessIndexorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessIndexorCallerRaw struct {
	Contract *AccessIndexorCaller // Generic read-only contract binding to access the raw methods on
}

// AccessIndexorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessIndexorTransactorRaw struct {
	Contract *AccessIndexorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessIndexor creates a new instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexor(address common.Address, backend bind.ContractBackend) (*AccessIndexor, error) {
	contract, err := bindAccessIndexor(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessIndexor{AccessIndexorCaller: AccessIndexorCaller{contract: contract}, AccessIndexorTransactor: AccessIndexorTransactor{contract: contract}, AccessIndexorFilterer: AccessIndexorFilterer{contract: contract}}, nil
}

// NewAccessIndexorCaller creates a new read-only instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorCaller(address common.Address, caller bind.ContractCaller) (*AccessIndexorCaller, error) {
	contract, err := bindAccessIndexor(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorCaller{contract: contract}, nil
}

// NewAccessIndexorTransactor creates a new write-only instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessIndexorTransactor, error) {
	contract, err := bindAccessIndexor(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorTransactor{contract: contract}, nil
}

// NewAccessIndexorFilterer creates a new log filterer instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessIndexorFilterer, error) {
	contract, err := bindAccessIndexor(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorFilterer{contract: contract}, nil
}

// bindAccessIndexor binds a generic wrapper to an already deployed contract.
func bindAccessIndexor(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessIndexorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessIndexor *AccessIndexorRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AccessIndexor.Contract.AccessIndexorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessIndexor *AccessIndexorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.Contract.AccessIndexorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessIndexor *AccessIndexorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessIndexor.Contract.AccessIndexorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessIndexor *AccessIndexorCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AccessIndexor.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessIndexor *AccessIndexorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessIndexor *AccessIndexorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessIndexor.Contract.contract.Transact(opts, method, params...)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "ACCESS_CONFIRMED")
	return *ret0, err
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) ACCESSCONFIRMED() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSCONFIRMED(&_AccessIndexor.CallOpts)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) ACCESSCONFIRMED() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSCONFIRMED(&_AccessIndexor.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "ACCESS_NONE")
	return *ret0, err
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) ACCESSNONE() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSNONE(&_AccessIndexor.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) ACCESSNONE() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSNONE(&_AccessIndexor.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "ACCESS_TENTATIVE")
	return *ret0, err
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) ACCESSTENTATIVE() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSTENTATIVE(&_AccessIndexor.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) ACCESSTENTATIVE() (uint8, error) {
	return _AccessIndexor.Contract.ACCESSTENTATIVE(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_CONTENT_OBJECT")
	return *ret0, err
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTENTOBJECT(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTENTOBJECT(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_CONTENT_TYPE")
	return *ret0, err
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTENTTYPE(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTENTTYPE(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_CONTRACT")
	return *ret0, err
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYCONTRACT() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTRACT(&_AccessIndexor.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYCONTRACT() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYCONTRACT(&_AccessIndexor.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_GROUP")
	return *ret0, err
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYGROUP() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYGROUP(&_AccessIndexor.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYGROUP() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYGROUP(&_AccessIndexor.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "CATEGORY_LIBRARY")
	return *ret0, err
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) CATEGORYLIBRARY() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYLIBRARY(&_AccessIndexor.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) CATEGORYLIBRARY() (uint8, error) {
	return _AccessIndexor.Contract.CATEGORYLIBRARY(&_AccessIndexor.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "TYPE_ACCESS")
	return *ret0, err
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) TYPEACCESS() (uint8, error) {
	return _AccessIndexor.Contract.TYPEACCESS(&_AccessIndexor.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) TYPEACCESS() (uint8, error) {
	return _AccessIndexor.Contract.TYPEACCESS(&_AccessIndexor.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "TYPE_EDIT")
	return *ret0, err
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) TYPEEDIT() (uint8, error) {
	return _AccessIndexor.Contract.TYPEEDIT(&_AccessIndexor.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) TYPEEDIT() (uint8, error) {
	return _AccessIndexor.Contract.TYPEEDIT(&_AccessIndexor.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "TYPE_SEE")
	return *ret0, err
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) TYPESEE() (uint8, error) {
	return _AccessIndexor.Contract.TYPESEE(&_AccessIndexor.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) TYPESEE() (uint8, error) {
	return _AccessIndexor.Contract.TYPESEE(&_AccessIndexor.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "accessGroups")
	return *ret, err
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.AccessGroups(&_AccessIndexor.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.AccessGroups(&_AccessIndexor.CallOpts)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkDirectRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckDirectRights(&_AccessIndexor.CallOpts, index_type, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckDirectRights(&_AccessIndexor.CallOpts, index_type, obj, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "checkRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckRights(&_AccessIndexor.CallOpts, index_type, obj, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _AccessIndexor.Contract.CheckRights(&_AccessIndexor.CallOpts, index_type, obj, access_type)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "contentObjects")
	return *ret, err
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.ContentObjects(&_AccessIndexor.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.ContentObjects(&_AccessIndexor.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_AccessIndexor *AccessIndexorSession) ContentSpace() (common.Address, error) {
	return _AccessIndexor.Contract.ContentSpace(&_AccessIndexor.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) ContentSpace() (common.Address, error) {
	return _AccessIndexor.Contract.ContentSpace(&_AccessIndexor.CallOpts)
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) ContentTypes(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "contentTypes")
	return *ret, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) ContentTypes() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.ContentTypes(&_AccessIndexor.CallOpts)
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) ContentTypes() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.ContentTypes(&_AccessIndexor.CallOpts)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "contractExists", addr)
	return *ret0, err
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) ContractExists(addr common.Address) (bool, error) {
	return _AccessIndexor.Contract.ContractExists(&_AccessIndexor.CallOpts, addr)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) ContractExists(addr common.Address) (bool, error) {
	return _AccessIndexor.Contract.ContractExists(&_AccessIndexor.CallOpts, addr)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "contracts")
	return *ret, err
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Contracts(&_AccessIndexor.CallOpts)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Contracts(&_AccessIndexor.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_AccessIndexor *AccessIndexorSession) Creator() (common.Address, error) {
	return _AccessIndexor.Contract.Creator(&_AccessIndexor.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) Creator() (common.Address, error) {
	return _AccessIndexor.Contract.Creator(&_AccessIndexor.CallOpts)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getAccessGroup", position)
	return *ret0, err
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetAccessGroup(&_AccessIndexor.CallOpts, position)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetAccessGroup(&_AccessIndexor.CallOpts, position)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getAccessGroupRights", group)
	return *ret0, err
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetAccessGroupRights(&_AccessIndexor.CallOpts, group)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetAccessGroupRights(&_AccessIndexor.CallOpts, group)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getAccessGroupsLength")
	return *ret0, err
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetAccessGroupsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetAccessGroupsLength(&_AccessIndexor.CallOpts)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetAccessGroupsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetAccessGroupsLength(&_AccessIndexor.CallOpts)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentObject", position)
	return *ret0, err
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContentObject(&_AccessIndexor.CallOpts, position)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContentObject(&_AccessIndexor.CallOpts, position)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentObjectRights", obj)
	return *ret0, err
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContentObjectRights(&_AccessIndexor.CallOpts, obj)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContentObjectRights(&_AccessIndexor.CallOpts, obj)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentObjectsLength")
	return *ret0, err
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetContentObjectsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContentObjectsLength(&_AccessIndexor.CallOpts)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentObjectsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContentObjectsLength(&_AccessIndexor.CallOpts)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentType", position)
	return *ret0, err
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetContentType(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContentType(&_AccessIndexor.CallOpts, position)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentType(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContentType(&_AccessIndexor.CallOpts, position)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentTypeRights", obj)
	return *ret0, err
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContentTypeRights(&_AccessIndexor.CallOpts, obj)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContentTypeRights(&_AccessIndexor.CallOpts, obj)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContentTypesLength")
	return *ret0, err
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetContentTypesLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContentTypesLength(&_AccessIndexor.CallOpts)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetContentTypesLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContentTypesLength(&_AccessIndexor.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContract", position)
	return *ret0, err
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetContract(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContract(&_AccessIndexor.CallOpts, position)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetContract(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetContract(&_AccessIndexor.CallOpts, position)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContractRights", obj)
	return *ret0, err
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetContractRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContractRights(&_AccessIndexor.CallOpts, obj)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetContractRights(obj common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetContractRights(&_AccessIndexor.CallOpts, obj)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getContractsLength")
	return *ret0, err
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetContractsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContractsLength(&_AccessIndexor.CallOpts)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetContractsLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetContractsLength(&_AccessIndexor.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getLibrariesLength")
	return *ret0, err
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorSession) GetLibrariesLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetLibrariesLength(&_AccessIndexor.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_AccessIndexor *AccessIndexorCallerSession) GetLibrariesLength() (*big.Int, error) {
	return _AccessIndexor.Contract.GetLibrariesLength(&_AccessIndexor.CallOpts)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getLibrary", position)
	return *ret0, err
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetLibrary(&_AccessIndexor.CallOpts, position)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _AccessIndexor.Contract.GetLibrary(&_AccessIndexor.CallOpts, position)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "getLibraryRights", lib)
	return *ret0, err
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_AccessIndexor *AccessIndexorSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetLibraryRights(&_AccessIndexor.CallOpts, lib)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_AccessIndexor *AccessIndexorCallerSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _AccessIndexor.Contract.GetLibraryRights(&_AccessIndexor.CallOpts, lib)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_AccessIndexor *AccessIndexorCaller) HasManagerAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "hasManagerAccess", candidate)
	return *ret0, err
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_AccessIndexor *AccessIndexorSession) HasManagerAccess(candidate common.Address) (bool, error) {
	return _AccessIndexor.Contract.HasManagerAccess(&_AccessIndexor.CallOpts, candidate)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_AccessIndexor *AccessIndexorCallerSession) HasManagerAccess(candidate common.Address) (bool, error) {
	return _AccessIndexor.Contract.HasManagerAccess(&_AccessIndexor.CallOpts, candidate)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "libraries")
	return *ret, err
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Libraries(&_AccessIndexor.CallOpts)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Libraries(&_AccessIndexor.CallOpts)
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) Others(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _AccessIndexor.contract.Call(opts, out, "others")
	return *ret, err
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorSession) Others() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Others(&_AccessIndexor.CallOpts)
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCallerSession) Others() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _AccessIndexor.Contract.Others(&_AccessIndexor.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AccessIndexor *AccessIndexorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AccessIndexor *AccessIndexorSession) Owner() (common.Address, error) {
	return _AccessIndexor.Contract.Owner(&_AccessIndexor.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AccessIndexor *AccessIndexorCallerSession) Owner() (common.Address, error) {
	return _AccessIndexor.Contract.Owner(&_AccessIndexor.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorSession) Version() ([32]byte, error) {
	return _AccessIndexor.Contract.Version(&_AccessIndexor.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorCallerSession) Version() ([32]byte, error) {
	return _AccessIndexor.Contract.Version(&_AccessIndexor.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _AccessIndexor.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorSession) VersionAPI() ([32]byte, error) {
	return _AccessIndexor.Contract.VersionAPI(&_AccessIndexor.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_AccessIndexor *AccessIndexorCallerSession) VersionAPI() ([32]byte, error) {
	return _AccessIndexor.Contract.VersionAPI(&_AccessIndexor.CallOpts)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpAccessGroups(&_AccessIndexor.TransactOpts)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpAccessGroups(&_AccessIndexor.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpAll")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpAll() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpAll(&_AccessIndexor.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpAll() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpAll(&_AccessIndexor.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpContentObjects(&_AccessIndexor.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpContentObjects(&_AccessIndexor.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpContentTypes(&_AccessIndexor.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpContentTypes(&_AccessIndexor.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpLibraries")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_AccessIndexor *AccessIndexorSession) CleanUpLibraries() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpLibraries(&_AccessIndexor.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactorSession) CleanUpLibraries() (*types.Transaction, error) {
	return _AccessIndexor.Contract.CleanUpLibraries(&_AccessIndexor.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_AccessIndexor *AccessIndexorTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_AccessIndexor *AccessIndexorSession) Kill() (*types.Transaction, error) {
	return _AccessIndexor.Contract.Kill(&_AccessIndexor.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_AccessIndexor *AccessIndexorTransactorSession) Kill() (*types.Transaction, error) {
	return _AccessIndexor.Contract.Kill(&_AccessIndexor.TransactOpts)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetAccessGroupRights(&_AccessIndexor.TransactOpts, group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetAccessGroupRights(&_AccessIndexor.TransactOpts, group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_AccessIndexor *AccessIndexorTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setAccessRights")
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_AccessIndexor *AccessIndexorSession) SetAccessRights() (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetAccessRights(&_AccessIndexor.TransactOpts)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetAccessRights() (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetAccessRights(&_AccessIndexor.TransactOpts)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentObjectRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentObjectRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_AccessIndexor *AccessIndexorSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentSpace(&_AccessIndexor.TransactOpts, content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentSpace(&_AccessIndexor.TransactOpts, content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentTypeRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContentTypeRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContractRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetContractRights(&_AccessIndexor.TransactOpts, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetEntityRights(opts *bind.TransactOpts, indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setEntityRights", indexType, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetEntityRights(indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetEntityRights(&_AccessIndexor.TransactOpts, indexType, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetEntityRights(indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetEntityRights(&_AccessIndexor.TransactOpts, indexType, obj, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetLibraryRights(&_AccessIndexor.TransactOpts, lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.Contract.SetLibraryRights(&_AccessIndexor.TransactOpts, lib, access_type, access)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_AccessIndexor *AccessIndexorTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_AccessIndexor *AccessIndexorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.TransferCreatorship(&_AccessIndexor.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.TransferCreatorship(&_AccessIndexor.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AccessIndexor *AccessIndexorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AccessIndexor *AccessIndexorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.TransferOwnership(&_AccessIndexor.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AccessIndexor *AccessIndexorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _AccessIndexor.Contract.TransferOwnership(&_AccessIndexor.TransactOpts, newOwner)
}

// AccessIndexorRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the AccessIndexor contract.
type AccessIndexorRightsChangedIterator struct {
	Event *AccessIndexorRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessIndexorRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessIndexorRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessIndexorRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessIndexorRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessIndexorRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessIndexorRightsChanged represents a RightsChanged event raised by the AccessIndexor contract.
type AccessIndexorRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*AccessIndexorRightsChangedIterator, error) {

	logs, sub, err := _AccessIndexor.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &AccessIndexorRightsChangedIterator{contract: _AccessIndexor.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *AccessIndexorRightsChanged) (event.Subscription, error) {

	logs, sub, err := _AccessIndexor.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessIndexorRightsChanged)
				if err := _AccessIndexor.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) ParseRightsChanged(log types.Log) (*AccessIndexorRightsChanged, error) {
	event := new(AccessIndexorRightsChanged)
	if err := _AccessIndexor.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccessibleABI is the input ABI used to generate the binding from.
const AccessibleABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"}]"

// AccessibleFuncSigs maps the 4-byte function signature to its string representation.
var AccessibleFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"95a078e8": "hasAccess(address)",
	"6380501f": "indexCategory()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"aa024e8b": "setVisibility(uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"29adec14": "visibility()",
}

// AccessibleBin is the compiled bytecode used for deploying new contracts.
var AccessibleBin = "0x60806040527f4f776e61626c6532303230303231303131303130304d4c00000000000000000060009081557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006005556006805460ff191690911761ff00191690556002805432600160a060020a031991821681179092556003805490911690911790556107f99081906100b890396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146100e7578063100508a2146101185780631bf7a9121461014357806329adec14146101d857806341c0e1b5146101ed57806354fd4d50146102025780635f4fcae1146102295780636380501f1461023e5780636d2e4b1b146102535780638da5cb5b1461027457806395a078e81461028957806397ac4fd2146102aa578063aa024e8b146102bf578063af570c04146102da578063ef1d7dc2146102ef578063f2fde38b14610304575b005b3480156100f357600080fd5b506100fc610325565b60408051600160a060020a039092168252519081900360200190f35b34801561012457600080fd5b5061012d610334565b6040805160ff9092168252519081900360200190f35b604080516020600480358082013583810280860185019096528085526101c495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506103399650505050505050565b604080519115158252519081900360200190f35b3480156101e457600080fd5b5061012d610447565b3480156101f957600080fd5b506100e5610450565b34801561020e57600080fd5b5061021761048c565b60408051918252519081900360200190f35b34801561023557600080fd5b50610217610492565b34801561024a57600080fd5b5061012d610498565b34801561025f57600080fd5b506100e5600160a060020a03600435166104a6565b34801561028057600080fd5b506100fc610501565b34801561029557600080fd5b506101c4600160a060020a0360043516610510565b3480156102b657600080fd5b5061012d6106ad565b3480156102cb57600080fd5b506100e560ff600435166106b2565b3480156102e657600080fd5b506100fc610747565b3480156102fb57600080fd5b5061012d610756565b34801561031057600080fd5b506100e5600160a060020a036004351661075b565b600254600160a060020a031681565b600181565b600061034433610510565b151561034f57600080fd5b7f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c730426040516020018083600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106103e85780518252601f1990920191602091820191016103c9565b51815160001960209485036101000a019081169019919091161790526040805194909201849003842084526000908401819052838201523360608401526103e842026080840152519182900360a001935090915050a150600192915050565b60065460ff1681565b600354600160a060020a03163214806104735750600354600160a060020a031633145b151561047e57600080fd5b600354600160a060020a0316ff5b60055481565b60015481565b600654610100900460ff1681565b600254600160a060020a031632146104bd57600080fd5b600160a060020a03811615156104d257600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b6003546000908190600160a060020a03848116911614806105395750600654600a60ff90911610155b1561054757600191506106a7565b600654600061010090910460ff1611156106a25760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a0387811694820194909452905192909116916363e6ffdd916024808201926020929091908290030181600087803b1580156105c757600080fd5b505af11580156105db573d6000803e3d6000fd5b505050506040513d60208110156105f157600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a916064808201926020929091908290030181600087803b15801561066f57600080fd5b505af1158015610683573d6000803e3d6000fd5b505050506040513d602081101561069957600080fd5b505191506106a7565b600091505b50919050565b600a81565b600354600160a060020a03163214806106d55750600354600160a060020a031633145b15156106e057600080fd5b6006805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b600454600160a060020a031681565b606481565b600354600160a060020a031632148061077e5750600354600160a060020a031633145b151561078957600080fd5b600160a060020a038116151561079e57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820dbd38ff829155295821b6033a660a538bdba4a6bfb68940abd8ba214e7b32e7d0029"

// DeployAccessible deploys a new Ethereum contract, binding an instance of Accessible to it.
func DeployAccessible(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Accessible, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessibleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AccessibleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Accessible{AccessibleCaller: AccessibleCaller{contract: contract}, AccessibleTransactor: AccessibleTransactor{contract: contract}, AccessibleFilterer: AccessibleFilterer{contract: contract}}, nil
}

// Accessible is an auto generated Go binding around an Ethereum contract.
type Accessible struct {
	AccessibleCaller     // Read-only binding to the contract
	AccessibleTransactor // Write-only binding to the contract
	AccessibleFilterer   // Log filterer for contract events
}

// AccessibleCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessibleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessibleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessibleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessibleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessibleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessibleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessibleSession struct {
	Contract     *Accessible       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccessibleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessibleCallerSession struct {
	Contract *AccessibleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// AccessibleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessibleTransactorSession struct {
	Contract     *AccessibleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AccessibleRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessibleRaw struct {
	Contract *Accessible // Generic contract binding to access the raw methods on
}

// AccessibleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessibleCallerRaw struct {
	Contract *AccessibleCaller // Generic read-only contract binding to access the raw methods on
}

// AccessibleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessibleTransactorRaw struct {
	Contract *AccessibleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessible creates a new instance of Accessible, bound to a specific deployed contract.
func NewAccessible(address common.Address, backend bind.ContractBackend) (*Accessible, error) {
	contract, err := bindAccessible(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Accessible{AccessibleCaller: AccessibleCaller{contract: contract}, AccessibleTransactor: AccessibleTransactor{contract: contract}, AccessibleFilterer: AccessibleFilterer{contract: contract}}, nil
}

// NewAccessibleCaller creates a new read-only instance of Accessible, bound to a specific deployed contract.
func NewAccessibleCaller(address common.Address, caller bind.ContractCaller) (*AccessibleCaller, error) {
	contract, err := bindAccessible(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessibleCaller{contract: contract}, nil
}

// NewAccessibleTransactor creates a new write-only instance of Accessible, bound to a specific deployed contract.
func NewAccessibleTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessibleTransactor, error) {
	contract, err := bindAccessible(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessibleTransactor{contract: contract}, nil
}

// NewAccessibleFilterer creates a new log filterer instance of Accessible, bound to a specific deployed contract.
func NewAccessibleFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessibleFilterer, error) {
	contract, err := bindAccessible(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessibleFilterer{contract: contract}, nil
}

// bindAccessible binds a generic wrapper to an already deployed contract.
func bindAccessible(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessibleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accessible *AccessibleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Accessible.Contract.AccessibleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accessible *AccessibleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accessible.Contract.AccessibleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accessible *AccessibleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accessible.Contract.AccessibleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Accessible *AccessibleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Accessible.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Accessible *AccessibleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accessible.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Accessible *AccessibleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Accessible.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Accessible *AccessibleCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Accessible *AccessibleSession) CANACCESS() (uint8, error) {
	return _Accessible.Contract.CANACCESS(&_Accessible.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Accessible *AccessibleCallerSession) CANACCESS() (uint8, error) {
	return _Accessible.Contract.CANACCESS(&_Accessible.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Accessible *AccessibleCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Accessible *AccessibleSession) CANEDIT() (uint8, error) {
	return _Accessible.Contract.CANEDIT(&_Accessible.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Accessible *AccessibleCallerSession) CANEDIT() (uint8, error) {
	return _Accessible.Contract.CANEDIT(&_Accessible.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Accessible *AccessibleCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Accessible *AccessibleSession) CANSEE() (uint8, error) {
	return _Accessible.Contract.CANSEE(&_Accessible.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Accessible *AccessibleCallerSession) CANSEE() (uint8, error) {
	return _Accessible.Contract.CANSEE(&_Accessible.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Accessible *AccessibleCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Accessible *AccessibleSession) ContentSpace() (common.Address, error) {
	return _Accessible.Contract.ContentSpace(&_Accessible.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Accessible *AccessibleCallerSession) ContentSpace() (common.Address, error) {
	return _Accessible.Contract.ContentSpace(&_Accessible.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Accessible *AccessibleCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Accessible *AccessibleSession) Creator() (common.Address, error) {
	return _Accessible.Contract.Creator(&_Accessible.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Accessible *AccessibleCallerSession) Creator() (common.Address, error) {
	return _Accessible.Contract.Creator(&_Accessible.CallOpts)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Accessible *AccessibleCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Accessible *AccessibleSession) HasAccess(candidate common.Address) (bool, error) {
	return _Accessible.Contract.HasAccess(&_Accessible.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Accessible *AccessibleCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _Accessible.Contract.HasAccess(&_Accessible.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Accessible *AccessibleCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Accessible *AccessibleSession) IndexCategory() (uint8, error) {
	return _Accessible.Contract.IndexCategory(&_Accessible.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Accessible *AccessibleCallerSession) IndexCategory() (uint8, error) {
	return _Accessible.Contract.IndexCategory(&_Accessible.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Accessible *AccessibleCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Accessible *AccessibleSession) Owner() (common.Address, error) {
	return _Accessible.Contract.Owner(&_Accessible.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Accessible *AccessibleCallerSession) Owner() (common.Address, error) {
	return _Accessible.Contract.Owner(&_Accessible.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Accessible *AccessibleCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Accessible *AccessibleSession) Version() ([32]byte, error) {
	return _Accessible.Contract.Version(&_Accessible.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Accessible *AccessibleCallerSession) Version() ([32]byte, error) {
	return _Accessible.Contract.Version(&_Accessible.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Accessible *AccessibleCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Accessible *AccessibleSession) VersionAPI() ([32]byte, error) {
	return _Accessible.Contract.VersionAPI(&_Accessible.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Accessible *AccessibleCallerSession) VersionAPI() ([32]byte, error) {
	return _Accessible.Contract.VersionAPI(&_Accessible.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Accessible *AccessibleCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Accessible.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Accessible *AccessibleSession) Visibility() (uint8, error) {
	return _Accessible.Contract.Visibility(&_Accessible.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Accessible *AccessibleCallerSession) Visibility() (uint8, error) {
	return _Accessible.Contract.Visibility(&_Accessible.CallOpts)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_Accessible *AccessibleTransactor) AccessRequestV3(opts *bind.TransactOpts, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "accessRequestV3", customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_Accessible *AccessibleSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _Accessible.Contract.AccessRequestV3(&_Accessible.TransactOpts, customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_Accessible *AccessibleTransactorSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _Accessible.Contract.AccessRequestV3(&_Accessible.TransactOpts, customValues, stakeholders)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Accessible *AccessibleTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Accessible *AccessibleSession) Kill() (*types.Transaction, error) {
	return _Accessible.Contract.Kill(&_Accessible.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Accessible *AccessibleTransactorSession) Kill() (*types.Transaction, error) {
	return _Accessible.Contract.Kill(&_Accessible.TransactOpts)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Accessible *AccessibleTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Accessible *AccessibleSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _Accessible.Contract.SetVisibility(&_Accessible.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Accessible *AccessibleTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _Accessible.Contract.SetVisibility(&_Accessible.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Accessible *AccessibleTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Accessible *AccessibleSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Accessible.Contract.TransferCreatorship(&_Accessible.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Accessible *AccessibleTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Accessible.Contract.TransferCreatorship(&_Accessible.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Accessible *AccessibleTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Accessible *AccessibleSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Accessible.Contract.TransferOwnership(&_Accessible.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Accessible *AccessibleTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Accessible.Contract.TransferOwnership(&_Accessible.TransactOpts, newOwner)
}

// AccessibleAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the Accessible contract.
type AccessibleAccessRequestV3Iterator struct {
	Event *AccessibleAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessibleAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessibleAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessibleAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessibleAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessibleAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessibleAccessRequestV3 represents a AccessRequestV3 event raised by the Accessible contract.
type AccessibleAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Accessible *AccessibleFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*AccessibleAccessRequestV3Iterator, error) {

	logs, sub, err := _Accessible.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &AccessibleAccessRequestV3Iterator{contract: _Accessible.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Accessible *AccessibleFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *AccessibleAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _Accessible.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessibleAccessRequestV3)
				if err := _Accessible.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Accessible *AccessibleFilterer) ParseAccessRequestV3(log types.Log) (*AccessibleAccessRequestV3, error) {
	event := new(AccessibleAccessRequestV3)
	if err := _Accessible.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccessibleVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the Accessible contract.
type AccessibleVisibilityChangedIterator struct {
	Event *AccessibleVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessibleVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessibleVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessibleVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessibleVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessibleVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessibleVisibilityChanged represents a VisibilityChanged event raised by the Accessible contract.
type AccessibleVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Accessible *AccessibleFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*AccessibleVisibilityChangedIterator, error) {

	logs, sub, err := _Accessible.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &AccessibleVisibilityChangedIterator{contract: _Accessible.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Accessible *AccessibleFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *AccessibleVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _Accessible.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessibleVisibilityChanged)
				if err := _Accessible.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Accessible *AccessibleFilterer) ParseVisibilityChanged(log types.Log) (*AccessibleVisibilityChanged, error) {
	event := new(AccessibleVisibilityChanged)
	if err := _Accessible.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AdminableABI is the input ABI used to generate the binding from.
const AdminableABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// AdminableFuncSigs maps the 4-byte function signature to its string representation.
var AdminableFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// AdminableBin is the compiled bytecode used for deploying new contracts.
var AdminableBin = "0x60806040527f4f776e61626c6532303230303231303131303130304d4c0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060015560028054600160a060020a0319908116329081179092556003805490911690911790556103558061007e6000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461009a57806324d7806c146100cb57806341c0e1b51461010057806354fd4d50146101155780635f4fcae11461013c5780636d2e4b1b146101515780638da5cb5b14610172578063af570c0414610187578063f2fde38b1461019c575b005b3480156100a657600080fd5b506100af6101bd565b60408051600160a060020a039092168252519081900360200190f35b3480156100d757600080fd5b506100ec600160a060020a03600435166101cc565b604080519115158252519081900360200190f35b34801561010c57600080fd5b506100986101f6565b34801561012157600080fd5b5061012a610232565b60408051918252519081900360200190f35b34801561014857600080fd5b5061012a610238565b34801561015d57600080fd5b50610098600160a060020a036004351661023e565b34801561017e57600080fd5b506100af610299565b34801561019357600080fd5b506100af6102a8565b3480156101a857600080fd5b50610098600160a060020a03600435166102b7565b600254600160a060020a031681565b600354600090600160a060020a03838116911614156101ed575060016101f1565b5060005b919050565b600354600160a060020a03163214806102195750600354600160a060020a031633145b151561022457600080fd5b600354600160a060020a0316ff5b60005481565b60015481565b600254600160a060020a0316321461025557600080fd5b600160a060020a038116151561026a57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a03163214806102da5750600354600160a060020a031633145b15156102e557600080fd5b600160a060020a03811615156102fa57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820370fa11ebe25a2897bca47f773e0a05a659e031df6425b8ba1a080f74c69fcbf0029"

// DeployAdminable deploys a new Ethereum contract, binding an instance of Adminable to it.
func DeployAdminable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Adminable, error) {
	parsed, err := abi.JSON(strings.NewReader(AdminableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AdminableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Adminable{AdminableCaller: AdminableCaller{contract: contract}, AdminableTransactor: AdminableTransactor{contract: contract}, AdminableFilterer: AdminableFilterer{contract: contract}}, nil
}

// Adminable is an auto generated Go binding around an Ethereum contract.
type Adminable struct {
	AdminableCaller     // Read-only binding to the contract
	AdminableTransactor // Write-only binding to the contract
	AdminableFilterer   // Log filterer for contract events
}

// AdminableCaller is an auto generated read-only Go binding around an Ethereum contract.
type AdminableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AdminableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AdminableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AdminableSession struct {
	Contract     *Adminable        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AdminableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AdminableCallerSession struct {
	Contract *AdminableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// AdminableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AdminableTransactorSession struct {
	Contract     *AdminableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// AdminableRaw is an auto generated low-level Go binding around an Ethereum contract.
type AdminableRaw struct {
	Contract *Adminable // Generic contract binding to access the raw methods on
}

// AdminableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AdminableCallerRaw struct {
	Contract *AdminableCaller // Generic read-only contract binding to access the raw methods on
}

// AdminableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AdminableTransactorRaw struct {
	Contract *AdminableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAdminable creates a new instance of Adminable, bound to a specific deployed contract.
func NewAdminable(address common.Address, backend bind.ContractBackend) (*Adminable, error) {
	contract, err := bindAdminable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Adminable{AdminableCaller: AdminableCaller{contract: contract}, AdminableTransactor: AdminableTransactor{contract: contract}, AdminableFilterer: AdminableFilterer{contract: contract}}, nil
}

// NewAdminableCaller creates a new read-only instance of Adminable, bound to a specific deployed contract.
func NewAdminableCaller(address common.Address, caller bind.ContractCaller) (*AdminableCaller, error) {
	contract, err := bindAdminable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AdminableCaller{contract: contract}, nil
}

// NewAdminableTransactor creates a new write-only instance of Adminable, bound to a specific deployed contract.
func NewAdminableTransactor(address common.Address, transactor bind.ContractTransactor) (*AdminableTransactor, error) {
	contract, err := bindAdminable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AdminableTransactor{contract: contract}, nil
}

// NewAdminableFilterer creates a new log filterer instance of Adminable, bound to a specific deployed contract.
func NewAdminableFilterer(address common.Address, filterer bind.ContractFilterer) (*AdminableFilterer, error) {
	contract, err := bindAdminable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AdminableFilterer{contract: contract}, nil
}

// bindAdminable binds a generic wrapper to an already deployed contract.
func bindAdminable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AdminableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Adminable *AdminableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Adminable.Contract.AdminableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Adminable *AdminableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Adminable.Contract.AdminableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Adminable *AdminableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Adminable.Contract.AdminableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Adminable *AdminableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Adminable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Adminable *AdminableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Adminable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Adminable *AdminableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Adminable.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Adminable *AdminableCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Adminable.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Adminable *AdminableSession) ContentSpace() (common.Address, error) {
	return _Adminable.Contract.ContentSpace(&_Adminable.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Adminable *AdminableCallerSession) ContentSpace() (common.Address, error) {
	return _Adminable.Contract.ContentSpace(&_Adminable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Adminable *AdminableCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Adminable.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Adminable *AdminableSession) Creator() (common.Address, error) {
	return _Adminable.Contract.Creator(&_Adminable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Adminable *AdminableCallerSession) Creator() (common.Address, error) {
	return _Adminable.Contract.Creator(&_Adminable.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_Adminable *AdminableCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Adminable.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_Adminable *AdminableSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _Adminable.Contract.IsAdmin(&_Adminable.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_Adminable *AdminableCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _Adminable.Contract.IsAdmin(&_Adminable.CallOpts, _candidate)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Adminable *AdminableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Adminable.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Adminable *AdminableSession) Owner() (common.Address, error) {
	return _Adminable.Contract.Owner(&_Adminable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Adminable *AdminableCallerSession) Owner() (common.Address, error) {
	return _Adminable.Contract.Owner(&_Adminable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Adminable *AdminableCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Adminable.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Adminable *AdminableSession) Version() ([32]byte, error) {
	return _Adminable.Contract.Version(&_Adminable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Adminable *AdminableCallerSession) Version() ([32]byte, error) {
	return _Adminable.Contract.Version(&_Adminable.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Adminable *AdminableCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Adminable.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Adminable *AdminableSession) VersionAPI() ([32]byte, error) {
	return _Adminable.Contract.VersionAPI(&_Adminable.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Adminable *AdminableCallerSession) VersionAPI() ([32]byte, error) {
	return _Adminable.Contract.VersionAPI(&_Adminable.CallOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Adminable *AdminableTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Adminable.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Adminable *AdminableSession) Kill() (*types.Transaction, error) {
	return _Adminable.Contract.Kill(&_Adminable.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Adminable *AdminableTransactorSession) Kill() (*types.Transaction, error) {
	return _Adminable.Contract.Kill(&_Adminable.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Adminable *AdminableTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Adminable.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Adminable *AdminableSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Adminable.Contract.TransferCreatorship(&_Adminable.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Adminable *AdminableTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Adminable.Contract.TransferCreatorship(&_Adminable.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Adminable *AdminableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Adminable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Adminable *AdminableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Adminable.Contract.TransferOwnership(&_Adminable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Adminable *AdminableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Adminable.Contract.TransferOwnership(&_Adminable.TransactOpts, newOwner)
}

// BaseAccessControlGroupABI is the input ABI used to generate the binding from.
const BaseAccessControlGroupABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oauthEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"membersList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managersList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tenantAddr\",\"type\":\"address\"}],\"name\":\"setTenant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBitInternal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"others\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"membersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indexType\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setEntityRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"grantManagerAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tenant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"revokeManagerAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"},{\"name\":\"mgr\",\"type\":\"bool\"}],\"name\":\"hasAccessRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setOAuthEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contentSpace\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"ManagerAccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"MemberRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"ManagerAccessRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operationCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"UnauthorizedOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"OAuthStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint32\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ord\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"prev\",\"type\":\"bool\"}],\"name\":\"BitSetAndGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"}],\"name\":\"WordGroupDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// BaseAccessControlGroupFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessControlGroupFuncSigs = map[string]string{
	"18689733": "ACCESS_CONFIRMED()",
	"8232f3f1": "ACCESS_NONE()",
	"479a0c51": "ACCESS_TENTATIVE()",
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"091600e6": "CATEGORY_CONTENT_OBJECT()",
	"68a0469a": "CATEGORY_CONTENT_TYPE()",
	"6373a411": "CATEGORY_CONTRACT()",
	"12915a30": "CATEGORY_GROUP()",
	"16aed232": "CATEGORY_LIBRARY()",
	"d1aeb651": "TYPE_ACCESS()",
	"5d97b6c2": "TYPE_EDIT()",
	"96eba03d": "TYPE_SEE()",
	"30e66949": "accessGroups()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"81beeb64": "canEdit()",
	"a00b38c4": "checkDirectRights(uint8,address,uint8)",
	"7fb52f1a": "checkRights(uint8,address,uint8)",
	"d30f8cd0": "cleanUpAccessGroups()",
	"2fa5c842": "cleanUpAll()",
	"048bd529": "cleanUpContentObjects()",
	"85e0a200": "cleanUpContentTypes()",
	"92297d7b": "cleanUpLibraries()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"a980892d": "contentObjects()",
	"af570c04": "contentSpace()",
	"9f46133e": "contentTypes()",
	"7709bc78": "contractExists(address)",
	"6c0f79b6": "contracts()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e57097c9": "deleteGroup(bytes32)",
	"e1a70717": "deleteVersion(string)",
	"2d474cbd": "getAccessGroup(uint256)",
	"304f4a7b": "getAccessGroupRights(address)",
	"0dc10d3f": "getAccessGroupsLength()",
	"30f846a2": "getBit(bytes32,uint8)",
	"cf8a7503": "getContentObject(uint256)",
	"69881c0c": "getContentObjectRights(address)",
	"ebe9314e": "getContentObjectsLength()",
	"aa3f6952": "getContentType(uint256)",
	"a4081d62": "getContentTypeRights(address)",
	"5c1d3059": "getContentTypesLength()",
	"6ebc8c86": "getContract(uint256)",
	"08d865d7": "getContractRights(address)",
	"fccc134f": "getContractsLength()",
	"e1954b61": "getCounter(bytes32,uint8)",
	"cb86806d": "getLibrariesLength()",
	"d15d62a7": "getLibrary(uint256)",
	"fb52222c": "getLibraryRights(address)",
	"ac55c906": "getMeta(bytes)",
	"0ae5e739": "grantAccess(address)",
	"75861a95": "grantManagerAccess(address)",
	"95a078e8": "hasAccess(address)",
	"d8961c8d": "hasAccessRight(address,bool)",
	"67e5c3bf": "hasEditorRight(address)",
	"42e7ba7b": "hasManagerAccess(address)",
	"7558cbf0": "incrementCounter(bytes32,uint8)",
	"6380501f": "indexCategory()",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"c4b1978d": "libraries()",
	"1fcd7794": "managersList(uint256)",
	"638d0290": "managersNum()",
	"13b8ad31": "membersList(uint256)",
	"55277a5b": "membersNum()",
	"12b39dd0": "oauthEnabled()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"51a7fc87": "others()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"e542b7cb": "putMeta(bytes,bytes)",
	"85e68531": "revokeAccess(address)",
	"cdb849b7": "revokeManagerAccess(address)",
	"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
	"b8ff1dba": "setAccessRights()",
	"24d7c18d": "setAndGetBit(bytes32,uint8)",
	"33f12cf4": "setAndGetBitInternal(bytes32,uint8)",
	"3def5140": "setContentObjectRights(address,uint8,uint8)",
	"055af48f": "setContentSpace(address)",
	"8635adb5": "setContentTypeRights(address,uint8,uint8)",
	"224dcba0": "setContractRights(address,uint8,uint8)",
	"5d7cf830": "setEntityRights(uint8,address,uint8,uint8)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
	"fba3779a": "setOAuthEnabled(bool)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"2e74a4de": "setTenant(address)",
	"aa024e8b": "setVisibility(uint8)",
	"adf07791": "tenant()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
}

// BaseAccessControlGroupBin is the compiled bytecode used for deploying new contracts.
var BaseAccessControlGroupBin = ""

// DeployBaseAccessControlGroup deploys a new Ethereum contract, binding an instance of BaseAccessControlGroup to it.
func DeployBaseAccessControlGroup(auth *bind.TransactOpts, backend bind.ContractBackend, _contentSpace common.Address) (common.Address, *types.Transaction, *BaseAccessControlGroup, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessControlGroupABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseAccessControlGroupBin), backend, _contentSpace)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessControlGroup{BaseAccessControlGroupCaller: BaseAccessControlGroupCaller{contract: contract}, BaseAccessControlGroupTransactor: BaseAccessControlGroupTransactor{contract: contract}, BaseAccessControlGroupFilterer: BaseAccessControlGroupFilterer{contract: contract}}, nil
}

// BaseAccessControlGroup is an auto generated Go binding around an Ethereum contract.
type BaseAccessControlGroup struct {
	BaseAccessControlGroupCaller     // Read-only binding to the contract
	BaseAccessControlGroupTransactor // Write-only binding to the contract
	BaseAccessControlGroupFilterer   // Log filterer for contract events
}

// BaseAccessControlGroupCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessControlGroupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessControlGroupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessControlGroupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessControlGroupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessControlGroupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessControlGroupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseAccessControlGroupSession struct {
	Contract     *BaseAccessControlGroup // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// BaseAccessControlGroupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseAccessControlGroupCallerSession struct {
	Contract *BaseAccessControlGroupCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// BaseAccessControlGroupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseAccessControlGroupTransactorSession struct {
	Contract     *BaseAccessControlGroupTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// BaseAccessControlGroupRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseAccessControlGroupRaw struct {
	Contract *BaseAccessControlGroup // Generic contract binding to access the raw methods on
}

// BaseAccessControlGroupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseAccessControlGroupCallerRaw struct {
	Contract *BaseAccessControlGroupCaller // Generic read-only contract binding to access the raw methods on
}

// BaseAccessControlGroupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseAccessControlGroupTransactorRaw struct {
	Contract *BaseAccessControlGroupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseAccessControlGroup creates a new instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroup(address common.Address, backend bind.ContractBackend) (*BaseAccessControlGroup, error) {
	contract, err := bindBaseAccessControlGroup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroup{BaseAccessControlGroupCaller: BaseAccessControlGroupCaller{contract: contract}, BaseAccessControlGroupTransactor: BaseAccessControlGroupTransactor{contract: contract}, BaseAccessControlGroupFilterer: BaseAccessControlGroupFilterer{contract: contract}}, nil
}

// NewBaseAccessControlGroupCaller creates a new read-only instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessControlGroupCaller, error) {
	contract, err := bindBaseAccessControlGroup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupCaller{contract: contract}, nil
}

// NewBaseAccessControlGroupTransactor creates a new write-only instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessControlGroupTransactor, error) {
	contract, err := bindBaseAccessControlGroup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupTransactor{contract: contract}, nil
}

// NewBaseAccessControlGroupFilterer creates a new log filterer instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessControlGroupFilterer, error) {
	contract, err := bindBaseAccessControlGroup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupFilterer{contract: contract}, nil
}

// bindBaseAccessControlGroup binds a generic wrapper to an already deployed contract.
func bindBaseAccessControlGroup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessControlGroupABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessControlGroup *BaseAccessControlGroupRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessControlGroup.Contract.BaseAccessControlGroupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessControlGroup *BaseAccessControlGroupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.BaseAccessControlGroupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessControlGroup *BaseAccessControlGroupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.BaseAccessControlGroupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessControlGroup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.contract.Transact(opts, method, params...)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "ACCESS_CONFIRMED")
	return *ret0, err
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ACCESSCONFIRMED() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSCONFIRMED(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ACCESSCONFIRMED() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSCONFIRMED(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "ACCESS_NONE")
	return *ret0, err
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ACCESSNONE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSNONE(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ACCESSNONE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSNONE(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "ACCESS_TENTATIVE")
	return *ret0, err
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ACCESSTENTATIVE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSTENTATIVE(&_BaseAccessControlGroup.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ACCESSTENTATIVE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.ACCESSTENTATIVE(&_BaseAccessControlGroup.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CANACCESS() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CANACCESS(&_BaseAccessControlGroup.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CANACCESS() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CANACCESS(&_BaseAccessControlGroup.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CANEDIT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CANEDIT(&_BaseAccessControlGroup.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CANEDIT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CANEDIT(&_BaseAccessControlGroup.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CANSEE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CANSEE(&_BaseAccessControlGroup.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CANSEE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CANSEE(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_CONTENT_OBJECT")
	return *ret0, err
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTENTOBJECT(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTENTOBJECT(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_CONTENT_TYPE")
	return *ret0, err
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTENTTYPE(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTENTTYPE(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_CONTRACT")
	return *ret0, err
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYCONTRACT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTRACT(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYCONTRACT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYCONTRACT(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_GROUP")
	return *ret0, err
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYGROUP() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYGROUP(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYGROUP() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYGROUP(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "CATEGORY_LIBRARY")
	return *ret0, err
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CATEGORYLIBRARY() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYLIBRARY(&_BaseAccessControlGroup.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CATEGORYLIBRARY() (uint8, error) {
	return _BaseAccessControlGroup.Contract.CATEGORYLIBRARY(&_BaseAccessControlGroup.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "TYPE_ACCESS")
	return *ret0, err
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TYPEACCESS() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPEACCESS(&_BaseAccessControlGroup.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) TYPEACCESS() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPEACCESS(&_BaseAccessControlGroup.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "TYPE_EDIT")
	return *ret0, err
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TYPEEDIT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPEEDIT(&_BaseAccessControlGroup.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) TYPEEDIT() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPEEDIT(&_BaseAccessControlGroup.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "TYPE_SEE")
	return *ret0, err
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TYPESEE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPESEE(&_BaseAccessControlGroup.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) TYPESEE() (uint8, error) {
	return _BaseAccessControlGroup.Contract.TYPESEE(&_BaseAccessControlGroup.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "accessGroups")
	return *ret, err
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.AccessGroups(&_BaseAccessControlGroup.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.AccessGroups(&_BaseAccessControlGroup.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CanCommit() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanCommit(&_BaseAccessControlGroup.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CanCommit() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanCommit(&_BaseAccessControlGroup.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CanConfirm() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanConfirm(&_BaseAccessControlGroup.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CanConfirm() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanConfirm(&_BaseAccessControlGroup.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CanEdit() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanEdit(&_BaseAccessControlGroup.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CanEdit() (bool, error) {
	return _BaseAccessControlGroup.Contract.CanEdit(&_BaseAccessControlGroup.CallOpts)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkDirectRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckDirectRights(&_BaseAccessControlGroup.CallOpts, index_type, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckDirectRights(&_BaseAccessControlGroup.CallOpts, index_type, obj, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "checkRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckRights(&_BaseAccessControlGroup.CallOpts, index_type, obj, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.CheckRights(&_BaseAccessControlGroup.CallOpts, index_type, obj, access_type)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CommitPending() (bool, error) {
	return _BaseAccessControlGroup.Contract.CommitPending(&_BaseAccessControlGroup.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CommitPending() (bool, error) {
	return _BaseAccessControlGroup.Contract.CommitPending(&_BaseAccessControlGroup.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contentObjects")
	return *ret, err
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.ContentObjects(&_BaseAccessControlGroup.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.ContentObjects(&_BaseAccessControlGroup.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ContentSpace() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ContentSpace(&_BaseAccessControlGroup.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ContentSpace() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ContentSpace(&_BaseAccessControlGroup.CallOpts)
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentTypes(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contentTypes")
	return *ret, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ContentTypes() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.ContentTypes(&_BaseAccessControlGroup.CallOpts)
}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ContentTypes() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.ContentTypes(&_BaseAccessControlGroup.CallOpts)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contractExists", addr)
	return *ret0, err
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ContractExists(addr common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.ContractExists(&_BaseAccessControlGroup.CallOpts, addr)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ContractExists(addr common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.ContractExists(&_BaseAccessControlGroup.CallOpts, addr)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "contracts")
	return *ret, err
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Contracts(&_BaseAccessControlGroup.CallOpts)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Contracts(&_BaseAccessControlGroup.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CountVersionHashes() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.CountVersionHashes(&_BaseAccessControlGroup.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.CountVersionHashes(&_BaseAccessControlGroup.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Creator() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Creator(&_BaseAccessControlGroup.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Creator() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Creator(&_BaseAccessControlGroup.CallOpts)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getAccessGroup", position)
	return *ret0, err
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroup(&_BaseAccessControlGroup.CallOpts, position)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroup(&_BaseAccessControlGroup.CallOpts, position)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getAccessGroupRights", group)
	return *ret0, err
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroupRights(&_BaseAccessControlGroup.CallOpts, group)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroupRights(&_BaseAccessControlGroup.CallOpts, group)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getAccessGroupsLength")
	return *ret0, err
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetAccessGroupsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroupsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetAccessGroupsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetAccessGroupsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetBit(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getBit", _ident, _ord)
	return *ret0, err
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.GetBit(&_BaseAccessControlGroup.CallOpts, _ident, _ord)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _BaseAccessControlGroup.Contract.GetBit(&_BaseAccessControlGroup.CallOpts, _ident, _ord)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentObject", position)
	return *ret0, err
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContentObject(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContentObject(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentObjectRights", obj)
	return *ret0, err
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContentObjectRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContentObjectRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentObjectsLength")
	return *ret0, err
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentObjectsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContentObjectsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentObjectsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContentObjectsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentType", position)
	return *ret0, err
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentType(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContentType(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentType(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContentType(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentTypeRights", obj)
	return *ret0, err
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContentTypeRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContentTypeRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContentTypesLength")
	return *ret0, err
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContentTypesLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContentTypesLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContentTypesLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContentTypesLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContract", position)
	return *ret0, err
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContract(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContract(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContract(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetContract(&_BaseAccessControlGroup.CallOpts, position)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContractRights", obj)
	return *ret0, err
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContractRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContractRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContractRights(obj common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetContractRights(&_BaseAccessControlGroup.CallOpts, obj)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getContractsLength")
	return *ret0, err
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetContractsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContractsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetContractsLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetContractsLength(&_BaseAccessControlGroup.CallOpts)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetCounter(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getCounter", _ident, _ord)
	return *ret0, err
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _BaseAccessControlGroup.Contract.GetCounter(&_BaseAccessControlGroup.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _BaseAccessControlGroup.Contract.GetCounter(&_BaseAccessControlGroup.CallOpts, _ident, _ord)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getLibrariesLength")
	return *ret0, err
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetLibrariesLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetLibrariesLength(&_BaseAccessControlGroup.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetLibrariesLength() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.GetLibrariesLength(&_BaseAccessControlGroup.CallOpts)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getLibrary", position)
	return *ret0, err
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetLibrary(&_BaseAccessControlGroup.CallOpts, position)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.GetLibrary(&_BaseAccessControlGroup.CallOpts, position)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getLibraryRights", lib)
	return *ret0, err
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetLibraryRights(&_BaseAccessControlGroup.CallOpts, lib)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _BaseAccessControlGroup.Contract.GetLibraryRights(&_BaseAccessControlGroup.CallOpts, lib)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseAccessControlGroup.Contract.GetMeta(&_BaseAccessControlGroup.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseAccessControlGroup.Contract.GetMeta(&_BaseAccessControlGroup.CallOpts, key)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasAccess(&_BaseAccessControlGroup.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasAccess(&_BaseAccessControlGroup.CallOpts, candidate)
}

// HasAccessRight is a free data retrieval call binding the contract method 0xd8961c8d.
//
// Solidity: function hasAccessRight(address candidate, bool mgr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasAccessRight(opts *bind.CallOpts, candidate common.Address, mgr bool) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "hasAccessRight", candidate, mgr)
	return *ret0, err
}

// HasAccessRight is a free data retrieval call binding the contract method 0xd8961c8d.
//
// Solidity: function hasAccessRight(address candidate, bool mgr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) HasAccessRight(candidate common.Address, mgr bool) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasAccessRight(&_BaseAccessControlGroup.CallOpts, candidate, mgr)
}

// HasAccessRight is a free data retrieval call binding the contract method 0xd8961c8d.
//
// Solidity: function hasAccessRight(address candidate, bool mgr) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) HasAccessRight(candidate common.Address, mgr bool) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasAccessRight(&_BaseAccessControlGroup.CallOpts, candidate, mgr)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasEditorRight(&_BaseAccessControlGroup.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasEditorRight(&_BaseAccessControlGroup.CallOpts, candidate)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasManagerAccess(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "hasManagerAccess", _candidate)
	return *ret0, err
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) HasManagerAccess(_candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasManagerAccess(&_BaseAccessControlGroup.CallOpts, _candidate)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) HasManagerAccess(_candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.HasManagerAccess(&_BaseAccessControlGroup.CallOpts, _candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) IndexCategory() (uint8, error) {
	return _BaseAccessControlGroup.Contract.IndexCategory(&_BaseAccessControlGroup.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) IndexCategory() (uint8, error) {
	return _BaseAccessControlGroup.Contract.IndexCategory(&_BaseAccessControlGroup.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.IsAdmin(&_BaseAccessControlGroup.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseAccessControlGroup.Contract.IsAdmin(&_BaseAccessControlGroup.CallOpts, _candidate)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "libraries")
	return *ret, err
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Libraries(&_BaseAccessControlGroup.CallOpts)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Libraries(&_BaseAccessControlGroup.CallOpts)
}

// ManagersList is a free data retrieval call binding the contract method 0x1fcd7794.
//
// Solidity: function managersList(uint256 ) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ManagersList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "managersList", arg0)
	return *ret0, err
}

// ManagersList is a free data retrieval call binding the contract method 0x1fcd7794.
//
// Solidity: function managersList(uint256 ) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ManagersList(arg0 *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ManagersList(&_BaseAccessControlGroup.CallOpts, arg0)
}

// ManagersList is a free data retrieval call binding the contract method 0x1fcd7794.
//
// Solidity: function managersList(uint256 ) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ManagersList(arg0 *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ManagersList(&_BaseAccessControlGroup.CallOpts, arg0)
}

// ManagersNum is a free data retrieval call binding the contract method 0x638d0290.
//
// Solidity: function managersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ManagersNum(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "managersNum")
	return *ret0, err
}

// ManagersNum is a free data retrieval call binding the contract method 0x638d0290.
//
// Solidity: function managersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ManagersNum() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.ManagersNum(&_BaseAccessControlGroup.CallOpts)
}

// ManagersNum is a free data retrieval call binding the contract method 0x638d0290.
//
// Solidity: function managersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ManagersNum() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.ManagersNum(&_BaseAccessControlGroup.CallOpts)
}

// MembersList is a free data retrieval call binding the contract method 0x13b8ad31.
//
// Solidity: function membersList(uint256 ) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) MembersList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "membersList", arg0)
	return *ret0, err
}

// MembersList is a free data retrieval call binding the contract method 0x13b8ad31.
//
// Solidity: function membersList(uint256 ) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) MembersList(arg0 *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.MembersList(&_BaseAccessControlGroup.CallOpts, arg0)
}

// MembersList is a free data retrieval call binding the contract method 0x13b8ad31.
//
// Solidity: function membersList(uint256 ) constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) MembersList(arg0 *big.Int) (common.Address, error) {
	return _BaseAccessControlGroup.Contract.MembersList(&_BaseAccessControlGroup.CallOpts, arg0)
}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) MembersNum(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "membersNum")
	return *ret0, err
}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) MembersNum() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.MembersNum(&_BaseAccessControlGroup.CallOpts)
}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) MembersNum() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.MembersNum(&_BaseAccessControlGroup.CallOpts)
}

// OauthEnabled is a free data retrieval call binding the contract method 0x12b39dd0.
//
// Solidity: function oauthEnabled() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) OauthEnabled(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "oauthEnabled")
	return *ret0, err
}

// OauthEnabled is a free data retrieval call binding the contract method 0x12b39dd0.
//
// Solidity: function oauthEnabled() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) OauthEnabled() (bool, error) {
	return _BaseAccessControlGroup.Contract.OauthEnabled(&_BaseAccessControlGroup.CallOpts)
}

// OauthEnabled is a free data retrieval call binding the contract method 0x12b39dd0.
//
// Solidity: function oauthEnabled() constant returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) OauthEnabled() (bool, error) {
	return _BaseAccessControlGroup.Contract.OauthEnabled(&_BaseAccessControlGroup.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ObjectHash() (string, error) {
	return _BaseAccessControlGroup.Contract.ObjectHash(&_BaseAccessControlGroup.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ObjectHash() (string, error) {
	return _BaseAccessControlGroup.Contract.ObjectHash(&_BaseAccessControlGroup.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.ObjectTimestamp(&_BaseAccessControlGroup.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.ObjectTimestamp(&_BaseAccessControlGroup.CallOpts)
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Others(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessControlGroup.contract.Call(opts, out, "others")
	return *ret, err
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Others() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Others(&_BaseAccessControlGroup.CallOpts)
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Others() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessControlGroup.Contract.Others(&_BaseAccessControlGroup.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Owner() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Owner(&_BaseAccessControlGroup.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Owner() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Owner(&_BaseAccessControlGroup.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ParentAddress() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ParentAddress(&_BaseAccessControlGroup.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) ParentAddress() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.ParentAddress(&_BaseAccessControlGroup.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) PendingHash() (string, error) {
	return _BaseAccessControlGroup.Contract.PendingHash(&_BaseAccessControlGroup.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) PendingHash() (string, error) {
	return _BaseAccessControlGroup.Contract.PendingHash(&_BaseAccessControlGroup.CallOpts)
}

// Tenant is a free data retrieval call binding the contract method 0xadf07791.
//
// Solidity: function tenant() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Tenant(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "tenant")
	return *ret0, err
}

// Tenant is a free data retrieval call binding the contract method 0xadf07791.
//
// Solidity: function tenant() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Tenant() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Tenant(&_BaseAccessControlGroup.CallOpts)
}

// Tenant is a free data retrieval call binding the contract method 0xadf07791.
//
// Solidity: function tenant() constant returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Tenant() (common.Address, error) {
	return _BaseAccessControlGroup.Contract.Tenant(&_BaseAccessControlGroup.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Version() ([32]byte, error) {
	return _BaseAccessControlGroup.Contract.Version(&_BaseAccessControlGroup.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Version() ([32]byte, error) {
	return _BaseAccessControlGroup.Contract.Version(&_BaseAccessControlGroup.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) VersionAPI() ([32]byte, error) {
	return _BaseAccessControlGroup.Contract.VersionAPI(&_BaseAccessControlGroup.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseAccessControlGroup.Contract.VersionAPI(&_BaseAccessControlGroup.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseAccessControlGroup.Contract.VersionHashes(&_BaseAccessControlGroup.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseAccessControlGroup.Contract.VersionHashes(&_BaseAccessControlGroup.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.VersionTimestamp(&_BaseAccessControlGroup.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseAccessControlGroup.Contract.VersionTimestamp(&_BaseAccessControlGroup.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessControlGroup.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Visibility() (uint8, error) {
	return _BaseAccessControlGroup.Contract.Visibility(&_BaseAccessControlGroup.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCallerSession) Visibility() (uint8, error) {
	return _BaseAccessControlGroup.Contract.Visibility(&_BaseAccessControlGroup.CallOpts)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) AccessRequestV3(opts *bind.TransactOpts, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "accessRequestV3", customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.AccessRequestV3(&_BaseAccessControlGroup.TransactOpts, customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.AccessRequestV3(&_BaseAccessControlGroup.TransactOpts, customValues, stakeholders)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpAccessGroups(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpAccessGroups(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpAll")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpAll() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpAll(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpAll() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpAll(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpContentObjects(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpContentObjects(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpContentTypes(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpContentTypes(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpLibraries")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) CleanUpLibraries() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpLibraries(&_BaseAccessControlGroup.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) CleanUpLibraries() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.CleanUpLibraries(&_BaseAccessControlGroup.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ClearPending() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.ClearPending(&_BaseAccessControlGroup.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.ClearPending(&_BaseAccessControlGroup.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.Commit(&_BaseAccessControlGroup.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.Commit(&_BaseAccessControlGroup.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.ConfirmCommit(&_BaseAccessControlGroup.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.ConfirmCommit(&_BaseAccessControlGroup.TransactOpts)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) DeleteGroup(opts *bind.TransactOpts, _ident [32]byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "deleteGroup", _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.DeleteGroup(&_BaseAccessControlGroup.TransactOpts, _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.DeleteGroup(&_BaseAccessControlGroup.TransactOpts, _ident)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.DeleteVersion(&_BaseAccessControlGroup.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.DeleteVersion(&_BaseAccessControlGroup.TransactOpts, _versionHash)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) GrantAccess(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "grantAccess", candidate)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GrantAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.GrantAccess(&_BaseAccessControlGroup.TransactOpts, candidate)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) GrantAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.GrantAccess(&_BaseAccessControlGroup.TransactOpts, candidate)
}

// GrantManagerAccess is a paid mutator transaction binding the contract method 0x75861a95.
//
// Solidity: function grantManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) GrantManagerAccess(opts *bind.TransactOpts, manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "grantManagerAccess", manager)
}

// GrantManagerAccess is a paid mutator transaction binding the contract method 0x75861a95.
//
// Solidity: function grantManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) GrantManagerAccess(manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.GrantManagerAccess(&_BaseAccessControlGroup.TransactOpts, manager)
}

// GrantManagerAccess is a paid mutator transaction binding the contract method 0x75861a95.
//
// Solidity: function grantManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) GrantManagerAccess(manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.GrantManagerAccess(&_BaseAccessControlGroup.TransactOpts, manager)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) IncrementCounter(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "incrementCounter", _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.IncrementCounter(&_BaseAccessControlGroup.TransactOpts, _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.IncrementCounter(&_BaseAccessControlGroup.TransactOpts, _ident, _ord)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) Kill() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.Kill(&_BaseAccessControlGroup.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.Kill(&_BaseAccessControlGroup.TransactOpts)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.PutMeta(&_BaseAccessControlGroup.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.PutMeta(&_BaseAccessControlGroup.TransactOpts, key, value)
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) RevokeAccess(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "revokeAccess", candidate)
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) RevokeAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.RevokeAccess(&_BaseAccessControlGroup.TransactOpts, candidate)
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) RevokeAccess(candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.RevokeAccess(&_BaseAccessControlGroup.TransactOpts, candidate)
}

// RevokeManagerAccess is a paid mutator transaction binding the contract method 0xcdb849b7.
//
// Solidity: function revokeManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) RevokeManagerAccess(opts *bind.TransactOpts, manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "revokeManagerAccess", manager)
}

// RevokeManagerAccess is a paid mutator transaction binding the contract method 0xcdb849b7.
//
// Solidity: function revokeManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) RevokeManagerAccess(manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.RevokeManagerAccess(&_BaseAccessControlGroup.TransactOpts, manager)
}

// RevokeManagerAccess is a paid mutator transaction binding the contract method 0xcdb849b7.
//
// Solidity: function revokeManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) RevokeManagerAccess(manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.RevokeManagerAccess(&_BaseAccessControlGroup.TransactOpts, manager)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAccessGroupRights(&_BaseAccessControlGroup.TransactOpts, group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAccessGroupRights(&_BaseAccessControlGroup.TransactOpts, group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setAccessRights")
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetAccessRights() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAccessRights(&_BaseAccessControlGroup.TransactOpts)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetAccessRights() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAccessRights(&_BaseAccessControlGroup.TransactOpts)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetAndGetBit(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setAndGetBit", _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAndGetBit(&_BaseAccessControlGroup.TransactOpts, _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAndGetBit(&_BaseAccessControlGroup.TransactOpts, _ident, _ord)
}

// SetAndGetBitInternal is a paid mutator transaction binding the contract method 0x33f12cf4.
//
// Solidity: function setAndGetBitInternal(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetAndGetBitInternal(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setAndGetBitInternal", _ident, _ord)
}

// SetAndGetBitInternal is a paid mutator transaction binding the contract method 0x33f12cf4.
//
// Solidity: function setAndGetBitInternal(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetAndGetBitInternal(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAndGetBitInternal(&_BaseAccessControlGroup.TransactOpts, _ident, _ord)
}

// SetAndGetBitInternal is a paid mutator transaction binding the contract method 0x33f12cf4.
//
// Solidity: function setAndGetBitInternal(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetAndGetBitInternal(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetAndGetBitInternal(&_BaseAccessControlGroup.TransactOpts, _ident, _ord)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentObjectRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentObjectRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentSpace(&_BaseAccessControlGroup.TransactOpts, content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentSpace(&_BaseAccessControlGroup.TransactOpts, content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentTypeRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContentTypeRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContractRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetContractRights(&_BaseAccessControlGroup.TransactOpts, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetEntityRights(opts *bind.TransactOpts, indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setEntityRights", indexType, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetEntityRights(indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetEntityRights(&_BaseAccessControlGroup.TransactOpts, indexType, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetEntityRights(indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetEntityRights(&_BaseAccessControlGroup.TransactOpts, indexType, obj, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetGroupRights(&_BaseAccessControlGroup.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetGroupRights(&_BaseAccessControlGroup.TransactOpts, group, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetLibraryRights(&_BaseAccessControlGroup.TransactOpts, lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetLibraryRights(&_BaseAccessControlGroup.TransactOpts, lib, access_type, access)
}

// SetOAuthEnabled is a paid mutator transaction binding the contract method 0xfba3779a.
//
// Solidity: function setOAuthEnabled(bool _enabled) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetOAuthEnabled(opts *bind.TransactOpts, _enabled bool) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setOAuthEnabled", _enabled)
}

// SetOAuthEnabled is a paid mutator transaction binding the contract method 0xfba3779a.
//
// Solidity: function setOAuthEnabled(bool _enabled) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetOAuthEnabled(_enabled bool) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetOAuthEnabled(&_BaseAccessControlGroup.TransactOpts, _enabled)
}

// SetOAuthEnabled is a paid mutator transaction binding the contract method 0xfba3779a.
//
// Solidity: function setOAuthEnabled(bool _enabled) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetOAuthEnabled(_enabled bool) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetOAuthEnabled(&_BaseAccessControlGroup.TransactOpts, _enabled)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetRights(&_BaseAccessControlGroup.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetRights(&_BaseAccessControlGroup.TransactOpts, stakeholder, access_type, access)
}

// SetTenant is a paid mutator transaction binding the contract method 0x2e74a4de.
//
// Solidity: function setTenant(address _tenantAddr) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetTenant(opts *bind.TransactOpts, _tenantAddr common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setTenant", _tenantAddr)
}

// SetTenant is a paid mutator transaction binding the contract method 0x2e74a4de.
//
// Solidity: function setTenant(address _tenantAddr) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetTenant(_tenantAddr common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetTenant(&_BaseAccessControlGroup.TransactOpts, _tenantAddr)
}

// SetTenant is a paid mutator transaction binding the contract method 0x2e74a4de.
//
// Solidity: function setTenant(address _tenantAddr) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetTenant(_tenantAddr common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetTenant(&_BaseAccessControlGroup.TransactOpts, _tenantAddr)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetVisibility(&_BaseAccessControlGroup.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.SetVisibility(&_BaseAccessControlGroup.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.TransferCreatorship(&_BaseAccessControlGroup.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.TransferCreatorship(&_BaseAccessControlGroup.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.TransferOwnership(&_BaseAccessControlGroup.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.TransferOwnership(&_BaseAccessControlGroup.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.UpdateRequest(&_BaseAccessControlGroup.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseAccessControlGroup.Contract.UpdateRequest(&_BaseAccessControlGroup.TransactOpts)
}

// BaseAccessControlGroupAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupAccessRequestV3Iterator struct {
	Event *BaseAccessControlGroupAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupAccessRequestV3 represents a AccessRequestV3 event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseAccessControlGroupAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupAccessRequestV3Iterator{contract: _BaseAccessControlGroup.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupAccessRequestV3)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseAccessRequestV3(log types.Log) (*BaseAccessControlGroupAccessRequestV3, error) {
	event := new(BaseAccessControlGroupAccessRequestV3)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupBitSetAndGetIterator is returned from FilterBitSetAndGet and is used to iterate over the raw logs and unpacked data for BitSetAndGet events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupBitSetAndGetIterator struct {
	Event *BaseAccessControlGroupBitSetAndGet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupBitSetAndGetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupBitSetAndGet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupBitSetAndGet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupBitSetAndGetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupBitSetAndGetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupBitSetAndGet represents a BitSetAndGet event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupBitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBitSetAndGet is a free log retrieval operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterBitSetAndGet(opts *bind.FilterOpts) (*BaseAccessControlGroupBitSetAndGetIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupBitSetAndGetIterator{contract: _BaseAccessControlGroup.contract, event: "BitSetAndGet", logs: logs, sub: sub}, nil
}

// WatchBitSetAndGet is a free log subscription operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchBitSetAndGet(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupBitSetAndGet) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupBitSetAndGet)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitSetAndGet is a log parse operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseBitSetAndGet(log types.Log) (*BaseAccessControlGroupBitSetAndGet, error) {
	event := new(BaseAccessControlGroupBitSetAndGet)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCommitPendingIterator struct {
	Event *BaseAccessControlGroupCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupCommitPending represents a CommitPending event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseAccessControlGroupCommitPendingIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupCommitPendingIterator{contract: _BaseAccessControlGroup.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupCommitPending)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseCommitPending(log types.Log) (*BaseAccessControlGroupCommitPending, error) {
	event := new(BaseAccessControlGroupCommitPending)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupCounterIncrementedIterator is returned from FilterCounterIncremented and is used to iterate over the raw logs and unpacked data for CounterIncremented events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCounterIncrementedIterator struct {
	Event *BaseAccessControlGroupCounterIncremented // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupCounterIncrementedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupCounterIncremented)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupCounterIncremented)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupCounterIncrementedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupCounterIncrementedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupCounterIncremented represents a CounterIncremented event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterIncremented is a free log retrieval operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterCounterIncremented(opts *bind.FilterOpts) (*BaseAccessControlGroupCounterIncrementedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupCounterIncrementedIterator{contract: _BaseAccessControlGroup.contract, event: "CounterIncremented", logs: logs, sub: sub}, nil
}

// WatchCounterIncremented is a free log subscription operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchCounterIncremented(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupCounterIncremented) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupCounterIncremented)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterIncremented is a log parse operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseCounterIncremented(log types.Log) (*BaseAccessControlGroupCounterIncremented, error) {
	event := new(BaseAccessControlGroupCounterIncremented)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupManagerAccessGrantedIterator is returned from FilterManagerAccessGranted and is used to iterate over the raw logs and unpacked data for ManagerAccessGranted events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessGrantedIterator struct {
	Event *BaseAccessControlGroupManagerAccessGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupManagerAccessGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupManagerAccessGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupManagerAccessGranted represents a ManagerAccessGranted event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessGranted struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterManagerAccessGranted is a free log retrieval operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterManagerAccessGranted(opts *bind.FilterOpts) (*BaseAccessControlGroupManagerAccessGrantedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "ManagerAccessGranted")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupManagerAccessGrantedIterator{contract: _BaseAccessControlGroup.contract, event: "ManagerAccessGranted", logs: logs, sub: sub}, nil
}

// WatchManagerAccessGranted is a free log subscription operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchManagerAccessGranted(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupManagerAccessGranted) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "ManagerAccessGranted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupManagerAccessGranted)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseManagerAccessGranted is a log parse operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseManagerAccessGranted(log types.Log) (*BaseAccessControlGroupManagerAccessGranted, error) {
	event := new(BaseAccessControlGroupManagerAccessGranted)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessGranted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupManagerAccessRevokedIterator is returned from FilterManagerAccessRevoked and is used to iterate over the raw logs and unpacked data for ManagerAccessRevoked events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessRevokedIterator struct {
	Event *BaseAccessControlGroupManagerAccessRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupManagerAccessRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupManagerAccessRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupManagerAccessRevoked represents a ManagerAccessRevoked event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterManagerAccessRevoked is a free log retrieval operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterManagerAccessRevoked(opts *bind.FilterOpts) (*BaseAccessControlGroupManagerAccessRevokedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "ManagerAccessRevoked")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupManagerAccessRevokedIterator{contract: _BaseAccessControlGroup.contract, event: "ManagerAccessRevoked", logs: logs, sub: sub}, nil
}

// WatchManagerAccessRevoked is a free log subscription operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchManagerAccessRevoked(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupManagerAccessRevoked) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "ManagerAccessRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupManagerAccessRevoked)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseManagerAccessRevoked is a log parse operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseManagerAccessRevoked(log types.Log) (*BaseAccessControlGroupManagerAccessRevoked, error) {
	event := new(BaseAccessControlGroupManagerAccessRevoked)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessRevoked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupMemberAddedIterator is returned from FilterMemberAdded and is used to iterate over the raw logs and unpacked data for MemberAdded events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberAddedIterator struct {
	Event *BaseAccessControlGroupMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupMemberAdded represents a MemberAdded event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberAdded struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMemberAdded is a free log retrieval operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterMemberAdded(opts *bind.FilterOpts) (*BaseAccessControlGroupMemberAddedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "MemberAdded")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupMemberAddedIterator{contract: _BaseAccessControlGroup.contract, event: "MemberAdded", logs: logs, sub: sub}, nil
}

// WatchMemberAdded is a free log subscription operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchMemberAdded(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupMemberAdded) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "MemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupMemberAdded)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberAdded is a log parse operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseMemberAdded(log types.Log) (*BaseAccessControlGroupMemberAdded, error) {
	event := new(BaseAccessControlGroupMemberAdded)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupMemberRevokedIterator is returned from FilterMemberRevoked and is used to iterate over the raw logs and unpacked data for MemberRevoked events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberRevokedIterator struct {
	Event *BaseAccessControlGroupMemberRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupMemberRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupMemberRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupMemberRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupMemberRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupMemberRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupMemberRevoked represents a MemberRevoked event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMemberRevoked is a free log retrieval operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterMemberRevoked(opts *bind.FilterOpts) (*BaseAccessControlGroupMemberRevokedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "MemberRevoked")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupMemberRevokedIterator{contract: _BaseAccessControlGroup.contract, event: "MemberRevoked", logs: logs, sub: sub}, nil
}

// WatchMemberRevoked is a free log subscription operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchMemberRevoked(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupMemberRevoked) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "MemberRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupMemberRevoked)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberRevoked is a log parse operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseMemberRevoked(log types.Log) (*BaseAccessControlGroupMemberRevoked, error) {
	event := new(BaseAccessControlGroupMemberRevoked)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberRevoked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupOAuthStatusChangedIterator is returned from FilterOAuthStatusChanged and is used to iterate over the raw logs and unpacked data for OAuthStatusChanged events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupOAuthStatusChangedIterator struct {
	Event *BaseAccessControlGroupOAuthStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupOAuthStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupOAuthStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupOAuthStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupOAuthStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupOAuthStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupOAuthStatusChanged represents a OAuthStatusChanged event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupOAuthStatusChanged struct {
	Enabled bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOAuthStatusChanged is a free log retrieval operation binding the contract event 0x04c71e53d136838eea703132a77007b0526b9a7691cdb7a6017a93673f865cbb.
//
// Solidity: event OAuthStatusChanged(bool enabled)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterOAuthStatusChanged(opts *bind.FilterOpts) (*BaseAccessControlGroupOAuthStatusChangedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "OAuthStatusChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupOAuthStatusChangedIterator{contract: _BaseAccessControlGroup.contract, event: "OAuthStatusChanged", logs: logs, sub: sub}, nil
}

// WatchOAuthStatusChanged is a free log subscription operation binding the contract event 0x04c71e53d136838eea703132a77007b0526b9a7691cdb7a6017a93673f865cbb.
//
// Solidity: event OAuthStatusChanged(bool enabled)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchOAuthStatusChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupOAuthStatusChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "OAuthStatusChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupOAuthStatusChanged)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "OAuthStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOAuthStatusChanged is a log parse operation binding the contract event 0x04c71e53d136838eea703132a77007b0526b9a7691cdb7a6017a93673f865cbb.
//
// Solidity: event OAuthStatusChanged(bool enabled)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseOAuthStatusChanged(log types.Log) (*BaseAccessControlGroupOAuthStatusChanged, error) {
	event := new(BaseAccessControlGroupOAuthStatusChanged)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "OAuthStatusChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupObjectMetaChangedIterator struct {
	Event *BaseAccessControlGroupObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseAccessControlGroupObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupObjectMetaChangedIterator{contract: _BaseAccessControlGroup.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupObjectMetaChanged)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseObjectMetaChanged(log types.Log) (*BaseAccessControlGroupObjectMetaChanged, error) {
	event := new(BaseAccessControlGroupObjectMetaChanged)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupRightsChangedIterator struct {
	Event *BaseAccessControlGroupRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupRightsChanged represents a RightsChanged event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*BaseAccessControlGroupRightsChangedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupRightsChangedIterator{contract: _BaseAccessControlGroup.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupRightsChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupRightsChanged)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseRightsChanged(log types.Log) (*BaseAccessControlGroupRightsChanged, error) {
	event := new(BaseAccessControlGroupRightsChanged)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupUnauthorizedOperationIterator is returned from FilterUnauthorizedOperation and is used to iterate over the raw logs and unpacked data for UnauthorizedOperation events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUnauthorizedOperationIterator struct {
	Event *BaseAccessControlGroupUnauthorizedOperation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupUnauthorizedOperation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupUnauthorizedOperation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupUnauthorizedOperation represents a UnauthorizedOperation event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUnauthorizedOperation struct {
	OperationCode *big.Int
	Candidate     common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUnauthorizedOperation is a free log retrieval operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterUnauthorizedOperation(opts *bind.FilterOpts) (*BaseAccessControlGroupUnauthorizedOperationIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupUnauthorizedOperationIterator{contract: _BaseAccessControlGroup.contract, event: "UnauthorizedOperation", logs: logs, sub: sub}, nil
}

// WatchUnauthorizedOperation is a free log subscription operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchUnauthorizedOperation(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupUnauthorizedOperation) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupUnauthorizedOperation)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnauthorizedOperation is a log parse operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseUnauthorizedOperation(log types.Log) (*BaseAccessControlGroupUnauthorizedOperation, error) {
	event := new(BaseAccessControlGroupUnauthorizedOperation)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUpdateRequestIterator struct {
	Event *BaseAccessControlGroupUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupUpdateRequest represents a UpdateRequest event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseAccessControlGroupUpdateRequestIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupUpdateRequestIterator{contract: _BaseAccessControlGroup.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupUpdateRequest)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseUpdateRequest(log types.Log) (*BaseAccessControlGroupUpdateRequest, error) {
	event := new(BaseAccessControlGroupUpdateRequest)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionConfirmIterator struct {
	Event *BaseAccessControlGroupVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupVersionConfirm represents a VersionConfirm event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseAccessControlGroupVersionConfirmIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupVersionConfirmIterator{contract: _BaseAccessControlGroup.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupVersionConfirm)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseVersionConfirm(log types.Log) (*BaseAccessControlGroupVersionConfirm, error) {
	event := new(BaseAccessControlGroupVersionConfirm)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionDeleteIterator struct {
	Event *BaseAccessControlGroupVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupVersionDelete represents a VersionDelete event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseAccessControlGroupVersionDeleteIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupVersionDeleteIterator{contract: _BaseAccessControlGroup.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupVersionDelete)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseVersionDelete(log types.Log) (*BaseAccessControlGroupVersionDelete, error) {
	event := new(BaseAccessControlGroupVersionDelete)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVisibilityChangedIterator struct {
	Event *BaseAccessControlGroupVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupVisibilityChanged represents a VisibilityChanged event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseAccessControlGroupVisibilityChangedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupVisibilityChangedIterator{contract: _BaseAccessControlGroup.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupVisibilityChanged)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseVisibilityChanged(log types.Log) (*BaseAccessControlGroupVisibilityChanged, error) {
	event := new(BaseAccessControlGroupVisibilityChanged)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessControlGroupWordGroupDeletedIterator is returned from FilterWordGroupDeleted and is used to iterate over the raw logs and unpacked data for WordGroupDeleted events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupWordGroupDeletedIterator struct {
	Event *BaseAccessControlGroupWordGroupDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupWordGroupDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupWordGroupDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupWordGroupDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupWordGroupDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupWordGroupDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupWordGroupDeleted represents a WordGroupDeleted event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupWordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWordGroupDeleted is a free log retrieval operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterWordGroupDeleted(opts *bind.FilterOpts) (*BaseAccessControlGroupWordGroupDeletedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupWordGroupDeletedIterator{contract: _BaseAccessControlGroup.contract, event: "WordGroupDeleted", logs: logs, sub: sub}, nil
}

// WatchWordGroupDeleted is a free log subscription operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchWordGroupDeleted(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupWordGroupDeleted) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupWordGroupDeleted)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWordGroupDeleted is a log parse operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseWordGroupDeleted(log types.Log) (*BaseAccessControlGroupWordGroupDeleted, error) {
	event := new(BaseAccessControlGroupWordGroupDeleted)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletABI is the input ABI used to generate the binding from.
const BaseAccessWalletABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusNonceFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusSendFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guarantor\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"others\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indexType\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setEntityRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusBalanceFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusOk\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusSigFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"guarantor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"int256\"}],\"name\":\"ExecStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// BaseAccessWalletFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessWalletFuncSigs = map[string]string{
	"18689733": "ACCESS_CONFIRMED()",
	"8232f3f1": "ACCESS_NONE()",
	"479a0c51": "ACCESS_TENTATIVE()",
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"091600e6": "CATEGORY_CONTENT_OBJECT()",
	"68a0469a": "CATEGORY_CONTENT_TYPE()",
	"6373a411": "CATEGORY_CONTRACT()",
	"12915a30": "CATEGORY_GROUP()",
	"16aed232": "CATEGORY_LIBRARY()",
	"d1aeb651": "TYPE_ACCESS()",
	"5d97b6c2": "TYPE_EDIT()",
	"96eba03d": "TYPE_SEE()",
	"30e66949": "accessGroups()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"0f58a786": "addContentType(address,address)",
	"32eaf21b": "addressKMS()",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"0eaec2c5": "canContribute(address)",
	"81beeb64": "canEdit()",
	"9b55f901": "canPublish(address)",
	"29d00219": "canReview(address)",
	"a00b38c4": "checkDirectRights(uint8,address,uint8)",
	"7fb52f1a": "checkRights(uint8,address,uint8)",
	"d30f8cd0": "cleanUpAccessGroups()",
	"2fa5c842": "cleanUpAll()",
	"048bd529": "cleanUpContentObjects()",
	"85e0a200": "cleanUpContentTypes()",
	"92297d7b": "cleanUpLibraries()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"a980892d": "contentObjects()",
	"af570c04": "contentSpace()",
	"1cdbee5a": "contentTypeContracts(address)",
	"9f46133e": "contentTypes()",
	"991a3a7c": "contentTypes(uint256)",
	"c65bcbe2": "contentTypesLength()",
	"7709bc78": "contractExists(address)",
	"6c0f79b6": "contracts()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"1e2ff94f": "currentTimestamp()",
	"e1a70717": "deleteVersion(string)",
	"9476c478": "execStatusBalanceFail()",
	"04f55daf": "execStatusNonceFail()",
	"95ba60ba": "execStatusOk()",
	"07a08237": "execStatusSendFail()",
	"eb23b7aa": "execStatusSigFail()",
	"508ad278": "execute(address,uint8,bytes32,bytes32,address,uint256,uint256)",
	"1f2caaec": "findTypeByHash(bytes32)",
	"2d474cbd": "getAccessGroup(uint256)",
	"304f4a7b": "getAccessGroupRights(address)",
	"0dc10d3f": "getAccessGroupsLength()",
	"cf8a7503": "getContentObject(uint256)",
	"69881c0c": "getContentObjectRights(address)",
	"ebe9314e": "getContentObjectsLength()",
	"aa3f6952": "getContentType(uint256)",
	"a4081d62": "getContentTypeRights(address)",
	"5c1d3059": "getContentTypesLength()",
	"6ebc8c86": "getContract(uint256)",
	"08d865d7": "getContractRights(address)",
	"fccc134f": "getContractsLength()",
	"cb86806d": "getLibrariesLength()",
	"d15d62a7": "getLibrary(uint256)",
	"fb52222c": "getLibraryRights(address)",
	"ac55c906": "getMeta(bytes)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"42e7ba7b": "hasManagerAccess(address)",
	"6380501f": "indexCategory()",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"c4b1978d": "libraries()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"51a7fc87": "others()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"2cf99422": "publish(address)",
	"e542b7cb": "putMeta(bytes,bytes)",
	"fd089196": "removeContentType(address)",
	"3dd71d99": "requiresReview()",
	"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
	"b8ff1dba": "setAccessRights()",
	"c9e8e72d": "setAddressKMS(address)",
	"3def5140": "setContentObjectRights(address,uint8,uint8)",
	"055af48f": "setContentSpace(address)",
	"8635adb5": "setContentTypeRights(address,uint8,uint8)",
	"224dcba0": "setContractRights(address,uint8,uint8)",
	"5d7cf830": "setEntityRights(uint8,address,uint8,uint8)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"aa024e8b": "setVisibility(uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"29dedde5": "validType(address)",
	"f50b2efe": "validateTimestamp(uint256)",
	"763d5ee6": "validateTransaction(uint8,bytes32,bytes32,address,uint256,uint256)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
	"9cb121ba": "whitelistedType(address)",
}

// BaseAccessWalletBin is the compiled bytecode used for deploying new contracts.
var BaseAccessWalletBin = ""

// DeployBaseAccessWallet deploys a new Ethereum contract, binding an instance of BaseAccessWallet to it.
func DeployBaseAccessWallet(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address) (common.Address, *types.Transaction, *BaseAccessWallet, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessWalletABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseAccessWalletBin), backend, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessWallet{BaseAccessWalletCaller: BaseAccessWalletCaller{contract: contract}, BaseAccessWalletTransactor: BaseAccessWalletTransactor{contract: contract}, BaseAccessWalletFilterer: BaseAccessWalletFilterer{contract: contract}}, nil
}

// BaseAccessWallet is an auto generated Go binding around an Ethereum contract.
type BaseAccessWallet struct {
	BaseAccessWalletCaller     // Read-only binding to the contract
	BaseAccessWalletTransactor // Write-only binding to the contract
	BaseAccessWalletFilterer   // Log filterer for contract events
}

// BaseAccessWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseAccessWalletSession struct {
	Contract     *BaseAccessWallet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseAccessWalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseAccessWalletCallerSession struct {
	Contract *BaseAccessWalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// BaseAccessWalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseAccessWalletTransactorSession struct {
	Contract     *BaseAccessWalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// BaseAccessWalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseAccessWalletRaw struct {
	Contract *BaseAccessWallet // Generic contract binding to access the raw methods on
}

// BaseAccessWalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseAccessWalletCallerRaw struct {
	Contract *BaseAccessWalletCaller // Generic read-only contract binding to access the raw methods on
}

// BaseAccessWalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseAccessWalletTransactorRaw struct {
	Contract *BaseAccessWalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseAccessWallet creates a new instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWallet(address common.Address, backend bind.ContractBackend) (*BaseAccessWallet, error) {
	contract, err := bindBaseAccessWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWallet{BaseAccessWalletCaller: BaseAccessWalletCaller{contract: contract}, BaseAccessWalletTransactor: BaseAccessWalletTransactor{contract: contract}, BaseAccessWalletFilterer: BaseAccessWalletFilterer{contract: contract}}, nil
}

// NewBaseAccessWalletCaller creates a new read-only instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessWalletCaller, error) {
	contract, err := bindBaseAccessWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletCaller{contract: contract}, nil
}

// NewBaseAccessWalletTransactor creates a new write-only instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessWalletTransactor, error) {
	contract, err := bindBaseAccessWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletTransactor{contract: contract}, nil
}

// NewBaseAccessWalletFilterer creates a new log filterer instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessWalletFilterer, error) {
	contract, err := bindBaseAccessWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFilterer{contract: contract}, nil
}

// bindBaseAccessWallet binds a generic wrapper to an already deployed contract.
func bindBaseAccessWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessWalletABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessWallet *BaseAccessWalletRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessWallet.Contract.BaseAccessWalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessWallet *BaseAccessWalletRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.BaseAccessWalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessWallet *BaseAccessWalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.BaseAccessWalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessWallet *BaseAccessWalletCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessWallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessWallet *BaseAccessWalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessWallet *BaseAccessWalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.contract.Transact(opts, method, params...)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "ACCESS_CONFIRMED")
	return *ret0, err
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) ACCESSCONFIRMED() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSCONFIRMED(&_BaseAccessWallet.CallOpts)
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ACCESSCONFIRMED() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSCONFIRMED(&_BaseAccessWallet.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "ACCESS_NONE")
	return *ret0, err
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) ACCESSNONE() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSNONE(&_BaseAccessWallet.CallOpts)
}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ACCESSNONE() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSNONE(&_BaseAccessWallet.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "ACCESS_TENTATIVE")
	return *ret0, err
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) ACCESSTENTATIVE() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSTENTATIVE(&_BaseAccessWallet.CallOpts)
}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ACCESSTENTATIVE() (uint8, error) {
	return _BaseAccessWallet.Contract.ACCESSTENTATIVE(&_BaseAccessWallet.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CANACCESS() (uint8, error) {
	return _BaseAccessWallet.Contract.CANACCESS(&_BaseAccessWallet.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CANACCESS() (uint8, error) {
	return _BaseAccessWallet.Contract.CANACCESS(&_BaseAccessWallet.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CANEDIT() (uint8, error) {
	return _BaseAccessWallet.Contract.CANEDIT(&_BaseAccessWallet.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CANEDIT() (uint8, error) {
	return _BaseAccessWallet.Contract.CANEDIT(&_BaseAccessWallet.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CANSEE() (uint8, error) {
	return _BaseAccessWallet.Contract.CANSEE(&_BaseAccessWallet.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CANSEE() (uint8, error) {
	return _BaseAccessWallet.Contract.CANSEE(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_CONTENT_OBJECT")
	return *ret0, err
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTENTOBJECT(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYCONTENTOBJECT() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTENTOBJECT(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_CONTENT_TYPE")
	return *ret0, err
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTENTTYPE(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYCONTENTTYPE() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTENTTYPE(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_CONTRACT")
	return *ret0, err
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYCONTRACT() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTRACT(&_BaseAccessWallet.CallOpts)
}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYCONTRACT() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYCONTRACT(&_BaseAccessWallet.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_GROUP")
	return *ret0, err
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYGROUP() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYGROUP(&_BaseAccessWallet.CallOpts)
}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYGROUP() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYGROUP(&_BaseAccessWallet.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "CATEGORY_LIBRARY")
	return *ret0, err
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) CATEGORYLIBRARY() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYLIBRARY(&_BaseAccessWallet.CallOpts)
}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CATEGORYLIBRARY() (uint8, error) {
	return _BaseAccessWallet.Contract.CATEGORYLIBRARY(&_BaseAccessWallet.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "TYPE_ACCESS")
	return *ret0, err
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) TYPEACCESS() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPEACCESS(&_BaseAccessWallet.CallOpts)
}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) TYPEACCESS() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPEACCESS(&_BaseAccessWallet.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "TYPE_EDIT")
	return *ret0, err
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) TYPEEDIT() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPEEDIT(&_BaseAccessWallet.CallOpts)
}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) TYPEEDIT() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPEEDIT(&_BaseAccessWallet.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "TYPE_SEE")
	return *ret0, err
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) TYPESEE() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPESEE(&_BaseAccessWallet.CallOpts)
}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) TYPESEE() (uint8, error) {
	return _BaseAccessWallet.Contract.TYPESEE(&_BaseAccessWallet.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "accessGroups")
	return *ret, err
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.AccessGroups(&_BaseAccessWallet.CallOpts)
}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) AccessGroups() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.AccessGroups(&_BaseAccessWallet.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) AddressKMS() (common.Address, error) {
	return _BaseAccessWallet.Contract.AddressKMS(&_BaseAccessWallet.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) AddressKMS() (common.Address, error) {
	return _BaseAccessWallet.Contract.AddressKMS(&_BaseAccessWallet.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanCommit() (bool, error) {
	return _BaseAccessWallet.Contract.CanCommit(&_BaseAccessWallet.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanCommit() (bool, error) {
	return _BaseAccessWallet.Contract.CanCommit(&_BaseAccessWallet.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanConfirm() (bool, error) {
	return _BaseAccessWallet.Contract.CanConfirm(&_BaseAccessWallet.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanConfirm() (bool, error) {
	return _BaseAccessWallet.Contract.CanConfirm(&_BaseAccessWallet.CallOpts)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canContribute", _candidate)
	return *ret0, err
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanContribute(&_BaseAccessWallet.CallOpts, _candidate)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanContribute(&_BaseAccessWallet.CallOpts, _candidate)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanEdit() (bool, error) {
	return _BaseAccessWallet.Contract.CanEdit(&_BaseAccessWallet.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanEdit() (bool, error) {
	return _BaseAccessWallet.Contract.CanEdit(&_BaseAccessWallet.CallOpts)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canPublish", _candidate)
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanPublish(&_BaseAccessWallet.CallOpts, _candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanPublish(&_BaseAccessWallet.CallOpts, _candidate)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "canReview", arg0)
	return *ret0, err
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CanReview(arg0 common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanReview(&_BaseAccessWallet.CallOpts, arg0)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CanReview(arg0 common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.CanReview(&_BaseAccessWallet.CallOpts, arg0)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkDirectRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckDirectRights(&_BaseAccessWallet.CallOpts, index_type, obj, access_type)
}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckDirectRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckDirectRights(&_BaseAccessWallet.CallOpts, index_type, obj, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "checkRights", index_type, obj, access_type)
	return *ret0, err
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckRights(&_BaseAccessWallet.CallOpts, index_type, obj, access_type)
}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CheckRights(index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	return _BaseAccessWallet.Contract.CheckRights(&_BaseAccessWallet.CallOpts, index_type, obj, access_type)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) CommitPending() (bool, error) {
	return _BaseAccessWallet.Contract.CommitPending(&_BaseAccessWallet.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CommitPending() (bool, error) {
	return _BaseAccessWallet.Contract.CommitPending(&_BaseAccessWallet.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "contentObjects")
	return *ret, err
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.ContentObjects(&_BaseAccessWallet.CallOpts)
}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentObjects() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.ContentObjects(&_BaseAccessWallet.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentSpace() (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentSpace(&_BaseAccessWallet.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentSpace() (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentSpace(&_BaseAccessWallet.CallOpts)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contentTypeContracts", arg0)
	return *ret0, err
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentTypeContracts(&_BaseAccessWallet.CallOpts, arg0)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentTypeContracts(&_BaseAccessWallet.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contentTypes", arg0)
	return *ret0, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentTypes(&_BaseAccessWallet.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.ContentTypes(&_BaseAccessWallet.CallOpts, arg0)
}

// ContentTypes0 is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypes0(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "contentTypes0")
	return *ret, err
}

// ContentTypes0 is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentTypes0() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.ContentTypes0(&_BaseAccessWallet.CallOpts)
}

// ContentTypes0 is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentTypes0() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.ContentTypes0(&_BaseAccessWallet.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contentTypesLength")
	return *ret0, err
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) ContentTypesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ContentTypesLength(&_BaseAccessWallet.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContentTypesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ContentTypesLength(&_BaseAccessWallet.CallOpts)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "contractExists", addr)
	return *ret0, err
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ContractExists(addr common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.ContractExists(&_BaseAccessWallet.CallOpts, addr)
}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ContractExists(addr common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.ContractExists(&_BaseAccessWallet.CallOpts, addr)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "contracts")
	return *ret, err
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Contracts(&_BaseAccessWallet.CallOpts)
}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Contracts() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Contracts(&_BaseAccessWallet.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CountVersionHashes() (*big.Int, error) {
	return _BaseAccessWallet.Contract.CountVersionHashes(&_BaseAccessWallet.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseAccessWallet.Contract.CountVersionHashes(&_BaseAccessWallet.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) Creator() (common.Address, error) {
	return _BaseAccessWallet.Contract.Creator(&_BaseAccessWallet.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Creator() (common.Address, error) {
	return _BaseAccessWallet.Contract.Creator(&_BaseAccessWallet.CallOpts)
}

// CurrentTimestamp is a free data retrieval call binding the contract method 0x1e2ff94f.
//
// Solidity: function currentTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) CurrentTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "currentTimestamp")
	return *ret0, err
}

// CurrentTimestamp is a free data retrieval call binding the contract method 0x1e2ff94f.
//
// Solidity: function currentTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CurrentTimestamp() (*big.Int, error) {
	return _BaseAccessWallet.Contract.CurrentTimestamp(&_BaseAccessWallet.CallOpts)
}

// CurrentTimestamp is a free data retrieval call binding the contract method 0x1e2ff94f.
//
// Solidity: function currentTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) CurrentTimestamp() (*big.Int, error) {
	return _BaseAccessWallet.Contract.CurrentTimestamp(&_BaseAccessWallet.CallOpts)
}

// ExecStatusBalanceFail is a free data retrieval call binding the contract method 0x9476c478.
//
// Solidity: function execStatusBalanceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusBalanceFail(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusBalanceFail")
	return *ret0, err
}

// ExecStatusBalanceFail is a free data retrieval call binding the contract method 0x9476c478.
//
// Solidity: function execStatusBalanceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusBalanceFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusBalanceFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusBalanceFail is a free data retrieval call binding the contract method 0x9476c478.
//
// Solidity: function execStatusBalanceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusBalanceFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusBalanceFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusNonceFail is a free data retrieval call binding the contract method 0x04f55daf.
//
// Solidity: function execStatusNonceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusNonceFail(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusNonceFail")
	return *ret0, err
}

// ExecStatusNonceFail is a free data retrieval call binding the contract method 0x04f55daf.
//
// Solidity: function execStatusNonceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusNonceFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusNonceFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusNonceFail is a free data retrieval call binding the contract method 0x04f55daf.
//
// Solidity: function execStatusNonceFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusNonceFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusNonceFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusOk is a free data retrieval call binding the contract method 0x95ba60ba.
//
// Solidity: function execStatusOk() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusOk(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusOk")
	return *ret0, err
}

// ExecStatusOk is a free data retrieval call binding the contract method 0x95ba60ba.
//
// Solidity: function execStatusOk() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusOk() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusOk(&_BaseAccessWallet.CallOpts)
}

// ExecStatusOk is a free data retrieval call binding the contract method 0x95ba60ba.
//
// Solidity: function execStatusOk() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusOk() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusOk(&_BaseAccessWallet.CallOpts)
}

// ExecStatusSendFail is a free data retrieval call binding the contract method 0x07a08237.
//
// Solidity: function execStatusSendFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusSendFail(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusSendFail")
	return *ret0, err
}

// ExecStatusSendFail is a free data retrieval call binding the contract method 0x07a08237.
//
// Solidity: function execStatusSendFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusSendFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusSendFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusSendFail is a free data retrieval call binding the contract method 0x07a08237.
//
// Solidity: function execStatusSendFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusSendFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusSendFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusSigFail is a free data retrieval call binding the contract method 0xeb23b7aa.
//
// Solidity: function execStatusSigFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusSigFail(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "execStatusSigFail")
	return *ret0, err
}

// ExecStatusSigFail is a free data retrieval call binding the contract method 0xeb23b7aa.
//
// Solidity: function execStatusSigFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) ExecStatusSigFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusSigFail(&_BaseAccessWallet.CallOpts)
}

// ExecStatusSigFail is a free data retrieval call binding the contract method 0xeb23b7aa.
//
// Solidity: function execStatusSigFail() constant returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ExecStatusSigFail() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ExecStatusSigFail(&_BaseAccessWallet.CallOpts)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "findTypeByHash", typeHash)
	return *ret0, err
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseAccessWallet.Contract.FindTypeByHash(&_BaseAccessWallet.CallOpts, typeHash)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseAccessWallet.Contract.FindTypeByHash(&_BaseAccessWallet.CallOpts, typeHash)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getAccessGroup", position)
	return *ret0, err
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetAccessGroup(&_BaseAccessWallet.CallOpts, position)
}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetAccessGroup(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetAccessGroup(&_BaseAccessWallet.CallOpts, position)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getAccessGroupRights", group)
	return *ret0, err
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetAccessGroupRights(&_BaseAccessWallet.CallOpts, group)
}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetAccessGroupRights(group common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetAccessGroupRights(&_BaseAccessWallet.CallOpts, group)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getAccessGroupsLength")
	return *ret0, err
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetAccessGroupsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetAccessGroupsLength(&_BaseAccessWallet.CallOpts)
}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetAccessGroupsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetAccessGroupsLength(&_BaseAccessWallet.CallOpts)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentObject", position)
	return *ret0, err
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContentObject(&_BaseAccessWallet.CallOpts, position)
}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentObject(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContentObject(&_BaseAccessWallet.CallOpts, position)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentObjectRights", obj)
	return *ret0, err
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContentObjectRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentObjectRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContentObjectRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentObjectsLength")
	return *ret0, err
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentObjectsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContentObjectsLength(&_BaseAccessWallet.CallOpts)
}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentObjectsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContentObjectsLength(&_BaseAccessWallet.CallOpts)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentType", position)
	return *ret0, err
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentType(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContentType(&_BaseAccessWallet.CallOpts, position)
}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentType(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContentType(&_BaseAccessWallet.CallOpts, position)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentTypeRights", obj)
	return *ret0, err
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContentTypeRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentTypeRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContentTypeRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContentTypesLength")
	return *ret0, err
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContentTypesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContentTypesLength(&_BaseAccessWallet.CallOpts)
}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContentTypesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContentTypesLength(&_BaseAccessWallet.CallOpts)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContract", position)
	return *ret0, err
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContract(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContract(&_BaseAccessWallet.CallOpts, position)
}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContract(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetContract(&_BaseAccessWallet.CallOpts, position)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContractRights", obj)
	return *ret0, err
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContractRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContractRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContractRights(obj common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetContractRights(&_BaseAccessWallet.CallOpts, obj)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getContractsLength")
	return *ret0, err
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetContractsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContractsLength(&_BaseAccessWallet.CallOpts)
}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetContractsLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetContractsLength(&_BaseAccessWallet.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getLibrariesLength")
	return *ret0, err
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) GetLibrariesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetLibrariesLength(&_BaseAccessWallet.CallOpts)
}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetLibrariesLength() (*big.Int, error) {
	return _BaseAccessWallet.Contract.GetLibrariesLength(&_BaseAccessWallet.CallOpts)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getLibrary", position)
	return *ret0, err
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetLibrary(&_BaseAccessWallet.CallOpts, position)
}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetLibrary(position *big.Int) (common.Address, error) {
	return _BaseAccessWallet.Contract.GetLibrary(&_BaseAccessWallet.CallOpts, position)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getLibraryRights", lib)
	return *ret0, err
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetLibraryRights(&_BaseAccessWallet.CallOpts, lib)
}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetLibraryRights(lib common.Address) (uint8, error) {
	return _BaseAccessWallet.Contract.GetLibraryRights(&_BaseAccessWallet.CallOpts, lib)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseAccessWallet *BaseAccessWalletSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseAccessWallet.Contract.GetMeta(&_BaseAccessWallet.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseAccessWallet.Contract.GetMeta(&_BaseAccessWallet.CallOpts, key)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasAccess(&_BaseAccessWallet.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasAccess(&_BaseAccessWallet.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasEditorRight(&_BaseAccessWallet.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasEditorRight(&_BaseAccessWallet.CallOpts, candidate)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) HasManagerAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "hasManagerAccess", candidate)
	return *ret0, err
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) HasManagerAccess(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasManagerAccess(&_BaseAccessWallet.CallOpts, candidate)
}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) HasManagerAccess(candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.HasManagerAccess(&_BaseAccessWallet.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) IndexCategory() (uint8, error) {
	return _BaseAccessWallet.Contract.IndexCategory(&_BaseAccessWallet.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) IndexCategory() (uint8, error) {
	return _BaseAccessWallet.Contract.IndexCategory(&_BaseAccessWallet.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.IsAdmin(&_BaseAccessWallet.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.IsAdmin(&_BaseAccessWallet.CallOpts, _candidate)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "libraries")
	return *ret, err
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Libraries(&_BaseAccessWallet.CallOpts)
}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Libraries() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Libraries(&_BaseAccessWallet.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletSession) ObjectHash() (string, error) {
	return _BaseAccessWallet.Contract.ObjectHash(&_BaseAccessWallet.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ObjectHash() (string, error) {
	return _BaseAccessWallet.Contract.ObjectHash(&_BaseAccessWallet.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ObjectTimestamp(&_BaseAccessWallet.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseAccessWallet.Contract.ObjectTimestamp(&_BaseAccessWallet.CallOpts)
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) Others(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	ret := new(struct {
		Category uint8
		Length   *big.Int
	})
	out := ret
	err := _BaseAccessWallet.contract.Call(opts, out, "others")
	return *ret, err
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletSession) Others() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Others(&_BaseAccessWallet.CallOpts)
}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() constant returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Others() (struct {
	Category uint8
	Length   *big.Int
}, error) {
	return _BaseAccessWallet.Contract.Others(&_BaseAccessWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) Owner() (common.Address, error) {
	return _BaseAccessWallet.Contract.Owner(&_BaseAccessWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Owner() (common.Address, error) {
	return _BaseAccessWallet.Contract.Owner(&_BaseAccessWallet.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletSession) ParentAddress() (common.Address, error) {
	return _BaseAccessWallet.Contract.ParentAddress(&_BaseAccessWallet.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ParentAddress() (common.Address, error) {
	return _BaseAccessWallet.Contract.ParentAddress(&_BaseAccessWallet.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletSession) PendingHash() (string, error) {
	return _BaseAccessWallet.Contract.PendingHash(&_BaseAccessWallet.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) PendingHash() (string, error) {
	return _BaseAccessWallet.Contract.PendingHash(&_BaseAccessWallet.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "requiresReview")
	return *ret0, err
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) RequiresReview() (bool, error) {
	return _BaseAccessWallet.Contract.RequiresReview(&_BaseAccessWallet.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) RequiresReview() (bool, error) {
	return _BaseAccessWallet.Contract.RequiresReview(&_BaseAccessWallet.CallOpts)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "validType", content_type)
	return *ret0, err
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.ValidType(&_BaseAccessWallet.CallOpts, content_type)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.ValidType(&_BaseAccessWallet.CallOpts, content_type)
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidateTimestamp(opts *bind.CallOpts, _ts *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "validateTimestamp", _ts)
	return *ret0, err
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ValidateTimestamp(_ts *big.Int) (bool, error) {
	return _BaseAccessWallet.Contract.ValidateTimestamp(&_BaseAccessWallet.CallOpts, _ts)
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ValidateTimestamp(_ts *big.Int) (bool, error) {
	return _BaseAccessWallet.Contract.ValidateTimestamp(&_BaseAccessWallet.CallOpts, _ts)
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidateTransaction(opts *bind.CallOpts, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "validateTransaction", _v, _r, _s, _dest, _value, _ts)
	return *ret0, err
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ValidateTransaction(_v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	return _BaseAccessWallet.Contract.ValidateTransaction(&_BaseAccessWallet.CallOpts, _v, _r, _s, _dest, _value, _ts)
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) ValidateTransaction(_v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	return _BaseAccessWallet.Contract.ValidateTransaction(&_BaseAccessWallet.CallOpts, _v, _r, _s, _dest, _value, _ts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletSession) Version() ([32]byte, error) {
	return _BaseAccessWallet.Contract.Version(&_BaseAccessWallet.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Version() ([32]byte, error) {
	return _BaseAccessWallet.Contract.Version(&_BaseAccessWallet.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletSession) VersionAPI() ([32]byte, error) {
	return _BaseAccessWallet.Contract.VersionAPI(&_BaseAccessWallet.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseAccessWallet.Contract.VersionAPI(&_BaseAccessWallet.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseAccessWallet.Contract.VersionHashes(&_BaseAccessWallet.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseAccessWallet.Contract.VersionHashes(&_BaseAccessWallet.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseAccessWallet.Contract.VersionTimestamp(&_BaseAccessWallet.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseAccessWallet.Contract.VersionTimestamp(&_BaseAccessWallet.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletSession) Visibility() (uint8, error) {
	return _BaseAccessWallet.Contract.Visibility(&_BaseAccessWallet.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) Visibility() (uint8, error) {
	return _BaseAccessWallet.Contract.Visibility(&_BaseAccessWallet.CallOpts)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseAccessWallet.contract.Call(opts, out, "whitelistedType", content_type)
	return *ret0, err
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.WhitelistedType(&_BaseAccessWallet.CallOpts, content_type)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCallerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseAccessWallet.Contract.WhitelistedType(&_BaseAccessWallet.CallOpts, content_type)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) AccessRequestV3(opts *bind.TransactOpts, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "accessRequestV3", customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.AccessRequestV3(&_BaseAccessWallet.TransactOpts, customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.AccessRequestV3(&_BaseAccessWallet.TransactOpts, customValues, stakeholders)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.AddContentType(&_BaseAccessWallet.TransactOpts, content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.AddContentType(&_BaseAccessWallet.TransactOpts, content_type, content_contract)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpAccessGroups(&_BaseAccessWallet.TransactOpts)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpAccessGroups() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpAccessGroups(&_BaseAccessWallet.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpAll")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpAll() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpAll(&_BaseAccessWallet.TransactOpts)
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpAll() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpAll(&_BaseAccessWallet.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpContentObjects(&_BaseAccessWallet.TransactOpts)
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpContentObjects() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpContentObjects(&_BaseAccessWallet.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpContentTypes(&_BaseAccessWallet.TransactOpts)
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpContentTypes() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpContentTypes(&_BaseAccessWallet.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpLibraries")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletSession) CleanUpLibraries() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpLibraries(&_BaseAccessWallet.TransactOpts)
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) CleanUpLibraries() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.CleanUpLibraries(&_BaseAccessWallet.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessWallet *BaseAccessWalletSession) ClearPending() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ClearPending(&_BaseAccessWallet.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ClearPending(&_BaseAccessWallet.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Commit(&_BaseAccessWallet.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Commit(&_BaseAccessWallet.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ConfirmCommit(&_BaseAccessWallet.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.ConfirmCommit(&_BaseAccessWallet.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessWallet *BaseAccessWalletSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.DeleteVersion(&_BaseAccessWallet.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.DeleteVersion(&_BaseAccessWallet.TransactOpts, _versionHash)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) Execute(opts *bind.TransactOpts, _guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "execute", _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) Execute(_guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Execute(&_BaseAccessWallet.TransactOpts, _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) Execute(_guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Execute(&_BaseAccessWallet.TransactOpts, _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWallet *BaseAccessWalletSession) Kill() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Kill(&_BaseAccessWallet.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Kill(&_BaseAccessWallet.TransactOpts)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "publish", contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Publish(&_BaseAccessWallet.TransactOpts, contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.Publish(&_BaseAccessWallet.TransactOpts, contentObj)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.PutMeta(&_BaseAccessWallet.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.PutMeta(&_BaseAccessWallet.TransactOpts, key, value)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.RemoveContentType(&_BaseAccessWallet.TransactOpts, content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.RemoveContentType(&_BaseAccessWallet.TransactOpts, content_type)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAccessGroupRights(&_BaseAccessWallet.TransactOpts, group, access_type, access)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetAccessGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAccessGroupRights(&_BaseAccessWallet.TransactOpts, group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAccessRights")
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetAccessRights() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAccessRights(&_BaseAccessWallet.TransactOpts)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetAccessRights() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAccessRights(&_BaseAccessWallet.TransactOpts)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAddressKMS(&_BaseAccessWallet.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetAddressKMS(&_BaseAccessWallet.TransactOpts, address_KMS)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentObjectRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetContentObjectRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentObjectRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentSpace(&_BaseAccessWallet.TransactOpts, content_space)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetContentSpace(content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentSpace(&_BaseAccessWallet.TransactOpts, content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentTypeRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetContentTypeRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContentTypeRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContractRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetContractRights(obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetContractRights(&_BaseAccessWallet.TransactOpts, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetEntityRights(opts *bind.TransactOpts, indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setEntityRights", indexType, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetEntityRights(indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetEntityRights(&_BaseAccessWallet.TransactOpts, indexType, obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetEntityRights(indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetEntityRights(&_BaseAccessWallet.TransactOpts, indexType, obj, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetGroupRights(&_BaseAccessWallet.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetGroupRights(&_BaseAccessWallet.TransactOpts, group, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetLibraryRights(&_BaseAccessWallet.TransactOpts, lib, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetLibraryRights(lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetLibraryRights(&_BaseAccessWallet.TransactOpts, lib, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetRights(&_BaseAccessWallet.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetRights(&_BaseAccessWallet.TransactOpts, stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetVisibility(&_BaseAccessWallet.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.SetVisibility(&_BaseAccessWallet.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.TransferCreatorship(&_BaseAccessWallet.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.TransferCreatorship(&_BaseAccessWallet.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWallet *BaseAccessWalletSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.TransferOwnership(&_BaseAccessWallet.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.TransferOwnership(&_BaseAccessWallet.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessWallet *BaseAccessWalletSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.UpdateRequest(&_BaseAccessWallet.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseAccessWallet.Contract.UpdateRequest(&_BaseAccessWallet.TransactOpts)
}

// BaseAccessWalletAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseAccessWallet contract.
type BaseAccessWalletAccessRequestV3Iterator struct {
	Event *BaseAccessWalletAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletAccessRequestV3 represents a AccessRequestV3 event raised by the BaseAccessWallet contract.
type BaseAccessWalletAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseAccessWalletAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletAccessRequestV3Iterator{contract: _BaseAccessWallet.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletAccessRequestV3)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseAccessRequestV3(log types.Log) (*BaseAccessWalletAccessRequestV3, error) {
	event := new(BaseAccessWalletAccessRequestV3)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseAccessWallet contract.
type BaseAccessWalletCommitPendingIterator struct {
	Event *BaseAccessWalletCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletCommitPending represents a CommitPending event raised by the BaseAccessWallet contract.
type BaseAccessWalletCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseAccessWalletCommitPendingIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletCommitPendingIterator{contract: _BaseAccessWallet.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletCommitPending)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseCommitPending(log types.Log) (*BaseAccessWalletCommitPending, error) {
	event := new(BaseAccessWalletCommitPending)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeAddedIterator struct {
	Event *BaseAccessWalletContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletContentTypeAdded represents a ContentTypeAdded event raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseAccessWalletContentTypeAddedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletContentTypeAddedIterator{contract: _BaseAccessWallet.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletContentTypeAdded)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseContentTypeAdded(log types.Log) (*BaseAccessWalletContentTypeAdded, error) {
	event := new(BaseAccessWalletContentTypeAdded)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeRemovedIterator struct {
	Event *BaseAccessWalletContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseAccessWalletContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletContentTypeRemovedIterator{contract: _BaseAccessWallet.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletContentTypeRemoved)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseContentTypeRemoved(log types.Log) (*BaseAccessWalletContentTypeRemoved, error) {
	event := new(BaseAccessWalletContentTypeRemoved)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletExecStatusIterator is returned from FilterExecStatus and is used to iterate over the raw logs and unpacked data for ExecStatus events raised by the BaseAccessWallet contract.
type BaseAccessWalletExecStatusIterator struct {
	Event *BaseAccessWalletExecStatus // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletExecStatusIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletExecStatus)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletExecStatus)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletExecStatusIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletExecStatusIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletExecStatus represents a ExecStatus event raised by the BaseAccessWallet contract.
type BaseAccessWalletExecStatus struct {
	Guarantor common.Address
	Code      *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterExecStatus is a free log retrieval operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterExecStatus(opts *bind.FilterOpts) (*BaseAccessWalletExecStatusIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ExecStatus")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletExecStatusIterator{contract: _BaseAccessWallet.contract, event: "ExecStatus", logs: logs, sub: sub}, nil
}

// WatchExecStatus is a free log subscription operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchExecStatus(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletExecStatus) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ExecStatus")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletExecStatus)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ExecStatus", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecStatus is a log parse operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseExecStatus(log types.Log) (*BaseAccessWalletExecStatus, error) {
	event := new(BaseAccessWalletExecStatus)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ExecStatus", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseAccessWallet contract.
type BaseAccessWalletObjectMetaChangedIterator struct {
	Event *BaseAccessWalletObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseAccessWallet contract.
type BaseAccessWalletObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseAccessWalletObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletObjectMetaChangedIterator{contract: _BaseAccessWallet.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletObjectMetaChanged)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseObjectMetaChanged(log types.Log) (*BaseAccessWalletObjectMetaChanged, error) {
	event := new(BaseAccessWalletObjectMetaChanged)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the BaseAccessWallet contract.
type BaseAccessWalletRightsChangedIterator struct {
	Event *BaseAccessWalletRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletRightsChanged represents a RightsChanged event raised by the BaseAccessWallet contract.
type BaseAccessWalletRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*BaseAccessWalletRightsChangedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletRightsChangedIterator{contract: _BaseAccessWallet.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletRightsChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletRightsChanged)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseRightsChanged(log types.Log) (*BaseAccessWalletRightsChanged, error) {
	event := new(BaseAccessWalletRightsChanged)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseAccessWallet contract.
type BaseAccessWalletUpdateRequestIterator struct {
	Event *BaseAccessWalletUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletUpdateRequest represents a UpdateRequest event raised by the BaseAccessWallet contract.
type BaseAccessWalletUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseAccessWalletUpdateRequestIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletUpdateRequestIterator{contract: _BaseAccessWallet.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletUpdateRequest)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseUpdateRequest(log types.Log) (*BaseAccessWalletUpdateRequest, error) {
	event := new(BaseAccessWalletUpdateRequest)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionConfirmIterator struct {
	Event *BaseAccessWalletVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletVersionConfirm represents a VersionConfirm event raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseAccessWalletVersionConfirmIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletVersionConfirmIterator{contract: _BaseAccessWallet.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletVersionConfirm)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseVersionConfirm(log types.Log) (*BaseAccessWalletVersionConfirm, error) {
	event := new(BaseAccessWalletVersionConfirm)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionDeleteIterator struct {
	Event *BaseAccessWalletVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletVersionDelete represents a VersionDelete event raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseAccessWalletVersionDeleteIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletVersionDeleteIterator{contract: _BaseAccessWallet.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletVersionDelete)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseVersionDelete(log types.Log) (*BaseAccessWalletVersionDelete, error) {
	event := new(BaseAccessWalletVersionDelete)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseAccessWallet contract.
type BaseAccessWalletVisibilityChangedIterator struct {
	Event *BaseAccessWalletVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletVisibilityChanged represents a VisibilityChanged event raised by the BaseAccessWallet contract.
type BaseAccessWalletVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseAccessWalletVisibilityChangedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletVisibilityChangedIterator{contract: _BaseAccessWallet.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletVisibilityChanged)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseVisibilityChanged(log types.Log) (*BaseAccessWalletVisibilityChanged, error) {
	event := new(BaseAccessWalletVisibilityChanged)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAccessWalletFactoryABI is the input ABI used to generate the binding from.
const BaseAccessWalletFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseAccessWalletFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessWalletFactoryFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"7708bc41": "createAccessWallet()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// BaseAccessWalletFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseAccessWalletFactoryBin = ""

// DeployBaseAccessWalletFactory deploys a new Ethereum contract, binding an instance of BaseAccessWalletFactory to it.
func DeployBaseAccessWalletFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseAccessWalletFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessWalletFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseAccessWalletFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessWalletFactory{BaseAccessWalletFactoryCaller: BaseAccessWalletFactoryCaller{contract: contract}, BaseAccessWalletFactoryTransactor: BaseAccessWalletFactoryTransactor{contract: contract}, BaseAccessWalletFactoryFilterer: BaseAccessWalletFactoryFilterer{contract: contract}}, nil
}

// BaseAccessWalletFactory is an auto generated Go binding around an Ethereum contract.
type BaseAccessWalletFactory struct {
	BaseAccessWalletFactoryCaller     // Read-only binding to the contract
	BaseAccessWalletFactoryTransactor // Write-only binding to the contract
	BaseAccessWalletFactoryFilterer   // Log filterer for contract events
}

// BaseAccessWalletFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessWalletFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseAccessWalletFactorySession struct {
	Contract     *BaseAccessWalletFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// BaseAccessWalletFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseAccessWalletFactoryCallerSession struct {
	Contract *BaseAccessWalletFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// BaseAccessWalletFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseAccessWalletFactoryTransactorSession struct {
	Contract     *BaseAccessWalletFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// BaseAccessWalletFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseAccessWalletFactoryRaw struct {
	Contract *BaseAccessWalletFactory // Generic contract binding to access the raw methods on
}

// BaseAccessWalletFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryCallerRaw struct {
	Contract *BaseAccessWalletFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseAccessWalletFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryTransactorRaw struct {
	Contract *BaseAccessWalletFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseAccessWalletFactory creates a new instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactory(address common.Address, backend bind.ContractBackend) (*BaseAccessWalletFactory, error) {
	contract, err := bindBaseAccessWalletFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactory{BaseAccessWalletFactoryCaller: BaseAccessWalletFactoryCaller{contract: contract}, BaseAccessWalletFactoryTransactor: BaseAccessWalletFactoryTransactor{contract: contract}, BaseAccessWalletFactoryFilterer: BaseAccessWalletFactoryFilterer{contract: contract}}, nil
}

// NewBaseAccessWalletFactoryCaller creates a new read-only instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessWalletFactoryCaller, error) {
	contract, err := bindBaseAccessWalletFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryCaller{contract: contract}, nil
}

// NewBaseAccessWalletFactoryTransactor creates a new write-only instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessWalletFactoryTransactor, error) {
	contract, err := bindBaseAccessWalletFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryTransactor{contract: contract}, nil
}

// NewBaseAccessWalletFactoryFilterer creates a new log filterer instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessWalletFactoryFilterer, error) {
	contract, err := bindBaseAccessWalletFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryFilterer{contract: contract}, nil
}

// bindBaseAccessWalletFactory binds a generic wrapper to an already deployed contract.
func bindBaseAccessWalletFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAccessWalletFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessWalletFactory.Contract.BaseAccessWalletFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.BaseAccessWalletFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.BaseAccessWalletFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAccessWalletFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWalletFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) ContentSpace() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.ContentSpace(&_BaseAccessWalletFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.ContentSpace(&_BaseAccessWalletFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWalletFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) Creator() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.Creator(&_BaseAccessWalletFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.Creator(&_BaseAccessWalletFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseAccessWalletFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) Owner() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.Owner(&_BaseAccessWalletFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseAccessWalletFactory.Contract.Owner(&_BaseAccessWalletFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessWalletFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) Version() ([32]byte, error) {
	return _BaseAccessWalletFactory.Contract.Version(&_BaseAccessWalletFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseAccessWalletFactory.Contract.Version(&_BaseAccessWalletFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseAccessWalletFactory.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) VersionAPI() ([32]byte, error) {
	return _BaseAccessWalletFactory.Contract.VersionAPI(&_BaseAccessWalletFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseAccessWalletFactory.Contract.VersionAPI(&_BaseAccessWalletFactory.CallOpts)
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) CreateAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "createAccessWallet")
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) CreateAccessWallet() (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.CreateAccessWallet(&_BaseAccessWalletFactory.TransactOpts)
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorSession) CreateAccessWallet() (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.CreateAccessWallet(&_BaseAccessWalletFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) Kill() (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.Kill(&_BaseAccessWalletFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.Kill(&_BaseAccessWalletFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.TransferCreatorship(&_BaseAccessWalletFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.TransferCreatorship(&_BaseAccessWalletFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.TransferOwnership(&_BaseAccessWalletFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.Contract.TransferOwnership(&_BaseAccessWalletFactory.TransactOpts, newOwner)
}

// BaseContentABI is the input ABI used to generate the binding from.
const BaseContentABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_PUBLISHED\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"request_ID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accessComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"name\":\"payee\",\"type\":\"address\"},{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"processRequestPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestMap\",\"outputs\":[{\"name\":\"originator\",\"type\":\"address\"},{\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"int8\"},{\"name\":\"settled\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statusCode\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"status_code\",\"type\":\"int256\"}],\"name\":\"statusCodeDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"getAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessCompleteV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessCompleteInternal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_DRAFT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status_code\",\"type\":\"int256\"}],\"name\":\"setStatusCode\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"name\":\"accessor\",\"type\":\"address\"},{\"name\":\"request_timestamp\",\"type\":\"uint256\"}],\"name\":\"accessRequestContext\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accessor\",\"type\":\"address\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"getAccessInfoV3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status_code\",\"type\":\"int256\"}],\"name\":\"updateStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"reqId\",\"type\":\"uint256\"}],\"name\":\"makeNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"pkeRequestor\",\"type\":\"string\"},{\"name\":\"pkeAFGH\",\"type\":\"string\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestNonce\",\"type\":\"uint256\"},{\"name\":\"_contextHash\",\"type\":\"bytes32\"},{\"name\":\"_accessor\",\"type\":\"address\"},{\"name\":\"_request_timestamp\",\"type\":\"uint256\"}],\"name\":\"accessCompleteContext\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accessor\",\"type\":\"address\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"getCustomInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_REVIEW\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContentContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"charge\",\"type\":\"uint256\"}],\"name\":\"setAccessCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statusDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"},{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"containingLibrary\",\"type\":\"address\"}],\"name\":\"ContentObjectCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContractAddress\",\"type\":\"address\"}],\"name\":\"SetContentType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customValue\",\"type\":\"bytes32\"}],\"name\":\"AccessRequestValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"AccessRequestStakeholder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"contentHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pkeRequestor\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pkeAFGH\",\"type\":\"string\"}],\"name\":\"AccessRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scorePct\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customContractResult\",\"type\":\"bool\"}],\"name\":\"AccessComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customContractResult\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"request_timestamp\",\"type\":\"uint256\"}],\"name\":\"AccessCompleteV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentContractAddress\",\"type\":\"address\"}],\"name\":\"SetContentContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accessCharge\",\"type\":\"uint256\"}],\"name\":\"SetAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accessCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountProvided\",\"type\":\"uint256\"}],\"name\":\"InsufficientFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"statusCode\",\"type\":\"int256\"}],\"name\":\"SetStatusCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestStatus\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"statusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"Publish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"custom_contract\",\"type\":\"address\"}],\"name\":\"InvokeCustomPreHook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"custom_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"ReturnCustomHook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"custom_contract\",\"type\":\"address\"}],\"name\":\"InvokeCustomPostHook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// BaseContentFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"4dd70788": "STATUS_DRAFT()",
	"0017de98": "STATUS_PUBLISHED()",
	"d810f8c8": "STATUS_REVIEW()",
	"64ade32b": "accessCharge()",
	"0593e335": "accessComplete(uint256,uint256,uint256)",
	"bc7dba33": "accessCompleteContext(uint256,bytes32,address,uint256)",
	"484f4b3b": "accessCompleteInternal(uint256,bytes32[],address[])",
	"45155f6e": "accessCompleteV3(uint256,bytes32[],address[])",
	"a1ff106e": "accessRequest(uint8,string,string,bytes32[],address[])",
	"78f52ffb": "accessRequestContext(uint256,bytes32,address,uint256)",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"32eaf21b": "addressKMS()",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"81beeb64": "canEdit()",
	"cbcd4461": "canPublish()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"2310167f": "contentContractAddress()",
	"af570c04": "contentSpace()",
	"36ebffca": "contentType()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"38d0f504": "getAccessInfo(uint8,bytes32[],address[])",
	"7ddc2c56": "getAccessInfoV3(address,bytes32[],address[])",
	"c26484a6": "getCustomInfo(address,bytes32[],address[])",
	"a8d4160e": "getKMSInfo(bytes)",
	"ac55c906": "getMeta(bytes)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"6380501f": "indexCategory()",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"b816f513": "libraryAddress()",
	"8ee3a900": "makeNonce(uint256)",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"0c6d3f93": "processRequestPayment(uint256,address,string,uint256)",
	"075d4782": "publish()",
	"e542b7cb": "putMeta(bytes,bytes)",
	"8f779201": "requestID()",
	"1a735f18": "requestMap(uint256)",
	"f4d9bae8": "setAccessCharge(uint256)",
	"c9e8e72d": "setAddressKMS(address)",
	"e5385303": "setContentContractAddress(address)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"5267db44": "setStatusCode(int256)",
	"aa024e8b": "setVisibility(uint8)",
	"27c1c21d": "statusCode()",
	"38864284": "statusCodeDescription(int256)",
	"f81ab0ae": "statusDescription()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"8280dd8f": "updateStatus(int256)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
}

// BaseContentBin is the compiled bytecode used for deploying new contracts.
var BaseContentBin = ""

// DeployBaseContent deploys a new Ethereum contract, binding an instance of BaseContent to it.
func DeployBaseContent(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address, lib common.Address, content_type common.Address) (common.Address, *types.Transaction, *BaseContent, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseContentBin), backend, content_space, lib, content_type)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContent{BaseContentCaller: BaseContentCaller{contract: contract}, BaseContentTransactor: BaseContentTransactor{contract: contract}, BaseContentFilterer: BaseContentFilterer{contract: contract}}, nil
}

// BaseContent is an auto generated Go binding around an Ethereum contract.
type BaseContent struct {
	BaseContentCaller     // Read-only binding to the contract
	BaseContentTransactor // Write-only binding to the contract
	BaseContentFilterer   // Log filterer for contract events
}

// BaseContentCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseContentSession struct {
	Contract     *BaseContent      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseContentCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseContentCallerSession struct {
	Contract *BaseContentCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// BaseContentTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseContentTransactorSession struct {
	Contract     *BaseContentTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// BaseContentRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseContentRaw struct {
	Contract *BaseContent // Generic contract binding to access the raw methods on
}

// BaseContentCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseContentCallerRaw struct {
	Contract *BaseContentCaller // Generic read-only contract binding to access the raw methods on
}

// BaseContentTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseContentTransactorRaw struct {
	Contract *BaseContentTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseContent creates a new instance of BaseContent, bound to a specific deployed contract.
func NewBaseContent(address common.Address, backend bind.ContractBackend) (*BaseContent, error) {
	contract, err := bindBaseContent(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContent{BaseContentCaller: BaseContentCaller{contract: contract}, BaseContentTransactor: BaseContentTransactor{contract: contract}, BaseContentFilterer: BaseContentFilterer{contract: contract}}, nil
}

// NewBaseContentCaller creates a new read-only instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentCaller(address common.Address, caller bind.ContractCaller) (*BaseContentCaller, error) {
	contract, err := bindBaseContent(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentCaller{contract: contract}, nil
}

// NewBaseContentTransactor creates a new write-only instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentTransactor, error) {
	contract, err := bindBaseContent(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTransactor{contract: contract}, nil
}

// NewBaseContentFilterer creates a new log filterer instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentFilterer, error) {
	contract, err := bindBaseContent(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentFilterer{contract: contract}, nil
}

// bindBaseContent binds a generic wrapper to an already deployed contract.
func bindBaseContent(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContent *BaseContentRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContent.Contract.BaseContentCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContent *BaseContentRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.Contract.BaseContentTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContent *BaseContentRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContent.Contract.BaseContentTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContent *BaseContentCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContent.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContent *BaseContentTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContent *BaseContentTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContent.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContent *BaseContentCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContent *BaseContentSession) CANACCESS() (uint8, error) {
	return _BaseContent.Contract.CANACCESS(&_BaseContent.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContent *BaseContentCallerSession) CANACCESS() (uint8, error) {
	return _BaseContent.Contract.CANACCESS(&_BaseContent.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContent *BaseContentCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContent *BaseContentSession) CANEDIT() (uint8, error) {
	return _BaseContent.Contract.CANEDIT(&_BaseContent.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContent *BaseContentCallerSession) CANEDIT() (uint8, error) {
	return _BaseContent.Contract.CANEDIT(&_BaseContent.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContent *BaseContentCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContent *BaseContentSession) CANSEE() (uint8, error) {
	return _BaseContent.Contract.CANSEE(&_BaseContent.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContent *BaseContentCallerSession) CANSEE() (uint8, error) {
	return _BaseContent.Contract.CANSEE(&_BaseContent.CallOpts)
}

// STATUSDRAFT is a free data retrieval call binding the contract method 0x4dd70788.
//
// Solidity: function STATUS_DRAFT() constant returns(bytes32)
func (_BaseContent *BaseContentCaller) STATUSDRAFT(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "STATUS_DRAFT")
	return *ret0, err
}

// STATUSDRAFT is a free data retrieval call binding the contract method 0x4dd70788.
//
// Solidity: function STATUS_DRAFT() constant returns(bytes32)
func (_BaseContent *BaseContentSession) STATUSDRAFT() ([32]byte, error) {
	return _BaseContent.Contract.STATUSDRAFT(&_BaseContent.CallOpts)
}

// STATUSDRAFT is a free data retrieval call binding the contract method 0x4dd70788.
//
// Solidity: function STATUS_DRAFT() constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) STATUSDRAFT() ([32]byte, error) {
	return _BaseContent.Contract.STATUSDRAFT(&_BaseContent.CallOpts)
}

// STATUSPUBLISHED is a free data retrieval call binding the contract method 0x0017de98.
//
// Solidity: function STATUS_PUBLISHED() constant returns(bytes32)
func (_BaseContent *BaseContentCaller) STATUSPUBLISHED(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "STATUS_PUBLISHED")
	return *ret0, err
}

// STATUSPUBLISHED is a free data retrieval call binding the contract method 0x0017de98.
//
// Solidity: function STATUS_PUBLISHED() constant returns(bytes32)
func (_BaseContent *BaseContentSession) STATUSPUBLISHED() ([32]byte, error) {
	return _BaseContent.Contract.STATUSPUBLISHED(&_BaseContent.CallOpts)
}

// STATUSPUBLISHED is a free data retrieval call binding the contract method 0x0017de98.
//
// Solidity: function STATUS_PUBLISHED() constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) STATUSPUBLISHED() ([32]byte, error) {
	return _BaseContent.Contract.STATUSPUBLISHED(&_BaseContent.CallOpts)
}

// STATUSREVIEW is a free data retrieval call binding the contract method 0xd810f8c8.
//
// Solidity: function STATUS_REVIEW() constant returns(bytes32)
func (_BaseContent *BaseContentCaller) STATUSREVIEW(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "STATUS_REVIEW")
	return *ret0, err
}

// STATUSREVIEW is a free data retrieval call binding the contract method 0xd810f8c8.
//
// Solidity: function STATUS_REVIEW() constant returns(bytes32)
func (_BaseContent *BaseContentSession) STATUSREVIEW() ([32]byte, error) {
	return _BaseContent.Contract.STATUSREVIEW(&_BaseContent.CallOpts)
}

// STATUSREVIEW is a free data retrieval call binding the contract method 0xd810f8c8.
//
// Solidity: function STATUS_REVIEW() constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) STATUSREVIEW() ([32]byte, error) {
	return _BaseContent.Contract.STATUSREVIEW(&_BaseContent.CallOpts)
}

// AccessCharge is a free data retrieval call binding the contract method 0x64ade32b.
//
// Solidity: function accessCharge() constant returns(uint256)
func (_BaseContent *BaseContentCaller) AccessCharge(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "accessCharge")
	return *ret0, err
}

// AccessCharge is a free data retrieval call binding the contract method 0x64ade32b.
//
// Solidity: function accessCharge() constant returns(uint256)
func (_BaseContent *BaseContentSession) AccessCharge() (*big.Int, error) {
	return _BaseContent.Contract.AccessCharge(&_BaseContent.CallOpts)
}

// AccessCharge is a free data retrieval call binding the contract method 0x64ade32b.
//
// Solidity: function accessCharge() constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) AccessCharge() (*big.Int, error) {
	return _BaseContent.Contract.AccessCharge(&_BaseContent.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContent *BaseContentCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContent *BaseContentSession) AddressKMS() (common.Address, error) {
	return _BaseContent.Contract.AddressKMS(&_BaseContent.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContent *BaseContentCallerSession) AddressKMS() (common.Address, error) {
	return _BaseContent.Contract.AddressKMS(&_BaseContent.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContent *BaseContentCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContent *BaseContentSession) CanCommit() (bool, error) {
	return _BaseContent.Contract.CanCommit(&_BaseContent.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CanCommit() (bool, error) {
	return _BaseContent.Contract.CanCommit(&_BaseContent.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContent *BaseContentCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContent *BaseContentSession) CanConfirm() (bool, error) {
	return _BaseContent.Contract.CanConfirm(&_BaseContent.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CanConfirm() (bool, error) {
	return _BaseContent.Contract.CanConfirm(&_BaseContent.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContent *BaseContentCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContent *BaseContentSession) CanEdit() (bool, error) {
	return _BaseContent.Contract.CanEdit(&_BaseContent.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CanEdit() (bool, error) {
	return _BaseContent.Contract.CanEdit(&_BaseContent.CallOpts)
}

// CanPublish is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseContent *BaseContentCaller) CanPublish(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "canPublish")
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseContent *BaseContentSession) CanPublish() (bool, error) {
	return _BaseContent.Contract.CanPublish(&_BaseContent.CallOpts)
}

// CanPublish is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CanPublish() (bool, error) {
	return _BaseContent.Contract.CanPublish(&_BaseContent.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContent *BaseContentCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContent *BaseContentSession) CommitPending() (bool, error) {
	return _BaseContent.Contract.CommitPending(&_BaseContent.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContent *BaseContentCallerSession) CommitPending() (bool, error) {
	return _BaseContent.Contract.CommitPending(&_BaseContent.CallOpts)
}

// ContentContractAddress is a free data retrieval call binding the contract method 0x2310167f.
//
// Solidity: function contentContractAddress() constant returns(address)
func (_BaseContent *BaseContentCaller) ContentContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "contentContractAddress")
	return *ret0, err
}

// ContentContractAddress is a free data retrieval call binding the contract method 0x2310167f.
//
// Solidity: function contentContractAddress() constant returns(address)
func (_BaseContent *BaseContentSession) ContentContractAddress() (common.Address, error) {
	return _BaseContent.Contract.ContentContractAddress(&_BaseContent.CallOpts)
}

// ContentContractAddress is a free data retrieval call binding the contract method 0x2310167f.
//
// Solidity: function contentContractAddress() constant returns(address)
func (_BaseContent *BaseContentCallerSession) ContentContractAddress() (common.Address, error) {
	return _BaseContent.Contract.ContentContractAddress(&_BaseContent.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContent *BaseContentCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContent *BaseContentSession) ContentSpace() (common.Address, error) {
	return _BaseContent.Contract.ContentSpace(&_BaseContent.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContent *BaseContentCallerSession) ContentSpace() (common.Address, error) {
	return _BaseContent.Contract.ContentSpace(&_BaseContent.CallOpts)
}

// ContentType is a free data retrieval call binding the contract method 0x36ebffca.
//
// Solidity: function contentType() constant returns(address)
func (_BaseContent *BaseContentCaller) ContentType(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "contentType")
	return *ret0, err
}

// ContentType is a free data retrieval call binding the contract method 0x36ebffca.
//
// Solidity: function contentType() constant returns(address)
func (_BaseContent *BaseContentSession) ContentType() (common.Address, error) {
	return _BaseContent.Contract.ContentType(&_BaseContent.CallOpts)
}

// ContentType is a free data retrieval call binding the contract method 0x36ebffca.
//
// Solidity: function contentType() constant returns(address)
func (_BaseContent *BaseContentCallerSession) ContentType() (common.Address, error) {
	return _BaseContent.Contract.ContentType(&_BaseContent.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContent *BaseContentCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContent *BaseContentSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContent.Contract.CountVersionHashes(&_BaseContent.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContent.Contract.CountVersionHashes(&_BaseContent.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContent *BaseContentCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContent *BaseContentSession) Creator() (common.Address, error) {
	return _BaseContent.Contract.Creator(&_BaseContent.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContent *BaseContentCallerSession) Creator() (common.Address, error) {
	return _BaseContent.Contract.Creator(&_BaseContent.CallOpts)
}

// GetAccessInfo is a free data retrieval call binding the contract method 0x38d0f504.
//
// Solidity: function getAccessInfo(uint8 level, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCaller) GetAccessInfo(opts *bind.CallOpts, level uint8, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _BaseContent.contract.Call(opts, out, "getAccessInfo", level, customValues, stakeholders)
	return *ret0, *ret1, *ret2, err
}

// GetAccessInfo is a free data retrieval call binding the contract method 0x38d0f504.
//
// Solidity: function getAccessInfo(uint8 level, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentSession) GetAccessInfo(level uint8, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetAccessInfo(&_BaseContent.CallOpts, level, customValues, stakeholders)
}

// GetAccessInfo is a free data retrieval call binding the contract method 0x38d0f504.
//
// Solidity: function getAccessInfo(uint8 level, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCallerSession) GetAccessInfo(level uint8, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetAccessInfo(&_BaseContent.CallOpts, level, customValues, stakeholders)
}

// GetAccessInfoV3 is a free data retrieval call binding the contract method 0x7ddc2c56.
//
// Solidity: function getAccessInfoV3(address accessor, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCaller) GetAccessInfoV3(opts *bind.CallOpts, accessor common.Address, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _BaseContent.contract.Call(opts, out, "getAccessInfoV3", accessor, customValues, stakeholders)
	return *ret0, *ret1, *ret2, err
}

// GetAccessInfoV3 is a free data retrieval call binding the contract method 0x7ddc2c56.
//
// Solidity: function getAccessInfoV3(address accessor, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentSession) GetAccessInfoV3(accessor common.Address, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetAccessInfoV3(&_BaseContent.CallOpts, accessor, customValues, stakeholders)
}

// GetAccessInfoV3 is a free data retrieval call binding the contract method 0x7ddc2c56.
//
// Solidity: function getAccessInfoV3(address accessor, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCallerSession) GetAccessInfoV3(accessor common.Address, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetAccessInfoV3(&_BaseContent.CallOpts, accessor, customValues, stakeholders)
}

// GetCustomInfo is a free data retrieval call binding the contract method 0xc26484a6.
//
// Solidity: function getCustomInfo(address accessor, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCaller) GetCustomInfo(opts *bind.CallOpts, accessor common.Address, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _BaseContent.contract.Call(opts, out, "getCustomInfo", accessor, customValues, stakeholders)
	return *ret0, *ret1, *ret2, err
}

// GetCustomInfo is a free data retrieval call binding the contract method 0xc26484a6.
//
// Solidity: function getCustomInfo(address accessor, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentSession) GetCustomInfo(accessor common.Address, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetCustomInfo(&_BaseContent.CallOpts, accessor, customValues, stakeholders)
}

// GetCustomInfo is a free data retrieval call binding the contract method 0xc26484a6.
//
// Solidity: function getCustomInfo(address accessor, bytes32[] customValues, address[] stakeholders) constant returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCallerSession) GetCustomInfo(accessor common.Address, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	return _BaseContent.Contract.GetCustomInfo(&_BaseContent.CallOpts, accessor, customValues, stakeholders)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0xa8d4160e.
//
// Solidity: function getKMSInfo(bytes prefix) constant returns(string, string)
func (_BaseContent *BaseContentCaller) GetKMSInfo(opts *bind.CallOpts, prefix []byte) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _BaseContent.contract.Call(opts, out, "getKMSInfo", prefix)
	return *ret0, *ret1, err
}

// GetKMSInfo is a free data retrieval call binding the contract method 0xa8d4160e.
//
// Solidity: function getKMSInfo(bytes prefix) constant returns(string, string)
func (_BaseContent *BaseContentSession) GetKMSInfo(prefix []byte) (string, string, error) {
	return _BaseContent.Contract.GetKMSInfo(&_BaseContent.CallOpts, prefix)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0xa8d4160e.
//
// Solidity: function getKMSInfo(bytes prefix) constant returns(string, string)
func (_BaseContent *BaseContentCallerSession) GetKMSInfo(prefix []byte) (string, string, error) {
	return _BaseContent.Contract.GetKMSInfo(&_BaseContent.CallOpts, prefix)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContent *BaseContentCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContent *BaseContentSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseContent.Contract.GetMeta(&_BaseContent.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContent *BaseContentCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseContent.Contract.GetMeta(&_BaseContent.CallOpts, key)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContent *BaseContentCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContent *BaseContentSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseContent.Contract.HasAccess(&_BaseContent.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContent *BaseContentCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseContent.Contract.HasAccess(&_BaseContent.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContent *BaseContentCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContent *BaseContentSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseContent.Contract.HasEditorRight(&_BaseContent.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContent *BaseContentCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseContent.Contract.HasEditorRight(&_BaseContent.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContent *BaseContentCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContent *BaseContentSession) IndexCategory() (uint8, error) {
	return _BaseContent.Contract.IndexCategory(&_BaseContent.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContent *BaseContentCallerSession) IndexCategory() (uint8, error) {
	return _BaseContent.Contract.IndexCategory(&_BaseContent.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseContent *BaseContentCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseContent *BaseContentSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseContent.Contract.IsAdmin(&_BaseContent.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseContent *BaseContentCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseContent.Contract.IsAdmin(&_BaseContent.CallOpts, _candidate)
}

// LibraryAddress is a free data retrieval call binding the contract method 0xb816f513.
//
// Solidity: function libraryAddress() constant returns(address)
func (_BaseContent *BaseContentCaller) LibraryAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "libraryAddress")
	return *ret0, err
}

// LibraryAddress is a free data retrieval call binding the contract method 0xb816f513.
//
// Solidity: function libraryAddress() constant returns(address)
func (_BaseContent *BaseContentSession) LibraryAddress() (common.Address, error) {
	return _BaseContent.Contract.LibraryAddress(&_BaseContent.CallOpts)
}

// LibraryAddress is a free data retrieval call binding the contract method 0xb816f513.
//
// Solidity: function libraryAddress() constant returns(address)
func (_BaseContent *BaseContentCallerSession) LibraryAddress() (common.Address, error) {
	return _BaseContent.Contract.LibraryAddress(&_BaseContent.CallOpts)
}

// MakeNonce is a free data retrieval call binding the contract method 0x8ee3a900.
//
// Solidity: function makeNonce(uint256 reqId) constant returns(uint256)
func (_BaseContent *BaseContentCaller) MakeNonce(opts *bind.CallOpts, reqId *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "makeNonce", reqId)
	return *ret0, err
}

// MakeNonce is a free data retrieval call binding the contract method 0x8ee3a900.
//
// Solidity: function makeNonce(uint256 reqId) constant returns(uint256)
func (_BaseContent *BaseContentSession) MakeNonce(reqId *big.Int) (*big.Int, error) {
	return _BaseContent.Contract.MakeNonce(&_BaseContent.CallOpts, reqId)
}

// MakeNonce is a free data retrieval call binding the contract method 0x8ee3a900.
//
// Solidity: function makeNonce(uint256 reqId) constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) MakeNonce(reqId *big.Int) (*big.Int, error) {
	return _BaseContent.Contract.MakeNonce(&_BaseContent.CallOpts, reqId)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContent *BaseContentCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContent *BaseContentSession) ObjectHash() (string, error) {
	return _BaseContent.Contract.ObjectHash(&_BaseContent.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContent *BaseContentCallerSession) ObjectHash() (string, error) {
	return _BaseContent.Contract.ObjectHash(&_BaseContent.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContent *BaseContentCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContent *BaseContentSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseContent.Contract.ObjectTimestamp(&_BaseContent.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseContent.Contract.ObjectTimestamp(&_BaseContent.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContent *BaseContentCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContent *BaseContentSession) Owner() (common.Address, error) {
	return _BaseContent.Contract.Owner(&_BaseContent.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContent *BaseContentCallerSession) Owner() (common.Address, error) {
	return _BaseContent.Contract.Owner(&_BaseContent.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContent *BaseContentCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContent *BaseContentSession) ParentAddress() (common.Address, error) {
	return _BaseContent.Contract.ParentAddress(&_BaseContent.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContent *BaseContentCallerSession) ParentAddress() (common.Address, error) {
	return _BaseContent.Contract.ParentAddress(&_BaseContent.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContent *BaseContentCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContent *BaseContentSession) PendingHash() (string, error) {
	return _BaseContent.Contract.PendingHash(&_BaseContent.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContent *BaseContentCallerSession) PendingHash() (string, error) {
	return _BaseContent.Contract.PendingHash(&_BaseContent.CallOpts)
}

// RequestID is a free data retrieval call binding the contract method 0x8f779201.
//
// Solidity: function requestID() constant returns(uint256)
func (_BaseContent *BaseContentCaller) RequestID(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "requestID")
	return *ret0, err
}

// RequestID is a free data retrieval call binding the contract method 0x8f779201.
//
// Solidity: function requestID() constant returns(uint256)
func (_BaseContent *BaseContentSession) RequestID() (*big.Int, error) {
	return _BaseContent.Contract.RequestID(&_BaseContent.CallOpts)
}

// RequestID is a free data retrieval call binding the contract method 0x8f779201.
//
// Solidity: function requestID() constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) RequestID() (*big.Int, error) {
	return _BaseContent.Contract.RequestID(&_BaseContent.CallOpts)
}

// RequestMap is a free data retrieval call binding the contract method 0x1a735f18.
//
// Solidity: function requestMap(uint256 ) constant returns(address originator, uint256 amountPaid, int8 status, uint256 settled)
func (_BaseContent *BaseContentCaller) RequestMap(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Originator common.Address
	AmountPaid *big.Int
	Status     int8
	Settled    *big.Int
}, error) {
	ret := new(struct {
		Originator common.Address
		AmountPaid *big.Int
		Status     int8
		Settled    *big.Int
	})
	out := ret
	err := _BaseContent.contract.Call(opts, out, "requestMap", arg0)
	return *ret, err
}

// RequestMap is a free data retrieval call binding the contract method 0x1a735f18.
//
// Solidity: function requestMap(uint256 ) constant returns(address originator, uint256 amountPaid, int8 status, uint256 settled)
func (_BaseContent *BaseContentSession) RequestMap(arg0 *big.Int) (struct {
	Originator common.Address
	AmountPaid *big.Int
	Status     int8
	Settled    *big.Int
}, error) {
	return _BaseContent.Contract.RequestMap(&_BaseContent.CallOpts, arg0)
}

// RequestMap is a free data retrieval call binding the contract method 0x1a735f18.
//
// Solidity: function requestMap(uint256 ) constant returns(address originator, uint256 amountPaid, int8 status, uint256 settled)
func (_BaseContent *BaseContentCallerSession) RequestMap(arg0 *big.Int) (struct {
	Originator common.Address
	AmountPaid *big.Int
	Status     int8
	Settled    *big.Int
}, error) {
	return _BaseContent.Contract.RequestMap(&_BaseContent.CallOpts, arg0)
}

// StatusCode is a free data retrieval call binding the contract method 0x27c1c21d.
//
// Solidity: function statusCode() constant returns(int256)
func (_BaseContent *BaseContentCaller) StatusCode(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "statusCode")
	return *ret0, err
}

// StatusCode is a free data retrieval call binding the contract method 0x27c1c21d.
//
// Solidity: function statusCode() constant returns(int256)
func (_BaseContent *BaseContentSession) StatusCode() (*big.Int, error) {
	return _BaseContent.Contract.StatusCode(&_BaseContent.CallOpts)
}

// StatusCode is a free data retrieval call binding the contract method 0x27c1c21d.
//
// Solidity: function statusCode() constant returns(int256)
func (_BaseContent *BaseContentCallerSession) StatusCode() (*big.Int, error) {
	return _BaseContent.Contract.StatusCode(&_BaseContent.CallOpts)
}

// StatusCodeDescription is a free data retrieval call binding the contract method 0x38864284.
//
// Solidity: function statusCodeDescription(int256 status_code) constant returns(bytes32)
func (_BaseContent *BaseContentCaller) StatusCodeDescription(opts *bind.CallOpts, status_code *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "statusCodeDescription", status_code)
	return *ret0, err
}

// StatusCodeDescription is a free data retrieval call binding the contract method 0x38864284.
//
// Solidity: function statusCodeDescription(int256 status_code) constant returns(bytes32)
func (_BaseContent *BaseContentSession) StatusCodeDescription(status_code *big.Int) ([32]byte, error) {
	return _BaseContent.Contract.StatusCodeDescription(&_BaseContent.CallOpts, status_code)
}

// StatusCodeDescription is a free data retrieval call binding the contract method 0x38864284.
//
// Solidity: function statusCodeDescription(int256 status_code) constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) StatusCodeDescription(status_code *big.Int) ([32]byte, error) {
	return _BaseContent.Contract.StatusCodeDescription(&_BaseContent.CallOpts, status_code)
}

// StatusDescription is a free data retrieval call binding the contract method 0xf81ab0ae.
//
// Solidity: function statusDescription() constant returns(bytes32)
func (_BaseContent *BaseContentCaller) StatusDescription(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "statusDescription")
	return *ret0, err
}

// StatusDescription is a free data retrieval call binding the contract method 0xf81ab0ae.
//
// Solidity: function statusDescription() constant returns(bytes32)
func (_BaseContent *BaseContentSession) StatusDescription() ([32]byte, error) {
	return _BaseContent.Contract.StatusDescription(&_BaseContent.CallOpts)
}

// StatusDescription is a free data retrieval call binding the contract method 0xf81ab0ae.
//
// Solidity: function statusDescription() constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) StatusDescription() ([32]byte, error) {
	return _BaseContent.Contract.StatusDescription(&_BaseContent.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContent *BaseContentCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContent *BaseContentSession) Version() ([32]byte, error) {
	return _BaseContent.Contract.Version(&_BaseContent.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) Version() ([32]byte, error) {
	return _BaseContent.Contract.Version(&_BaseContent.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContent *BaseContentCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContent *BaseContentSession) VersionAPI() ([32]byte, error) {
	return _BaseContent.Contract.VersionAPI(&_BaseContent.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContent *BaseContentCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseContent.Contract.VersionAPI(&_BaseContent.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContent *BaseContentCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContent *BaseContentSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContent.Contract.VersionHashes(&_BaseContent.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContent *BaseContentCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContent.Contract.VersionHashes(&_BaseContent.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContent *BaseContentCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContent *BaseContentSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContent.Contract.VersionTimestamp(&_BaseContent.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContent *BaseContentCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContent.Contract.VersionTimestamp(&_BaseContent.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContent *BaseContentCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContent.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContent *BaseContentSession) Visibility() (uint8, error) {
	return _BaseContent.Contract.Visibility(&_BaseContent.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContent *BaseContentCallerSession) Visibility() (uint8, error) {
	return _BaseContent.Contract.Visibility(&_BaseContent.CallOpts)
}

// AccessComplete is a paid mutator transaction binding the contract method 0x0593e335.
//
// Solidity: function accessComplete(uint256 request_ID, uint256 score_pct, uint256 ) returns(bool)
func (_BaseContent *BaseContentTransactor) AccessComplete(opts *bind.TransactOpts, request_ID *big.Int, score_pct *big.Int, arg2 *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessComplete", request_ID, score_pct, arg2)
}

// AccessComplete is a paid mutator transaction binding the contract method 0x0593e335.
//
// Solidity: function accessComplete(uint256 request_ID, uint256 score_pct, uint256 ) returns(bool)
func (_BaseContent *BaseContentSession) AccessComplete(request_ID *big.Int, score_pct *big.Int, arg2 *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessComplete(&_BaseContent.TransactOpts, request_ID, score_pct, arg2)
}

// AccessComplete is a paid mutator transaction binding the contract method 0x0593e335.
//
// Solidity: function accessComplete(uint256 request_ID, uint256 score_pct, uint256 ) returns(bool)
func (_BaseContent *BaseContentTransactorSession) AccessComplete(request_ID *big.Int, score_pct *big.Int, arg2 *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessComplete(&_BaseContent.TransactOpts, request_ID, score_pct, arg2)
}

// AccessCompleteContext is a paid mutator transaction binding the contract method 0xbc7dba33.
//
// Solidity: function accessCompleteContext(uint256 _requestNonce, bytes32 _contextHash, address _accessor, uint256 _request_timestamp) returns(bool)
func (_BaseContent *BaseContentTransactor) AccessCompleteContext(opts *bind.TransactOpts, _requestNonce *big.Int, _contextHash [32]byte, _accessor common.Address, _request_timestamp *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessCompleteContext", _requestNonce, _contextHash, _accessor, _request_timestamp)
}

// AccessCompleteContext is a paid mutator transaction binding the contract method 0xbc7dba33.
//
// Solidity: function accessCompleteContext(uint256 _requestNonce, bytes32 _contextHash, address _accessor, uint256 _request_timestamp) returns(bool)
func (_BaseContent *BaseContentSession) AccessCompleteContext(_requestNonce *big.Int, _contextHash [32]byte, _accessor common.Address, _request_timestamp *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessCompleteContext(&_BaseContent.TransactOpts, _requestNonce, _contextHash, _accessor, _request_timestamp)
}

// AccessCompleteContext is a paid mutator transaction binding the contract method 0xbc7dba33.
//
// Solidity: function accessCompleteContext(uint256 _requestNonce, bytes32 _contextHash, address _accessor, uint256 _request_timestamp) returns(bool)
func (_BaseContent *BaseContentTransactorSession) AccessCompleteContext(_requestNonce *big.Int, _contextHash [32]byte, _accessor common.Address, _request_timestamp *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessCompleteContext(&_BaseContent.TransactOpts, _requestNonce, _contextHash, _accessor, _request_timestamp)
}

// AccessCompleteInternal is a paid mutator transaction binding the contract method 0x484f4b3b.
//
// Solidity: function accessCompleteInternal(uint256 requestNonce, bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentTransactor) AccessCompleteInternal(opts *bind.TransactOpts, requestNonce *big.Int, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessCompleteInternal", requestNonce, customValues, stakeholders)
}

// AccessCompleteInternal is a paid mutator transaction binding the contract method 0x484f4b3b.
//
// Solidity: function accessCompleteInternal(uint256 requestNonce, bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentSession) AccessCompleteInternal(requestNonce *big.Int, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessCompleteInternal(&_BaseContent.TransactOpts, requestNonce, customValues, stakeholders)
}

// AccessCompleteInternal is a paid mutator transaction binding the contract method 0x484f4b3b.
//
// Solidity: function accessCompleteInternal(uint256 requestNonce, bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentTransactorSession) AccessCompleteInternal(requestNonce *big.Int, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessCompleteInternal(&_BaseContent.TransactOpts, requestNonce, customValues, stakeholders)
}

// AccessCompleteV3 is a paid mutator transaction binding the contract method 0x45155f6e.
//
// Solidity: function accessCompleteV3(uint256 requestNonce, bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentTransactor) AccessCompleteV3(opts *bind.TransactOpts, requestNonce *big.Int, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessCompleteV3", requestNonce, customValues, stakeholders)
}

// AccessCompleteV3 is a paid mutator transaction binding the contract method 0x45155f6e.
//
// Solidity: function accessCompleteV3(uint256 requestNonce, bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentSession) AccessCompleteV3(requestNonce *big.Int, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessCompleteV3(&_BaseContent.TransactOpts, requestNonce, customValues, stakeholders)
}

// AccessCompleteV3 is a paid mutator transaction binding the contract method 0x45155f6e.
//
// Solidity: function accessCompleteV3(uint256 requestNonce, bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentTransactorSession) AccessCompleteV3(requestNonce *big.Int, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessCompleteV3(&_BaseContent.TransactOpts, requestNonce, customValues, stakeholders)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xa1ff106e.
//
// Solidity: function accessRequest(uint8 level, string pkeRequestor, string pkeAFGH, bytes32[] customValues, address[] stakeholders) returns(uint256)
func (_BaseContent *BaseContentTransactor) AccessRequest(opts *bind.TransactOpts, level uint8, pkeRequestor string, pkeAFGH string, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessRequest", level, pkeRequestor, pkeAFGH, customValues, stakeholders)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xa1ff106e.
//
// Solidity: function accessRequest(uint8 level, string pkeRequestor, string pkeAFGH, bytes32[] customValues, address[] stakeholders) returns(uint256)
func (_BaseContent *BaseContentSession) AccessRequest(level uint8, pkeRequestor string, pkeAFGH string, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessRequest(&_BaseContent.TransactOpts, level, pkeRequestor, pkeAFGH, customValues, stakeholders)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xa1ff106e.
//
// Solidity: function accessRequest(uint8 level, string pkeRequestor, string pkeAFGH, bytes32[] customValues, address[] stakeholders) returns(uint256)
func (_BaseContent *BaseContentTransactorSession) AccessRequest(level uint8, pkeRequestor string, pkeAFGH string, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessRequest(&_BaseContent.TransactOpts, level, pkeRequestor, pkeAFGH, customValues, stakeholders)
}

// AccessRequestContext is a paid mutator transaction binding the contract method 0x78f52ffb.
//
// Solidity: function accessRequestContext(uint256 requestNonce, bytes32 contextHash, address accessor, uint256 request_timestamp) returns(uint256)
func (_BaseContent *BaseContentTransactor) AccessRequestContext(opts *bind.TransactOpts, requestNonce *big.Int, contextHash [32]byte, accessor common.Address, request_timestamp *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessRequestContext", requestNonce, contextHash, accessor, request_timestamp)
}

// AccessRequestContext is a paid mutator transaction binding the contract method 0x78f52ffb.
//
// Solidity: function accessRequestContext(uint256 requestNonce, bytes32 contextHash, address accessor, uint256 request_timestamp) returns(uint256)
func (_BaseContent *BaseContentSession) AccessRequestContext(requestNonce *big.Int, contextHash [32]byte, accessor common.Address, request_timestamp *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessRequestContext(&_BaseContent.TransactOpts, requestNonce, contextHash, accessor, request_timestamp)
}

// AccessRequestContext is a paid mutator transaction binding the contract method 0x78f52ffb.
//
// Solidity: function accessRequestContext(uint256 requestNonce, bytes32 contextHash, address accessor, uint256 request_timestamp) returns(uint256)
func (_BaseContent *BaseContentTransactorSession) AccessRequestContext(requestNonce *big.Int, contextHash [32]byte, accessor common.Address, request_timestamp *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessRequestContext(&_BaseContent.TransactOpts, requestNonce, contextHash, accessor, request_timestamp)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentTransactor) AccessRequestV3(opts *bind.TransactOpts, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessRequestV3", customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessRequestV3(&_BaseContent.TransactOpts, customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContent *BaseContentTransactorSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.AccessRequestV3(&_BaseContent.TransactOpts, customValues, stakeholders)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContent *BaseContentTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContent *BaseContentSession) ClearPending() (*types.Transaction, error) {
	return _BaseContent.Contract.ClearPending(&_BaseContent.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContent *BaseContentTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseContent.Contract.ClearPending(&_BaseContent.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContent *BaseContentTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContent *BaseContentSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContent.Contract.Commit(&_BaseContent.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContent *BaseContentTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContent.Contract.Commit(&_BaseContent.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContent *BaseContentTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContent *BaseContentSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContent.Contract.ConfirmCommit(&_BaseContent.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContent *BaseContentTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContent.Contract.ConfirmCommit(&_BaseContent.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContent *BaseContentTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContent *BaseContentSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContent.Contract.DeleteVersion(&_BaseContent.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContent *BaseContentTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContent.Contract.DeleteVersion(&_BaseContent.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContent *BaseContentTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContent *BaseContentSession) Kill() (*types.Transaction, error) {
	return _BaseContent.Contract.Kill(&_BaseContent.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContent *BaseContentTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseContent.Contract.Kill(&_BaseContent.TransactOpts)
}

// ProcessRequestPayment is a paid mutator transaction binding the contract method 0x0c6d3f93.
//
// Solidity: function processRequestPayment(uint256 requestNonce, address payee, string label, uint256 amount) returns(bool)
func (_BaseContent *BaseContentTransactor) ProcessRequestPayment(opts *bind.TransactOpts, requestNonce *big.Int, payee common.Address, label string, amount *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "processRequestPayment", requestNonce, payee, label, amount)
}

// ProcessRequestPayment is a paid mutator transaction binding the contract method 0x0c6d3f93.
//
// Solidity: function processRequestPayment(uint256 requestNonce, address payee, string label, uint256 amount) returns(bool)
func (_BaseContent *BaseContentSession) ProcessRequestPayment(requestNonce *big.Int, payee common.Address, label string, amount *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.ProcessRequestPayment(&_BaseContent.TransactOpts, requestNonce, payee, label, amount)
}

// ProcessRequestPayment is a paid mutator transaction binding the contract method 0x0c6d3f93.
//
// Solidity: function processRequestPayment(uint256 requestNonce, address payee, string label, uint256 amount) returns(bool)
func (_BaseContent *BaseContentTransactorSession) ProcessRequestPayment(requestNonce *big.Int, payee common.Address, label string, amount *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.ProcessRequestPayment(&_BaseContent.TransactOpts, requestNonce, payee, label, amount)
}

// Publish is a paid mutator transaction binding the contract method 0x075d4782.
//
// Solidity: function publish() returns(bool)
func (_BaseContent *BaseContentTransactor) Publish(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "publish")
}

// Publish is a paid mutator transaction binding the contract method 0x075d4782.
//
// Solidity: function publish() returns(bool)
func (_BaseContent *BaseContentSession) Publish() (*types.Transaction, error) {
	return _BaseContent.Contract.Publish(&_BaseContent.TransactOpts)
}

// Publish is a paid mutator transaction binding the contract method 0x075d4782.
//
// Solidity: function publish() returns(bool)
func (_BaseContent *BaseContentTransactorSession) Publish() (*types.Transaction, error) {
	return _BaseContent.Contract.Publish(&_BaseContent.TransactOpts)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContent *BaseContentTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContent *BaseContentSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContent.Contract.PutMeta(&_BaseContent.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContent *BaseContentTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContent.Contract.PutMeta(&_BaseContent.TransactOpts, key, value)
}

// SetAccessCharge is a paid mutator transaction binding the contract method 0xf4d9bae8.
//
// Solidity: function setAccessCharge(uint256 charge) returns(uint256)
func (_BaseContent *BaseContentTransactor) SetAccessCharge(opts *bind.TransactOpts, charge *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setAccessCharge", charge)
}

// SetAccessCharge is a paid mutator transaction binding the contract method 0xf4d9bae8.
//
// Solidity: function setAccessCharge(uint256 charge) returns(uint256)
func (_BaseContent *BaseContentSession) SetAccessCharge(charge *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.SetAccessCharge(&_BaseContent.TransactOpts, charge)
}

// SetAccessCharge is a paid mutator transaction binding the contract method 0xf4d9bae8.
//
// Solidity: function setAccessCharge(uint256 charge) returns(uint256)
func (_BaseContent *BaseContentTransactorSession) SetAccessCharge(charge *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.SetAccessCharge(&_BaseContent.TransactOpts, charge)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContent *BaseContentTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContent *BaseContentSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.SetAddressKMS(&_BaseContent.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContent *BaseContentTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.SetAddressKMS(&_BaseContent.TransactOpts, address_KMS)
}

// SetContentContractAddress is a paid mutator transaction binding the contract method 0xe5385303.
//
// Solidity: function setContentContractAddress(address addr) returns()
func (_BaseContent *BaseContentTransactor) SetContentContractAddress(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setContentContractAddress", addr)
}

// SetContentContractAddress is a paid mutator transaction binding the contract method 0xe5385303.
//
// Solidity: function setContentContractAddress(address addr) returns()
func (_BaseContent *BaseContentSession) SetContentContractAddress(addr common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.SetContentContractAddress(&_BaseContent.TransactOpts, addr)
}

// SetContentContractAddress is a paid mutator transaction binding the contract method 0xe5385303.
//
// Solidity: function setContentContractAddress(address addr) returns()
func (_BaseContent *BaseContentTransactorSession) SetContentContractAddress(addr common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.SetContentContractAddress(&_BaseContent.TransactOpts, addr)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetGroupRights(&_BaseContent.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetGroupRights(&_BaseContent.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetRights(&_BaseContent.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetRights(&_BaseContent.TransactOpts, stakeholder, access_type, access)
}

// SetStatusCode is a paid mutator transaction binding the contract method 0x5267db44.
//
// Solidity: function setStatusCode(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactor) SetStatusCode(opts *bind.TransactOpts, status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setStatusCode", status_code)
}

// SetStatusCode is a paid mutator transaction binding the contract method 0x5267db44.
//
// Solidity: function setStatusCode(int256 status_code) returns(int256)
func (_BaseContent *BaseContentSession) SetStatusCode(status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.SetStatusCode(&_BaseContent.TransactOpts, status_code)
}

// SetStatusCode is a paid mutator transaction binding the contract method 0x5267db44.
//
// Solidity: function setStatusCode(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactorSession) SetStatusCode(status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.SetStatusCode(&_BaseContent.TransactOpts, status_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContent *BaseContentTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContent *BaseContentSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetVisibility(&_BaseContent.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContent *BaseContentTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseContent.Contract.SetVisibility(&_BaseContent.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContent *BaseContentTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContent *BaseContentSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.TransferCreatorship(&_BaseContent.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContent *BaseContentTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.TransferCreatorship(&_BaseContent.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContent *BaseContentTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContent *BaseContentSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.TransferOwnership(&_BaseContent.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContent *BaseContentTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContent.Contract.TransferOwnership(&_BaseContent.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContent *BaseContentTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContent *BaseContentSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContent.Contract.UpdateRequest(&_BaseContent.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContent *BaseContentTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContent.Contract.UpdateRequest(&_BaseContent.TransactOpts)
}

// UpdateStatus is a paid mutator transaction binding the contract method 0x8280dd8f.
//
// Solidity: function updateStatus(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactor) UpdateStatus(opts *bind.TransactOpts, status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "updateStatus", status_code)
}

// UpdateStatus is a paid mutator transaction binding the contract method 0x8280dd8f.
//
// Solidity: function updateStatus(int256 status_code) returns(int256)
func (_BaseContent *BaseContentSession) UpdateStatus(status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.UpdateStatus(&_BaseContent.TransactOpts, status_code)
}

// UpdateStatus is a paid mutator transaction binding the contract method 0x8280dd8f.
//
// Solidity: function updateStatus(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactorSession) UpdateStatus(status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.Contract.UpdateStatus(&_BaseContent.TransactOpts, status_code)
}

// BaseContentAccessCompleteIterator is returned from FilterAccessComplete and is used to iterate over the raw logs and unpacked data for AccessComplete events raised by the BaseContent contract.
type BaseContentAccessCompleteIterator struct {
	Event *BaseContentAccessComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessComplete represents a AccessComplete event raised by the BaseContent contract.
type BaseContentAccessComplete struct {
	RequestID            *big.Int
	ScorePct             *big.Int
	CustomContractResult bool
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterAccessComplete is a free log retrieval operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) FilterAccessComplete(opts *bind.FilterOpts) (*BaseContentAccessCompleteIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessComplete")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessCompleteIterator{contract: _BaseContent.contract, event: "AccessComplete", logs: logs, sub: sub}, nil
}

// WatchAccessComplete is a free log subscription operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) WatchAccessComplete(opts *bind.WatchOpts, sink chan<- *BaseContentAccessComplete) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessComplete)
				if err := _BaseContent.contract.UnpackLog(event, "AccessComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessComplete is a log parse operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) ParseAccessComplete(log types.Log) (*BaseContentAccessComplete, error) {
	event := new(BaseContentAccessComplete)
	if err := _BaseContent.contract.UnpackLog(event, "AccessComplete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentAccessCompleteV3Iterator is returned from FilterAccessCompleteV3 and is used to iterate over the raw logs and unpacked data for AccessCompleteV3 events raised by the BaseContent contract.
type BaseContentAccessCompleteV3Iterator struct {
	Event *BaseContentAccessCompleteV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessCompleteV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessCompleteV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessCompleteV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessCompleteV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessCompleteV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessCompleteV3 represents a AccessCompleteV3 event raised by the BaseContent contract.
type BaseContentAccessCompleteV3 struct {
	RequestNonce         *big.Int
	CustomContractResult bool
	ParentAddress        common.Address
	ContextHash          [32]byte
	Accessor             common.Address
	RequestTimestamp     *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterAccessCompleteV3 is a free log retrieval operation binding the contract event 0xd3e5b1d14681444d8159fa85b57104b685f47fb9164fd82b7fafe4e123dcc3a1.
//
// Solidity: event AccessCompleteV3(uint256 requestNonce, bool customContractResult, address parentAddress, bytes32 contextHash, address accessor, uint256 request_timestamp)
func (_BaseContent *BaseContentFilterer) FilterAccessCompleteV3(opts *bind.FilterOpts) (*BaseContentAccessCompleteV3Iterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessCompleteV3")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessCompleteV3Iterator{contract: _BaseContent.contract, event: "AccessCompleteV3", logs: logs, sub: sub}, nil
}

// WatchAccessCompleteV3 is a free log subscription operation binding the contract event 0xd3e5b1d14681444d8159fa85b57104b685f47fb9164fd82b7fafe4e123dcc3a1.
//
// Solidity: event AccessCompleteV3(uint256 requestNonce, bool customContractResult, address parentAddress, bytes32 contextHash, address accessor, uint256 request_timestamp)
func (_BaseContent *BaseContentFilterer) WatchAccessCompleteV3(opts *bind.WatchOpts, sink chan<- *BaseContentAccessCompleteV3) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessCompleteV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessCompleteV3)
				if err := _BaseContent.contract.UnpackLog(event, "AccessCompleteV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessCompleteV3 is a log parse operation binding the contract event 0xd3e5b1d14681444d8159fa85b57104b685f47fb9164fd82b7fafe4e123dcc3a1.
//
// Solidity: event AccessCompleteV3(uint256 requestNonce, bool customContractResult, address parentAddress, bytes32 contextHash, address accessor, uint256 request_timestamp)
func (_BaseContent *BaseContentFilterer) ParseAccessCompleteV3(log types.Log) (*BaseContentAccessCompleteV3, error) {
	event := new(BaseContentAccessCompleteV3)
	if err := _BaseContent.contract.UnpackLog(event, "AccessCompleteV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseContent contract.
type BaseContentAccessRequestIterator struct {
	Event *BaseContentAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequest represents a AccessRequest event raised by the BaseContent contract.
type BaseContentAccessRequest struct {
	RequestID    *big.Int
	Level        uint8
	ContentHash  string
	PkeRequestor string
	PkeAFGH      string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseContentAccessRequestIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestIterator{contract: _BaseContent.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequest)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) ParseAccessRequest(log types.Log) (*BaseContentAccessRequest, error) {
	event := new(BaseContentAccessRequest)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentAccessRequestStakeholderIterator is returned from FilterAccessRequestStakeholder and is used to iterate over the raw logs and unpacked data for AccessRequestStakeholder events raised by the BaseContent contract.
type BaseContentAccessRequestStakeholderIterator struct {
	Event *BaseContentAccessRequestStakeholder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestStakeholderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequestStakeholder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequestStakeholder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestStakeholderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestStakeholderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequestStakeholder represents a AccessRequestStakeholder event raised by the BaseContent contract.
type BaseContentAccessRequestStakeholder struct {
	Stakeholder common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestStakeholder is a free log retrieval operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) FilterAccessRequestStakeholder(opts *bind.FilterOpts) (*BaseContentAccessRequestStakeholderIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequestStakeholder")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestStakeholderIterator{contract: _BaseContent.contract, event: "AccessRequestStakeholder", logs: logs, sub: sub}, nil
}

// WatchAccessRequestStakeholder is a free log subscription operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) WatchAccessRequestStakeholder(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequestStakeholder) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequestStakeholder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequestStakeholder)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequestStakeholder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestStakeholder is a log parse operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) ParseAccessRequestStakeholder(log types.Log) (*BaseContentAccessRequestStakeholder, error) {
	event := new(BaseContentAccessRequestStakeholder)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequestStakeholder", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseContent contract.
type BaseContentAccessRequestV3Iterator struct {
	Event *BaseContentAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequestV3 represents a AccessRequestV3 event raised by the BaseContent contract.
type BaseContentAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContent *BaseContentFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseContentAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestV3Iterator{contract: _BaseContent.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContent *BaseContentFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequestV3)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContent *BaseContentFilterer) ParseAccessRequestV3(log types.Log) (*BaseContentAccessRequestV3, error) {
	event := new(BaseContentAccessRequestV3)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentAccessRequestValueIterator is returned from FilterAccessRequestValue and is used to iterate over the raw logs and unpacked data for AccessRequestValue events raised by the BaseContent contract.
type BaseContentAccessRequestValueIterator struct {
	Event *BaseContentAccessRequestValue // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestValueIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequestValue)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequestValue)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestValueIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestValueIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequestValue represents a AccessRequestValue event raised by the BaseContent contract.
type BaseContentAccessRequestValue struct {
	CustomValue [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestValue is a free log retrieval operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) FilterAccessRequestValue(opts *bind.FilterOpts) (*BaseContentAccessRequestValueIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequestValue")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestValueIterator{contract: _BaseContent.contract, event: "AccessRequestValue", logs: logs, sub: sub}, nil
}

// WatchAccessRequestValue is a free log subscription operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) WatchAccessRequestValue(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequestValue) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequestValue")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequestValue)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequestValue", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestValue is a log parse operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) ParseAccessRequestValue(log types.Log) (*BaseContentAccessRequestValue, error) {
	event := new(BaseContentAccessRequestValue)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequestValue", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContent contract.
type BaseContentCommitPendingIterator struct {
	Event *BaseContentCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentCommitPending represents a CommitPending event raised by the BaseContent contract.
type BaseContentCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentCommitPendingIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentCommitPendingIterator{contract: _BaseContent.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentCommitPending)
				if err := _BaseContent.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) ParseCommitPending(log types.Log) (*BaseContentCommitPending, error) {
	event := new(BaseContentCommitPending)
	if err := _BaseContent.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentContentObjectCreateIterator is returned from FilterContentObjectCreate and is used to iterate over the raw logs and unpacked data for ContentObjectCreate events raised by the BaseContent contract.
type BaseContentContentObjectCreateIterator struct {
	Event *BaseContentContentObjectCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentContentObjectCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentContentObjectCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentContentObjectCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentContentObjectCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentContentObjectCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentContentObjectCreate represents a ContentObjectCreate event raised by the BaseContent contract.
type BaseContentContentObjectCreate struct {
	ContainingLibrary common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterContentObjectCreate is a free log retrieval operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) FilterContentObjectCreate(opts *bind.FilterOpts) (*BaseContentContentObjectCreateIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "ContentObjectCreate")
	if err != nil {
		return nil, err
	}
	return &BaseContentContentObjectCreateIterator{contract: _BaseContent.contract, event: "ContentObjectCreate", logs: logs, sub: sub}, nil
}

// WatchContentObjectCreate is a free log subscription operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) WatchContentObjectCreate(opts *bind.WatchOpts, sink chan<- *BaseContentContentObjectCreate) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "ContentObjectCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentContentObjectCreate)
				if err := _BaseContent.contract.UnpackLog(event, "ContentObjectCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectCreate is a log parse operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) ParseContentObjectCreate(log types.Log) (*BaseContentContentObjectCreate, error) {
	event := new(BaseContentContentObjectCreate)
	if err := _BaseContent.contract.UnpackLog(event, "ContentObjectCreate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentInsufficientFundsIterator is returned from FilterInsufficientFunds and is used to iterate over the raw logs and unpacked data for InsufficientFunds events raised by the BaseContent contract.
type BaseContentInsufficientFundsIterator struct {
	Event *BaseContentInsufficientFunds // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentInsufficientFundsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentInsufficientFunds)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentInsufficientFunds)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentInsufficientFundsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentInsufficientFundsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentInsufficientFunds represents a InsufficientFunds event raised by the BaseContent contract.
type BaseContentInsufficientFunds struct {
	AccessCharge   *big.Int
	AmountProvided *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInsufficientFunds is a free log retrieval operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) FilterInsufficientFunds(opts *bind.FilterOpts) (*BaseContentInsufficientFundsIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "InsufficientFunds")
	if err != nil {
		return nil, err
	}
	return &BaseContentInsufficientFundsIterator{contract: _BaseContent.contract, event: "InsufficientFunds", logs: logs, sub: sub}, nil
}

// WatchInsufficientFunds is a free log subscription operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) WatchInsufficientFunds(opts *bind.WatchOpts, sink chan<- *BaseContentInsufficientFunds) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "InsufficientFunds")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentInsufficientFunds)
				if err := _BaseContent.contract.UnpackLog(event, "InsufficientFunds", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInsufficientFunds is a log parse operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) ParseInsufficientFunds(log types.Log) (*BaseContentInsufficientFunds, error) {
	event := new(BaseContentInsufficientFunds)
	if err := _BaseContent.contract.UnpackLog(event, "InsufficientFunds", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentInvokeCustomPostHookIterator is returned from FilterInvokeCustomPostHook and is used to iterate over the raw logs and unpacked data for InvokeCustomPostHook events raised by the BaseContent contract.
type BaseContentInvokeCustomPostHookIterator struct {
	Event *BaseContentInvokeCustomPostHook // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentInvokeCustomPostHookIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentInvokeCustomPostHook)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentInvokeCustomPostHook)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentInvokeCustomPostHookIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentInvokeCustomPostHookIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentInvokeCustomPostHook represents a InvokeCustomPostHook event raised by the BaseContent contract.
type BaseContentInvokeCustomPostHook struct {
	CustomContract common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInvokeCustomPostHook is a free log retrieval operation binding the contract event 0x97d9c9779ed3ed8b9a6edfe16d17b1fdec843245747a19abfb621806e37d4a89.
//
// Solidity: event InvokeCustomPostHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) FilterInvokeCustomPostHook(opts *bind.FilterOpts) (*BaseContentInvokeCustomPostHookIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "InvokeCustomPostHook")
	if err != nil {
		return nil, err
	}
	return &BaseContentInvokeCustomPostHookIterator{contract: _BaseContent.contract, event: "InvokeCustomPostHook", logs: logs, sub: sub}, nil
}

// WatchInvokeCustomPostHook is a free log subscription operation binding the contract event 0x97d9c9779ed3ed8b9a6edfe16d17b1fdec843245747a19abfb621806e37d4a89.
//
// Solidity: event InvokeCustomPostHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) WatchInvokeCustomPostHook(opts *bind.WatchOpts, sink chan<- *BaseContentInvokeCustomPostHook) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "InvokeCustomPostHook")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentInvokeCustomPostHook)
				if err := _BaseContent.contract.UnpackLog(event, "InvokeCustomPostHook", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvokeCustomPostHook is a log parse operation binding the contract event 0x97d9c9779ed3ed8b9a6edfe16d17b1fdec843245747a19abfb621806e37d4a89.
//
// Solidity: event InvokeCustomPostHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) ParseInvokeCustomPostHook(log types.Log) (*BaseContentInvokeCustomPostHook, error) {
	event := new(BaseContentInvokeCustomPostHook)
	if err := _BaseContent.contract.UnpackLog(event, "InvokeCustomPostHook", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentInvokeCustomPreHookIterator is returned from FilterInvokeCustomPreHook and is used to iterate over the raw logs and unpacked data for InvokeCustomPreHook events raised by the BaseContent contract.
type BaseContentInvokeCustomPreHookIterator struct {
	Event *BaseContentInvokeCustomPreHook // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentInvokeCustomPreHookIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentInvokeCustomPreHook)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentInvokeCustomPreHook)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentInvokeCustomPreHookIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentInvokeCustomPreHookIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentInvokeCustomPreHook represents a InvokeCustomPreHook event raised by the BaseContent contract.
type BaseContentInvokeCustomPreHook struct {
	CustomContract common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInvokeCustomPreHook is a free log retrieval operation binding the contract event 0x12b04791b5caab768e2757268992f0c62801e3921d9e310c893f0d5f9caa5f71.
//
// Solidity: event InvokeCustomPreHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) FilterInvokeCustomPreHook(opts *bind.FilterOpts) (*BaseContentInvokeCustomPreHookIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "InvokeCustomPreHook")
	if err != nil {
		return nil, err
	}
	return &BaseContentInvokeCustomPreHookIterator{contract: _BaseContent.contract, event: "InvokeCustomPreHook", logs: logs, sub: sub}, nil
}

// WatchInvokeCustomPreHook is a free log subscription operation binding the contract event 0x12b04791b5caab768e2757268992f0c62801e3921d9e310c893f0d5f9caa5f71.
//
// Solidity: event InvokeCustomPreHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) WatchInvokeCustomPreHook(opts *bind.WatchOpts, sink chan<- *BaseContentInvokeCustomPreHook) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "InvokeCustomPreHook")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentInvokeCustomPreHook)
				if err := _BaseContent.contract.UnpackLog(event, "InvokeCustomPreHook", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvokeCustomPreHook is a log parse operation binding the contract event 0x12b04791b5caab768e2757268992f0c62801e3921d9e310c893f0d5f9caa5f71.
//
// Solidity: event InvokeCustomPreHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) ParseInvokeCustomPreHook(log types.Log) (*BaseContentInvokeCustomPreHook, error) {
	event := new(BaseContentInvokeCustomPreHook)
	if err := _BaseContent.contract.UnpackLog(event, "InvokeCustomPreHook", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the BaseContent contract.
type BaseContentLogPaymentIterator struct {
	Event *BaseContentLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentLogPayment represents a LogPayment event raised by the BaseContent contract.
type BaseContentLogPayment struct {
	RequestNonce *big.Int
	Label        string
	Payee        common.Address
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestNonce, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) FilterLogPayment(opts *bind.FilterOpts) (*BaseContentLogPaymentIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &BaseContentLogPaymentIterator{contract: _BaseContent.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestNonce, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *BaseContentLogPayment) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentLogPayment)
				if err := _BaseContent.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestNonce, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) ParseLogPayment(log types.Log) (*BaseContentLogPayment, error) {
	event := new(BaseContentLogPayment)
	if err := _BaseContent.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseContent contract.
type BaseContentObjectMetaChangedIterator struct {
	Event *BaseContentObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseContent contract.
type BaseContentObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContent *BaseContentFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseContentObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentObjectMetaChangedIterator{contract: _BaseContent.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContent *BaseContentFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseContentObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentObjectMetaChanged)
				if err := _BaseContent.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContent *BaseContentFilterer) ParseObjectMetaChanged(log types.Log) (*BaseContentObjectMetaChanged, error) {
	event := new(BaseContentObjectMetaChanged)
	if err := _BaseContent.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentPublishIterator is returned from FilterPublish and is used to iterate over the raw logs and unpacked data for Publish events raised by the BaseContent contract.
type BaseContentPublishIterator struct {
	Event *BaseContentPublish // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentPublishIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentPublish)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentPublish)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentPublishIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentPublishIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentPublish represents a Publish event raised by the BaseContent contract.
type BaseContentPublish struct {
	RequestStatus bool
	StatusCode    *big.Int
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPublish is a free log retrieval operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterPublish(opts *bind.FilterOpts) (*BaseContentPublishIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "Publish")
	if err != nil {
		return nil, err
	}
	return &BaseContentPublishIterator{contract: _BaseContent.contract, event: "Publish", logs: logs, sub: sub}, nil
}

// WatchPublish is a free log subscription operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchPublish(opts *bind.WatchOpts, sink chan<- *BaseContentPublish) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "Publish")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentPublish)
				if err := _BaseContent.contract.UnpackLog(event, "Publish", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePublish is a log parse operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) ParsePublish(log types.Log) (*BaseContentPublish, error) {
	event := new(BaseContentPublish)
	if err := _BaseContent.contract.UnpackLog(event, "Publish", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentReturnCustomHookIterator is returned from FilterReturnCustomHook and is used to iterate over the raw logs and unpacked data for ReturnCustomHook events raised by the BaseContent contract.
type BaseContentReturnCustomHookIterator struct {
	Event *BaseContentReturnCustomHook // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentReturnCustomHookIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentReturnCustomHook)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentReturnCustomHook)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentReturnCustomHookIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentReturnCustomHookIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentReturnCustomHook represents a ReturnCustomHook event raised by the BaseContent contract.
type BaseContentReturnCustomHook struct {
	CustomContract common.Address
	Result         *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterReturnCustomHook is a free log retrieval operation binding the contract event 0x8c693e8b27db7caf9b9637b66dcc11444760023a4d53e95407a3acef1b249f50.
//
// Solidity: event ReturnCustomHook(address custom_contract, uint256 result)
func (_BaseContent *BaseContentFilterer) FilterReturnCustomHook(opts *bind.FilterOpts) (*BaseContentReturnCustomHookIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "ReturnCustomHook")
	if err != nil {
		return nil, err
	}
	return &BaseContentReturnCustomHookIterator{contract: _BaseContent.contract, event: "ReturnCustomHook", logs: logs, sub: sub}, nil
}

// WatchReturnCustomHook is a free log subscription operation binding the contract event 0x8c693e8b27db7caf9b9637b66dcc11444760023a4d53e95407a3acef1b249f50.
//
// Solidity: event ReturnCustomHook(address custom_contract, uint256 result)
func (_BaseContent *BaseContentFilterer) WatchReturnCustomHook(opts *bind.WatchOpts, sink chan<- *BaseContentReturnCustomHook) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "ReturnCustomHook")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentReturnCustomHook)
				if err := _BaseContent.contract.UnpackLog(event, "ReturnCustomHook", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReturnCustomHook is a log parse operation binding the contract event 0x8c693e8b27db7caf9b9637b66dcc11444760023a4d53e95407a3acef1b249f50.
//
// Solidity: event ReturnCustomHook(address custom_contract, uint256 result)
func (_BaseContent *BaseContentFilterer) ParseReturnCustomHook(log types.Log) (*BaseContentReturnCustomHook, error) {
	event := new(BaseContentReturnCustomHook)
	if err := _BaseContent.contract.UnpackLog(event, "ReturnCustomHook", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSetAccessChargeIterator is returned from FilterSetAccessCharge and is used to iterate over the raw logs and unpacked data for SetAccessCharge events raised by the BaseContent contract.
type BaseContentSetAccessChargeIterator struct {
	Event *BaseContentSetAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetAccessCharge represents a SetAccessCharge event raised by the BaseContent contract.
type BaseContentSetAccessCharge struct {
	AccessCharge *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSetAccessCharge is a free log retrieval operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) FilterSetAccessCharge(opts *bind.FilterOpts) (*BaseContentSetAccessChargeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetAccessCharge")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetAccessChargeIterator{contract: _BaseContent.contract, event: "SetAccessCharge", logs: logs, sub: sub}, nil
}

// WatchSetAccessCharge is a free log subscription operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) WatchSetAccessCharge(opts *bind.WatchOpts, sink chan<- *BaseContentSetAccessCharge) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetAccessCharge)
				if err := _BaseContent.contract.UnpackLog(event, "SetAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAccessCharge is a log parse operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) ParseSetAccessCharge(log types.Log) (*BaseContentSetAccessCharge, error) {
	event := new(BaseContentSetAccessCharge)
	if err := _BaseContent.contract.UnpackLog(event, "SetAccessCharge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSetContentContractIterator is returned from FilterSetContentContract and is used to iterate over the raw logs and unpacked data for SetContentContract events raised by the BaseContent contract.
type BaseContentSetContentContractIterator struct {
	Event *BaseContentSetContentContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetContentContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetContentContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetContentContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetContentContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetContentContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetContentContract represents a SetContentContract event raised by the BaseContent contract.
type BaseContentSetContentContract struct {
	ContentContractAddress common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSetContentContract is a free log retrieval operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) FilterSetContentContract(opts *bind.FilterOpts) (*BaseContentSetContentContractIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetContentContract")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetContentContractIterator{contract: _BaseContent.contract, event: "SetContentContract", logs: logs, sub: sub}, nil
}

// WatchSetContentContract is a free log subscription operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) WatchSetContentContract(opts *bind.WatchOpts, sink chan<- *BaseContentSetContentContract) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetContentContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetContentContract)
				if err := _BaseContent.contract.UnpackLog(event, "SetContentContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetContentContract is a log parse operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) ParseSetContentContract(log types.Log) (*BaseContentSetContentContract, error) {
	event := new(BaseContentSetContentContract)
	if err := _BaseContent.contract.UnpackLog(event, "SetContentContract", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSetContentTypeIterator is returned from FilterSetContentType and is used to iterate over the raw logs and unpacked data for SetContentType events raised by the BaseContent contract.
type BaseContentSetContentTypeIterator struct {
	Event *BaseContentSetContentType // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetContentTypeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetContentType)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetContentType)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetContentTypeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetContentTypeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetContentType represents a SetContentType event raised by the BaseContent contract.
type BaseContentSetContentType struct {
	ContentType            common.Address
	ContentContractAddress common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSetContentType is a free log retrieval operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) FilterSetContentType(opts *bind.FilterOpts) (*BaseContentSetContentTypeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetContentType")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetContentTypeIterator{contract: _BaseContent.contract, event: "SetContentType", logs: logs, sub: sub}, nil
}

// WatchSetContentType is a free log subscription operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) WatchSetContentType(opts *bind.WatchOpts, sink chan<- *BaseContentSetContentType) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetContentType")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetContentType)
				if err := _BaseContent.contract.UnpackLog(event, "SetContentType", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetContentType is a log parse operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) ParseSetContentType(log types.Log) (*BaseContentSetContentType, error) {
	event := new(BaseContentSetContentType)
	if err := _BaseContent.contract.UnpackLog(event, "SetContentType", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSetStatusCodeIterator is returned from FilterSetStatusCode and is used to iterate over the raw logs and unpacked data for SetStatusCode events raised by the BaseContent contract.
type BaseContentSetStatusCodeIterator struct {
	Event *BaseContentSetStatusCode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetStatusCodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetStatusCode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetStatusCode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetStatusCodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetStatusCodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetStatusCode represents a SetStatusCode event raised by the BaseContent contract.
type BaseContentSetStatusCode struct {
	StatusCode *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSetStatusCode is a free log retrieval operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) FilterSetStatusCode(opts *bind.FilterOpts) (*BaseContentSetStatusCodeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetStatusCode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetStatusCodeIterator{contract: _BaseContent.contract, event: "SetStatusCode", logs: logs, sub: sub}, nil
}

// WatchSetStatusCode is a free log subscription operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) WatchSetStatusCode(opts *bind.WatchOpts, sink chan<- *BaseContentSetStatusCode) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetStatusCode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetStatusCode)
				if err := _BaseContent.contract.UnpackLog(event, "SetStatusCode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetStatusCode is a log parse operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) ParseSetStatusCode(log types.Log) (*BaseContentSetStatusCode, error) {
	event := new(BaseContentSetStatusCode)
	if err := _BaseContent.contract.UnpackLog(event, "SetStatusCode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContent contract.
type BaseContentUpdateRequestIterator struct {
	Event *BaseContentUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentUpdateRequest represents a UpdateRequest event raised by the BaseContent contract.
type BaseContentUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentUpdateRequestIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentUpdateRequestIterator{contract: _BaseContent.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentUpdateRequest)
				if err := _BaseContent.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) ParseUpdateRequest(log types.Log) (*BaseContentUpdateRequest, error) {
	event := new(BaseContentUpdateRequest)
	if err := _BaseContent.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContent contract.
type BaseContentVersionConfirmIterator struct {
	Event *BaseContentVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentVersionConfirm represents a VersionConfirm event raised by the BaseContent contract.
type BaseContentVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentVersionConfirmIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentVersionConfirmIterator{contract: _BaseContent.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentVersionConfirm)
				if err := _BaseContent.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) ParseVersionConfirm(log types.Log) (*BaseContentVersionConfirm, error) {
	event := new(BaseContentVersionConfirm)
	if err := _BaseContent.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContent contract.
type BaseContentVersionDeleteIterator struct {
	Event *BaseContentVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentVersionDelete represents a VersionDelete event raised by the BaseContent contract.
type BaseContentVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentVersionDeleteIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentVersionDeleteIterator{contract: _BaseContent.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentVersionDelete)
				if err := _BaseContent.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) ParseVersionDelete(log types.Log) (*BaseContentVersionDelete, error) {
	event := new(BaseContentVersionDelete)
	if err := _BaseContent.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseContent contract.
type BaseContentVisibilityChangedIterator struct {
	Event *BaseContentVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentVisibilityChanged represents a VisibilityChanged event raised by the BaseContent contract.
type BaseContentVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContent *BaseContentFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseContentVisibilityChangedIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentVisibilityChangedIterator{contract: _BaseContent.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContent *BaseContentFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseContentVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentVisibilityChanged)
				if err := _BaseContent.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContent *BaseContentFilterer) ParseVisibilityChanged(log types.Log) (*BaseContentVisibilityChanged, error) {
	event := new(BaseContentVisibilityChanged)
	if err := _BaseContent.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentFactoryABI is the input ABI used to generate the binding from.
const BaseContentFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OP_ACCESS_COMPLETE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_opCodes\",\"type\":\"uint32[]\"},{\"name\":\"_contentAddrs\",\"type\":\"address[]\"},{\"name\":\"_userAddrs\",\"type\":\"address[]\"},{\"name\":\"_requestNonces\",\"type\":\"uint256[]\"},{\"name\":\"_ctxHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_ts\",\"type\":\"uint256[]\"},{\"name\":\"_amt\",\"type\":\"uint256[]\"}],\"name\":\"executeAccessBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OP_ACCESS_REQUEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseContentFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentFactoryFuncSigs = map[string]string{
	"4d887374": "OP_ACCESS_COMPLETE()",
	"52344328": "OP_ACCESS_REQUEST()",
	"af570c04": "contentSpace()",
	"bf4e088f": "createContent(address,address)",
	"02d05d3f": "creator()",
	"4dcc1d29": "executeAccessBatch(uint32[],address[],address[],uint256[],bytes32[],uint256[],uint256[])",
	"16279055": "isContract(address)",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// BaseContentFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseContentFactoryBin = "0x60806040527f4f776e61626c6532303230303231303131303130304d4c0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f426173654374466163746f72793230323030383033313330303030504f00000060055560028054600160a060020a031990811632908117909255600380549091169091179055615ead806100a26000396000f3006080604052600436106100ab5763ffffffff60e060020a60003504166302d05d3f81146100ad57806316279055146100de57806341c0e1b5146101135780634d887374146101285780634dcc1d2914610156578063523443281461030157806354fd4d50146103165780635f4fcae11461033d5780636d2e4b1b146103525780638da5cb5b14610373578063af570c0414610388578063bf4e088f1461039d578063f2fde38b146103c4575b005b3480156100b957600080fd5b506100c26103e5565b60408051600160a060020a039092168252519081900360200190f35b3480156100ea57600080fd5b506100ff600160a060020a03600435166103f4565b604080519115158252519081900360200190f35b34801561011f57600080fd5b506100ab6103fc565b34801561013457600080fd5b5061013d610438565b6040805163ffffffff9092168252519081900360200190f35b34801561016257600080fd5b50604080516020600480358082013583810280860185019096528085526100ab95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061043d9650505050505050565b34801561030d57600080fd5b5061013d610659565b34801561032257600080fd5b5061032b61065e565b60408051918252519081900360200190f35b34801561034957600080fd5b5061032b610664565b34801561035e57600080fd5b506100ab600160a060020a036004351661066a565b34801561037f57600080fd5b506100c26106c5565b34801561039457600080fd5b506100c26106d4565b3480156103a957600080fd5b506100c2600160a060020a03600435811690602435166106e3565b3480156103d057600080fd5b506100ab600160a060020a0360043516610ab5565b600254600160a060020a031681565b6000903b1190565b600354600160a060020a031632148061041f5750600354600160a060020a031633145b151561042a57600080fd5b600354600160a060020a0316ff5b600281565b865186516000908190831461045157600080fd5b8651831461045e57600080fd5b8751831461046b57600080fd5b8551831461047857600080fd5b8451831461048557600080fd5b600091505b8282101561064d5788828151811015156104a057fe5b9060200190602002015190506104cc89838151811015156104bd57fe5b906020019060200201516103f4565b15156104d757610642565b89516001908b90849081106104e857fe5b9060200190602002015163ffffffff1614156105f95780600160a060020a03166378f52ffb888481518110151561051b57fe5b90602001906020020151888581518110151561053357fe5b906020019060200201518b8681518110151561054b57fe5b90602001906020020151898781518110151561056357fe5b60209081029091018101516040805160e060020a63ffffffff891602815260048101969096526024860194909452600160a060020a039092166044850152606484019190915290516084808401938290030181600087803b1580156105c757600080fd5b505af11580156105db573d6000803e3d6000fd5b505050506040513d60208110156105f157600080fd5b506106429050565b89516002908b908490811061060a57fe5b9060200190602002015163ffffffff16141561063d5780600160a060020a031663bc7dba33888481518110151561051b57fe5b600080fd5b60019091019061048a565b50505050505050505050565b600181565b60055481565b60015481565b600254600160a060020a0316321461068157600080fd5b600160a060020a038116151561069657600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b604080517f0eaec2c5000000000000000000000000000000000000000000000000000000008152326004820152905160009184918391600160a060020a03841691630eaec2c59160248082019260209290919082900301818787803b15801561074b57600080fd5b505af115801561075f573d6000803e3d6000fd5b505050506040513d602081101561077557600080fd5b5051151561078257600080fd5b81600160a060020a03166329dedde5856040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156107dd57600080fd5b505af11580156107f1573d6000803e3d6000fd5b505050506040513d602081101561080757600080fd5b5051151561081457600080fd5b33858561081f610b27565b600160a060020a03938416815291831660208301529091166040808301919091525190819003606001906000f08015801561085e573d6000803e3d6000fd5b50905080600160a060020a031663c9e8e72d83600160a060020a03166332eaf21b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b505050506040513d60208110156108d857600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a03909216600483015251602480830192600092919082900301818387803b15801561091e57600080fd5b505af1158015610932573d6000803e3d6000fd5b5050505080600160a060020a031663e538530383600160a060020a0316631cdbee5a876040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156109a057600080fd5b505af11580156109b4573d6000803e3d6000fd5b505050506040513d60208110156109ca57600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a03909216600483015251602480830192600092919082900301818387803b158015610a1057600080fd5b505af1158015610a24573d6000803e3d6000fd5b5050604080517f0fe1b5a2000000000000000000000000000000000000000000000000000000008152326004820152600060248201819052600260448301529151600160a060020a0386169450630fe1b5a293506064808301939282900301818387803b158015610a9457600080fd5b505af1158015610aa8573d6000803e3d6000fd5b5092979650505050505050565b600354600160a060020a0316321480610ad85750600354600160a060020a031633145b1515610ae357600080fd5b600160a060020a0381161515610af857600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60405161534a80610b38833901905600608060408190527f4f776e61626c6532303230303231303131303130304d4c00000000000000000060009081557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006007556008805460ff191690911761ff00191690557f4564697461626c653230323030363236313830343030504f00000000000000006009557f42617365436f6e74656e743230323030383033313330303030504f000000000060105560175560608061534a8339810160408181528251602080850151948301516002805432600160a060020a03199182168117909255600380548216909217909155600480548216600160a060020a0380871691909117909155601480548316828a16179081905560001960165560118054909316828516179092556008805461010061ffff1990911617905516855292519194937fc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19929081900390910190a15050506151aa806101a06000396000f30060806040526004361061031c5763ffffffff60e060020a60003504166217de98811461031e578062821de31461034557806302d05d3f146103765780630593e3351461038b578063075d4782146103b05780630c6d3f93146103b85780630fe1b5a214610423578063100508a21461045057806314cfabb31461047b5780631a735f18146104905780631bf7a912146104dd57806322e564eb1461055e5780632310167f1461058b57806324d7806c146105a057806327c1c21d146105c157806329adec14146105d657806332eaf21b146105eb578063331b86c01461060057806336ebffca14610615578063375a6e7c1461062a578063388642841461063f57806338d0f5041461065757806340b87a261461071157806341c0e1b514610726578063446e88261461073b57806345155f6e14610743578063484f4b3b146107c95780634dd707881461084f5780635267db441461086457806354fd4d501461087c5780635f4fcae1146108915780635f6a1301146108a6578063628449fd146108bb5780636380501f1461094557806364ade32b1461095a57806367e5c3bf1461096f5780636d2e4b1b146109905780636e375427146109b15780637886f747146109c657806378f52ffb146109de5780637ca8f618146109fb5780637ddc2c5614610a1357806381beeb6414610aaf5780638280dd8f14610ac45780638da5cb5b14610adc5780638ee3a90014610af15780638f77920114610b0957806395a078e814610b1e57806397ac4fd214610b3f5780639867db7414610b54578063a1ff106e14610bad578063a8d4160e14610cb1578063aa024e8b14610de8578063ac55c90614610e03578063af570c0414610e5c578063b816f51314610e71578063bc7dba3314610e86578063c26484a614610ea3578063c287e0ed14610f3f578063c9e8e72d14610f54578063cbcd446114610f75578063d810f8c814610f8a578063e02dd9c214610f9f578063e1a7071714610fb4578063e53853031461100d578063e542b7cb1461102e578063ef1d7dc2146110c5578063f2fde38b146110da578063f4d9bae8146110fb578063f81ab0ae14611113575b005b34801561032a57600080fd5b50610333611128565b60408051918252519081900360200190f35b34801561035157600080fd5b5061035a61114c565b60408051600160a060020a039092168252519081900360200190f35b34801561038257600080fd5b5061035a61115c565b61039c60043560243560443561116b565b604080519115158252519081900360200190f35b61039c6111db565b3480156103c457600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261039c9482359460248035600160a060020a03169536959460649492019190819084018382808284375094975050933594506113539350505050565b34801561042f57600080fd5b5061031c600160a060020a036004351660ff6024358116906044351661139a565b34801561045c57600080fd5b50610465611454565b6040805160ff9092168252519081900360200190f35b34801561048757600080fd5b5061039c611459565b34801561049c57600080fd5b506104a86004356114f7565b60408051600160a060020a0390951685526020850193909352600091820b90910b838301526060830152519081900360800190f35b6040805160206004803580820135838102808601850190965280855261039c95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061152b9650505050505050565b34801561056a57600080fd5b5061031c600160a060020a036004351660ff602435811690604435166115f2565b34801561059757600080fd5b5061035a611acf565b3480156105ac57600080fd5b5061039c600160a060020a0360043516611ade565b3480156105cd57600080fd5b50610333611b08565b3480156105e257600080fd5b50610465611b0e565b3480156105f757600080fd5b5061035a611b17565b34801561060c57600080fd5b50610333611b26565b34801561062157600080fd5b5061035a611b2c565b34801561063657600080fd5b5061039c611b3b565b34801561064b57600080fd5b50610333600435611b44565b34801561066357600080fd5b506040805160206004602480358281013584810280870186019097528086526106ed96843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750611c9f9650505050505050565b6040805160ff94851681529290931660208301528183015290519081900360600190f35b34801561071d57600080fd5b50610333611cbe565b34801561073257600080fd5b5061031c611cc4565b61039c611edd565b60408051602060046024803582810135848102808701860190975280865261039c96843596369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506120e19650505050505050565b60408051602060046024803582810135848102808701860190975280865261039c96843596369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061230a9650505050505050565b34801561085b57600080fd5b50610333612464565b34801561087057600080fd5b50610333600435612488565b34801561088857600080fd5b5061033361251d565b34801561089d57600080fd5b50610333612523565b3480156108b257600080fd5b5061031c612529565b3480156108c757600080fd5b506108d0612567565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561090a5781810151838201526020016108f2565b50505050905090810190601f1680156109375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561095157600080fd5b506104656125f5565b34801561096657600080fd5b50610333612603565b34801561097b57600080fd5b5061039c600160a060020a0360043516612609565b34801561099c57600080fd5b5061031c600160a060020a0360043516612790565b3480156109bd57600080fd5b5061039c6127eb565b3480156109d257600080fd5b506103336004356127fa565b610333600435602435600160a060020a0360443516606435612819565b348015610a0757600080fd5b506108d0600435612851565b348015610a1f57600080fd5b506040805160206004602480358281013584810280870186019097528086526106ed968435600160a060020a031696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506128c59650505050505050565b348015610abb57600080fd5b5061039c612ac6565b348015610ad057600080fd5b50610333600435612ad1565b348015610ae857600080fd5b5061035a612c48565b348015610afd57600080fd5b50610333600435612c57565b348015610b1557600080fd5b50610333612cf1565b348015610b2a57600080fd5b5061039c600160a060020a0360043516612cf7565b348015610b4b57600080fd5b50610465612e40565b348015610b6057600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261031c943694929360249392840191908190840183828082843750949750612e459650505050505050565b60408051602060046024803582810135601f810185900485028601850190965285855261033395833560ff1695369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750612f729650505050505050565b348015610cbd57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610d0a9436949293602493928401919081908401838280828437509497506131229650505050505050565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610d4b578181015183820152602001610d33565b50505050905090810190601f168015610d785780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610dab578181015183820152602001610d93565b50505050905090810190601f168015610dd85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610df457600080fd5b5061031c60ff600435166134d7565b348015610e0f57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526108d09436949293602493928401919081908401838280828437509497506135579650505050505050565b348015610e6857600080fd5b5061035a613705565b348015610e7d57600080fd5b5061035a613714565b61039c600435602435600160a060020a0360443516606435613723565b348015610eaf57600080fd5b506040805160206004602480358281013584810280870186019097528086526106ed968435600160a060020a031696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506137c09650505050505050565b348015610f4b57600080fd5b5061031c6139d5565b348015610f6057600080fd5b5061031c600160a060020a0360043516613b4b565b348015610f8157600080fd5b5061039c613b8d565b348015610f9657600080fd5b50610333613baf565b348015610fab57600080fd5b506108d0613bd3565b348015610fc057600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610333943694929360249392840191908190840183828082843750949750613c2e9650505050505050565b34801561101957600080fd5b5061031c600160a060020a03600435166141b3565b34801561103a57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261031c94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506143d89650505050505050565b3480156110d157600080fd5b506104656145d4565b3480156110e657600080fd5b5061031c600160a060020a03600435166145d9565b34801561110757600080fd5b5061033360043561464b565b34801561111f57600080fd5b506103336146a0565b7f5075626c6973686564000000000000000000000000000000000000000000000081565b601454600160a060020a03165b90565b600254600160a060020a031681565b600080606080600061117e601754612c57565b935061118b8484846120e1565b604080518a8152602081018a90528215158183015290519192507f2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06919081900360600190a1979650505050505050565b6000806111e6612ac6565b15156111f157600080fd5b601454604080517f2cf994220000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0390921691632cf99422916024808201926020929091908290030181600087803b15801561125757600080fd5b505af115801561126b573d6000803e3d6000fd5b505050506040513d602081101561128157600080fd5b5051601654604080518315158152602081018390526060918101828152600a8054600260001961010060018416150201909116049383018490529495507fad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4948694939092919060808301908490801561133b5780601f106113105761010080835404028352916020019161133b565b820191906000526020600020905b81548152906001019060200180831161131e57829003601f168201915b505094505050505060405180910390a18091505b5090565b601354600090600160a060020a03161580159061137a5750601354600160a060020a031633145b151561138557600080fd5b611391858585856146ad565b95945050505050565b600480546040805160e060020a6363e6ffdd028152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd9160248082019260209290919082900301818787803b1580156113f457600080fd5b505af1158015611408573d6000803e3d6000fd5b505050506040513d602081101561141e57600080fd5b50519050600160a060020a03811615156114425761143d8585856115f2565b61144d565b61144d8185856115f2565b5050505050565b600181565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e149160248082019260209290919082900301818887803b1580156114c557600080fd5b505af11580156114d9573d6000803e3d6000fd5b505050506040513d60208110156114ef57600080fd5b505191505090565b6018602052600090815260408120805460018201546002830154600390930154600160a060020a03909216939092900b9084565b600080611536614f83565b601780546001019081905561154a90612c57565b915061155f8286866000336103e842026147e2565b505060408051608081018252338152346020808301918252600083850181815260608501828152878352601890935294812084518154600160a060020a039190911673ffffffffffffffffffffffffffffffffffffffff19909116178155925160018085019190915594516002840180549190920b60ff1660ff1990911617905551600390910155909250505092915050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561163557600080fd5b505af1158015611649573d6000803e3d6000fd5b505050506040513d602081101561165f57600080fd5b5051600854610100900460ff9081169116141561170457604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b1580156116e757600080fd5b505af11580156116fb573d6000803e3d6000fd5b50505050611ac9565b80600160a060020a03166312915a306040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561174257600080fd5b505af1158015611756573d6000803e3d6000fd5b505050506040513d602081101561176c57600080fd5b5051600854610100900460ff908116911614156117f457604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b1580156116e757600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561183257600080fd5b505af1158015611846573d6000803e3d6000fd5b505050506040513d602081101561185c57600080fd5b5051600854610100900460ff908116911614156118e457604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b1580156116e757600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561192257600080fd5b505af1158015611936573d6000803e3d6000fd5b505050506040513d602081101561194c57600080fd5b5051600854610100900460ff908116911614156119d457604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b1580156116e757600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611a1257600080fd5b505af1158015611a26573d6000803e3d6000fd5b505050506040513d6020811015611a3c57600080fd5b5051600854610100900460ff90811691161415611ac457604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b1580156116e757600080fd5b600080fd5b50505050565b601354600160a060020a031681565b600354600090600160a060020a0383811691161415611aff57506001611b03565b5060005b919050565b60165481565b60085460ff1681565b601254600160a060020a031681565b600c5490565b601154600160a060020a031681565b600f5460ff1681565b60135460009081908190600160a060020a031615611bf45750601354604080517f45080442000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a0390921691829163450804429160248083019260209291908290030181600087803b158015611bc557600080fd5b505af1158015611bd9573d6000803e3d6000fd5b505050506040513d6020811015611bef57600080fd5b505191505b8115611c0257819250611c98565b831515611c31577f5075626c697368656400000000000000000000000000000000000000000000009250611c98565b6000841215611c62577f44726166740000000000000000000000000000000000000000000000000000009250611c98565b6000841315611c93577f447261667420696e2072657669657700000000000000000000000000000000009250611c98565b600092505b5050919050565b6000806000611caf3386866128c5565b92509250925093509350939050565b600b5481565b601454600090600160a060020a03163314611cde57600080fd5b50601354600090600160a060020a031615611d7557601360009054906101000a9004600160a060020a0316600160a060020a031663860b24926040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611d4657600080fd5b505af1158015611d5a573d6000803e3d6000fd5b505050506040513d6020811015611d7057600080fd5b505190505b801580611d825750806064145b80611d8e5750806103e8145b80611d9a57508061044c145b1515611da557600080fd5b6103e8811015611e4e57600354600160a060020a0316321480611e435750601460009054906101000a9004600160a060020a0316600160a060020a03166381beeb646040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611e1657600080fd5b505af1158015611e2a573d6000803e3d6000fd5b505050506040513d6020811015611e4057600080fd5b50515b1515611e4e57600080fd5b8060641480611e5e57508061044c145b15611ecf57601360009054906101000a9004600160a060020a0316600160a060020a0316632de3ecd16040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611eb657600080fd5b505af1158015611eca573d6000803e3d6000fd5b505050505b600354600160a060020a0316ff5b6000611ee7611459565b1515611ef257600080fd5b600f5460ff161515611f0357600080fd5b6000600a8054600181600116156101000203166002900490501115611fb257600c80546001818101808455600093909352600a8054611f79937fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70192600261010091831615919091026000190190911604614faa565b5050600b54600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501555b600e8054611fd591600a9160026000196101006001841615020190911604614faa565b5042600b55604080516020810191829052600090819052611ff891600e9161502b565b50600f805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a031661203961114c565b60408051600160a060020a038085168252831660208201526060918101828152600a805460026000196101006001841615020190911604938301849052926080830190849080156120cb5780601f106120a0576101008083540402835291602001916120cb565b820191906000526020600020905b8154815290600101906020018083116120ae57829003601f168201915b505094505050505060405180910390a150600190565b600083815260186020526040812080548290600160a060020a03161580159061212757508154600160a060020a03163314806121275750600354600160a060020a031633145b151561213257600080fd5b61213d86868661230a565b8254909150600160a060020a031633141561217d57801561216d576002828101805460ff1916909117905561217d565b60028201805460ff191660fe1790555b816001015482600301541015612259576002820154600090810b810b136121fe57815460408051808201909152600681527f726566756e6400000000000000000000000000000000000000000000000000006020820152600384015460018501546121f8938a93600160a060020a03909116929091036146ad565b50612259565b6003805460408051808201909152600e81527f72656c6561736520657363726f770000000000000000000000000000000000006020820152918401546001850154612257938a93600160a060020a0316929091036146ad565b505b6000868152601860209081526040808320805473ffffffffffffffffffffffffffffffffffffffff191681556001810184905560028101805460ff1916905560030183905560145481518a815285151593810193909352600160a060020a03168282015260608201929092523360808201526103e8420260a082015290517fd3e5b1d14681444d8159fa85b57104b685f47fb9164fd82b7fafe4e123dcc3a19181900360c00190a195945050505050565b60135460009060019082908190600160a060020a031615612459576013546040517f1a485ccd0000000000000000000000000000000000000000000000000000000081526004810189815233606483018190526080602484019081528a5160848501528a51600160a060020a0390951696508694631a485ccd948d948d948d94909391929091604482019160a401906020808901910280838360005b838110156123be5781810151838201526020016123a6565b50505050905001838103825285818151815260200191508051906020019060200280838360005b838110156123fd5781810151838201526020016123e5565b505050509050019650505050505050602060405180830381600087803b15801561242657600080fd5b505af115801561243a573d6000803e3d6000fd5b505050506040513d602081101561245057600080fd5b50518015935090505b509095945050505050565b7f447261667400000000000000000000000000000000000000000000000000000081565b600354600090600160a060020a0316321480156124bc575060008212806124bc57506000821380156124bc57506000601654125b156124c75760168290555b601454600160a060020a03163314156124e05760168290555b60165460408051918252517fda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a29181900360200190a1505060165490565b60105481565b60015481565b6125316127eb565b151561253c57600080fd5b60408051602081019182905260009081905261255a91600e9161502b565b50600f805460ff19169055565b600e805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156125ed5780601f106125c2576101008083540402835291602001916125ed565b820191906000526020600020905b8154815290600101906020018083116125d057829003601f168201915b505050505081565b600854610100900460ff1681565b60155481565b6003546000908190600160a060020a03848116911614806126325750600854606460ff90911610155b15612640576001915061278a565b600854600061010090910460ff16111561278557600480546040805160e060020a6363e6ffdd028152600160a060020a0387811694820194909452905192909116916363e6ffdd916024808201926020929091908290030181600087803b1580156126aa57600080fd5b505af11580156126be573d6000803e3d6000fd5b505050506040513d60208110156126d457600080fd5b5051600854604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a916064808201926020929091908290030181600087803b15801561275257600080fd5b505af1158015612766573d6000803e3d6000fd5b505050506040513d602081101561277c57600080fd5b5051915061278a565b600091505b50919050565b600254600160a060020a031632146127a757600080fd5b600160a060020a03811615156127bc57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60006127f5612ac6565b905090565b600d80548290811061280857fe5b600091825260209091200154905081565b6012546000906060908190600160a060020a0316321461283857600080fd5b6128468783838989896147e2565b979650505050505050565b600c80548290811061285f57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156125ed5780601f106125c2576101008083540402835291602001916125ed565b60008060008060008060008060165460001415156128f1576128e68b614ab4565b975097509750612ab8565b6128fc8b8b8b6137c0565b9650909450925060ff808516148061291757508260ff1660ff145b15612aae57600480546040805160e060020a6363e6ffdd028152600160a060020a038f811694820194909452905192909116935083916363e6ffdd916024808201926020929091908290030181600087803b15801561297557600080fd5b505af1158015612989573d6000803e3d6000fd5b505050506040513d602081101561299f57600080fd5b50519050600160a060020a03811615612aae578360ff1660ff1415612a7757600854604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526000604483018190529051600160a060020a03841692637fb52f1a9260648083019360209390929083900390910190829087803b158015612a3c57600080fd5b505af1158015612a50573d6000803e3d6000fd5b505050506040513d6020811015612a6657600080fd5b5051151560011415612a7757600093505b60ff84161515612aae578260ff1660ff1415612aae57612a968b612cf7565b151560011415612aa95760009250612aae565b606492505b8383869750975097505b505050505093509350939050565b60006127f532612609565b6000806000612ade613b8d565b1515612ae957600080fd5b601354600160a060020a03161515612b6d57600354600160a060020a0316321480612b1e5750600354600160a060020a031633145b8015612b355750836000191480612b355750836001145b15612b4257839150612b68565b601454600160a060020a031633148015612b5f5750600060165412155b15612b68578391505b612c05565b50601354604080517f3513a805000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a03909216918291633513a8059160248083019260209291908290030181600087803b158015612bd657600080fd5b505af1158015612bea573d6000803e3d6000fd5b505050506040513d6020811015612c0057600080fd5b505191505b60168290556040805183815290517fda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a29181900360200190a1505060165492915050565b600354600160a060020a031681565b601754604080516020808201939093526c010000000000000000000000003002818301528151603481830301815260549091019182905280516000939192918291908401908083835b60208310612cbf5780518252601f199092019160209182019101612ca0565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b60175481565b6003546000908190600160a060020a0384811691161480612d205750600854600a60ff90911610155b15612d2e576001915061278a565b600854600061010090910460ff16111561278557600480546040805160e060020a6363e6ffdd028152600160a060020a0387811694820194909452905192909116916363e6ffdd916024808201926020929091908290030181600087803b158015612d9857600080fd5b505af1158015612dac573d6000803e3d6000fd5b505050506040513d6020811015612dc257600080fd5b5051600854604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a916064808201926020929091908290030181600087803b15801561275257600080fd5b600a81565b612e4d6127eb565b1515612e5857600080fd5b600f5460ff1615612e6857600080fd5b8051608011612e7657600080fd5b8051612e8990600e90602084019061502b565b50600f805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316612ecd61114c565b60408051600160a060020a038085168252831660208201526060918101828152600e80546002600019610100600184161502019091160493830184905292608083019084908015612f5f5780601f10612f3457610100808354040283529160200191612f5f565b820191906000526020600020905b815481529060010190602001808311612f4257829003601f168201915b505094505050505060405180910390a150565b6000612f7e838361152b565b506017546040805182815260006020820181905260a0928201838152600a8054600260001961010060018416150201909116049484018590527f50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a069594929390928b928b92916060830190608084019060c0850190889080156130415780601f1061301657610100808354040283529160200191613041565b820191906000526020600020905b81548152906001019060200180831161302457829003601f168201915b5050848103835286518152865160209182019188019080838360005b8381101561307557818101518382015260200161305d565b50505050905090810190601f1680156130a25780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156130d55781810151838201526020016130bd565b50505050905090810190601f1680156131025780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a15060175495945050505050565b6004546012546060918291600160a060020a03918216911615806131d75750601254604080517fd6be0f49000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015290519183169163d6be0f49916024808201926020929091908290030181600087803b1580156131a957600080fd5b505af11580156131bd573d6000803e3d6000fd5b505050506040513d60208110156131d357600080fd5b5051155b1561320057604080516020818101835260008083528351918201909352918252935091506134d1565b601254604080517f589aafc1000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015290519183169163268bfac491839163589aafc19160248082019260009290919082900301818387803b15801561326f57600080fd5b505af1158015613283573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156132ac57600080fd5b8101908080516401000000008111156132c457600080fd5b820160208101848111156132d757600080fd5b81516401000000008111828201871017156132f157600080fd5b5050929190505050866040518363ffffffff1660e060020a028152600401808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561334d578181015183820152602001613335565b50505050905090810190601f16801561337a5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156133ad578181015183820152602001613395565b50505050905090810190601f1680156133da5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156133fb57600080fd5b505af115801561340f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561343857600080fd5b81019080805164010000000081111561345057600080fd5b8201602081018481111561346357600080fd5b815164010000000081118282018710171561347d57600080fd5b5050929190602001805164010000000081111561349957600080fd5b820160208101848111156134ac57600080fd5b81516401000000008111828201871017156134c657600080fd5b509497509550505050505b50915091565b6134df612ac6565b15156134ea57600080fd5b6008805460ff80841660ff19909216919091179182905560045460145460408051600160a060020a0393841681529190921660208201529290911682820152517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e5025009181900360600190a150565b60606000806020845111151561361157505081518083015160008181526005602090815260409182902080548351601f6002610100600185161502600019019093169290920491820184900484028101840190945280845293949390918301828280156136055780601f106135da57610100808354040283529160200191613605565b820191906000526020600020905b8154815290600101906020018083116135e857829003601f168201915b50505050509250611c98565b6006846040518082805190602001908083835b602083106136435780518252601f199092019160209182019101613624565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156136f75780601f106136cc576101008083540402835291602001916136f7565b820191906000526020600020905b8154815290600101906020018083116136da57829003601f168201915b505050505092505050919050565b600454600160a060020a031681565b601454600160a060020a031681565b60125460009060609081908390600160a060020a0316321461374457600080fd5b61374f88848461230a565b601454604080518b81528315156020820152600160a060020a0392831681830152606081018b9052918916608083015260a08201889052519192507fd3e5b1d14681444d8159fa85b57104b685f47fb9164fd82b7fafe4e123dcc3a1919081900360c00190a1979650505050505050565b6000806000806137ce615099565b601554600854909250600090819081908190600160ff90911610156137f45760ff6137f7565b60005b60ff9081168652600854600a911610156138125760ff613815565b60005b60ff166020860152601354600160a060020a0316156139b957601360009054906101000a9004600160a060020a0316600160a060020a03166374ba46098c8c8f6040518463ffffffff1660e060020a02815260040180806020018060200184600160a060020a0316600160a060020a03168152602001838103835286818151815260200191508051906020019060200280838360005b838110156138c35781810151838201526020016138ab565b50505050905001838103825285818151815260200191508051906020019060200280838360005b838110156139025781810151838201526020016138ea565b5050505090500195505050505050608060405180830381600087803b15801561392a57600080fd5b505af115801561393e573d6000803e3d6000fd5b505050506040513d608081101561395457600080fd5b5080516020820151604083015160609093015160155492975090955091935090915081111561398657606485526139b9565b6001841615156139975760ff831685525b6002841615156139ab5760ff821660208601525b6004841615156139b9578095505b50508251602090930151929a9299509297509095505050505050565b6013546000908190600160a060020a031615156139f9576139f4614c78565b613b47565b601360009054906101000a9004600160a060020a0316915081600160a060020a031663c9f3d94c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613a4f57600080fd5b505af1158015613a63573d6000803e3d6000fd5b505050506040513d6020811015613a7957600080fd5b505190506064811415613a8e576139f4614c78565b8015613a9957600080fd5b604080516020808252600a8054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b6593909291829182019084908015613b385780601f10613b0d57610100808354040283529160200191613b38565b820191906000526020600020905b815481529060010190602001808311613b1b57829003601f168201915b50509250505060405180910390a15b5050565b613b53612ac6565b1515613b5e57600080fd5b6012805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000613b97612ac6565b806127f5575050601454600160a060020a0316331490565b7f447261667420696e20726576696577000000000000000000000000000000000081565b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156125ed5780601f106125c2576101008083540402835291602001916125ed565b6000806000806000806000806000613c446127eb565b1515613c4f57600080fd5b896040516020018082805190602001908083835b60208310613c825780518252601f199092019160209182019101613c63565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310613ce55780518252601f199092019160209182019101613cc6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209750600a6040516020018082805460018160011615610100020316600290048015613d745780601f10613d52576101008083540402835291820191613d74565b820191906000526020600020905b815481529060010190602001808311613d60575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310613db75780518252601f199092019160209182019101613d98565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120995050505087871415613fa457600c541515613e1f57604080516020810191829052600090819052613e1491600a9161502b565b506000600b55613eca565b6000955060009450600093505b600c54841015613e825784600d85815481101515613e4657fe5b90600052602060002001541115613e7757839550600d84815481101515613e6957fe5b906000526020600020015494505b600190930192613e2c565b600c805487908110613e9057fe5b90600052602060002001600a9080546001816001161561010002031660029004613ebb929190614faa565b50600b859055613eca86614d3a565b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168b60006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613f5f578181015183820152602001613f47565b50505050905090810190601f168015613f8c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600098506141a6565b6000199250600091505b600c548210156140c357600c805483908110613fc657fe5b90600052602060002001604051602001808280546001816001161561010002031660029004801561402e5780601f1061400c57610100808354040283529182019161402e565b820191906000526020600020905b81548152906001019060200180831161401a575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106140715780518252601f199092019160209182019101614052565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209350505050878114156140b8576140b082614d3a565b8192506140c3565b600190910190613fae565b6000198314156140d257600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168b856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561416657818101518382015260200161414e565b50505050905090810190601f1680156141935780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18298505b5050505050505050919050565b60008060006141c0612ac6565b15156141cb57600080fd5b601354600160a060020a0316156142e957601360009054906101000a9004600160a060020a0316925082600160a060020a031663860b24926040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561423257600080fd5b505af1158015614246573d6000803e3d6000fd5b505050506040513d602081101561425c57600080fd5b50519150606482148061427057508161044c145b156142d05782600160a060020a0316632de3ecd16040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156142b357600080fd5b505af11580156142c7573d6000803e3d6000fd5b505050506142e9565b8115806142de5750816103e8145b15156142e957600080fd5b6013805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038616908117909155156143935783925082600160a060020a0316637b1cdb3e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561435a57600080fd5b505af115801561436e573d6000803e3d6000fd5b505050506040513d602081101561438457600080fd5b50519050801561439357600080fd5b60135460408051600160a060020a039092168252517fa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb79181900360200190a150505050565b6000806143e433611ade565b15156143ef57600080fd5b835160201061444a575050815180830151600081815260056020526040812091929161441a916150b4565b60008351111561444557600082815260056020908152604090912084516144439286019061502b565b505b614535565b6006846040518082805190602001908083835b6020831061447c5780518252601f19909201916020918201910161445d565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092206144b59250905060006150b4565b60008351111561453557826006856040518082805190602001908083835b602083106144f25780518252601f1990920191602091820191016144d3565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381019093208451614533959194919091019250905061502b565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c846040518080602001828103825283818151815260200191508051906020019080838360005b8381101561459457818101518382015260200161457c565b50505050905090810190601f1680156145c15780820380516001836020036101000a031916815260200191505b509250505060405180910390a150505050565b606481565b600354600160a060020a03163214806145fc5750600354600160a060020a031633145b151561460757600080fd5b600160a060020a038116151561461c57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000614655612ac6565b151561466057600080fd5b60158290556040805183815290517f4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a39181900360200190a1505060155490565b60006127f5601654611b44565b6000848152601860205260408120600181015460038201548401116147d657604051600160a060020a0386169084156108fc029085906000818181858888f19350505050158015614702573d6000803e3d6000fd5b508281600301540181600301819055507fad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b986858786604051808581526020018060200184600160a060020a0316600160a060020a03168152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015614798578181015183820152602001614780565b50505050905090810190601f1680156147c55780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b50600195945050505050565b6000806000806147f3868a8a614e3c565b601354600160a060020a03161561493d576013546040517ff9b4aa02000000000000000000000000000000000000000000000000000000008152600481018c8152600160a060020a0389811660648401526080602484019081528d5160848501528d51919094169650869363f9b4aa02938f938f938f938e939091604482019160a401906020808901910280838360005b8381101561489c578181015183820152602001614884565b50505050905001838103825285818151815260200191508051906020019060200280838360005b838110156148db5781810151838201526020016148c3565b505050509050019650505050505050602060405180830381600087803b15801561490457600080fd5b505af1158015614918573d6000803e3d6000fd5b505050506040513d602081101561492e57600080fd5b50519150811561493d57600080fd5b601454604080518c8152600160a060020a0392831660208201528082018a9052918816606083015260808201879052517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360a00190a15060005b8851811015614a155788818151811015156149b257fe5b6020908102909101015115614a0d577f515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c3889828151811015156149f057fe5b602090810290910181015160408051918252519081900390910190a15b60010161499b565b5060005b8751811015614aa6578781815181101515614a3057fe5b60209081029091010151600160a060020a031615614a9e577fb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b6848882815181101515614a7757fe5b602090810290910181015160408051600160a060020a039092168252519081900390910190a15b600101614a19565b509798975050505050505050565b6003546000908190819081908190600160a060020a0387811691161480614ae35750600854600a60ff90911610155b15614af957601554600095508594509250614c6f565b600480546040805160e060020a6363e6ffdd028152600160a060020a038a811694820194909452905192909116935083916363e6ffdd916024808201926020929091908290030181600087803b158015614b5257600080fd5b505af1158015614b66573d6000803e3d6000fd5b505050506040513d6020811015614b7c57600080fd5b50519050600160a060020a03811615614bb357614b9886612cf7565b151560011415614bb357601554600095508594509250614c6f565b601454604080517f29d00219000000000000000000000000000000000000000000000000000000008152600160a060020a038981166004830152915191909216916329d002199160248083019260209291908290030181600087803b158015614c1b57600080fd5b505af1158015614c2f573d6000803e3d6000fd5b505050506040513d6020811015614c4557600080fd5b5051151560011415614c6257601554600095508594509250614c6f565b601554600a955085945092505b50509193909250565b614c80612ac6565b1515614c8b57600080fd5b604080516020808252600a8054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b6593909291829182019084908015614d2a5780601f10614cff57610100808354040283529160200191614d2a565b820191906000526020600020905b815481529060010190602001808311614d0d57829003601f168201915b50509250505060405180910390a1565b600c805482908110614d4857fe5b906000526020600020016000614d5e91906150b4565b600d805482908110614d6c57fe5b6000918252602082200155600c54600019018114614e1257600c80546000198101908110614d9657fe5b90600052602060002001600c82815481101515614daf57fe5b906000526020600020019080546001816001161561010002031660029004614dd8929190614faa565b50600d80546000198101908110614deb57fe5b9060005260206000200154600d82815481101515614e0557fe5b6000918252602090912001555b600c805490614e259060001983016150f8565b50600d805490613b47906000198301615121565b50565b6000806000614e4c8686866128c5565b94509092509050606460ff82161415614e785734831115614e6c57600080fd5b614e74614e8e565b5060005b60ff811615614e8657600080fd5b505050505050565b600480546040805160e060020a6363e6ffdd0281523393810193909352516000928392600160a060020a0316916363e6ffdd9160248082019260209290919082900301818787803b158015614ee257600080fd5b505af1158015614ef6573d6000803e3d6000fd5b505050506040513d6020811015614f0c57600080fd5b5051604080517fb8ff1dba0000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a0383169163b8ff1dba9160048082019260009290919082900301818387803b158015614f6f57600080fd5b505af1158015614e86573d6000803e3d6000fd5b60408051608081018252600080825260208201819052918101829052606081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614fe3578054855561501f565b8280016001018555821561501f57600052602060002091601f016020900482015b8281111561501f578254825591600101919060010190615004565b5061134f929150615141565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061506c57805160ff191683800117855561501f565b8280016001018555821561501f579182015b8281111561501f57825182559160200191906001019061507e565b60408051808201825290600290829080388339509192915050565b50805460018160011615610100020316600290046000825580601f106150da5750614e39565b601f016020900490600052602060002090810190614e399190615141565b81548183558181111561511c5760008381526020902061511c91810190830161515b565b505050565b81548183558181111561511c5760008381526020902061511c9181019083015b61115991905b8082111561134f5760008155600101615147565b61115991905b8082111561134f57600061517582826150b4565b506001016151615600a165627a7a72305820491b66eb26892bb5038786c5989990d988a0adb6456f76574250dd8614cb52240029a165627a7a723058209cc0cabe36b0691b5b7670cdf91ed6191f8dee7fe751b5ed1f1a2ed40f55637f0029"

// DeployBaseContentFactory deploys a new Ethereum contract, binding an instance of BaseContentFactory to it.
func DeployBaseContentFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseContentFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseContentFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentFactory{BaseContentFactoryCaller: BaseContentFactoryCaller{contract: contract}, BaseContentFactoryTransactor: BaseContentFactoryTransactor{contract: contract}, BaseContentFactoryFilterer: BaseContentFactoryFilterer{contract: contract}}, nil
}

// BaseContentFactory is an auto generated Go binding around an Ethereum contract.
type BaseContentFactory struct {
	BaseContentFactoryCaller     // Read-only binding to the contract
	BaseContentFactoryTransactor // Write-only binding to the contract
	BaseContentFactoryFilterer   // Log filterer for contract events
}

// BaseContentFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseContentFactorySession struct {
	Contract     *BaseContentFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BaseContentFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseContentFactoryCallerSession struct {
	Contract *BaseContentFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// BaseContentFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseContentFactoryTransactorSession struct {
	Contract     *BaseContentFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// BaseContentFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseContentFactoryRaw struct {
	Contract *BaseContentFactory // Generic contract binding to access the raw methods on
}

// BaseContentFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseContentFactoryCallerRaw struct {
	Contract *BaseContentFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseContentFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseContentFactoryTransactorRaw struct {
	Contract *BaseContentFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseContentFactory creates a new instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactory(address common.Address, backend bind.ContractBackend) (*BaseContentFactory, error) {
	contract, err := bindBaseContentFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactory{BaseContentFactoryCaller: BaseContentFactoryCaller{contract: contract}, BaseContentFactoryTransactor: BaseContentFactoryTransactor{contract: contract}, BaseContentFactoryFilterer: BaseContentFactoryFilterer{contract: contract}}, nil
}

// NewBaseContentFactoryCaller creates a new read-only instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseContentFactoryCaller, error) {
	contract, err := bindBaseContentFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryCaller{contract: contract}, nil
}

// NewBaseContentFactoryTransactor creates a new write-only instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentFactoryTransactor, error) {
	contract, err := bindBaseContentFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryTransactor{contract: contract}, nil
}

// NewBaseContentFactoryFilterer creates a new log filterer instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentFactoryFilterer, error) {
	contract, err := bindBaseContentFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryFilterer{contract: contract}, nil
}

// bindBaseContentFactory binds a generic wrapper to an already deployed contract.
func bindBaseContentFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentFactory *BaseContentFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentFactory.Contract.BaseContentFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentFactory *BaseContentFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.BaseContentFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentFactory *BaseContentFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.BaseContentFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentFactory *BaseContentFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentFactory *BaseContentFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentFactory *BaseContentFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.contract.Transact(opts, method, params...)
}

// OPACCESSCOMPLETE is a free data retrieval call binding the contract method 0x4d887374.
//
// Solidity: function OP_ACCESS_COMPLETE() constant returns(uint32)
func (_BaseContentFactory *BaseContentFactoryCaller) OPACCESSCOMPLETE(opts *bind.CallOpts) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "OP_ACCESS_COMPLETE")
	return *ret0, err
}

// OPACCESSCOMPLETE is a free data retrieval call binding the contract method 0x4d887374.
//
// Solidity: function OP_ACCESS_COMPLETE() constant returns(uint32)
func (_BaseContentFactory *BaseContentFactorySession) OPACCESSCOMPLETE() (uint32, error) {
	return _BaseContentFactory.Contract.OPACCESSCOMPLETE(&_BaseContentFactory.CallOpts)
}

// OPACCESSCOMPLETE is a free data retrieval call binding the contract method 0x4d887374.
//
// Solidity: function OP_ACCESS_COMPLETE() constant returns(uint32)
func (_BaseContentFactory *BaseContentFactoryCallerSession) OPACCESSCOMPLETE() (uint32, error) {
	return _BaseContentFactory.Contract.OPACCESSCOMPLETE(&_BaseContentFactory.CallOpts)
}

// OPACCESSREQUEST is a free data retrieval call binding the contract method 0x52344328.
//
// Solidity: function OP_ACCESS_REQUEST() constant returns(uint32)
func (_BaseContentFactory *BaseContentFactoryCaller) OPACCESSREQUEST(opts *bind.CallOpts) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "OP_ACCESS_REQUEST")
	return *ret0, err
}

// OPACCESSREQUEST is a free data retrieval call binding the contract method 0x52344328.
//
// Solidity: function OP_ACCESS_REQUEST() constant returns(uint32)
func (_BaseContentFactory *BaseContentFactorySession) OPACCESSREQUEST() (uint32, error) {
	return _BaseContentFactory.Contract.OPACCESSREQUEST(&_BaseContentFactory.CallOpts)
}

// OPACCESSREQUEST is a free data retrieval call binding the contract method 0x52344328.
//
// Solidity: function OP_ACCESS_REQUEST() constant returns(uint32)
func (_BaseContentFactory *BaseContentFactoryCallerSession) OPACCESSREQUEST() (uint32, error) {
	return _BaseContentFactory.Contract.OPACCESSREQUEST(&_BaseContentFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentFactory *BaseContentFactorySession) ContentSpace() (common.Address, error) {
	return _BaseContentFactory.Contract.ContentSpace(&_BaseContentFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseContentFactory.Contract.ContentSpace(&_BaseContentFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentFactory *BaseContentFactorySession) Creator() (common.Address, error) {
	return _BaseContentFactory.Contract.Creator(&_BaseContentFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseContentFactory.Contract.Creator(&_BaseContentFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentFactory *BaseContentFactorySession) Owner() (common.Address, error) {
	return _BaseContentFactory.Contract.Owner(&_BaseContentFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentFactory *BaseContentFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseContentFactory.Contract.Owner(&_BaseContentFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactorySession) Version() ([32]byte, error) {
	return _BaseContentFactory.Contract.Version(&_BaseContentFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseContentFactory.Contract.Version(&_BaseContentFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentFactory.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactorySession) VersionAPI() ([32]byte, error) {
	return _BaseContentFactory.Contract.VersionAPI(&_BaseContentFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentFactory *BaseContentFactoryCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseContentFactory.Contract.VersionAPI(&_BaseContentFactory.CallOpts)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentFactory *BaseContentFactoryTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "createContent", lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentFactory *BaseContentFactorySession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.CreateContent(&_BaseContentFactory.TransactOpts, lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentFactory *BaseContentFactoryTransactorSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.CreateContent(&_BaseContentFactory.TransactOpts, lib, content_type)
}

// ExecuteAccessBatch is a paid mutator transaction binding the contract method 0x4dcc1d29.
//
// Solidity: function executeAccessBatch(uint32[] _opCodes, address[] _contentAddrs, address[] _userAddrs, uint256[] _requestNonces, bytes32[] _ctxHashes, uint256[] _ts, uint256[] _amt) returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) ExecuteAccessBatch(opts *bind.TransactOpts, _opCodes []uint32, _contentAddrs []common.Address, _userAddrs []common.Address, _requestNonces []*big.Int, _ctxHashes [][32]byte, _ts []*big.Int, _amt []*big.Int) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "executeAccessBatch", _opCodes, _contentAddrs, _userAddrs, _requestNonces, _ctxHashes, _ts, _amt)
}

// ExecuteAccessBatch is a paid mutator transaction binding the contract method 0x4dcc1d29.
//
// Solidity: function executeAccessBatch(uint32[] _opCodes, address[] _contentAddrs, address[] _userAddrs, uint256[] _requestNonces, bytes32[] _ctxHashes, uint256[] _ts, uint256[] _amt) returns()
func (_BaseContentFactory *BaseContentFactorySession) ExecuteAccessBatch(_opCodes []uint32, _contentAddrs []common.Address, _userAddrs []common.Address, _requestNonces []*big.Int, _ctxHashes [][32]byte, _ts []*big.Int, _amt []*big.Int) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.ExecuteAccessBatch(&_BaseContentFactory.TransactOpts, _opCodes, _contentAddrs, _userAddrs, _requestNonces, _ctxHashes, _ts, _amt)
}

// ExecuteAccessBatch is a paid mutator transaction binding the contract method 0x4dcc1d29.
//
// Solidity: function executeAccessBatch(uint32[] _opCodes, address[] _contentAddrs, address[] _userAddrs, uint256[] _requestNonces, bytes32[] _ctxHashes, uint256[] _ts, uint256[] _amt) returns()
func (_BaseContentFactory *BaseContentFactoryTransactorSession) ExecuteAccessBatch(_opCodes []uint32, _contentAddrs []common.Address, _userAddrs []common.Address, _requestNonces []*big.Int, _ctxHashes [][32]byte, _ts []*big.Int, _amt []*big.Int) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.ExecuteAccessBatch(&_BaseContentFactory.TransactOpts, _opCodes, _contentAddrs, _userAddrs, _requestNonces, _ctxHashes, _ts, _amt)
}

// IsContract is a paid mutator transaction binding the contract method 0x16279055.
//
// Solidity: function isContract(address addr) returns(bool)
func (_BaseContentFactory *BaseContentFactoryTransactor) IsContract(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "isContract", addr)
}

// IsContract is a paid mutator transaction binding the contract method 0x16279055.
//
// Solidity: function isContract(address addr) returns(bool)
func (_BaseContentFactory *BaseContentFactorySession) IsContract(addr common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.IsContract(&_BaseContentFactory.TransactOpts, addr)
}

// IsContract is a paid mutator transaction binding the contract method 0x16279055.
//
// Solidity: function isContract(address addr) returns(bool)
func (_BaseContentFactory *BaseContentFactoryTransactorSession) IsContract(addr common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.IsContract(&_BaseContentFactory.TransactOpts, addr)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactory *BaseContentFactorySession) Kill() (*types.Transaction, error) {
	return _BaseContentFactory.Contract.Kill(&_BaseContentFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactory *BaseContentFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseContentFactory.Contract.Kill(&_BaseContentFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactory *BaseContentFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.TransferCreatorship(&_BaseContentFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactory *BaseContentFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.TransferCreatorship(&_BaseContentFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactory *BaseContentFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.TransferOwnership(&_BaseContentFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactory *BaseContentFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.Contract.TransferOwnership(&_BaseContentFactory.TransactOpts, newOwner)
}

// BaseContentSpaceABI is the input ABI used to generate the binding from.
const BaseContentSpaceABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"submitNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numActiveNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraryFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"getKMSID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addKMSLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"createUserWalletInternal\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setWalletFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setGroupFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setContentFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsIdStr\",\"type\":\"string\"}],\"name\":\"checkKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space_description\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setLibraryFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_pubKey\",\"type\":\"string\"}],\"name\":\"setKMSPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"removeNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"engageAccountLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"checkKMSAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"approveNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"createUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPendingNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodeMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"removeKMSLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentTypeAddress\",\"type\":\"address\"}],\"name\":\"CreateContentType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"libraryAddress\",\"type\":\"address\"}],\"name\":\"CreateLibrary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupAddress\",\"type\":\"address\"}],\"name\":\"CreateGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"}],\"name\":\"CreateContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"CreateAccessWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"BindUserWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"EngageAccountLibrary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"SetFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nodeObjAddr\",\"type\":\"address\"}],\"name\":\"RegisterNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nodeObjAddr\",\"type\":\"address\"}],\"name\":\"UnregisterNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"AddKMSLocator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"RemoveKMSLocator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CreateSpace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"GetAccessWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"AddNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"RemoveNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// BaseContentSpaceFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentSpaceFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"52f82dd8": "activeNodeAddresses(uint256)",
	"5272ae17": "activeNodeLocators(uint256)",
	"0f58a786": "addContentType(address,address)",
	"653a92f6": "addKMSLocator(string,bytes)",
	"64f0f050": "addNode(address,bytes)",
	"32eaf21b": "addressKMS()",
	"dd4c97a0": "approveNode(address)",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"0eaec2c5": "canContribute(address)",
	"81beeb64": "canEdit()",
	"26683e14": "canNodePublish(address)",
	"9b55f901": "canPublish(address)",
	"29d00219": "canReview(address)",
	"8d2a23db": "checkKMS(string)",
	"d6be0f49": "checkKMSAddr(address)",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"904696a8": "contentFactory()",
	"af570c04": "contentSpace()",
	"1cdbee5a": "contentTypeContracts(address)",
	"991a3a7c": "contentTypes(uint256)",
	"c65bcbe2": "contentTypesLength()",
	"331b86c0": "countVersionHashes()",
	"7708bc41": "createAccessWallet()",
	"bf4e088f": "createContent(address,address)",
	"b8cfaf05": "createContentType()",
	"575185ed": "createGroup()",
	"40b89f06": "createLibrary(address)",
	"e7cf0c66": "createUserWallet(address)",
	"78c8e0d2": "createUserWalletInternal(address)",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"7284e416": "description()",
	"c82710c1": "engageAccountLibrary()",
	"c45a0155": "factory()",
	"1f2caaec": "findTypeByHash(bytes32)",
	"a2d67fcf": "getAccessWallet()",
	"589aafc1": "getKMSID(address)",
	"268bfac4": "getKMSInfo(string,bytes)",
	"ac55c906": "getMeta(bytes)",
	"b04b6caa": "groupFactory()",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"6380501f": "indexCategory()",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"441c5aa3": "libraryFactory()",
	"06fdde03": "name()",
	"fbd1b4ce": "nodeMapping(address)",
	"43f59ec7": "numActiveNodes()",
	"f41a1587": "numPendingNodes()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"6be9514c": "pendingNodeAddresses(uint256)",
	"69e30ff8": "pendingNodeLocators(uint256)",
	"2cf99422": "publish(address)",
	"e542b7cb": "putMeta(bytes,bytes)",
	"fd089196": "removeContentType(address)",
	"fe7ac19f": "removeKMSLocator(string,bytes)",
	"b2b99ec9": "removeNode(address)",
	"3dd71d99": "requiresReview()",
	"c9e8e72d": "setAddressKMS(address)",
	"85ce1df1": "setContentFactory(address)",
	"90c3f38f": "setDescription(string)",
	"5bb47808": "setFactory(address)",
	"837b3b93": "setGroupFactory(address)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"a69cb734": "setKMSPublicKey(string,string)",
	"9d05d18d": "setLibraryFactory(address)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"aa024e8b": "setVisibility(uint8)",
	"7ebf879c": "setWalletFactory(address)",
	"160eee74": "submitNode(bytes)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"63e6ffdd": "userWallets(address)",
	"29dedde5": "validType(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
	"c5c03699": "walletFactory()",
	"9cb121ba": "whitelistedType(address)",
}

// BaseContentSpaceBin is the compiled bytecode used for deploying new contracts.
var BaseContentSpaceBin = "0x60806040527f4f776e61626c6532303230303231303131303130304d4c00000000000000000060009081557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006007556008805460ff191690911761ff00191690557f4564697461626c653230323030363236313830343030504f00000000000000006009557f436f6e7461696e657232303230303331363133353330304d4c000000000000006010556013557f55736572537061636532303139303530363135353330304d4c000000000000006015557f4e6f6465537061636532303139303532383137303130304d4c000000000000006017557f42617365436f6e74656e7453706163653230323030363236313230363030504f601c553480156200014a57600080fd5b5060405162006277380380620062778339810160405280516002805432600160a060020a031991821681179092556003805490911690911790550180516200019a90601d9060208401906200020b565b5060048054600160a060020a03191630179055601c5460035460408051928352600160a060020a0391909116602083015280517f599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf549281900390910190a1506008805460ff1916600a179055620002b0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024e57805160ff19168380011785556200027e565b828001600101855582156200027e579182015b828111156200027e57825182559160200191906001019062000261565b506200028c92915062000290565b5090565b620002ad91905b808211156200028c576000815560010162000297565b90565b615fb780620002c06000396000f3006080604052600436106104305763ffffffff60e060020a600035041662821de3811461043257806302d05d3f1461046357806306fdde03146104785780630eaec2c5146105025780630f58a786146105375780630fe1b5a21461055e578063100508a21461058b57806314cfabb3146105b6578063160eee74146105cb5780631bf7a912146106245780631cdbee5a146106a55780631f2caaec146106c657806322e564eb146106de57806324d7806c1461070b57806326683e141461072c578063268bfac41461074d57806329adec141461085757806329d002191461086c57806329dedde51461088d5780632cf99422146108ae57806332eaf21b146108cf578063331b86c0146108e4578063375a6e7c1461090b5780633dd71d991461092057806340b87a261461093557806340b89f061461094a57806341c0e1b51461096b57806343f59ec714610980578063441c5aa314610995578063446e8826146109aa5780635272ae17146109b257806352f82dd8146109ca57806354fd4d50146109e2578063575185ed146109f7578063589aafc114610a0c5780635bb4780814610a2d5780635f4fcae114610a4e5780635f6a130114610a63578063628449fd14610a785780636380501f14610a8d57806363e6ffdd14610aa257806364f0f05014610ac3578063653a92f614610b2a57806367e5c3bf14610bc157806369e30ff814610be25780636be9514c14610bfa5780636d2e4b1b14610c125780636e37542714610c335780637284e41614610c485780637708bc4114610c5d5780637886f74714610c7257806378c8e0d214610c8a5780637ca8f61814610cab5780637ebf879c14610cc357806381beeb6414610ce4578063837b3b9314610cf957806385ce1df114610d1a5780638d2a23db14610d3b5780638da5cb5b14610d94578063904696a814610da957806390c3f38f14610dbe57806395a078e814610e1757806397ac4fd214610e385780639867db7414610e4d578063991a3a7c14610ea65780639b55f901146105025780639cb121ba14610ebe5780639d05d18d14610edf578063a2d67fcf14610f00578063a69cb73414610f15578063aa024e8b14610fac578063ac55c90614610fc7578063af570c0414611020578063b04b6caa14611035578063b2b99ec91461104a578063b8cfaf051461106b578063bf4e088f14611080578063c287e0ed146110a7578063c45a0155146110bc578063c5c03699146110d1578063c65bcbe2146110e6578063c82710c1146110fb578063c9e8e72d14611110578063d6be0f4914611131578063dd4c97a014611152578063e02dd9c214611173578063e1a7071714611188578063e542b7cb146111e1578063e7cf0c6614611278578063ef1d7dc214611299578063f2fde38b146112ae578063f41a1587146112cf578063fbd1b4ce146112e4578063fd08919614611305578063fe7ac19f14611326575b005b34801561043e57600080fd5b506104476113bd565b60408051600160a060020a039092168252519081900360200190f35b34801561046f57600080fd5b506104476113cd565b34801561048457600080fd5b5061048d6113dc565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104c75781810151838201526020016104af565b50505050905090810190601f1680156104f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561050e57600080fd5b50610523600160a060020a036004351661146a565b604080519115158252519081900360200190f35b34801561054357600080fd5b50610430600160a060020a036004358116906024351661149b565b34801561056a57600080fd5b50610430600160a060020a036004351660ff60243581169060443516611610565b34801561059757600080fd5b506105a06116e0565b6040805160ff9092168252519081900360200190f35b3480156105c257600080fd5b506105236116e5565b3480156105d757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104309436949293602493928401919081908401838280828437509497506117749650505050505050565b6040805160206004803580820135838102808601850190965280855261052395369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750611b279650505050505050565b3480156106b157600080fd5b50610447600160a060020a0360043516611c35565b3480156106d257600080fd5b50610447600435611c50565b3480156106ea57600080fd5b50610430600160a060020a036004351660ff60243581169060443516611ed4565b34801561071757600080fd5b50610523600160a060020a03600435166123b1565b34801561073857600080fd5b50610523600160a060020a03600435166123da565b34801561075957600080fd5b506107796024600480358281019290820135918135918201910135612438565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156107ba5781810151838201526020016107a2565b50505050905090810190601f1680156107e75780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561081a578181015183820152602001610802565b50505050905090810190601f1680156108475780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561086357600080fd5b506105a061283b565b34801561087857600080fd5b50610523600160a060020a0360043516612844565b34801561089957600080fd5b50610523600160a060020a036004351661284a565b3480156108ba57600080fd5b50610523600160a060020a0360043516612868565b3480156108db57600080fd5b50610447612988565b3480156108f057600080fd5b506108f9612997565b60408051918252519081900360200190f35b34801561091757600080fd5b5061052361299d565b34801561092c57600080fd5b506105236129a6565b34801561094157600080fd5b506108f96129ab565b34801561095657600080fd5b50610447600160a060020a03600435166129b1565b34801561097757600080fd5b50610430612a8c565b34801561098c57600080fd5b506108f9612ac8565b3480156109a157600080fd5b50610447612ace565b610523612add565b3480156109be57600080fd5b5061048d600435612ce1565b3480156109d657600080fd5b50610447600435612d55565b3480156109ee57600080fd5b506108f9612d7d565b348015610a0357600080fd5b50610447612d83565b348015610a1857600080fd5b5061048d600160a060020a0360043516612e52565b348015610a3957600080fd5b50610430600160a060020a0360043516612e65565b348015610a5a57600080fd5b506108f9612eb5565b348015610a6f57600080fd5b50610430612ebb565b348015610a8457600080fd5b5061048d612ef9565b348015610a9957600080fd5b506105a0612f54565b348015610aae57600080fd5b50610447600160a060020a0360043516612f62565b348015610acf57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610430958335600160a060020a0316953695604494919390910191908190840183828082843750949750612f809650505050505050565b348015610b3657600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261052394369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506131c59650505050505050565b348015610bcd57600080fd5b50610523600160a060020a0360043516613528565b348015610bee57600080fd5b5061048d6004356136c3565b348015610c0657600080fd5b506104476004356136d1565b348015610c1e57600080fd5b50610430600160a060020a03600435166136df565b348015610c3f57600080fd5b5061052361372d565b348015610c5457600080fd5b5061048d61373e565b348015610c6957600080fd5b50610447613799565b348015610c7e57600080fd5b506108f96004356137a9565b348015610c9657600080fd5b50610447600160a060020a03600435166137c8565b348015610cb757600080fd5b5061048d6004356139b7565b348015610ccf57600080fd5b50610430600160a060020a03600435166139c5565b348015610cf057600080fd5b50610523613a15565b348015610d0557600080fd5b50610430600160a060020a0360043516613a20565b348015610d2657600080fd5b50610430600160a060020a0360043516613a70565b348015610d4757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526108f9943694929360249392840191908190840183828082843750949750613ac09650505050505050565b348015610da057600080fd5b50610447613b28565b348015610db557600080fd5b50610447613b37565b348015610dca57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610430943694929360249392840191908190840183828082843750949750613b469650505050505050565b348015610e2357600080fd5b50610523600160a060020a0360043516613b8b565b348015610e4457600080fd5b506105a0613cea565b348015610e5957600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610430943694929360249392840191908190840183828082843750949750613cef9650505050505050565b348015610eb257600080fd5b50610447600435613e1c565b348015610eca57600080fd5b50610523600160a060020a0360043516613e2a565b348015610eeb57600080fd5b50610430600160a060020a0360043516613e81565b348015610f0c57600080fd5b50610447613ed1565b348015610f2157600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261043094369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750613f5d9650505050505050565b348015610fb857600080fd5b5061043060ff60043516614004565b348015610fd357600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261048d94369492936024939284019190819084018382808284375094975061408c9650505050505050565b34801561102c57600080fd5b5061044761423a565b34801561104157600080fd5b50610447614249565b34801561105657600080fd5b50610430600160a060020a0360043516614258565b34801561107757600080fd5b50610447614324565b34801561108c57600080fd5b50610447600160a060020a03600435811690602435166143eb565b3480156110b357600080fd5b506104306144cf565b3480156110c857600080fd5b50610447614591565b3480156110dd57600080fd5b506104476145a0565b3480156110f257600080fd5b506108f96145af565b34801561110757600080fd5b506104476145b5565b34801561111c57600080fd5b50610430600160a060020a03600435166145ef565b34801561113d57600080fd5b506108f9600160a060020a036004351661463f565b34801561115e57600080fd5b50610430600160a060020a03600435166146b5565b34801561117f57600080fd5b5061048d6148f6565b34801561119457600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526108f99436949293602493928401919081908401838280828437509497506149519650505050505050565b3480156111ed57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261043094369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750614ed69650505050505050565b34801561128457600080fd5b50610447600160a060020a03600435166150d2565b3480156112a557600080fd5b506105a06150dd565b3480156112ba57600080fd5b50610430600160a060020a03600435166150e2565b3480156112db57600080fd5b506108f9615147565b3480156112f057600080fd5b50610447600160a060020a036004351661514d565b34801561131157600080fd5b50610523600160a060020a0360043516615168565b34801561133257600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261052394369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061530b9650505050505050565b600454600160a060020a03165b90565b600254600160a060020a031681565b601d805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156114625780601f1061143757610100808354040283529160200191611462565b820191906000526020600020905b81548152906001019060200180831161144557829003601f168201915b505050505081565b600354600090600160a060020a03838116911614806114935750600354600160a060020a031633145b90505b919050565b600354600160a060020a03163214806114be5750600354600160a060020a031633145b15156114c957600080fd5b600160a060020a03808316600090815260146020526040902054161580156114f757506114f582613e2a565b155b156115a357601254601354101561154d5781601260135481548110151561151a57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550611599565b601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444018054600160a060020a031916600160a060020a0384161790555b6013805460010190555b600160a060020a038281166000818152601460209081526040918290208054600160a060020a0319169486169485179055815192835282019290925281517f280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7929181900390910190a15050565b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd9160248082019260209290919082900301818787803b15801561168057600080fd5b505af1158015611694573d6000803e3d6000fd5b505050506040513d60208110156116aa57600080fd5b50519050600160a060020a03811615156116ce576116c9858585611ed4565b6116d9565b6116d9818585611ed4565b5050505050565b600181565b604080517f26683e140000000000000000000000000000000000000000000000000000000081523360048201529051600091309182916326683e1491602480830192602092919082900301818887803b15801561174157600080fd5b505af1158015611755573d6000803e3d6000fd5b505050506040513d602081101561176b57600080fd5b505191505b5090565b6118aa601a8054806020026020016040519081016040528092919081815260200182805480156117cd57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116117af575b5050505050601b805480602002602001604051908101604052809291908181526020016000905b8282101561189f5760008481526020908190208301805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561188b5780601f106118605761010080835404028352916020019161188b565b820191906000526020600020905b81548152906001019060200180831161186e57829003601f168201915b5050505050815260200190600101906117f4565b505050503384615799565b156118b457600080fd5b6119df601880548060200260200160405190810160405280929190818152602001828054801561190d57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116118ef575b50505050506019805480602002602001604051908101604052809291908181526020016000905b8282101561189f5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156119cb5780601f106119a0576101008083540402835291602001916119cb565b820191906000526020600020905b8154815290600101906020018083116119ae57829003601f168201915b505050505081526020019060010190611934565b156119e957600080fd5b601a546064116119f857600080fd5b601b8054600181018083556000929092528251611a3c917f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc101906020850190615d8c565b5050601a805460018101825560009182527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e018054600160a060020a0319163390811790915560408051828152602081810183815286519383019390935285517fae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d958794926060850192908601918190849084905b83811015611ae9578181015183820152602001611ad1565b50505050905090810190601f168015611b165780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b6000611b3233613b8b565b1515611b3d57600080fd5b7f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c730426040516020018083600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310611bd65780518252601f199092019160209182019101611bb7565b51815160001960209485036101000a019081169019919091161790526040805194909201849003842084526000908401819052838201523360608401526103e842026080840152519182900360a001935090915050a150600192915050565b601460205260009081526040902054600160a060020a031681565b600080805b601254821015611ec8576012805483908110611c6d57fe5b6000918252602091829020015460408051808401889052815180820385018152908201918290528051600160a060020a03909316945092909182918401908083835b60208310611cce5780518252601f199092019160209182019101611caf565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681600160a060020a031663e02dd9c26040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611d3d57600080fd5b505af1158015611d51573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611d7a57600080fd5b810190808051640100000000811115611d9257600080fd5b82016020810184811115611da557600080fd5b8151640100000000811182820187101715611dbf57600080fd5b50509291905050506040516020018082805190602001908083835b60208310611df95780518252601f199092019160209182019101611dda565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611e5c5780518252601f199092019160209182019101611e3d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415611ebd576012805483908110611ea157fe5b600091825260209091200154600160a060020a03169250611ecd565b600190910190611c55565b600092505b5050919050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611f1757600080fd5b505af1158015611f2b573d6000803e3d6000fd5b505050506040513d6020811015611f4157600080fd5b5051600854610100900460ff90811691161415611fe657604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b158015611fc957600080fd5b505af1158015611fdd573d6000803e3d6000fd5b505050506123ab565b80600160a060020a03166312915a306040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561202457600080fd5b505af1158015612038573d6000803e3d6000fd5b505050506040513d602081101561204e57600080fd5b5051600854610100900460ff908116911614156120d657604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b158015611fc957600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561211457600080fd5b505af1158015612128573d6000803e3d6000fd5b505050506040513d602081101561213e57600080fd5b5051600854610100900460ff908116911614156121c657604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b158015611fc957600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561220457600080fd5b505af1158015612218573d6000803e3d6000fd5b505050506040513d602081101561222e57600080fd5b5051600854610100900460ff908116911614156122b657604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b158015611fc957600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156122f457600080fd5b505af1158015612308573d6000803e3d6000fd5b505050506040513d602081101561231e57600080fd5b5051600854610100900460ff908116911614156123a657604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b158015611fc957600080fd5b600080fd5b50505050565b600354600090600160a060020a03838116911614156123d257506001611496565b506000919050565b6000805b60185481101561242d5782600160a060020a031660188281548110151561240157fe5b600091825260209091200154600160a060020a031614156124255760019150612432565b6001016123de565b600091505b50919050565b606080606080606080600060258b8b604051808383808284379091019485525050604080519384900360209081018520805480830287018301909352828652935090915060009084015b8282101561252d5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156125195780601f106124ee57610100808354040283529160200191612519565b820191906000526020600020905b8154815290600101906020018083116124fc57829003601f168201915b505050505081526020019060010190612482565b50505050945060268b8b604051808383808284379190910194855250506040805160209481900385018120805460026001821615610100026000190190911604601f810187900487028301870190935282825290949093509091508301828280156125d95780601f106125ae576101008083540402835291602001916125d9565b820191906000526020600020905b8154815290600101906020018083116125bc57829003601f168201915b5050505050935084516000141561260657836020604051908101604052806000815250909650965061282d565b612640858a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437506158e7945050505050565b9250600090505b825181101561282657600183510381141561272b5781838281518110151561266b57fe5b906020019060200201516040516020018083805190602001908083835b602083106126a75780518252601f199092019160209182019101612688565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106126ef5780518252601f1990920191602091820191016126d0565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915061281e565b81838281518110151561273a57fe5b906020019060200201516040516020018083805190602001908083835b602083106127765780518252601f199092019160209182019101612757565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106127be5780518252601f19909201916020918201910161279f565b6001836020036101000a038019825116818451168082178552505050505050905001807f2c000000000000000000000000000000000000000000000000000000000000008152506001019250505060405160208183030381529060405291505b600101612647565b8184965096505b505050505094509492505050565b60085460ff1681565b50600090565b60006013546000141561285f57506001611496565b61149382613e2a565b60008033600160a060020a0384161461288057600080fd5b82905080600160a060020a0316638280dd8f60006040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b1580156128cd57600080fd5b505af11580156128e1573d6000803e3d6000fd5b505050506040513d60208110156128f757600080fd5b5050604080517f27c1c21d0000000000000000000000000000000000000000000000000000000081529051600160a060020a038316916327c1c21d9160048083019260209291908290030181600087803b15801561295457600080fd5b505af1158015612968573d6000803e3d6000fd5b505050506040513d602081101561297e57600080fd5b5051159392505050565b601154600160a060020a031681565b600c5490565b600f5460ff1681565b600090565b600b5481565b602254604080517f40b89f06000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151600093849316916340b89f0691602480830192602092919082900301818787803b158015612a1a57600080fd5b505af1158015612a2e573d6000803e3d6000fd5b505050506040513d6020811015612a4457600080fd5b505160408051600160a060020a038316815290519192507f473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571919081900360200190a192915050565b600354600160a060020a0316321480612aaf5750600354600160a060020a031633145b1515612aba57600080fd5b600354600160a060020a0316ff5b60195490565b602254600160a060020a031681565b6000612ae76116e5565b1515612af257600080fd5b600f5460ff161515612b0357600080fd5b6000600a8054600181600116156101000203166002900490501115612bb257600c80546001818101808455600093909352600a8054612b79937fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70192600261010091831615919091026000190190911604615e06565b5050600b54600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501555b600e8054612bd591600a9160026000196101006001841615020190911604615e06565b5042600b55604080516020810191829052600090819052612bf891600e91615d8c565b50600f805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a0316612c396113bd565b60408051600160a060020a038085168252831660208201526060918101828152600a80546002600019610100600184161502019091160493830184905292608083019084908015612ccb5780601f10612ca057610100808354040283529160200191612ccb565b820191906000526020600020905b815481529060010190602001808311612cae57829003601f168201915b505094505050505060405180910390a150600190565b6019805482908110612cef57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156114625780601f1061143757610100808354040283529160200191611462565b6018805482908110612d6357fe5b600091825260209091200154600160a060020a0316905081565b601c5481565b60208054604080517f575185ed00000000000000000000000000000000000000000000000000000000815290516000938493600160a060020a03169263575185ed926004808301939282900301818787803b158015612de157600080fd5b505af1158015612df5573d6000803e3d6000fd5b505050506040513d6020811015612e0b57600080fd5b505160408051600160a060020a038316815290519192507fa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159919081900360200190a1919050565b6060611493612e5f6159ec565b836159f1565b600354600160a060020a0316321480612e885750600354600160a060020a031633145b1515612e9357600080fd5b601f8054600160a060020a031916600160a060020a0392909216919091179055565b60015481565b612ec361372d565b1515612ece57600080fd5b604080516020810191829052600090819052612eec91600e91615d8c565b50600f805460ff19169055565b600e805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156114625780601f1061143757610100808354040283529160200191611462565b600854610100900460ff1681565b600160a060020a039081166000908152601660205260409020541690565b600354600160a060020a0316321480612fa35750600354600160a060020a031633145b1515612fae57600080fd5b6130e4601880548060200260200160405190810160405280929190818152602001828054801561300757602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612fe9575b50505050506019805480602002602001604051908101604052809291908181526020016000905b828210156130d95760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156130c55780601f1061309a576101008083540402835291602001916130c5565b820191906000526020600020905b8154815290600101906020018083116130a857829003601f168201915b50505050508152602001906001019061302e565b505050508484615799565b156130ee57600080fd5b6018805460018082019092557fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e018054600160a060020a031916600160a060020a038516179055601980549182018082556000919091528251909161317c917f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695909101906020850190615d8c565b505060408051338152600160a060020a038416602082015281517f2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4929181900390910190a15050565b6003546000906060908290600160a060020a03163214806131f05750600354600160a060020a031633145b15156131fb57600080fd5b6025856040518082805190602001908083835b6020831061322d5780518252601f19909201916020918201910161320e565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208054808402870184019092528186529350915060009084015b8282101561331d5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156133095780601f106132de57610100808354040283529160200191613309565b820191906000526020600020905b8154815290600101906020018083116132ec57829003601f168201915b505050505081526020019060010190613272565b505050509150600090505b815181101561345957836040518082805190602001908083835b602083106133615780518252601f199092019160209182019101613342565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091208551909350859250849150811061339d57fe5b906020019060200201516040518082805190602001908083835b602083106133d65780518252601f1990920191602091820191016133b7565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141561345157604080513381526001602082015281517fdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319929181900390910190a160009250613520565b600101613328565b6025856040518082805190602001908083835b6020831061348b5780518252601f19909201916020918201910161346c565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320805460018101808355600092835291859020895192956134de955091019250880190615d8c565b5050604080513381526000602082015281517fdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319929181900390910190a1600192505b505092915050565b6003546000908190600160a060020a03848116911614806135515750600854606460ff90911610155b1561355f5760019150612432565b600854600061010090910460ff1611156136ba5760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a0387811694820194909452905192909116916363e6ffdd916024808201926020929091908290030181600087803b1580156135df57600080fd5b505af11580156135f3573d6000803e3d6000fd5b505050506040513d602081101561360957600080fd5b5051600854604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a916064808201926020929091908290030181600087803b15801561368757600080fd5b505af115801561369b573d6000803e3d6000fd5b505050506040513d60208110156136b157600080fd5b50519150612432565b60009150612432565b601b805482908110612cef57fe5b601a805482908110612d6357fe5b600254600160a060020a031632146136f657600080fd5b600160a060020a038116151561370b57600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a0316321490565b601e805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156114625780601f1061143757610100808354040283529160200191611462565b60006137a4326137c8565b905090565b600d8054829081106137b757fe5b600091825260209091200154905081565b600160a060020a0380821660009081526016602052604081205490918291829116156137f357600080fd5b602160009054906101000a9004600160a060020a0316600160a060020a0316637708bc416040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561384657600080fd5b505af115801561385a573d6000803e3d6000fd5b505050506040513d602081101561387057600080fd5b50519150600160a060020a03841632146139025750604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151839283169163f2fde38b91602480830192600092919082900301818387803b1580156138e957600080fd5b505af11580156138fd573d6000803e3d6000fd5b505050505b60408051600160a060020a038416815290517f56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca9181900360200190a160408051600160a060020a0380851682528616602082015281517f05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2929181900390910190a150600160a060020a0392831660009081526016602052604090208054600160a060020a031916938216939093179092555090565b600c805482908110612cef57fe5b600354600160a060020a03163214806139e85750600354600160a060020a031633145b15156139f357600080fd5b60218054600160a060020a031916600160a060020a0392909216919091179055565b60006137a432613528565b600354600160a060020a0316321480613a435750600354600160a060020a031633145b1515613a4e57600080fd5b60208054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a0316321480613a935750600354600160a060020a031633145b1515613a9e57600080fd5b60238054600160a060020a031916600160a060020a0392909216919091179055565b60006025826040518082805190602001908083835b60208310613af45780518252601f199092019160209182019101613ad5565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054949350505050565b600354600160a060020a031681565b602354600160a060020a031681565b600354600160a060020a0316321480613b695750600354600160a060020a031633145b1515613b7457600080fd5b8051613b8790601e906020840190615d8c565b5050565b6003546000908190600160a060020a0384811691161480613bb45750600854600a60ff90911610155b15613bc25760019150612432565b600854600061010090910460ff1611156136ba5760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a0387811694820194909452905192909116916363e6ffdd916024808201926020929091908290030181600087803b158015613c4257600080fd5b505af1158015613c56573d6000803e3d6000fd5b505050506040513d6020811015613c6c57600080fd5b5051600854604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a916064808201926020929091908290030181600087803b15801561368757600080fd5b600a81565b613cf761372d565b1515613d0257600080fd5b600f5460ff1615613d1257600080fd5b8051608011613d2057600080fd5b8051613d3390600e906020840190615d8c565b50600f805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316613d776113bd565b60408051600160a060020a038085168252831660208201526060918101828152600e80546002600019610100600184161502019091160493830184905292608083019084908015613e095780601f10613dde57610100808354040283529160200191613e09565b820191906000526020600020905b815481529060010190602001808311613dec57829003601f168201915b505094505050505060405180910390a150565b6012805482908110612d6357fe5b600080805b601354811015613e7a5783600160a060020a0316601282815481101515613e5257fe5b600091825260209091200154600160a060020a03161415613e7257600191505b600101613e2f565b5092915050565b600354600160a060020a0316321480613ea45750600354600160a060020a031633145b1515613eaf57600080fd5b60228054600160a060020a031916600160a060020a0392909216919091179055565b326000908152601660205260408120548190600160a060020a03161515613f0157613efa613799565b9050613f1c565b5032600090815260166020526040902054600160a060020a03165b60408051600160a060020a038316815290517f1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e1579181900360200190a1919050565b600354600160a060020a0316321480613f805750600354600160a060020a031633145b1515613f8b57600080fd5b806026836040518082805190602001908083835b60208310613fbe5780518252601f199092019160209182019101613f9f565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381019093208451613fff9591949190910192509050615d8c565b505050565b600354600160a060020a03163214806140275750600354600160a060020a031633145b151561403257600080fd5b6008805460ff191660ff838116919091179182905560408051308152600060208201529290911682820152517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b60606000806020845111151561414657505081518083015160008181526005602090815260409182902080548351601f60026101006001851615026000190190931692909204918201849004840281018401909452808452939493909183018282801561413a5780601f1061410f5761010080835404028352916020019161413a565b820191906000526020600020905b81548152906001019060200180831161411d57829003601f168201915b50505050509250611ecd565b6006846040518082805190602001908083835b602083106141785780518252601f199092019160209182019101614159565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f600260018316159098029095011695909504928301829004820288018201905281875292945092505083018282801561422c5780601f106142015761010080835404028352916020019161422c565b820191906000526020600020905b81548152906001019060200180831161420f57829003601f168201915b505050505092505050919050565b600454600160a060020a031681565b602054600160a060020a031681565b600354600090600160a060020a031632148061427e5750600354600160a060020a031633145b151561428957600080fd5b5060005b601854811015613b875781600160a060020a03166018828154811015156142b057fe5b600091825260209091200154600160a060020a0316141561431c576142d88160186019615a6d565b60408051338152600160a060020a038416602082015281517f41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d929181900390910190a15b60010161428d565b600080601f60009054906101000a9004600160a060020a0316600160a060020a031663b8cfaf056040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561437a57600080fd5b505af115801561438e573d6000803e3d6000fd5b505050506040513d60208110156143a457600080fd5b505160408051600160a060020a038316815290519192507f9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8919081900360200190a1919050565b602354604080517fbf4e088f000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152848116602483015291516000938493169163bf4e088f91604480830192602092919082900301818787803b15801561445c57600080fd5b505af1158015614470573d6000803e3d6000fd5b505050506040513d602081101561448657600080fd5b505160408051600160a060020a038316815290519192507fa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce919081900360200190a19392505050565b6144d7613a15565b15156144e257600080fd5b604080516020808252600a8054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156145815780601f1061455657610100808354040283529160200191614581565b820191906000526020600020905b81548152906001019060200180831161456457829003601f168201915b50509250505060405180910390a1565b601f54600160a060020a031681565b602154600160a060020a031681565b60135481565b6040805132815290516000917f53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca919081900360200190a190565b600354600160a060020a03163214806146125750600354600160a060020a031633145b151561461d57600080fd5b60118054600160a060020a031916600160a060020a0392909216919091179055565b6000606061464c83612e52565b90506025816040518082805190602001908083835b602083106146805780518252601f199092019160209182019101614661565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205495945050505050565b6003546000908190600160a060020a03163214806146dd5750600354600160a060020a031633145b15156146e857600080fd5b5060009050805b601a548110156148ea5782600160a060020a0316601a8281548110151561471257fe5b600091825260209091200154600160a060020a031614156148e2576018601a8281548110151561473e57fe5b6000918252602080832090910154835460018101855593835291209091018054600160a060020a031916600160a060020a03909216919091179055601b8054601991908390811061478b57fe5b600091825260208083208454600181810180885596865292909420920180546147cf9493909301929091600261010091831615919091026000190190911604615e06565b50507fd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54601a8281548110151561480157fe5b600091825260209091200154601b8054600160a060020a03909216918490811061482757fe5b600091825260209182902060408051600160a060020a03861681529384018181529190920180546002600019610100600184161502019091160492840183905292916060830190849080156148bd5780601f10614892576101008083540402835291602001916148bd565b820191906000526020600020905b8154815290600101906020018083116148a057829003601f168201915b5050935050505060405180910390a16148d981601a601b615a6d565b600191506148ea565b6001016146ef565b811515613fff57600080fd5b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156114625780601f1061143757610100808354040283529160200191611462565b600080600080600080600080600061496761372d565b151561497257600080fd5b896040516020018082805190602001908083835b602083106149a55780518252601f199092019160209182019101614986565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310614a085780518252601f1990920191602091820191016149e9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209750600a6040516020018082805460018160011615610100020316600290048015614a975780601f10614a75576101008083540402835291820191614a97565b820191906000526020600020905b815481529060010190602001808311614a83575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310614ada5780518252601f199092019160209182019101614abb565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120995050505087871415614cc757600c541515614b4257604080516020810191829052600090819052614b3791600a91615d8c565b506000600b55614bed565b6000955060009450600093505b600c54841015614ba55784600d85815481101515614b6957fe5b90600052602060002001541115614b9a57839550600d84815481101515614b8c57fe5b906000526020600020015494505b600190930192614b4f565b600c805487908110614bb357fe5b90600052602060002001600a9080546001816001161561010002031660029004614bde929190615e06565b50600b859055614bed86615bc3565b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168b60006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614c82578181015183820152602001614c6a565b50505050905090810190601f168015614caf5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009850614ec9565b6000199250600091505b600c54821015614de657600c805483908110614ce957fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015614d515780601f10614d2f576101008083540402835291820191614d51565b820191906000526020600020905b815481529060010190602001808311614d3d575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310614d945780518252601f199092019160209182019101614d75565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120935050505087811415614ddb57614dd382615bc3565b819250614de6565b600190910190614cd1565b600019831415614df557600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168b856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614e89578181015183820152602001614e71565b50505050905090810190601f168015614eb65780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18298505b5050505050505050919050565b600080614ee2336123b1565b1515614eed57600080fd5b8351602010614f485750508151808301516000818152600560205260408120919291614f1891615e7b565b600083511115614f435760008281526005602090815260409091208451614f4192860190615d8c565b505b615033565b6006846040518082805190602001908083835b60208310614f7a5780518252601f199092019160209182019101614f5b565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220614fb3925090506000615e7b565b60008351111561503357826006856040518082805190602001908083835b60208310614ff05780518252601f199092019160209182019101614fd1565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932084516150319591949190910192509050615d8c565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c846040518080602001828103825283818151815260200191508051906020019080838360005b8381101561509257818101518382015260200161507a565b50505050905090810190601f1680156150bf5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150505050565b6000611493826137c8565b606481565b600354600160a060020a03163214806151055750600354600160a060020a031633145b151561511057600080fd5b600160a060020a038116151561512557600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b601b5490565b602460205260009081526040902054600160a060020a031681565b60035460009081908190600160a060020a03163214806151925750600354600160a060020a031633145b151561519d57600080fd5b50506013546000190160005b601354811015611ec85783600160a060020a03166012828154811015156151cc57fe5b600091825260209091200154600160a060020a031614156153035760128054829081106151f557fe5b60009182526020909120018054600160a060020a031916905580821461529a57601280548390811061522357fe5b60009182526020909120015460128054600160a060020a03909216918390811061524957fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055601280548390811061528057fe5b60009182526020909120018054600160a060020a03191690555b6013829055600160a060020a0384166000818152601460209081526040918290208054600160a060020a0319169055815192835290517fd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e29281900390910190a160019250611ecd565b6001016151a9565b6003546000906060908290600160a060020a03163214806153365750600354600160a060020a031633145b151561534157600080fd5b6025856040518082805190602001908083835b602083106153735780518252601f199092019160209182019101615354565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208054808402870184019092528186529350915060009084015b828210156154635760008481526020908190208301805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561544f5780601f106154245761010080835404028352916020019161544f565b820191906000526020600020905b81548152906001019060200180831161543257829003601f168201915b5050505050815260200190600101906153b8565b505050509150600090505b815181101561575357836040518082805190602001908083835b602083106154a75780518252601f199092019160209182019101615488565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120855190935085925084915081106154e357fe5b906020019060200201516040518082805190602001908083835b6020831061551c5780518252601f1990920191602091820191016154fd565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141561574b5781516000190181146156075781518290600019810190811061557157fe5b906020019060200201516025866040518082805190602001908083835b602083106155ad5780518252601f19909201916020918201910161558e565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805490925084915081106155e857fe5b906000526020600020019080519060200190615605929190615d8c565b505b6025856040518082805190602001908083835b602083106156395780518252601f19909201916020918201910161561a565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600183510381548110151561567d57fe5b9060005260206000200160006156939190615e7b565b60016025866040518082805190602001908083835b602083106156c75780518252601f1990920191602091820191016156a8565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805493909303926157069250905082615ebf565b50604080513381526000602082015281517f5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c929181900390910190a160019250613520565b60010161546e565b604080513381526001602082015281517f5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c929181900390910190a1506000949350505050565b600080845186511415156157ac57600080fd5b5060005b85518110156158d957826040518082805190602001908083835b602083106157e95780518252601f1990920191602091820191016157ca565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091208851909350889250849150811061582557fe5b906020019060200201516040518082805190602001908083835b6020831061585e5780518252601f19909201916020918201910161583f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614806158c3575083600160a060020a031686828151811015156158ae57fe5b90602001906020020151600160a060020a0316145b156158d157600191506158de565b6001016157b0565b600091505b50949350505050565b6060600080825b855182101561592f57615918868381518110151561590857fe5b9060200190602002015186615cc5565b15615924576001909201915b6001909101906158ee565b8260405190808252806020026020018201604052801561596357816020015b606081526020019060019003908161594e5790505b509050821515615975578093506159e3565b60009250600091505b85518210156159df57615998868381518110151561590857fe5b156159d45785828151811015156159ab57fe5b9060200190602002015181848151811015156159c357fe5b602090810290910101526001909201915b60019091019061597e565b8093505b50505092915050565b600b90565b604080517f6d616b654944537472696e6728696e742c6164647265737329000000000000008152815190819003601901812080825260e060020a850260048301819052600883018590526060939192909160ff91908160288160008681f1801515615a5b57600080fd5b50604080820190529695505050505050565b815483108015615a7d5750805483105b1515615a8857600080fd5b8154600019018314615b4f57805481906000198101908110615aa657fe5b906000526020600020018184815481101515615abe57fe5b906000526020600020019080546001816001161561010002031660029004615ae7929190615e06565b50815482906000198101908110615afa57fe5b6000918252602090912001548254600160a060020a0390911690839085908110615b2057fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b805481906000198101908110615b6157fe5b906000526020600020016000615b779190615e7b565b8054615b87826000198301615ebf565b50815482906000198101908110615b9a57fe5b60009182526020909120018054600160a060020a031916905581546123ab836000198301615ee3565b600c805482908110615bd157fe5b906000526020600020016000615be79190615e7b565b600d805482908110615bf557fe5b6000918252602082200155600c54600019018114615c9b57600c80546000198101908110615c1f57fe5b90600052602060002001600c82815481101515615c3857fe5b906000526020600020019080546001816001161561010002031660029004615c61929190615e06565b50600d80546000198101908110615c7457fe5b9060005260206000200154600d82815481101515615c8e57fe5b6000918252602090912001555b600c805490615cae906000198301615f07565b50600d805490613b87906000198301615ee3565b50565b6000806000835191508451821115615cdc57845191505b5060005b81811015615d81578381815181101515615cf657fe5b90602001015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168582815181101515615d3957fe5b60209101015160f860020a90819004027fff000000000000000000000000000000000000000000000000000000000000001614615d795760009250613520565b600101615ce0565b506001949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615dcd57805160ff1916838001178555615dfa565b82800160010185558215615dfa579182015b82811115615dfa578251825591602001919060010190615ddf565b50611770929150615f2b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615e3f5780548555615dfa565b82800160010185558215615dfa57600052602060002091601f016020900482015b82811115615dfa578254825591600101919060010190615e60565b50805460018160011615610100020316600290046000825580601f10615ea15750615cc2565b601f016020900490600052602060002090810190615cc29190615f2b565b815481835581811115613fff57600083815260209020613fff918101908301615f45565b815481835581811115613fff57600083815260209020613fff918101908301615f2b565b815481835581811115613fff57600083815260209020613fff918101908301615f68565b6113ca91905b808211156117705760008155600101615f31565b6113ca91905b80821115611770576000615f5f8282615e7b565b50600101615f4b565b6113ca91905b80821115611770576000615f828282615e7b565b50600101615f6e5600a165627a7a7230582064bb81edd76161aab92d9aaa6709d17b758b8e7c9defc31e49d4e60a223c150a0029"

// DeployBaseContentSpace deploys a new Ethereum contract, binding an instance of BaseContentSpace to it.
func DeployBaseContentSpace(auth *bind.TransactOpts, backend bind.ContractBackend, content_space_name string) (common.Address, *types.Transaction, *BaseContentSpace, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentSpaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseContentSpaceBin), backend, content_space_name)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentSpace{BaseContentSpaceCaller: BaseContentSpaceCaller{contract: contract}, BaseContentSpaceTransactor: BaseContentSpaceTransactor{contract: contract}, BaseContentSpaceFilterer: BaseContentSpaceFilterer{contract: contract}}, nil
}

// BaseContentSpace is an auto generated Go binding around an Ethereum contract.
type BaseContentSpace struct {
	BaseContentSpaceCaller     // Read-only binding to the contract
	BaseContentSpaceTransactor // Write-only binding to the contract
	BaseContentSpaceFilterer   // Log filterer for contract events
}

// BaseContentSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseContentSpaceSession struct {
	Contract     *BaseContentSpace // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseContentSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseContentSpaceCallerSession struct {
	Contract *BaseContentSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// BaseContentSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseContentSpaceTransactorSession struct {
	Contract     *BaseContentSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// BaseContentSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseContentSpaceRaw struct {
	Contract *BaseContentSpace // Generic contract binding to access the raw methods on
}

// BaseContentSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseContentSpaceCallerRaw struct {
	Contract *BaseContentSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// BaseContentSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseContentSpaceTransactorRaw struct {
	Contract *BaseContentSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseContentSpace creates a new instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpace(address common.Address, backend bind.ContractBackend) (*BaseContentSpace, error) {
	contract, err := bindBaseContentSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpace{BaseContentSpaceCaller: BaseContentSpaceCaller{contract: contract}, BaseContentSpaceTransactor: BaseContentSpaceTransactor{contract: contract}, BaseContentSpaceFilterer: BaseContentSpaceFilterer{contract: contract}}, nil
}

// NewBaseContentSpaceCaller creates a new read-only instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceCaller(address common.Address, caller bind.ContractCaller) (*BaseContentSpaceCaller, error) {
	contract, err := bindBaseContentSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCaller{contract: contract}, nil
}

// NewBaseContentSpaceTransactor creates a new write-only instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentSpaceTransactor, error) {
	contract, err := bindBaseContentSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceTransactor{contract: contract}, nil
}

// NewBaseContentSpaceFilterer creates a new log filterer instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentSpaceFilterer, error) {
	contract, err := bindBaseContentSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceFilterer{contract: contract}, nil
}

// bindBaseContentSpace binds a generic wrapper to an already deployed contract.
func bindBaseContentSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentSpace *BaseContentSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentSpace.Contract.BaseContentSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentSpace *BaseContentSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.BaseContentSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentSpace *BaseContentSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.BaseContentSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentSpace *BaseContentSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentSpace *BaseContentSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentSpace *BaseContentSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceSession) CANACCESS() (uint8, error) {
	return _BaseContentSpace.Contract.CANACCESS(&_BaseContentSpace.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CANACCESS() (uint8, error) {
	return _BaseContentSpace.Contract.CANACCESS(&_BaseContentSpace.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceSession) CANEDIT() (uint8, error) {
	return _BaseContentSpace.Contract.CANEDIT(&_BaseContentSpace.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CANEDIT() (uint8, error) {
	return _BaseContentSpace.Contract.CANEDIT(&_BaseContentSpace.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceSession) CANSEE() (uint8, error) {
	return _BaseContentSpace.Contract.CANSEE(&_BaseContentSpace.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CANSEE() (uint8, error) {
	return _BaseContentSpace.Contract.CANSEE(&_BaseContentSpace.CallOpts)
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ActiveNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "activeNodeAddresses", arg0)
	return *ret0, err
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ActiveNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.ActiveNodeAddresses(&_BaseContentSpace.CallOpts, arg0)
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ActiveNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.ActiveNodeAddresses(&_BaseContentSpace.CallOpts, arg0)
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) ActiveNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "activeNodeLocators", arg0)
	return *ret0, err
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceSession) ActiveNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _BaseContentSpace.Contract.ActiveNodeLocators(&_BaseContentSpace.CallOpts, arg0)
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ActiveNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _BaseContentSpace.Contract.ActiveNodeLocators(&_BaseContentSpace.CallOpts, arg0)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) AddressKMS() (common.Address, error) {
	return _BaseContentSpace.Contract.AddressKMS(&_BaseContentSpace.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) AddressKMS() (common.Address, error) {
	return _BaseContentSpace.Contract.AddressKMS(&_BaseContentSpace.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanCommit() (bool, error) {
	return _BaseContentSpace.Contract.CanCommit(&_BaseContentSpace.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanCommit() (bool, error) {
	return _BaseContentSpace.Contract.CanCommit(&_BaseContentSpace.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanConfirm() (bool, error) {
	return _BaseContentSpace.Contract.CanConfirm(&_BaseContentSpace.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanConfirm() (bool, error) {
	return _BaseContentSpace.Contract.CanConfirm(&_BaseContentSpace.CallOpts)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canContribute", _candidate)
	return *ret0, err
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanContribute(&_BaseContentSpace.CallOpts, _candidate)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanContribute(&_BaseContentSpace.CallOpts, _candidate)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanEdit() (bool, error) {
	return _BaseContentSpace.Contract.CanEdit(&_BaseContentSpace.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanEdit() (bool, error) {
	return _BaseContentSpace.Contract.CanEdit(&_BaseContentSpace.CallOpts)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canNodePublish", candidate)
	return *ret0, err
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanNodePublish(&_BaseContentSpace.CallOpts, candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanNodePublish(&_BaseContentSpace.CallOpts, candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canPublish", _candidate)
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanPublish(&_BaseContentSpace.CallOpts, _candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanPublish(&_BaseContentSpace.CallOpts, _candidate)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "canReview", arg0)
	return *ret0, err
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CanReview(arg0 common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanReview(&_BaseContentSpace.CallOpts, arg0)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CanReview(arg0 common.Address) (bool, error) {
	return _BaseContentSpace.Contract.CanReview(&_BaseContentSpace.CallOpts, arg0)
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CheckKMS(opts *bind.CallOpts, _kmsIdStr string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "checkKMS", _kmsIdStr)
	return *ret0, err
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) CheckKMS(_kmsIdStr string) (*big.Int, error) {
	return _BaseContentSpace.Contract.CheckKMS(&_BaseContentSpace.CallOpts, _kmsIdStr)
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CheckKMS(_kmsIdStr string) (*big.Int, error) {
	return _BaseContentSpace.Contract.CheckKMS(&_BaseContentSpace.CallOpts, _kmsIdStr)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CheckKMSAddr(opts *bind.CallOpts, _kmsAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "checkKMSAddr", _kmsAddr)
	return *ret0, err
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _BaseContentSpace.Contract.CheckKMSAddr(&_BaseContentSpace.CallOpts, _kmsAddr)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _BaseContentSpace.Contract.CheckKMSAddr(&_BaseContentSpace.CallOpts, _kmsAddr)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) CommitPending() (bool, error) {
	return _BaseContentSpace.Contract.CommitPending(&_BaseContentSpace.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CommitPending() (bool, error) {
	return _BaseContentSpace.Contract.CommitPending(&_BaseContentSpace.CallOpts)
}

// ContentFactory is a free data retrieval call binding the contract method 0x904696a8.
//
// Solidity: function contentFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentFactory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentFactory")
	return *ret0, err
}

// ContentFactory is a free data retrieval call binding the contract method 0x904696a8.
//
// Solidity: function contentFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ContentFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.ContentFactory(&_BaseContentSpace.CallOpts)
}

// ContentFactory is a free data retrieval call binding the contract method 0x904696a8.
//
// Solidity: function contentFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.ContentFactory(&_BaseContentSpace.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ContentSpace() (common.Address, error) {
	return _BaseContentSpace.Contract.ContentSpace(&_BaseContentSpace.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentSpace() (common.Address, error) {
	return _BaseContentSpace.Contract.ContentSpace(&_BaseContentSpace.CallOpts)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentTypeContracts", arg0)
	return *ret0, err
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.ContentTypeContracts(&_BaseContentSpace.CallOpts, arg0)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.ContentTypeContracts(&_BaseContentSpace.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentTypes", arg0)
	return *ret0, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.ContentTypes(&_BaseContentSpace.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.ContentTypes(&_BaseContentSpace.CallOpts, arg0)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "contentTypesLength")
	return *ret0, err
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) ContentTypesLength() (*big.Int, error) {
	return _BaseContentSpace.Contract.ContentTypesLength(&_BaseContentSpace.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ContentTypesLength() (*big.Int, error) {
	return _BaseContentSpace.Contract.ContentTypesLength(&_BaseContentSpace.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContentSpace.Contract.CountVersionHashes(&_BaseContentSpace.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContentSpace.Contract.CountVersionHashes(&_BaseContentSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) Creator() (common.Address, error) {
	return _BaseContentSpace.Contract.Creator(&_BaseContentSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Creator() (common.Address, error) {
	return _BaseContentSpace.Contract.Creator(&_BaseContentSpace.CallOpts)
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) Description(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "description")
	return *ret0, err
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) Description() (string, error) {
	return _BaseContentSpace.Contract.Description(&_BaseContentSpace.CallOpts)
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Description() (string, error) {
	return _BaseContentSpace.Contract.Description(&_BaseContentSpace.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "factory")
	return *ret0, err
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) Factory() (common.Address, error) {
	return _BaseContentSpace.Contract.Factory(&_BaseContentSpace.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Factory() (common.Address, error) {
	return _BaseContentSpace.Contract.Factory(&_BaseContentSpace.CallOpts)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "findTypeByHash", typeHash)
	return *ret0, err
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseContentSpace.Contract.FindTypeByHash(&_BaseContentSpace.CallOpts, typeHash)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseContentSpace.Contract.FindTypeByHash(&_BaseContentSpace.CallOpts, typeHash)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) GetKMSID(opts *bind.CallOpts, _kmsAddr common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "getKMSID", _kmsAddr)
	return *ret0, err
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _BaseContentSpace.Contract.GetKMSID(&_BaseContentSpace.CallOpts, _kmsAddr)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _BaseContentSpace.Contract.GetKMSID(&_BaseContentSpace.CallOpts, _kmsAddr)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_BaseContentSpace *BaseContentSpaceCaller) GetKMSInfo(opts *bind.CallOpts, _kmsID string, prefix []byte) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _BaseContentSpace.contract.Call(opts, out, "getKMSInfo", _kmsID, prefix)
	return *ret0, *ret1, err
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_BaseContentSpace *BaseContentSpaceSession) GetKMSInfo(_kmsID string, prefix []byte) (string, string, error) {
	return _BaseContentSpace.Contract.GetKMSInfo(&_BaseContentSpace.CallOpts, _kmsID, prefix)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) GetKMSInfo(_kmsID string, prefix []byte) (string, string, error) {
	return _BaseContentSpace.Contract.GetKMSInfo(&_BaseContentSpace.CallOpts, _kmsID, prefix)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseContentSpace.Contract.GetMeta(&_BaseContentSpace.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseContentSpace.Contract.GetMeta(&_BaseContentSpace.CallOpts, key)
}

// GroupFactory is a free data retrieval call binding the contract method 0xb04b6caa.
//
// Solidity: function groupFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) GroupFactory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "groupFactory")
	return *ret0, err
}

// GroupFactory is a free data retrieval call binding the contract method 0xb04b6caa.
//
// Solidity: function groupFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) GroupFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.GroupFactory(&_BaseContentSpace.CallOpts)
}

// GroupFactory is a free data retrieval call binding the contract method 0xb04b6caa.
//
// Solidity: function groupFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) GroupFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.GroupFactory(&_BaseContentSpace.CallOpts)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.HasAccess(&_BaseContentSpace.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.HasAccess(&_BaseContentSpace.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.HasEditorRight(&_BaseContentSpace.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.HasEditorRight(&_BaseContentSpace.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceSession) IndexCategory() (uint8, error) {
	return _BaseContentSpace.Contract.IndexCategory(&_BaseContentSpace.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCallerSession) IndexCategory() (uint8, error) {
	return _BaseContentSpace.Contract.IndexCategory(&_BaseContentSpace.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.IsAdmin(&_BaseContentSpace.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseContentSpace.Contract.IsAdmin(&_BaseContentSpace.CallOpts, _candidate)
}

// LibraryFactory is a free data retrieval call binding the contract method 0x441c5aa3.
//
// Solidity: function libraryFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) LibraryFactory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "libraryFactory")
	return *ret0, err
}

// LibraryFactory is a free data retrieval call binding the contract method 0x441c5aa3.
//
// Solidity: function libraryFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) LibraryFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.LibraryFactory(&_BaseContentSpace.CallOpts)
}

// LibraryFactory is a free data retrieval call binding the contract method 0x441c5aa3.
//
// Solidity: function libraryFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) LibraryFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.LibraryFactory(&_BaseContentSpace.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) Name() (string, error) {
	return _BaseContentSpace.Contract.Name(&_BaseContentSpace.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Name() (string, error) {
	return _BaseContentSpace.Contract.Name(&_BaseContentSpace.CallOpts)
}

// NodeMapping is a free data retrieval call binding the contract method 0xfbd1b4ce.
//
// Solidity: function nodeMapping(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) NodeMapping(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "nodeMapping", arg0)
	return *ret0, err
}

// NodeMapping is a free data retrieval call binding the contract method 0xfbd1b4ce.
//
// Solidity: function nodeMapping(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) NodeMapping(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.NodeMapping(&_BaseContentSpace.CallOpts, arg0)
}

// NodeMapping is a free data retrieval call binding the contract method 0xfbd1b4ce.
//
// Solidity: function nodeMapping(address ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) NodeMapping(arg0 common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.NodeMapping(&_BaseContentSpace.CallOpts, arg0)
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) NumActiveNodes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "numActiveNodes")
	return *ret0, err
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) NumActiveNodes() (*big.Int, error) {
	return _BaseContentSpace.Contract.NumActiveNodes(&_BaseContentSpace.CallOpts)
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) NumActiveNodes() (*big.Int, error) {
	return _BaseContentSpace.Contract.NumActiveNodes(&_BaseContentSpace.CallOpts)
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) NumPendingNodes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "numPendingNodes")
	return *ret0, err
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) NumPendingNodes() (*big.Int, error) {
	return _BaseContentSpace.Contract.NumPendingNodes(&_BaseContentSpace.CallOpts)
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) NumPendingNodes() (*big.Int, error) {
	return _BaseContentSpace.Contract.NumPendingNodes(&_BaseContentSpace.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) ObjectHash() (string, error) {
	return _BaseContentSpace.Contract.ObjectHash(&_BaseContentSpace.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ObjectHash() (string, error) {
	return _BaseContentSpace.Contract.ObjectHash(&_BaseContentSpace.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseContentSpace.Contract.ObjectTimestamp(&_BaseContentSpace.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseContentSpace.Contract.ObjectTimestamp(&_BaseContentSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) Owner() (common.Address, error) {
	return _BaseContentSpace.Contract.Owner(&_BaseContentSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Owner() (common.Address, error) {
	return _BaseContentSpace.Contract.Owner(&_BaseContentSpace.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) ParentAddress() (common.Address, error) {
	return _BaseContentSpace.Contract.ParentAddress(&_BaseContentSpace.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ParentAddress() (common.Address, error) {
	return _BaseContentSpace.Contract.ParentAddress(&_BaseContentSpace.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) PendingHash() (string, error) {
	return _BaseContentSpace.Contract.PendingHash(&_BaseContentSpace.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) PendingHash() (string, error) {
	return _BaseContentSpace.Contract.PendingHash(&_BaseContentSpace.CallOpts)
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "pendingNodeAddresses", arg0)
	return *ret0, err
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) PendingNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.PendingNodeAddresses(&_BaseContentSpace.CallOpts, arg0)
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) PendingNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _BaseContentSpace.Contract.PendingNodeAddresses(&_BaseContentSpace.CallOpts, arg0)
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "pendingNodeLocators", arg0)
	return *ret0, err
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceSession) PendingNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _BaseContentSpace.Contract.PendingNodeLocators(&_BaseContentSpace.CallOpts, arg0)
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCallerSession) PendingNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _BaseContentSpace.Contract.PendingNodeLocators(&_BaseContentSpace.CallOpts, arg0)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "requiresReview")
	return *ret0, err
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) RequiresReview() (bool, error) {
	return _BaseContentSpace.Contract.RequiresReview(&_BaseContentSpace.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) RequiresReview() (bool, error) {
	return _BaseContentSpace.Contract.RequiresReview(&_BaseContentSpace.CallOpts)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) UserWallets(opts *bind.CallOpts, _userAddr common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "userWallets", _userAddr)
	return *ret0, err
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) UserWallets(_userAddr common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.UserWallets(&_BaseContentSpace.CallOpts, _userAddr)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) UserWallets(_userAddr common.Address) (common.Address, error) {
	return _BaseContentSpace.Contract.UserWallets(&_BaseContentSpace.CallOpts, _userAddr)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "validType", content_type)
	return *ret0, err
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseContentSpace.Contract.ValidType(&_BaseContentSpace.CallOpts, content_type)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseContentSpace.Contract.ValidType(&_BaseContentSpace.CallOpts, content_type)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceSession) Version() ([32]byte, error) {
	return _BaseContentSpace.Contract.Version(&_BaseContentSpace.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Version() ([32]byte, error) {
	return _BaseContentSpace.Contract.Version(&_BaseContentSpace.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceSession) VersionAPI() ([32]byte, error) {
	return _BaseContentSpace.Contract.VersionAPI(&_BaseContentSpace.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseContentSpace.Contract.VersionAPI(&_BaseContentSpace.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContentSpace.Contract.VersionHashes(&_BaseContentSpace.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentSpace *BaseContentSpaceCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContentSpace.Contract.VersionHashes(&_BaseContentSpace.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContentSpace.Contract.VersionTimestamp(&_BaseContentSpace.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContentSpace.Contract.VersionTimestamp(&_BaseContentSpace.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceSession) Visibility() (uint8, error) {
	return _BaseContentSpace.Contract.Visibility(&_BaseContentSpace.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCallerSession) Visibility() (uint8, error) {
	return _BaseContentSpace.Contract.Visibility(&_BaseContentSpace.CallOpts)
}

// WalletFactory is a free data retrieval call binding the contract method 0xc5c03699.
//
// Solidity: function walletFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) WalletFactory(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "walletFactory")
	return *ret0, err
}

// WalletFactory is a free data retrieval call binding the contract method 0xc5c03699.
//
// Solidity: function walletFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) WalletFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.WalletFactory(&_BaseContentSpace.CallOpts)
}

// WalletFactory is a free data retrieval call binding the contract method 0xc5c03699.
//
// Solidity: function walletFactory() constant returns(address)
func (_BaseContentSpace *BaseContentSpaceCallerSession) WalletFactory() (common.Address, error) {
	return _BaseContentSpace.Contract.WalletFactory(&_BaseContentSpace.CallOpts)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentSpace.contract.Call(opts, out, "whitelistedType", content_type)
	return *ret0, err
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseContentSpace.Contract.WhitelistedType(&_BaseContentSpace.CallOpts, content_type)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseContentSpace *BaseContentSpaceCallerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseContentSpace.Contract.WhitelistedType(&_BaseContentSpace.CallOpts, content_type)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) AccessRequestV3(opts *bind.TransactOpts, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "accessRequestV3", customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AccessRequestV3(&_BaseContentSpace.TransactOpts, customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AccessRequestV3(&_BaseContentSpace.TransactOpts, customValues, stakeholders)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseContentSpace *BaseContentSpaceSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddContentType(&_BaseContentSpace.TransactOpts, content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddContentType(&_BaseContentSpace.TransactOpts, content_type, content_contract)
}

// AddKMSLocator is a paid mutator transaction binding the contract method 0x653a92f6.
//
// Solidity: function addKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) AddKMSLocator(opts *bind.TransactOpts, _kmsID string, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "addKMSLocator", _kmsID, _locator)
}

// AddKMSLocator is a paid mutator transaction binding the contract method 0x653a92f6.
//
// Solidity: function addKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) AddKMSLocator(_kmsID string, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddKMSLocator(&_BaseContentSpace.TransactOpts, _kmsID, _locator)
}

// AddKMSLocator is a paid mutator transaction binding the contract method 0x653a92f6.
//
// Solidity: function addKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) AddKMSLocator(_kmsID string, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddKMSLocator(&_BaseContentSpace.TransactOpts, _kmsID, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) AddNode(opts *bind.TransactOpts, _nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "addNode", _nodeAddr, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceSession) AddNode(_nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddNode(&_BaseContentSpace.TransactOpts, _nodeAddr, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) AddNode(_nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.AddNode(&_BaseContentSpace.TransactOpts, _nodeAddr, _locator)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) ApproveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "approveNode", _nodeAddr)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceSession) ApproveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ApproveNode(&_BaseContentSpace.TransactOpts, _nodeAddr)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) ApproveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ApproveNode(&_BaseContentSpace.TransactOpts, _nodeAddr)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentSpace *BaseContentSpaceSession) ClearPending() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ClearPending(&_BaseContentSpace.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ClearPending(&_BaseContentSpace.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentSpace *BaseContentSpaceSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Commit(&_BaseContentSpace.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Commit(&_BaseContentSpace.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ConfirmCommit(&_BaseContentSpace.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.ConfirmCommit(&_BaseContentSpace.TransactOpts)
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createAccessWallet")
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateAccessWallet() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateAccessWallet(&_BaseContentSpace.TransactOpts)
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateAccessWallet() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateAccessWallet(&_BaseContentSpace.TransactOpts)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createContent", lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateContent(&_BaseContentSpace.TransactOpts, lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateContent(&_BaseContentSpace.TransactOpts, lib, content_type)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createContentType")
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateContentType() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateContentType(&_BaseContentSpace.TransactOpts)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateContentType() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateContentType(&_BaseContentSpace.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createGroup")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateGroup() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateGroup(&_BaseContentSpace.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateGroup() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateGroup(&_BaseContentSpace.TransactOpts)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateLibrary(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createLibrary", address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateLibrary(&_BaseContentSpace.TransactOpts, address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateLibrary(&_BaseContentSpace.TransactOpts, address_KMS)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateUserWallet(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createUserWallet", _user)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateUserWallet(_user common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateUserWallet(&_BaseContentSpace.TransactOpts, _user)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateUserWallet(_user common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateUserWallet(&_BaseContentSpace.TransactOpts, _user)
}

// CreateUserWalletInternal is a paid mutator transaction binding the contract method 0x78c8e0d2.
//
// Solidity: function createUserWalletInternal(address _user) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateUserWalletInternal(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createUserWalletInternal", _user)
}

// CreateUserWalletInternal is a paid mutator transaction binding the contract method 0x78c8e0d2.
//
// Solidity: function createUserWalletInternal(address _user) returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) CreateUserWalletInternal(_user common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateUserWalletInternal(&_BaseContentSpace.TransactOpts, _user)
}

// CreateUserWalletInternal is a paid mutator transaction binding the contract method 0x78c8e0d2.
//
// Solidity: function createUserWalletInternal(address _user) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) CreateUserWalletInternal(_user common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.CreateUserWalletInternal(&_BaseContentSpace.TransactOpts, _user)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentSpace *BaseContentSpaceTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentSpace *BaseContentSpaceSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.DeleteVersion(&_BaseContentSpace.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.DeleteVersion(&_BaseContentSpace.TransactOpts, _versionHash)
}

// EngageAccountLibrary is a paid mutator transaction binding the contract method 0xc82710c1.
//
// Solidity: function engageAccountLibrary() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) EngageAccountLibrary(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "engageAccountLibrary")
}

// EngageAccountLibrary is a paid mutator transaction binding the contract method 0xc82710c1.
//
// Solidity: function engageAccountLibrary() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) EngageAccountLibrary() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.EngageAccountLibrary(&_BaseContentSpace.TransactOpts)
}

// EngageAccountLibrary is a paid mutator transaction binding the contract method 0xc82710c1.
//
// Solidity: function engageAccountLibrary() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) EngageAccountLibrary() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.EngageAccountLibrary(&_BaseContentSpace.TransactOpts)
}

// GetAccessWallet is a paid mutator transaction binding the contract method 0xa2d67fcf.
//
// Solidity: function getAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) GetAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "getAccessWallet")
}

// GetAccessWallet is a paid mutator transaction binding the contract method 0xa2d67fcf.
//
// Solidity: function getAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceSession) GetAccessWallet() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.GetAccessWallet(&_BaseContentSpace.TransactOpts)
}

// GetAccessWallet is a paid mutator transaction binding the contract method 0xa2d67fcf.
//
// Solidity: function getAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) GetAccessWallet() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.GetAccessWallet(&_BaseContentSpace.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentSpace *BaseContentSpaceSession) Kill() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Kill(&_BaseContentSpace.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Kill(&_BaseContentSpace.TransactOpts)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "publish", contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Publish(&_BaseContentSpace.TransactOpts, contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.Publish(&_BaseContentSpace.TransactOpts, contentObj)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContentSpace *BaseContentSpaceSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.PutMeta(&_BaseContentSpace.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.PutMeta(&_BaseContentSpace.TransactOpts, key, value)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveContentType(&_BaseContentSpace.TransactOpts, content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveContentType(&_BaseContentSpace.TransactOpts, content_type)
}

// RemoveKMSLocator is a paid mutator transaction binding the contract method 0xfe7ac19f.
//
// Solidity: function removeKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) RemoveKMSLocator(opts *bind.TransactOpts, _kmsID string, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "removeKMSLocator", _kmsID, _locator)
}

// RemoveKMSLocator is a paid mutator transaction binding the contract method 0xfe7ac19f.
//
// Solidity: function removeKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_BaseContentSpace *BaseContentSpaceSession) RemoveKMSLocator(_kmsID string, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveKMSLocator(&_BaseContentSpace.TransactOpts, _kmsID, _locator)
}

// RemoveKMSLocator is a paid mutator transaction binding the contract method 0xfe7ac19f.
//
// Solidity: function removeKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactorSession) RemoveKMSLocator(_kmsID string, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveKMSLocator(&_BaseContentSpace.TransactOpts, _kmsID, _locator)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) RemoveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "removeNode", _nodeAddr)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceSession) RemoveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveNode(&_BaseContentSpace.TransactOpts, _nodeAddr)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) RemoveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.RemoveNode(&_BaseContentSpace.TransactOpts, _nodeAddr)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetAddressKMS(&_BaseContentSpace.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetAddressKMS(&_BaseContentSpace.TransactOpts, address_KMS)
}

// SetContentFactory is a paid mutator transaction binding the contract method 0x85ce1df1.
//
// Solidity: function setContentFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetContentFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setContentFactory", new_factory)
}

// SetContentFactory is a paid mutator transaction binding the contract method 0x85ce1df1.
//
// Solidity: function setContentFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetContentFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetContentFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetContentFactory is a paid mutator transaction binding the contract method 0x85ce1df1.
//
// Solidity: function setContentFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetContentFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetContentFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string content_space_description) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetDescription(opts *bind.TransactOpts, content_space_description string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setDescription", content_space_description)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string content_space_description) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetDescription(content_space_description string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetDescription(&_BaseContentSpace.TransactOpts, content_space_description)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string content_space_description) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetDescription(content_space_description string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetDescription(&_BaseContentSpace.TransactOpts, content_space_description)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setFactory", new_factory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetGroupFactory is a paid mutator transaction binding the contract method 0x837b3b93.
//
// Solidity: function setGroupFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetGroupFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setGroupFactory", new_factory)
}

// SetGroupFactory is a paid mutator transaction binding the contract method 0x837b3b93.
//
// Solidity: function setGroupFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetGroupFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetGroupFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetGroupFactory is a paid mutator transaction binding the contract method 0x837b3b93.
//
// Solidity: function setGroupFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetGroupFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetGroupFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetGroupRights(&_BaseContentSpace.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetGroupRights(&_BaseContentSpace.TransactOpts, group, access_type, access)
}

// SetKMSPublicKey is a paid mutator transaction binding the contract method 0xa69cb734.
//
// Solidity: function setKMSPublicKey(string _kmsID, string _pubKey) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetKMSPublicKey(opts *bind.TransactOpts, _kmsID string, _pubKey string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setKMSPublicKey", _kmsID, _pubKey)
}

// SetKMSPublicKey is a paid mutator transaction binding the contract method 0xa69cb734.
//
// Solidity: function setKMSPublicKey(string _kmsID, string _pubKey) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetKMSPublicKey(_kmsID string, _pubKey string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetKMSPublicKey(&_BaseContentSpace.TransactOpts, _kmsID, _pubKey)
}

// SetKMSPublicKey is a paid mutator transaction binding the contract method 0xa69cb734.
//
// Solidity: function setKMSPublicKey(string _kmsID, string _pubKey) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetKMSPublicKey(_kmsID string, _pubKey string) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetKMSPublicKey(&_BaseContentSpace.TransactOpts, _kmsID, _pubKey)
}

// SetLibraryFactory is a paid mutator transaction binding the contract method 0x9d05d18d.
//
// Solidity: function setLibraryFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetLibraryFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setLibraryFactory", new_factory)
}

// SetLibraryFactory is a paid mutator transaction binding the contract method 0x9d05d18d.
//
// Solidity: function setLibraryFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetLibraryFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetLibraryFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetLibraryFactory is a paid mutator transaction binding the contract method 0x9d05d18d.
//
// Solidity: function setLibraryFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetLibraryFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetLibraryFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetRights(&_BaseContentSpace.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetRights(&_BaseContentSpace.TransactOpts, stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetVisibility(&_BaseContentSpace.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetVisibility(&_BaseContentSpace.TransactOpts, _visibility_code)
}

// SetWalletFactory is a paid mutator transaction binding the contract method 0x7ebf879c.
//
// Solidity: function setWalletFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetWalletFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setWalletFactory", new_factory)
}

// SetWalletFactory is a paid mutator transaction binding the contract method 0x7ebf879c.
//
// Solidity: function setWalletFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SetWalletFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetWalletFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SetWalletFactory is a paid mutator transaction binding the contract method 0x7ebf879c.
//
// Solidity: function setWalletFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SetWalletFactory(new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SetWalletFactory(&_BaseContentSpace.TransactOpts, new_factory)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SubmitNode(opts *bind.TransactOpts, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "submitNode", _locator)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceSession) SubmitNode(_locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SubmitNode(&_BaseContentSpace.TransactOpts, _locator)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) SubmitNode(_locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.SubmitNode(&_BaseContentSpace.TransactOpts, _locator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentSpace *BaseContentSpaceSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.TransferCreatorship(&_BaseContentSpace.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.TransferCreatorship(&_BaseContentSpace.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentSpace *BaseContentSpaceSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.TransferOwnership(&_BaseContentSpace.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.Contract.TransferOwnership(&_BaseContentSpace.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentSpace *BaseContentSpaceSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.UpdateRequest(&_BaseContentSpace.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentSpace *BaseContentSpaceTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContentSpace.Contract.UpdateRequest(&_BaseContentSpace.TransactOpts)
}

// BaseContentSpaceAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseContentSpace contract.
type BaseContentSpaceAccessRequestV3Iterator struct {
	Event *BaseContentSpaceAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceAccessRequestV3 represents a AccessRequestV3 event raised by the BaseContentSpace contract.
type BaseContentSpaceAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseContentSpaceAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceAccessRequestV3Iterator{contract: _BaseContentSpace.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceAccessRequestV3)
				if err := _BaseContentSpace.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseAccessRequestV3(log types.Log) (*BaseContentSpaceAccessRequestV3, error) {
	event := new(BaseContentSpaceAccessRequestV3)
	if err := _BaseContentSpace.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceAddKMSLocatorIterator is returned from FilterAddKMSLocator and is used to iterate over the raw logs and unpacked data for AddKMSLocator events raised by the BaseContentSpace contract.
type BaseContentSpaceAddKMSLocatorIterator struct {
	Event *BaseContentSpaceAddKMSLocator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceAddKMSLocatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceAddKMSLocator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceAddKMSLocator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceAddKMSLocatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceAddKMSLocatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceAddKMSLocator represents a AddKMSLocator event raised by the BaseContentSpace contract.
type BaseContentSpaceAddKMSLocator struct {
	Sender common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterAddKMSLocator is a free log retrieval operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterAddKMSLocator(opts *bind.FilterOpts) (*BaseContentSpaceAddKMSLocatorIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "AddKMSLocator")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceAddKMSLocatorIterator{contract: _BaseContentSpace.contract, event: "AddKMSLocator", logs: logs, sub: sub}, nil
}

// WatchAddKMSLocator is a free log subscription operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchAddKMSLocator(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceAddKMSLocator) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "AddKMSLocator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceAddKMSLocator)
				if err := _BaseContentSpace.contract.UnpackLog(event, "AddKMSLocator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddKMSLocator is a log parse operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseAddKMSLocator(log types.Log) (*BaseContentSpaceAddKMSLocator, error) {
	event := new(BaseContentSpaceAddKMSLocator)
	if err := _BaseContentSpace.contract.UnpackLog(event, "AddKMSLocator", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceAddNodeIterator is returned from FilterAddNode and is used to iterate over the raw logs and unpacked data for AddNode events raised by the BaseContentSpace contract.
type BaseContentSpaceAddNodeIterator struct {
	Event *BaseContentSpaceAddNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceAddNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceAddNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceAddNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceAddNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceAddNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceAddNode represents a AddNode event raised by the BaseContentSpace contract.
type BaseContentSpaceAddNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddNode is a free log retrieval operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterAddNode(opts *bind.FilterOpts) (*BaseContentSpaceAddNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceAddNodeIterator{contract: _BaseContentSpace.contract, event: "AddNode", logs: logs, sub: sub}, nil
}

// WatchAddNode is a free log subscription operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchAddNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceAddNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceAddNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddNode is a log parse operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseAddNode(log types.Log) (*BaseContentSpaceAddNode, error) {
	event := new(BaseContentSpaceAddNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceBindUserWalletIterator is returned from FilterBindUserWallet and is used to iterate over the raw logs and unpacked data for BindUserWallet events raised by the BaseContentSpace contract.
type BaseContentSpaceBindUserWalletIterator struct {
	Event *BaseContentSpaceBindUserWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceBindUserWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceBindUserWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceBindUserWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceBindUserWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceBindUserWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceBindUserWallet represents a BindUserWallet event raised by the BaseContentSpace contract.
type BaseContentSpaceBindUserWallet struct {
	Wallet   common.Address
	UserAddr common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBindUserWallet is a free log retrieval operation binding the contract event 0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2.
//
// Solidity: event BindUserWallet(address wallet, address userAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterBindUserWallet(opts *bind.FilterOpts) (*BaseContentSpaceBindUserWalletIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "BindUserWallet")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceBindUserWalletIterator{contract: _BaseContentSpace.contract, event: "BindUserWallet", logs: logs, sub: sub}, nil
}

// WatchBindUserWallet is a free log subscription operation binding the contract event 0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2.
//
// Solidity: event BindUserWallet(address wallet, address userAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchBindUserWallet(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceBindUserWallet) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "BindUserWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceBindUserWallet)
				if err := _BaseContentSpace.contract.UnpackLog(event, "BindUserWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBindUserWallet is a log parse operation binding the contract event 0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2.
//
// Solidity: event BindUserWallet(address wallet, address userAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseBindUserWallet(log types.Log) (*BaseContentSpaceBindUserWallet, error) {
	event := new(BaseContentSpaceBindUserWallet)
	if err := _BaseContentSpace.contract.UnpackLog(event, "BindUserWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContentSpace contract.
type BaseContentSpaceCommitPendingIterator struct {
	Event *BaseContentSpaceCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCommitPending represents a CommitPending event raised by the BaseContentSpace contract.
type BaseContentSpaceCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentSpaceCommitPendingIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCommitPendingIterator{contract: _BaseContentSpace.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCommitPending)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCommitPending(log types.Log) (*BaseContentSpaceCommitPending, error) {
	event := new(BaseContentSpaceCommitPending)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeAddedIterator struct {
	Event *BaseContentSpaceContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceContentTypeAdded represents a ContentTypeAdded event raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseContentSpaceContentTypeAddedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceContentTypeAddedIterator{contract: _BaseContentSpace.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceContentTypeAdded)
				if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseContentTypeAdded(log types.Log) (*BaseContentSpaceContentTypeAdded, error) {
	event := new(BaseContentSpaceContentTypeAdded)
	if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeRemovedIterator struct {
	Event *BaseContentSpaceContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseContentSpaceContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceContentTypeRemovedIterator{contract: _BaseContentSpace.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceContentTypeRemoved)
				if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseContentTypeRemoved(log types.Log) (*BaseContentSpaceContentTypeRemoved, error) {
	event := new(BaseContentSpaceContentTypeRemoved)
	if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateAccessWalletIterator is returned from FilterCreateAccessWallet and is used to iterate over the raw logs and unpacked data for CreateAccessWallet events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateAccessWalletIterator struct {
	Event *BaseContentSpaceCreateAccessWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateAccessWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateAccessWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateAccessWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateAccessWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateAccessWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateAccessWallet represents a CreateAccessWallet event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateAccessWallet struct {
	Wallet common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCreateAccessWallet is a free log retrieval operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateAccessWallet(opts *bind.FilterOpts) (*BaseContentSpaceCreateAccessWalletIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateAccessWallet")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateAccessWalletIterator{contract: _BaseContentSpace.contract, event: "CreateAccessWallet", logs: logs, sub: sub}, nil
}

// WatchCreateAccessWallet is a free log subscription operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateAccessWallet(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateAccessWallet) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateAccessWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateAccessWallet)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateAccessWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateAccessWallet is a log parse operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateAccessWallet(log types.Log) (*BaseContentSpaceCreateAccessWallet, error) {
	event := new(BaseContentSpaceCreateAccessWallet)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateAccessWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateContentIterator is returned from FilterCreateContent and is used to iterate over the raw logs and unpacked data for CreateContent events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentIterator struct {
	Event *BaseContentSpaceCreateContent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateContentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateContent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateContent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateContentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateContentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateContent represents a CreateContent event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContent struct {
	ContentAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCreateContent is a free log retrieval operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateContent(opts *bind.FilterOpts) (*BaseContentSpaceCreateContentIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateContent")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateContentIterator{contract: _BaseContentSpace.contract, event: "CreateContent", logs: logs, sub: sub}, nil
}

// WatchCreateContent is a free log subscription operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateContent(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateContent) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateContent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateContent)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateContent is a log parse operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateContent(log types.Log) (*BaseContentSpaceCreateContent, error) {
	event := new(BaseContentSpaceCreateContent)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateContentTypeIterator is returned from FilterCreateContentType and is used to iterate over the raw logs and unpacked data for CreateContentType events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentTypeIterator struct {
	Event *BaseContentSpaceCreateContentType // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateContentTypeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateContentType)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateContentType)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateContentTypeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateContentTypeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateContentType represents a CreateContentType event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentType struct {
	ContentTypeAddress common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterCreateContentType is a free log retrieval operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateContentType(opts *bind.FilterOpts) (*BaseContentSpaceCreateContentTypeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateContentType")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateContentTypeIterator{contract: _BaseContentSpace.contract, event: "CreateContentType", logs: logs, sub: sub}, nil
}

// WatchCreateContentType is a free log subscription operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateContentType(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateContentType) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateContentType")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateContentType)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContentType", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateContentType is a log parse operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateContentType(log types.Log) (*BaseContentSpaceCreateContentType, error) {
	event := new(BaseContentSpaceCreateContentType)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContentType", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateGroupIterator is returned from FilterCreateGroup and is used to iterate over the raw logs and unpacked data for CreateGroup events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateGroupIterator struct {
	Event *BaseContentSpaceCreateGroup // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateGroupIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateGroup)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateGroup)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateGroupIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateGroupIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateGroup represents a CreateGroup event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateGroup struct {
	GroupAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCreateGroup is a free log retrieval operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateGroup(opts *bind.FilterOpts) (*BaseContentSpaceCreateGroupIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateGroup")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateGroupIterator{contract: _BaseContentSpace.contract, event: "CreateGroup", logs: logs, sub: sub}, nil
}

// WatchCreateGroup is a free log subscription operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateGroup(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateGroup) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateGroup")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateGroup)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateGroup", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateGroup is a log parse operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateGroup(log types.Log) (*BaseContentSpaceCreateGroup, error) {
	event := new(BaseContentSpaceCreateGroup)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateGroup", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateLibraryIterator is returned from FilterCreateLibrary and is used to iterate over the raw logs and unpacked data for CreateLibrary events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateLibraryIterator struct {
	Event *BaseContentSpaceCreateLibrary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateLibraryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateLibrary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateLibrary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateLibraryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateLibraryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateLibrary represents a CreateLibrary event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateLibrary struct {
	LibraryAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCreateLibrary is a free log retrieval operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateLibrary(opts *bind.FilterOpts) (*BaseContentSpaceCreateLibraryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateLibrary")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateLibraryIterator{contract: _BaseContentSpace.contract, event: "CreateLibrary", logs: logs, sub: sub}, nil
}

// WatchCreateLibrary is a free log subscription operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateLibrary(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateLibrary) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateLibrary")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateLibrary)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateLibrary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateLibrary is a log parse operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateLibrary(log types.Log) (*BaseContentSpaceCreateLibrary, error) {
	event := new(BaseContentSpaceCreateLibrary)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateLibrary", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceCreateSpaceIterator is returned from FilterCreateSpace and is used to iterate over the raw logs and unpacked data for CreateSpace events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateSpaceIterator struct {
	Event *BaseContentSpaceCreateSpace // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateSpaceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateSpace)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateSpace)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateSpaceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateSpaceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateSpace represents a CreateSpace event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateSpace struct {
	Version [32]byte
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterCreateSpace is a free log retrieval operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateSpace(opts *bind.FilterOpts) (*BaseContentSpaceCreateSpaceIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateSpace")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateSpaceIterator{contract: _BaseContentSpace.contract, event: "CreateSpace", logs: logs, sub: sub}, nil
}

// WatchCreateSpace is a free log subscription operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateSpace(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateSpace) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateSpace")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateSpace)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateSpace", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateSpace is a log parse operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateSpace(log types.Log) (*BaseContentSpaceCreateSpace, error) {
	event := new(BaseContentSpaceCreateSpace)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateSpace", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceEngageAccountLibraryIterator is returned from FilterEngageAccountLibrary and is used to iterate over the raw logs and unpacked data for EngageAccountLibrary events raised by the BaseContentSpace contract.
type BaseContentSpaceEngageAccountLibraryIterator struct {
	Event *BaseContentSpaceEngageAccountLibrary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceEngageAccountLibrary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceEngageAccountLibrary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceEngageAccountLibrary represents a EngageAccountLibrary event raised by the BaseContentSpace contract.
type BaseContentSpaceEngageAccountLibrary struct {
	AccountAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterEngageAccountLibrary is a free log retrieval operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterEngageAccountLibrary(opts *bind.FilterOpts) (*BaseContentSpaceEngageAccountLibraryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "EngageAccountLibrary")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceEngageAccountLibraryIterator{contract: _BaseContentSpace.contract, event: "EngageAccountLibrary", logs: logs, sub: sub}, nil
}

// WatchEngageAccountLibrary is a free log subscription operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchEngageAccountLibrary(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceEngageAccountLibrary) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "EngageAccountLibrary")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceEngageAccountLibrary)
				if err := _BaseContentSpace.contract.UnpackLog(event, "EngageAccountLibrary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEngageAccountLibrary is a log parse operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseEngageAccountLibrary(log types.Log) (*BaseContentSpaceEngageAccountLibrary, error) {
	event := new(BaseContentSpaceEngageAccountLibrary)
	if err := _BaseContentSpace.contract.UnpackLog(event, "EngageAccountLibrary", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceGetAccessWalletIterator is returned from FilterGetAccessWallet and is used to iterate over the raw logs and unpacked data for GetAccessWallet events raised by the BaseContentSpace contract.
type BaseContentSpaceGetAccessWalletIterator struct {
	Event *BaseContentSpaceGetAccessWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceGetAccessWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceGetAccessWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceGetAccessWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceGetAccessWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceGetAccessWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceGetAccessWallet represents a GetAccessWallet event raised by the BaseContentSpace contract.
type BaseContentSpaceGetAccessWallet struct {
	WalletAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterGetAccessWallet is a free log retrieval operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterGetAccessWallet(opts *bind.FilterOpts) (*BaseContentSpaceGetAccessWalletIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceGetAccessWalletIterator{contract: _BaseContentSpace.contract, event: "GetAccessWallet", logs: logs, sub: sub}, nil
}

// WatchGetAccessWallet is a free log subscription operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchGetAccessWallet(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceGetAccessWallet) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceGetAccessWallet)
				if err := _BaseContentSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGetAccessWallet is a log parse operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseGetAccessWallet(log types.Log) (*BaseContentSpaceGetAccessWallet, error) {
	event := new(BaseContentSpaceGetAccessWallet)
	if err := _BaseContentSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceNodeApprovedIterator is returned from FilterNodeApproved and is used to iterate over the raw logs and unpacked data for NodeApproved events raised by the BaseContentSpace contract.
type BaseContentSpaceNodeApprovedIterator struct {
	Event *BaseContentSpaceNodeApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceNodeApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceNodeApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceNodeApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceNodeApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceNodeApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceNodeApproved represents a NodeApproved event raised by the BaseContentSpace contract.
type BaseContentSpaceNodeApproved struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeApproved is a free log retrieval operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterNodeApproved(opts *bind.FilterOpts) (*BaseContentSpaceNodeApprovedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceNodeApprovedIterator{contract: _BaseContentSpace.contract, event: "NodeApproved", logs: logs, sub: sub}, nil
}

// WatchNodeApproved is a free log subscription operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchNodeApproved(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceNodeApproved) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceNodeApproved)
				if err := _BaseContentSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeApproved is a log parse operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseNodeApproved(log types.Log) (*BaseContentSpaceNodeApproved, error) {
	event := new(BaseContentSpaceNodeApproved)
	if err := _BaseContentSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceNodeSubmittedIterator is returned from FilterNodeSubmitted and is used to iterate over the raw logs and unpacked data for NodeSubmitted events raised by the BaseContentSpace contract.
type BaseContentSpaceNodeSubmittedIterator struct {
	Event *BaseContentSpaceNodeSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceNodeSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceNodeSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceNodeSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceNodeSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceNodeSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceNodeSubmitted represents a NodeSubmitted event raised by the BaseContentSpace contract.
type BaseContentSpaceNodeSubmitted struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeSubmitted is a free log retrieval operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterNodeSubmitted(opts *bind.FilterOpts) (*BaseContentSpaceNodeSubmittedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceNodeSubmittedIterator{contract: _BaseContentSpace.contract, event: "NodeSubmitted", logs: logs, sub: sub}, nil
}

// WatchNodeSubmitted is a free log subscription operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchNodeSubmitted(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceNodeSubmitted) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceNodeSubmitted)
				if err := _BaseContentSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeSubmitted is a log parse operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseNodeSubmitted(log types.Log) (*BaseContentSpaceNodeSubmitted, error) {
	event := new(BaseContentSpaceNodeSubmitted)
	if err := _BaseContentSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseContentSpace contract.
type BaseContentSpaceObjectMetaChangedIterator struct {
	Event *BaseContentSpaceObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseContentSpace contract.
type BaseContentSpaceObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseContentSpaceObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceObjectMetaChangedIterator{contract: _BaseContentSpace.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceObjectMetaChanged)
				if err := _BaseContentSpace.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseObjectMetaChanged(log types.Log) (*BaseContentSpaceObjectMetaChanged, error) {
	event := new(BaseContentSpaceObjectMetaChanged)
	if err := _BaseContentSpace.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceRegisterNodeIterator is returned from FilterRegisterNode and is used to iterate over the raw logs and unpacked data for RegisterNode events raised by the BaseContentSpace contract.
type BaseContentSpaceRegisterNodeIterator struct {
	Event *BaseContentSpaceRegisterNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceRegisterNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceRegisterNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceRegisterNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceRegisterNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceRegisterNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceRegisterNode represents a RegisterNode event raised by the BaseContentSpace contract.
type BaseContentSpaceRegisterNode struct {
	NodeObjAddr common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegisterNode is a free log retrieval operation binding the contract event 0x4575facd117046c9c28b69a3eb9c08939f2462a5a22ea6c6dcd4f79b8dd124e9.
//
// Solidity: event RegisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterRegisterNode(opts *bind.FilterOpts) (*BaseContentSpaceRegisterNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "RegisterNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceRegisterNodeIterator{contract: _BaseContentSpace.contract, event: "RegisterNode", logs: logs, sub: sub}, nil
}

// WatchRegisterNode is a free log subscription operation binding the contract event 0x4575facd117046c9c28b69a3eb9c08939f2462a5a22ea6c6dcd4f79b8dd124e9.
//
// Solidity: event RegisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchRegisterNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceRegisterNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "RegisterNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceRegisterNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "RegisterNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisterNode is a log parse operation binding the contract event 0x4575facd117046c9c28b69a3eb9c08939f2462a5a22ea6c6dcd4f79b8dd124e9.
//
// Solidity: event RegisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseRegisterNode(log types.Log) (*BaseContentSpaceRegisterNode, error) {
	event := new(BaseContentSpaceRegisterNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "RegisterNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceRemoveKMSLocatorIterator is returned from FilterRemoveKMSLocator and is used to iterate over the raw logs and unpacked data for RemoveKMSLocator events raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveKMSLocatorIterator struct {
	Event *BaseContentSpaceRemoveKMSLocator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceRemoveKMSLocatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceRemoveKMSLocator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceRemoveKMSLocator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceRemoveKMSLocatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceRemoveKMSLocatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceRemoveKMSLocator represents a RemoveKMSLocator event raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveKMSLocator struct {
	Sender common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRemoveKMSLocator is a free log retrieval operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterRemoveKMSLocator(opts *bind.FilterOpts) (*BaseContentSpaceRemoveKMSLocatorIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "RemoveKMSLocator")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceRemoveKMSLocatorIterator{contract: _BaseContentSpace.contract, event: "RemoveKMSLocator", logs: logs, sub: sub}, nil
}

// WatchRemoveKMSLocator is a free log subscription operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchRemoveKMSLocator(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceRemoveKMSLocator) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "RemoveKMSLocator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceRemoveKMSLocator)
				if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveKMSLocator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveKMSLocator is a log parse operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseRemoveKMSLocator(log types.Log) (*BaseContentSpaceRemoveKMSLocator, error) {
	event := new(BaseContentSpaceRemoveKMSLocator)
	if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveKMSLocator", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceRemoveNodeIterator is returned from FilterRemoveNode and is used to iterate over the raw logs and unpacked data for RemoveNode events raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveNodeIterator struct {
	Event *BaseContentSpaceRemoveNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceRemoveNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceRemoveNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceRemoveNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceRemoveNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceRemoveNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceRemoveNode represents a RemoveNode event raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoveNode is a free log retrieval operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterRemoveNode(opts *bind.FilterOpts) (*BaseContentSpaceRemoveNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceRemoveNodeIterator{contract: _BaseContentSpace.contract, event: "RemoveNode", logs: logs, sub: sub}, nil
}

// WatchRemoveNode is a free log subscription operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchRemoveNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceRemoveNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceRemoveNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveNode is a log parse operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseRemoveNode(log types.Log) (*BaseContentSpaceRemoveNode, error) {
	event := new(BaseContentSpaceRemoveNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceSetFactoryIterator is returned from FilterSetFactory and is used to iterate over the raw logs and unpacked data for SetFactory events raised by the BaseContentSpace contract.
type BaseContentSpaceSetFactoryIterator struct {
	Event *BaseContentSpaceSetFactory // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceSetFactoryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceSetFactory)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceSetFactory)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceSetFactoryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceSetFactoryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceSetFactory represents a SetFactory event raised by the BaseContentSpace contract.
type BaseContentSpaceSetFactory struct {
	Factory common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSetFactory is a free log retrieval operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterSetFactory(opts *bind.FilterOpts) (*BaseContentSpaceSetFactoryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "SetFactory")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceSetFactoryIterator{contract: _BaseContentSpace.contract, event: "SetFactory", logs: logs, sub: sub}, nil
}

// WatchSetFactory is a free log subscription operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchSetFactory(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceSetFactory) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "SetFactory")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceSetFactory)
				if err := _BaseContentSpace.contract.UnpackLog(event, "SetFactory", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFactory is a log parse operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseSetFactory(log types.Log) (*BaseContentSpaceSetFactory, error) {
	event := new(BaseContentSpaceSetFactory)
	if err := _BaseContentSpace.contract.UnpackLog(event, "SetFactory", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceUnregisterNodeIterator is returned from FilterUnregisterNode and is used to iterate over the raw logs and unpacked data for UnregisterNode events raised by the BaseContentSpace contract.
type BaseContentSpaceUnregisterNodeIterator struct {
	Event *BaseContentSpaceUnregisterNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceUnregisterNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceUnregisterNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceUnregisterNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceUnregisterNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceUnregisterNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceUnregisterNode represents a UnregisterNode event raised by the BaseContentSpace contract.
type BaseContentSpaceUnregisterNode struct {
	NodeObjAddr common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUnregisterNode is a free log retrieval operation binding the contract event 0xb98695ab4c6cedb3b4dfe62479a9d39a59aa2cb38b8bd92bbb6ce5856e42bdf4.
//
// Solidity: event UnregisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterUnregisterNode(opts *bind.FilterOpts) (*BaseContentSpaceUnregisterNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "UnregisterNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceUnregisterNodeIterator{contract: _BaseContentSpace.contract, event: "UnregisterNode", logs: logs, sub: sub}, nil
}

// WatchUnregisterNode is a free log subscription operation binding the contract event 0xb98695ab4c6cedb3b4dfe62479a9d39a59aa2cb38b8bd92bbb6ce5856e42bdf4.
//
// Solidity: event UnregisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchUnregisterNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceUnregisterNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "UnregisterNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceUnregisterNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "UnregisterNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnregisterNode is a log parse operation binding the contract event 0xb98695ab4c6cedb3b4dfe62479a9d39a59aa2cb38b8bd92bbb6ce5856e42bdf4.
//
// Solidity: event UnregisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseUnregisterNode(log types.Log) (*BaseContentSpaceUnregisterNode, error) {
	event := new(BaseContentSpaceUnregisterNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "UnregisterNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContentSpace contract.
type BaseContentSpaceUpdateRequestIterator struct {
	Event *BaseContentSpaceUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceUpdateRequest represents a UpdateRequest event raised by the BaseContentSpace contract.
type BaseContentSpaceUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentSpaceUpdateRequestIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceUpdateRequestIterator{contract: _BaseContentSpace.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceUpdateRequest)
				if err := _BaseContentSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseUpdateRequest(log types.Log) (*BaseContentSpaceUpdateRequest, error) {
	event := new(BaseContentSpaceUpdateRequest)
	if err := _BaseContentSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContentSpace contract.
type BaseContentSpaceVersionConfirmIterator struct {
	Event *BaseContentSpaceVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceVersionConfirm represents a VersionConfirm event raised by the BaseContentSpace contract.
type BaseContentSpaceVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentSpaceVersionConfirmIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceVersionConfirmIterator{contract: _BaseContentSpace.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceVersionConfirm)
				if err := _BaseContentSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseVersionConfirm(log types.Log) (*BaseContentSpaceVersionConfirm, error) {
	event := new(BaseContentSpaceVersionConfirm)
	if err := _BaseContentSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContentSpace contract.
type BaseContentSpaceVersionDeleteIterator struct {
	Event *BaseContentSpaceVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceVersionDelete represents a VersionDelete event raised by the BaseContentSpace contract.
type BaseContentSpaceVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentSpaceVersionDeleteIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceVersionDeleteIterator{contract: _BaseContentSpace.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceVersionDelete)
				if err := _BaseContentSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseVersionDelete(log types.Log) (*BaseContentSpaceVersionDelete, error) {
	event := new(BaseContentSpaceVersionDelete)
	if err := _BaseContentSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentSpaceVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseContentSpace contract.
type BaseContentSpaceVisibilityChangedIterator struct {
	Event *BaseContentSpaceVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceVisibilityChanged represents a VisibilityChanged event raised by the BaseContentSpace contract.
type BaseContentSpaceVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseContentSpaceVisibilityChangedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceVisibilityChangedIterator{contract: _BaseContentSpace.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceVisibilityChanged)
				if err := _BaseContentSpace.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseVisibilityChanged(log types.Log) (*BaseContentSpaceVisibilityChanged, error) {
	event := new(BaseContentSpaceVisibilityChanged)
	if err := _BaseContentSpace.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeABI is the input ABI used to generate the binding from.
const BaseContentTypeABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"}]"

// BaseContentTypeFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentTypeFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"81beeb64": "canEdit()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"6380501f": "indexCategory()",
	"41c0e1b5": "kill()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"aa024e8b": "setVisibility(uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
}

// BaseContentTypeBin is the compiled bytecode used for deploying new contracts.
var BaseContentTypeBin = ""

// DeployBaseContentType deploys a new Ethereum contract, binding an instance of BaseContentType to it.
func DeployBaseContentType(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address) (common.Address, *types.Transaction, *BaseContentType, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentTypeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseContentTypeBin), backend, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentType{BaseContentTypeCaller: BaseContentTypeCaller{contract: contract}, BaseContentTypeTransactor: BaseContentTypeTransactor{contract: contract}, BaseContentTypeFilterer: BaseContentTypeFilterer{contract: contract}}, nil
}

// BaseContentType is an auto generated Go binding around an Ethereum contract.
type BaseContentType struct {
	BaseContentTypeCaller     // Read-only binding to the contract
	BaseContentTypeTransactor // Write-only binding to the contract
	BaseContentTypeFilterer   // Log filterer for contract events
}

// BaseContentTypeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentTypeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTypeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentTypeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTypeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentTypeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTypeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseContentTypeSession struct {
	Contract     *BaseContentType  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseContentTypeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseContentTypeCallerSession struct {
	Contract *BaseContentTypeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// BaseContentTypeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseContentTypeTransactorSession struct {
	Contract     *BaseContentTypeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// BaseContentTypeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseContentTypeRaw struct {
	Contract *BaseContentType // Generic contract binding to access the raw methods on
}

// BaseContentTypeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseContentTypeCallerRaw struct {
	Contract *BaseContentTypeCaller // Generic read-only contract binding to access the raw methods on
}

// BaseContentTypeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseContentTypeTransactorRaw struct {
	Contract *BaseContentTypeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseContentType creates a new instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentType(address common.Address, backend bind.ContractBackend) (*BaseContentType, error) {
	contract, err := bindBaseContentType(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentType{BaseContentTypeCaller: BaseContentTypeCaller{contract: contract}, BaseContentTypeTransactor: BaseContentTypeTransactor{contract: contract}, BaseContentTypeFilterer: BaseContentTypeFilterer{contract: contract}}, nil
}

// NewBaseContentTypeCaller creates a new read-only instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeCaller(address common.Address, caller bind.ContractCaller) (*BaseContentTypeCaller, error) {
	contract, err := bindBaseContentType(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeCaller{contract: contract}, nil
}

// NewBaseContentTypeTransactor creates a new write-only instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentTypeTransactor, error) {
	contract, err := bindBaseContentType(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeTransactor{contract: contract}, nil
}

// NewBaseContentTypeFilterer creates a new log filterer instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentTypeFilterer, error) {
	contract, err := bindBaseContentType(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeFilterer{contract: contract}, nil
}

// bindBaseContentType binds a generic wrapper to an already deployed contract.
func bindBaseContentType(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseContentTypeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentType *BaseContentTypeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentType.Contract.BaseContentTypeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentType *BaseContentTypeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.Contract.BaseContentTypeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentType *BaseContentTypeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentType.Contract.BaseContentTypeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseContentType *BaseContentTypeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseContentType.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseContentType *BaseContentTypeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseContentType *BaseContentTypeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseContentType.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContentType *BaseContentTypeSession) CANACCESS() (uint8, error) {
	return _BaseContentType.Contract.CANACCESS(&_BaseContentType.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCallerSession) CANACCESS() (uint8, error) {
	return _BaseContentType.Contract.CANACCESS(&_BaseContentType.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContentType *BaseContentTypeSession) CANEDIT() (uint8, error) {
	return _BaseContentType.Contract.CANEDIT(&_BaseContentType.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCallerSession) CANEDIT() (uint8, error) {
	return _BaseContentType.Contract.CANEDIT(&_BaseContentType.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContentType *BaseContentTypeSession) CANSEE() (uint8, error) {
	return _BaseContentType.Contract.CANSEE(&_BaseContentType.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCallerSession) CANSEE() (uint8, error) {
	return _BaseContentType.Contract.CANSEE(&_BaseContentType.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) CanCommit() (bool, error) {
	return _BaseContentType.Contract.CanCommit(&_BaseContentType.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) CanCommit() (bool, error) {
	return _BaseContentType.Contract.CanCommit(&_BaseContentType.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) CanConfirm() (bool, error) {
	return _BaseContentType.Contract.CanConfirm(&_BaseContentType.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) CanConfirm() (bool, error) {
	return _BaseContentType.Contract.CanConfirm(&_BaseContentType.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) CanEdit() (bool, error) {
	return _BaseContentType.Contract.CanEdit(&_BaseContentType.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) CanEdit() (bool, error) {
	return _BaseContentType.Contract.CanEdit(&_BaseContentType.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) CommitPending() (bool, error) {
	return _BaseContentType.Contract.CommitPending(&_BaseContentType.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) CommitPending() (bool, error) {
	return _BaseContentType.Contract.CommitPending(&_BaseContentType.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentType *BaseContentTypeCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentType *BaseContentTypeSession) ContentSpace() (common.Address, error) {
	return _BaseContentType.Contract.ContentSpace(&_BaseContentType.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseContentType *BaseContentTypeCallerSession) ContentSpace() (common.Address, error) {
	return _BaseContentType.Contract.ContentSpace(&_BaseContentType.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentType *BaseContentTypeCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentType *BaseContentTypeSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContentType.Contract.CountVersionHashes(&_BaseContentType.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseContentType *BaseContentTypeCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseContentType.Contract.CountVersionHashes(&_BaseContentType.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentType *BaseContentTypeCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentType *BaseContentTypeSession) Creator() (common.Address, error) {
	return _BaseContentType.Contract.Creator(&_BaseContentType.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseContentType *BaseContentTypeCallerSession) Creator() (common.Address, error) {
	return _BaseContentType.Contract.Creator(&_BaseContentType.CallOpts)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseContentType.Contract.HasAccess(&_BaseContentType.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseContentType.Contract.HasAccess(&_BaseContentType.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContentType *BaseContentTypeCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContentType *BaseContentTypeSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseContentType.Contract.HasEditorRight(&_BaseContentType.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseContentType *BaseContentTypeCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseContentType.Contract.HasEditorRight(&_BaseContentType.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContentType *BaseContentTypeSession) IndexCategory() (uint8, error) {
	return _BaseContentType.Contract.IndexCategory(&_BaseContentType.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCallerSession) IndexCategory() (uint8, error) {
	return _BaseContentType.Contract.IndexCategory(&_BaseContentType.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentType *BaseContentTypeCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentType *BaseContentTypeSession) ObjectHash() (string, error) {
	return _BaseContentType.Contract.ObjectHash(&_BaseContentType.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseContentType *BaseContentTypeCallerSession) ObjectHash() (string, error) {
	return _BaseContentType.Contract.ObjectHash(&_BaseContentType.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContentType *BaseContentTypeCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContentType *BaseContentTypeSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseContentType.Contract.ObjectTimestamp(&_BaseContentType.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseContentType *BaseContentTypeCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseContentType.Contract.ObjectTimestamp(&_BaseContentType.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentType *BaseContentTypeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentType *BaseContentTypeSession) Owner() (common.Address, error) {
	return _BaseContentType.Contract.Owner(&_BaseContentType.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseContentType *BaseContentTypeCallerSession) Owner() (common.Address, error) {
	return _BaseContentType.Contract.Owner(&_BaseContentType.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentType *BaseContentTypeCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentType *BaseContentTypeSession) ParentAddress() (common.Address, error) {
	return _BaseContentType.Contract.ParentAddress(&_BaseContentType.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseContentType *BaseContentTypeCallerSession) ParentAddress() (common.Address, error) {
	return _BaseContentType.Contract.ParentAddress(&_BaseContentType.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentType *BaseContentTypeCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentType *BaseContentTypeSession) PendingHash() (string, error) {
	return _BaseContentType.Contract.PendingHash(&_BaseContentType.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseContentType *BaseContentTypeCallerSession) PendingHash() (string, error) {
	return _BaseContentType.Contract.PendingHash(&_BaseContentType.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeSession) Version() ([32]byte, error) {
	return _BaseContentType.Contract.Version(&_BaseContentType.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeCallerSession) Version() ([32]byte, error) {
	return _BaseContentType.Contract.Version(&_BaseContentType.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeSession) VersionAPI() ([32]byte, error) {
	return _BaseContentType.Contract.VersionAPI(&_BaseContentType.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseContentType *BaseContentTypeCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseContentType.Contract.VersionAPI(&_BaseContentType.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentType *BaseContentTypeCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentType *BaseContentTypeSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContentType.Contract.VersionHashes(&_BaseContentType.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseContentType *BaseContentTypeCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseContentType.Contract.VersionHashes(&_BaseContentType.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentType *BaseContentTypeCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentType *BaseContentTypeSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContentType.Contract.VersionTimestamp(&_BaseContentType.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseContentType *BaseContentTypeCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseContentType.Contract.VersionTimestamp(&_BaseContentType.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseContentType.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContentType *BaseContentTypeSession) Visibility() (uint8, error) {
	return _BaseContentType.Contract.Visibility(&_BaseContentType.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseContentType *BaseContentTypeCallerSession) Visibility() (uint8, error) {
	return _BaseContentType.Contract.Visibility(&_BaseContentType.CallOpts)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContentType *BaseContentTypeTransactor) AccessRequestV3(opts *bind.TransactOpts, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "accessRequestV3", customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContentType *BaseContentTypeSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.AccessRequestV3(&_BaseContentType.TransactOpts, customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseContentType *BaseContentTypeTransactorSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.AccessRequestV3(&_BaseContentType.TransactOpts, customValues, stakeholders)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentType *BaseContentTypeTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentType *BaseContentTypeSession) ClearPending() (*types.Transaction, error) {
	return _BaseContentType.Contract.ClearPending(&_BaseContentType.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentType *BaseContentTypeTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseContentType.Contract.ClearPending(&_BaseContentType.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentType *BaseContentTypeTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentType *BaseContentTypeSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContentType.Contract.Commit(&_BaseContentType.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseContentType.Contract.Commit(&_BaseContentType.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentType *BaseContentTypeTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentType *BaseContentTypeSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContentType.Contract.ConfirmCommit(&_BaseContentType.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseContentType *BaseContentTypeTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseContentType.Contract.ConfirmCommit(&_BaseContentType.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentType *BaseContentTypeTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentType *BaseContentTypeSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContentType.Contract.DeleteVersion(&_BaseContentType.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentType *BaseContentTypeTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseContentType.Contract.DeleteVersion(&_BaseContentType.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentType *BaseContentTypeTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentType *BaseContentTypeSession) Kill() (*types.Transaction, error) {
	return _BaseContentType.Contract.Kill(&_BaseContentType.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentType *BaseContentTypeTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseContentType.Contract.Kill(&_BaseContentType.TransactOpts)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetGroupRights(&_BaseContentType.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetGroupRights(&_BaseContentType.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetRights(&_BaseContentType.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetRights(&_BaseContentType.TransactOpts, stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContentType *BaseContentTypeTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContentType *BaseContentTypeSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetVisibility(&_BaseContentType.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseContentType.Contract.SetVisibility(&_BaseContentType.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentType *BaseContentTypeTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentType *BaseContentTypeSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.TransferCreatorship(&_BaseContentType.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.TransferCreatorship(&_BaseContentType.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentType *BaseContentTypeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentType *BaseContentTypeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.TransferOwnership(&_BaseContentType.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentType *BaseContentTypeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentType.Contract.TransferOwnership(&_BaseContentType.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentType *BaseContentTypeTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentType *BaseContentTypeSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContentType.Contract.UpdateRequest(&_BaseContentType.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentType *BaseContentTypeTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseContentType.Contract.UpdateRequest(&_BaseContentType.TransactOpts)
}

// BaseContentTypeAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseContentType contract.
type BaseContentTypeAccessRequestV3Iterator struct {
	Event *BaseContentTypeAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeAccessRequestV3 represents a AccessRequestV3 event raised by the BaseContentType contract.
type BaseContentTypeAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentType *BaseContentTypeFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseContentTypeAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeAccessRequestV3Iterator{contract: _BaseContentType.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentType *BaseContentTypeFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseContentTypeAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeAccessRequestV3)
				if err := _BaseContentType.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentType *BaseContentTypeFilterer) ParseAccessRequestV3(log types.Log) (*BaseContentTypeAccessRequestV3, error) {
	event := new(BaseContentTypeAccessRequestV3)
	if err := _BaseContentType.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContentType contract.
type BaseContentTypeCommitPendingIterator struct {
	Event *BaseContentTypeCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeCommitPending represents a CommitPending event raised by the BaseContentType contract.
type BaseContentTypeCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentTypeCommitPendingIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeCommitPendingIterator{contract: _BaseContentType.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentTypeCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeCommitPending)
				if err := _BaseContentType.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseCommitPending(log types.Log) (*BaseContentTypeCommitPending, error) {
	event := new(BaseContentTypeCommitPending)
	if err := _BaseContentType.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContentType contract.
type BaseContentTypeUpdateRequestIterator struct {
	Event *BaseContentTypeUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeUpdateRequest represents a UpdateRequest event raised by the BaseContentType contract.
type BaseContentTypeUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentTypeUpdateRequestIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeUpdateRequestIterator{contract: _BaseContentType.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentTypeUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeUpdateRequest)
				if err := _BaseContentType.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseUpdateRequest(log types.Log) (*BaseContentTypeUpdateRequest, error) {
	event := new(BaseContentTypeUpdateRequest)
	if err := _BaseContentType.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContentType contract.
type BaseContentTypeVersionConfirmIterator struct {
	Event *BaseContentTypeVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeVersionConfirm represents a VersionConfirm event raised by the BaseContentType contract.
type BaseContentTypeVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentTypeVersionConfirmIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeVersionConfirmIterator{contract: _BaseContentType.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentTypeVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeVersionConfirm)
				if err := _BaseContentType.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseVersionConfirm(log types.Log) (*BaseContentTypeVersionConfirm, error) {
	event := new(BaseContentTypeVersionConfirm)
	if err := _BaseContentType.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContentType contract.
type BaseContentTypeVersionDeleteIterator struct {
	Event *BaseContentTypeVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeVersionDelete represents a VersionDelete event raised by the BaseContentType contract.
type BaseContentTypeVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentTypeVersionDeleteIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeVersionDeleteIterator{contract: _BaseContentType.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentTypeVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeVersionDelete)
				if err := _BaseContentType.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) ParseVersionDelete(log types.Log) (*BaseContentTypeVersionDelete, error) {
	event := new(BaseContentTypeVersionDelete)
	if err := _BaseContentType.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseContentTypeVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseContentType contract.
type BaseContentTypeVisibilityChangedIterator struct {
	Event *BaseContentTypeVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeVisibilityChanged represents a VisibilityChanged event raised by the BaseContentType contract.
type BaseContentTypeVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentType *BaseContentTypeFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseContentTypeVisibilityChangedIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeVisibilityChangedIterator{contract: _BaseContentType.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentType *BaseContentTypeFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseContentTypeVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeVisibilityChanged)
				if err := _BaseContentType.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentType *BaseContentTypeFilterer) ParseVisibilityChanged(log types.Log) (*BaseContentTypeVisibilityChanged, error) {
	event := new(BaseContentTypeVisibilityChanged)
	if err := _BaseContentType.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseFactoryABI is the input ABI used to generate the binding from.
const BaseFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createNode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseFactoryFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"b8cfaf05": "createContentType()",
	"5c6dc219": "createNode(address)",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// BaseFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseFactoryBin = "0x60806040527f4f776e61626c6532303230303231303131303130304d4c0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f42617365466163746f727932303230303331363132303730304d4c000000000060055560028054600160a060020a031990811632908117909255600380549091169091179055612c0e806100a26000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146100a557806341c0e1b5146100d657806354fd4d50146100eb5780635c6dc219146101125780635f4fcae1146101335780636d2e4b1b146101485780638da5cb5b14610169578063af570c041461017e578063b8cfaf0514610193578063f2fde38b146101a8575b005b3480156100b157600080fd5b506100ba6101c9565b60408051600160a060020a039092168252519081900360200190f35b3480156100e257600080fd5b506100a36101d8565b3480156100f757600080fd5b50610100610214565b60408051918252519081900360200190f35b34801561011e57600080fd5b506100ba600160a060020a036004351661021a565b34801561013f57600080fd5b506101006102ea565b34801561015457600080fd5b506100a3600160a060020a03600435166102f0565b34801561017557600080fd5b506100ba61034b565b34801561018a57600080fd5b506100ba61035a565b34801561019f57600080fd5b506100ba610369565b3480156101b457600080fd5b506100a3600160a060020a0360043516610432565b600254600160a060020a031681565b600354600160a060020a03163214806101fb5750600354600160a060020a031633145b151561020657600080fd5b600354600160a060020a0316ff5b60055481565b6000806102256104a4565b604051809103906000f080158015610241573d6000803e3d6000fd5b50905082600160a060020a031681600160a060020a0316638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156102a557600080fd5b505af11580156102b9573d6000803e3d6000fd5b505050506040513d60208110156102cf57600080fd5b5051600160a060020a0316146102e457600080fd5b92915050565b60015481565b600254600160a060020a0316321461030757600080fd5b600160a060020a038116151561031c57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600080336103756104b4565b600160a060020a03909116815260405190819003602001906000f0801580156103a2573d6000803e3d6000fd5b50604080517f0fe1b5a2000000000000000000000000000000000000000000000000000000008152326004820152600060248201819052600260448301529151929350600160a060020a03841692630fe1b5a29260648084019391929182900301818387803b15801561041457600080fd5b505af1158015610428573d6000803e3d6000fd5b5092949350505050565b600354600160a060020a03163214806104555750600354600160a060020a031633145b151561046057600080fd5b600160a060020a038116151561047557600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6040516104bb806104c583390190565b6040516122638061098083390190560060806040527f4f776e61626c6532303230303231303131303130304d4c0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f4e6f646532303139303331353130353130304d4c00000000000000000000000060055560028054600160a060020a031990811632908117909255600380549091169091179055610419806100a26000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461009a57806341304fac146100cb57806341c0e1b51461012457806354fd4d50146101395780635f4fcae1146101605780636d2e4b1b146101755780638da5cb5b14610196578063af570c04146101ab578063f2fde38b146101c0575b005b3480156100a657600080fd5b506100af6101e1565b60408051600160a060020a039092168252519081900360200190f35b3480156100d757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100989436949293602493928401919081908401838280828437509497506101f09650505050505050565b34801561013057600080fd5b506100986102ba565b34801561014557600080fd5b5061014e6102f6565b60408051918252519081900360200190f35b34801561016c57600080fd5b5061014e6102fc565b34801561018157600080fd5b50610098600160a060020a0360043516610302565b3480156101a257600080fd5b506100af61035d565b3480156101b757600080fd5b506100af61036c565b3480156101cc57600080fd5b50610098600160a060020a036004351661037b565b600254600160a060020a031681565b600354600160a060020a03163214806102135750600354600160a060020a031633145b151561021e57600080fd5b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561027d578181015183820152602001610265565b50505050905090810190601f1680156102aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b600354600160a060020a03163214806102dd5750600354600160a060020a031633145b15156102e857600080fd5b600354600160a060020a0316ff5b60055481565b60015481565b600254600160a060020a0316321461031957600080fd5b600160a060020a038116151561032e57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a031632148061039e5750600354600160a060020a031633145b15156103a957600080fd5b600160a060020a03811615156103be57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058202239827ea399991686bdf1e0f3c2871fd43454d9706f5915fc84b10511a004b80029608060408190527f4f776e61626c6532303230303231303131303130304d4c0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006005556006805460ff191690911761ff00191690557f4564697461626c653230323030363236313830343030504f00000000000000006007557f42617365436f6e74656e745479706532303230303331363133353130304d4c00600e5560208061226383398101604052516002805432600160a060020a0319918216811790925560038054821690921790915560048054909116600160a060020a039092169190911790556006805461ffff191661040017905561212f806101346000396000f30060806040526004361061019c5763ffffffff60e060020a600035041662821de3811461019e57806302d05d3f146101cf5780630fe1b5a2146101e4578063100508a21461021157806314cfabb31461023c5780631bf7a9121461026557806322e564eb146102e657806329adec1414610313578063331b86c014610328578063375a6e7c1461034f57806340b87a261461036457806341c0e1b514610379578063446e88261461038e57806354fd4d50146103965780635f4fcae1146103ab5780635f6a1301146103c0578063628449fd146103d55780636380501f1461045f57806367e5c3bf146104745780636d2e4b1b146104955780636e375427146104b65780637886f747146104cb5780637ca8f618146104e357806381beeb64146104fb5780638da5cb5b1461051057806395a078e81461052557806397ac4fd2146105465780639867db741461055b578063aa024e8b146105b4578063af570c04146105cf578063c287e0ed146105e4578063e02dd9c2146105f9578063e1a707171461060e578063ef1d7dc214610667578063f2fde38b1461067c575b005b3480156101aa57600080fd5b506101b361069d565b60408051600160a060020a039092168252519081900360200190f35b3480156101db57600080fd5b506101b36106ad565b3480156101f057600080fd5b5061019c600160a060020a036004351660ff602435811690604435166106bc565b34801561021d57600080fd5b5061022661078c565b6040805160ff9092168252519081900360200190f35b34801561024857600080fd5b50610251610791565b604080519115158252519081900360200190f35b6040805160206004803580820135838102808601850190965280855261025195369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506108309650505050505050565b3480156102f257600080fd5b5061019c600160a060020a036004351660ff6024358116906044351661093e565b34801561031f57600080fd5b50610226610e1b565b34801561033457600080fd5b5061033d610e24565b60408051918252519081900360200190f35b34801561035b57600080fd5b50610251610e2a565b34801561037057600080fd5b5061033d610e33565b34801561038557600080fd5b5061019c610e39565b610251610e75565b3480156103a257600080fd5b5061033d611079565b3480156103b757600080fd5b5061033d61107f565b3480156103cc57600080fd5b5061019c611085565b3480156103e157600080fd5b506103ea6110c3565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561042457818101518382015260200161040c565b50505050905090810190601f1680156104515780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561046b57600080fd5b50610226611151565b34801561048057600080fd5b50610251600160a060020a036004351661115f565b3480156104a157600080fd5b5061019c600160a060020a03600435166112fc565b3480156104c257600080fd5b50610251611357565b3480156104d757600080fd5b5061033d600435611366565b3480156104ef57600080fd5b506103ea600435611385565b34801561050757600080fd5b506102516113f9565b34801561051c57600080fd5b506101b3611404565b34801561053157600080fd5b50610251600160a060020a0360043516611413565b34801561055257600080fd5b50610226611572565b34801561056757600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261019c9436949293602493928401919081908401838280828437509497506115779650505050505050565b3480156105c057600080fd5b5061019c60ff600435166116a4565b3480156105db57600080fd5b506101b361171e565b3480156105f057600080fd5b5061019c61172d565b34801561060557600080fd5b506103ea6117ef565b34801561061a57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261033d94369492936024939284019190819084018382808284375094975061184a9650505050505050565b34801561067357600080fd5b50610226611dcf565b34801561068857600080fd5b5061019c600160a060020a0360043516611dd4565b600454600160a060020a03165b90565b600254600160a060020a031681565b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd9160248082019260209290919082900301818787803b15801561072c57600080fd5b505af1158015610740573d6000803e3d6000fd5b505050506040513d602081101561075657600080fd5b50519050600160a060020a038116151561077a5761077585858561093e565b610785565b61078581858561093e565b5050505050565b600181565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e149160248082019260209290919082900301818887803b1580156107fd57600080fd5b505af1158015610811573d6000803e3d6000fd5b505050506040513d602081101561082757600080fd5b505191505b5090565b600061083b33611413565b151561084657600080fd5b7f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c730426040516020018083600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106108df5780518252601f1990920191602091820191016108c0565b51815160001960209485036101000a019081169019919091161790526040805194909201849003842084526000908401819052838201523360608401526103e842026080840152519182900360a001935090915050a150600192915050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561098157600080fd5b505af1158015610995573d6000803e3d6000fd5b505050506040513d60208110156109ab57600080fd5b5051600654610100900460ff90811691161415610a5057604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b158015610a3357600080fd5b505af1158015610a47573d6000803e3d6000fd5b50505050610e15565b80600160a060020a03166312915a306040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a8e57600080fd5b505af1158015610aa2573d6000803e3d6000fd5b505050506040513d6020811015610ab857600080fd5b5051600654610100900460ff90811691161415610b4057604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b158015610a3357600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610b7e57600080fd5b505af1158015610b92573d6000803e3d6000fd5b505050506040513d6020811015610ba857600080fd5b5051600654610100900460ff90811691161415610c3057604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b158015610a3357600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610c6e57600080fd5b505af1158015610c82573d6000803e3d6000fd5b505050506040513d6020811015610c9857600080fd5b5051600654610100900460ff90811691161415610d2057604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b158015610a3357600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610d5e57600080fd5b505af1158015610d72573d6000803e3d6000fd5b505050506040513d6020811015610d8857600080fd5b5051600654610100900460ff90811691161415610e1057604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b158015610a3357600080fd5b600080fd5b50505050565b60065460ff1681565b600a5490565b600d5460ff1681565b60095481565b600354600160a060020a0316321480610e5c5750600354600160a060020a031633145b1515610e6757600080fd5b600354600160a060020a0316ff5b6000610e7f610791565b1515610e8a57600080fd5b600d5460ff161515610e9b57600080fd5b600060088054600181600116156101000203166002900490501115610f4a57600a8054600181810180845560009390935260088054610f11937fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80192600261010091831615919091026000190190911604611f4a565b5050600954600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901555b600c8054610f6d9160089160026000196101006001841615020190911604611f4a565b5042600955604080516020810191829052600090819052610f9091600c91611fcb565b50600d805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a0316610fd161069d565b60408051600160a060020a0380851682528316602082015260609181018281526008805460026000196101006001841615020190911604938301849052926080830190849080156110635780601f1061103857610100808354040283529160200191611063565b820191906000526020600020905b81548152906001019060200180831161104657829003601f168201915b505094505050505060405180910390a150600190565b600e5481565b60015481565b61108d611357565b151561109857600080fd5b6040805160208101918290526000908190526110b691600c91611fcb565b50600d805460ff19169055565b600c805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156111495780601f1061111e57610100808354040283529160200191611149565b820191906000526020600020905b81548152906001019060200180831161112c57829003601f168201915b505050505081565b600654610100900460ff1681565b6003546000908190600160a060020a03848116911614806111885750600654606460ff90911610155b1561119657600191506112f6565b600654600061010090910460ff1611156112f15760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a0387811694820194909452905192909116916363e6ffdd916024808201926020929091908290030181600087803b15801561121657600080fd5b505af115801561122a573d6000803e3d6000fd5b505050506040513d602081101561124057600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a916064808201926020929091908290030181600087803b1580156112be57600080fd5b505af11580156112d2573d6000803e3d6000fd5b505050506040513d60208110156112e857600080fd5b505191506112f6565b600091505b50919050565b600254600160a060020a0316321461131357600080fd5b600160a060020a038116151561132857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60006113616113f9565b905090565b600b80548290811061137457fe5b600091825260209091200154905081565b600a80548290811061139357fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156111495780601f1061111e57610100808354040283529160200191611149565b60006113613261115f565b600354600160a060020a031681565b6003546000908190600160a060020a038481169116148061143c5750600654600a60ff90911610155b1561144a57600191506112f6565b600654600061010090910460ff1611156112f15760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a0387811694820194909452905192909116916363e6ffdd916024808201926020929091908290030181600087803b1580156114ca57600080fd5b505af11580156114de573d6000803e3d6000fd5b505050506040513d60208110156114f457600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a916064808201926020929091908290030181600087803b1580156112be57600080fd5b600a81565b61157f611357565b151561158a57600080fd5b600d5460ff161561159a57600080fd5b80516080116115a857600080fd5b80516115bb90600c906020840190611fcb565b50600d805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a03166115ff61069d565b60408051600160a060020a038085168252831660208201526060918101828152600c805460026000196101006001841615020190911604938301849052926080830190849080156116915780601f1061166657610100808354040283529160200191611691565b820191906000526020600020905b81548152906001019060200180831161167457829003601f168201915b505094505050505060405180910390a150565b6116ac6113f9565b15156116b757600080fd5b6006805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b600454600160a060020a031681565b6117356113f9565b151561174057600080fd5b60408051602080825260088054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156117df5780601f106117b4576101008083540402835291602001916117df565b820191906000526020600020905b8154815290600101906020018083116117c257829003601f168201915b50509250505060405180910390a1565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156111495780601f1061111e57610100808354040283529160200191611149565b6000806000806000806000806000611860611357565b151561186b57600080fd5b896040516020018082805190602001908083835b6020831061189e5780518252601f19909201916020918201910161187f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106119015780518252601f1990920191602091820191016118e2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209750600860405160200180828054600181600116156101000203166002900480156119905780601f1061196e576101008083540402835291820191611990565b820191906000526020600020905b81548152906001019060200180831161197c575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106119d35780518252601f1990920191602091820191016119b4565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120995050505087871415611bc057600a541515611a3b57604080516020810191829052600090819052611a3091600891611fcb565b506000600955611ae6565b6000955060009450600093505b600a54841015611a9e5784600b85815481101515611a6257fe5b90600052602060002001541115611a9357839550600b84815481101515611a8557fe5b906000526020600020015494505b600190930192611a48565b600a805487908110611aac57fe5b9060005260206000200160089080546001816001161561010002031660029004611ad7929190611f4a565b506009859055611ae686611e46565b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168b60006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611b7b578181015183820152602001611b63565b50505050905090810190601f168015611ba85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009850611dc2565b6000199250600091505b600a54821015611cdf57600a805483908110611be257fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015611c4a5780601f10611c28576101008083540402835291820191611c4a565b820191906000526020600020905b815481529060010190602001808311611c36575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310611c8d5780518252601f199092019160209182019101611c6e565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120935050505087811415611cd457611ccc82611e46565b819250611cdf565b600190910190611bca565b600019831415611cee57600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168b856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611d82578181015183820152602001611d6a565b50505050905090810190601f168015611daf5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18298505b5050505050505050919050565b606481565b600354600160a060020a0316321480611df75750600354600160a060020a031633145b1515611e0257600080fd5b600160a060020a0381161515611e1757600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600a805482908110611e5457fe5b906000526020600020016000611e6a9190612039565b600b805482908110611e7857fe5b6000918252602082200155600a54600019018114611f1e57600a80546000198101908110611ea257fe5b90600052602060002001600a82815481101515611ebb57fe5b906000526020600020019080546001816001161561010002031660029004611ee4929190611f4a565b50600b80546000198101908110611ef757fe5b9060005260206000200154600b82815481101515611f1157fe5b6000918252602090912001555b600a805490611f3190600019830161207d565b50600b805490611f459060001983016120a6565b505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f835780548555611fbf565b82800160010185558215611fbf57600052602060002091601f016020900482015b82811115611fbf578254825591600101919060010190611fa4565b5061082c9291506120c6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061200c57805160ff1916838001178555611fbf565b82800160010185558215611fbf579182015b82811115611fbf57825182559160200191906001019061201e565b50805460018160011615610100020316600290046000825580601f1061205f5750611f47565b601f016020900490600052602060002090810190611f4791906120c6565b8154818355818111156120a1576000838152602090206120a19181019083016120e0565b505050565b8154818355818111156120a1576000838152602090206120a19181019083015b6106aa91905b8082111561082c57600081556001016120cc565b6106aa91905b8082111561082c5760006120fa8282612039565b506001016120e65600a165627a7a723058204770ef7a3af965f902ae32e7fa1e68b5a1f958f72dec4b777ba180cd88a39f290029a165627a7a72305820aa0a32b836c8fb4c14d2c62ffdf14c0c5810d51b0a90cb3463f2b6c7d494bda30029"

// DeployBaseFactory deploys a new Ethereum contract, binding an instance of BaseFactory to it.
func DeployBaseFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseFactory{BaseFactoryCaller: BaseFactoryCaller{contract: contract}, BaseFactoryTransactor: BaseFactoryTransactor{contract: contract}, BaseFactoryFilterer: BaseFactoryFilterer{contract: contract}}, nil
}

// BaseFactory is an auto generated Go binding around an Ethereum contract.
type BaseFactory struct {
	BaseFactoryCaller     // Read-only binding to the contract
	BaseFactoryTransactor // Write-only binding to the contract
	BaseFactoryFilterer   // Log filterer for contract events
}

// BaseFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseFactorySession struct {
	Contract     *BaseFactory      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseFactoryCallerSession struct {
	Contract *BaseFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// BaseFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseFactoryTransactorSession struct {
	Contract     *BaseFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// BaseFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseFactoryRaw struct {
	Contract *BaseFactory // Generic contract binding to access the raw methods on
}

// BaseFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseFactoryCallerRaw struct {
	Contract *BaseFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseFactoryTransactorRaw struct {
	Contract *BaseFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseFactory creates a new instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactory(address common.Address, backend bind.ContractBackend) (*BaseFactory, error) {
	contract, err := bindBaseFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseFactory{BaseFactoryCaller: BaseFactoryCaller{contract: contract}, BaseFactoryTransactor: BaseFactoryTransactor{contract: contract}, BaseFactoryFilterer: BaseFactoryFilterer{contract: contract}}, nil
}

// NewBaseFactoryCaller creates a new read-only instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseFactoryCaller, error) {
	contract, err := bindBaseFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseFactoryCaller{contract: contract}, nil
}

// NewBaseFactoryTransactor creates a new write-only instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseFactoryTransactor, error) {
	contract, err := bindBaseFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseFactoryTransactor{contract: contract}, nil
}

// NewBaseFactoryFilterer creates a new log filterer instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseFactoryFilterer, error) {
	contract, err := bindBaseFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseFactoryFilterer{contract: contract}, nil
}

// bindBaseFactory binds a generic wrapper to an already deployed contract.
func bindBaseFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseFactory *BaseFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseFactory.Contract.BaseFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseFactory *BaseFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseFactory.Contract.BaseFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseFactory *BaseFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseFactory.Contract.BaseFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseFactory *BaseFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseFactory *BaseFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseFactory *BaseFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseFactory.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseFactory *BaseFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseFactory *BaseFactorySession) ContentSpace() (common.Address, error) {
	return _BaseFactory.Contract.ContentSpace(&_BaseFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseFactory *BaseFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseFactory.Contract.ContentSpace(&_BaseFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseFactory *BaseFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseFactory *BaseFactorySession) Creator() (common.Address, error) {
	return _BaseFactory.Contract.Creator(&_BaseFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseFactory *BaseFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseFactory.Contract.Creator(&_BaseFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseFactory *BaseFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseFactory *BaseFactorySession) Owner() (common.Address, error) {
	return _BaseFactory.Contract.Owner(&_BaseFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseFactory *BaseFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseFactory.Contract.Owner(&_BaseFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseFactory *BaseFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseFactory *BaseFactorySession) Version() ([32]byte, error) {
	return _BaseFactory.Contract.Version(&_BaseFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseFactory *BaseFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseFactory.Contract.Version(&_BaseFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseFactory *BaseFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseFactory.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseFactory *BaseFactorySession) VersionAPI() ([32]byte, error) {
	return _BaseFactory.Contract.VersionAPI(&_BaseFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseFactory *BaseFactoryCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseFactory.Contract.VersionAPI(&_BaseFactory.CallOpts)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseFactory *BaseFactoryTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "createContentType")
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseFactory *BaseFactorySession) CreateContentType() (*types.Transaction, error) {
	return _BaseFactory.Contract.CreateContentType(&_BaseFactory.TransactOpts)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseFactory *BaseFactoryTransactorSession) CreateContentType() (*types.Transaction, error) {
	return _BaseFactory.Contract.CreateContentType(&_BaseFactory.TransactOpts)
}

// CreateNode is a paid mutator transaction binding the contract method 0x5c6dc219.
//
// Solidity: function createNode(address _owner) returns(address)
func (_BaseFactory *BaseFactoryTransactor) CreateNode(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "createNode", _owner)
}

// CreateNode is a paid mutator transaction binding the contract method 0x5c6dc219.
//
// Solidity: function createNode(address _owner) returns(address)
func (_BaseFactory *BaseFactorySession) CreateNode(_owner common.Address) (*types.Transaction, error) {
	return _BaseFactory.Contract.CreateNode(&_BaseFactory.TransactOpts, _owner)
}

// CreateNode is a paid mutator transaction binding the contract method 0x5c6dc219.
//
// Solidity: function createNode(address _owner) returns(address)
func (_BaseFactory *BaseFactoryTransactorSession) CreateNode(_owner common.Address) (*types.Transaction, error) {
	return _BaseFactory.Contract.CreateNode(&_BaseFactory.TransactOpts, _owner)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseFactory *BaseFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseFactory *BaseFactorySession) Kill() (*types.Transaction, error) {
	return _BaseFactory.Contract.Kill(&_BaseFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseFactory *BaseFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseFactory.Contract.Kill(&_BaseFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseFactory *BaseFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseFactory *BaseFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseFactory.Contract.TransferCreatorship(&_BaseFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseFactory *BaseFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseFactory.Contract.TransferCreatorship(&_BaseFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseFactory *BaseFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseFactory *BaseFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseFactory.Contract.TransferOwnership(&_BaseFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseFactory *BaseFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseFactory.Contract.TransferOwnership(&_BaseFactory.TransactOpts, newOwner)
}

// BaseGroupFactoryABI is the input ABI used to generate the binding from.
const BaseGroupFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseGroupFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseGroupFactoryFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"575185ed": "createGroup()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// BaseGroupFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseGroupFactoryBin = "0x60806040527f4f776e61626c6532303230303231303131303130304d4c0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f4261736547726f7570466163746f727932303230303331363132303830304d4c60055560028054600160a060020a031990811632908117909255600380549091169091179055614efe806100a26000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461009a57806341c0e1b5146100cb57806354fd4d50146100e0578063575185ed146101075780635f4fcae11461011c5780636d2e4b1b146101315780638da5cb5b14610152578063af570c0414610167578063f2fde38b1461017c575b005b3480156100a657600080fd5b506100af61019d565b60408051600160a060020a039092168252519081900360200190f35b3480156100d757600080fd5b506100986101ac565b3480156100ec57600080fd5b506100f56101e8565b60408051918252519081900360200190f35b34801561011357600080fd5b506100af6101ee565b34801561012857600080fd5b506100f56102b7565b34801561013d57600080fd5b50610098600160a060020a03600435166102bd565b34801561015e57600080fd5b506100af610318565b34801561017357600080fd5b506100af610327565b34801561018857600080fd5b50610098600160a060020a0360043516610336565b600254600160a060020a031681565b600354600160a060020a03163214806101cf5750600354600160a060020a031633145b15156101da57600080fd5b600354600160a060020a0316ff5b60055481565b600080336101fa6103a8565b600160a060020a03909116815260405190819003602001906000f080158015610227573d6000803e3d6000fd5b50604080517f0fe1b5a2000000000000000000000000000000000000000000000000000000008152326004820152600060248201819052600260448301529151929350600160a060020a03841692630fe1b5a29260648084019391929182900301818387803b15801561029957600080fd5b505af11580156102ad573d6000803e3d6000fd5b5092949350505050565b60015481565b600254600160a060020a031632146102d457600080fd5b600160a060020a03811615156102e957600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a03163214806103595750600354600160a060020a031633145b151561036457600080fd5b600160a060020a038116151561037957600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604051614b1a806103b98339019056007f4f776e61626c6532303230303231303131303130304d4c0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060019081557f416363657373496e6465786f7232303230303431303231353230304d4c0000006008556009805460ff1916821761ff0019166102001762ff00001916620300001763ff000000191663040000001764ff00000000191664050000000017905560e06040526080908152600a60a0819052606460c052620000cc91600362000289565b507f41636365737369626c653230323030363236313231363030504f0000000000006024556025805461ff001960ff199091166001171690557f4564697461626c653230323030363236313830343030504f00000000000000006026557f42734163636573734374726c47727032303230303331363132313730304d4c00602d553480156200015a57600080fd5b5060405160208062004b1a833981016040525160028054600160a060020a03199081163290811792839055600380548316909117905560098054600b805460ff1990811660ff620100008504811691909117909255601380548216610100808604851691909117909155600f80548316848616179055601780548316630100000086048516179055601b8054831664010000000090950484169490941790935560048054600160a060020a039889169087161790556000602f8190556030805460018181018355919092527f6ff97a59c90d62cc7236ba3a37cd85351bf564556780cf8c1157a220f31f0cbb90910180549096169790961696909617909355603193909355603280549094169093559154602580549183900490931690910261ff001990911617905562000347565b600183019183908215620003115791602002820160005b83821115620002e057835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302620002a0565b80156200030f5782816101000a81549060ff0219169055600101602081600001049283019260010302620002e0565b505b506200031f92915062000323565b5090565b6200034491905b808211156200031f57805460ff191681556001016200032a565b90565b6147c380620003576000396000f3006080604052600436106104a95763ffffffff60e060020a600035041662821de381146104ab57806302d05d3f146104dc578063048bd529146104f1578063055af48f1461051857806308d865d714610539578063091600e6146105705780630ae5e739146105855780630dc10d3f146105a65780630fe1b5a2146105bb578063100508a2146105e857806312915a30146105fd57806312b39dd01461061257806313b8ad311461063b57806314cfabb31461065357806316aed23214610668578063186897331461067d5780631bf7a912146106925780631fcd779414610713578063224dcba01461072b57806322e564eb1461075857806324d7806c1461078557806324d7c18d146107a657806329adec14146107c45780632d474cbd146107d95780632e74a4de146107f15780632fa5c84214610812578063304f4a7b1461085257806330e669491461087357806330f846a2146108a5578063331b86c0146108c357806333f12cf4146108d8578063375a6e7c146108f65780633def51401461090b57806340b87a261461093857806341c0e1b51461094d57806342e7ba7b14610962578063446e882614610983578063479a0c51146105e857806351a7fc871461098b57806354fd4d50146109a057806355277a5b146109b55780635c1d3059146109ca5780635d7cf830146109df5780635d97b6c21461067d5780635f4fcae114610a135780635f6a130114610a28578063628449fd14610a3d5780636373a41114610ac75780636380501f14610adc578063638d029014610af157806367e5c3bf14610b0657806368a0469a14610b2757806369881c0c14610b3c5780636c0f79b614610b5d5780636d2e4b1b14610b725780636e37542714610b935780636ebc8c8614610ba85780637558cbf014610bc057806375861a9514610bde5780637709bc7814610bff5780637886f74714610c205780637ca8f61814610c385780637cbb7bf214610c505780637fb52f1a14610c7d57806381beeb6414610cab5780638232f3f114610cc057806385e0a20014610cd557806385e6853114610cea5780638635adb514610d0b5780638da5cb5b14610d3857806392297d7b14610d4d57806395a078e814610d6257806396eba03d14610cc057806397ac4fd214610d835780639867db7414610d985780639f46133e14610df1578063a00b38c414610e06578063a4081d6214610e34578063a980892d14610e55578063aa024e8b14610e6a578063aa3f695214610e85578063ac55c90614610e9d578063adf0779114610ef6578063af570c0414610f0b578063b8ff1dba14610f20578063c287e0ed14610f35578063c4b1978d14610f4a578063cb86806d14610f5f578063cdb849b714610f74578063cf8a750314610f95578063d15d62a714610fad578063d1aeb651146105e8578063d30f8cd014610fc5578063d8961c8d14610fda578063e02dd9c214611000578063e1954b6114611015578063e1a707171461104c578063e542b7cb146110a5578063e57097c91461113c578063ebe9314e14611154578063ef1d7dc214611169578063f17bda911461117e578063f2fde38b146111ab578063fb52222c146111cc578063fba3779a146111ed578063fccc134f14611207575b005b3480156104b757600080fd5b506104c061121c565b60408051600160a060020a039092168252519081900360200190f35b3480156104e857600080fd5b506104c061122c565b3480156104fd57600080fd5b5061050661123b565b60408051918252519081900360200190f35b34801561052457600080fd5b506104a9600160a060020a036004351661124c565b34801561054557600080fd5b5061055a600160a060020a036004351661129c565b6040805160ff9092168252519081900360200190f35b34801561057c57600080fd5b5061055a6112be565b34801561059157600080fd5b506104a9600160a060020a03600435166112c7565b3480156105b257600080fd5b50610506611432565b3480156105c757600080fd5b506104a9600160a060020a036004351660ff60243581169060443516611438565b3480156105f457600080fd5b5061055a6114f2565b34801561060957600080fd5b5061055a6114f7565b34801561061e57600080fd5b50610627611505565b604080519115158252519081900360200190f35b34801561064757600080fd5b506104c060043561150e565b34801561065f57600080fd5b50610627611536565b34801561067457600080fd5b5061055a6115d5565b34801561068957600080fd5b5061055a6115e4565b6040805160206004803580820135838102808601850190965280855261062795369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506115e99650505050505050565b34801561071f57600080fd5b506104c06004356116f8565b34801561073757600080fd5b506104a9600160a060020a036004351660ff60243581169060443516611706565b34801561076457600080fd5b506104a9600160a060020a036004351660ff60243581169060443516611713565b34801561079157600080fd5b50610627600160a060020a0360043516611bf0565b3480156107b257600080fd5b5061062760043560ff60243516611c72565b3480156107d057600080fd5b5061055a611c99565b3480156107e557600080fd5b506104c0600435611ca2565b3480156107fd57600080fd5b506104a9600160a060020a0360043516611ccf565b34801561081e57600080fd5b50610827611d18565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561085e57600080fd5b5061055a600160a060020a0360043516611d63565b34801561087f57600080fd5b50610888611d81565b6040805160ff909316835260208301919091528051918290030190f35b3480156108b157600080fd5b5061062760043560ff60243516611d90565b3480156108cf57600080fd5b50610506611dfe565b3480156108e457600080fd5b5061062760043560ff60243516611e04565b34801561090257600080fd5b50610627611f10565b34801561091757600080fd5b506104a9600160a060020a036004351660ff60243581169060443516611f19565b34801561094457600080fd5b50610506611f26565b34801561095957600080fd5b506104a9611f2c565b34801561096e57600080fd5b50610627600160a060020a0360043516611f68565b610627611f90565b34801561099757600080fd5b50610888612194565b3480156109ac57600080fd5b506105066121a3565b3480156109c157600080fd5b506105066121a9565b3480156109d657600080fd5b506105066121af565b3480156109eb57600080fd5b506104a960ff600435811690600160a060020a036024351690604435811690606435166121b5565b348015610a1f57600080fd5b506105066121d2565b348015610a3457600080fd5b506104a96121d8565b348015610a4957600080fd5b50610a52612216565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610a8c578181015183820152602001610a74565b50505050905090810190601f168015610ab95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610ad357600080fd5b5061055a6122a4565b348015610ae857600080fd5b5061055a6122b5565b348015610afd57600080fd5b506105066122c3565b348015610b1257600080fd5b50610627600160a060020a03600435166122c9565b348015610b3357600080fd5b5061055a61244e565b348015610b4857600080fd5b5061055a600160a060020a036004351661245e565b348015610b6957600080fd5b5061088861247c565b348015610b7e57600080fd5b506104a9600160a060020a036004351661248b565b348015610b9f57600080fd5b506106276124d9565b348015610bb457600080fd5b506104c06004356124ea565b348015610bcc57600080fd5b506104a960043560ff602435166124fc565b348015610bea57600080fd5b506104a9600160a060020a03600435166125f7565b348015610c0b57600080fd5b50610627600160a060020a0360043516612777565b348015610c2c57600080fd5b5061050660043561277f565b348015610c4457600080fd5b50610a5260043561279e565b348015610c5c57600080fd5b506104a9600160a060020a036004351660ff60243581169060443516612812565b348015610c8957600080fd5b5061062760ff600435811690600160a060020a0360243516906044351661281f565b348015610cb757600080fd5b50610627612834565b348015610ccc57600080fd5b5061055a61283f565b348015610ce157600080fd5b50610506612844565b348015610cf657600080fd5b506104a9600160a060020a0360043516612850565b348015610d1757600080fd5b506104a9600160a060020a036004351660ff602435811690604435166129ee565b348015610d4457600080fd5b506104c0612a08565b348015610d5957600080fd5b50610506612a17565b348015610d6e57600080fd5b50610627600160a060020a0360043516612a23565b348015610d8f57600080fd5b5061055a612b6c565b348015610da457600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104a9943694929360249392840191908190840183828082843750949750612b719650505050505050565b348015610dfd57600080fd5b50610888612c9e565b348015610e1257600080fd5b5061062760ff600435811690600160a060020a03602435169060443516612cad565b348015610e4057600080fd5b5061055a600160a060020a0360043516612cdc565b348015610e6157600080fd5b50610888612cfa565b348015610e7657600080fd5b506104a960ff60043516612d09565b348015610e9157600080fd5b506104c0600435612d83565b348015610ea957600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610a52943694929360249392840191908190840183828082843750949750612d959650505050505050565b348015610f0257600080fd5b506104c0612f44565b348015610f1757600080fd5b506104c0612f58565b348015610f2c57600080fd5b506104a9612f67565b348015610f4157600080fd5b506104a961304f565b348015610f5657600080fd5b50610888613111565b348015610f6b57600080fd5b50610506613120565b348015610f8057600080fd5b506104a9600160a060020a0360043516613126565b348015610fa157600080fd5b506104c06004356132c1565b348015610fb957600080fd5b506104c06004356132d3565b348015610fd157600080fd5b506105066132e5565b348015610fe657600080fd5b50610627600160a060020a036004351660243515156132f1565b34801561100c57600080fd5b50610a52613317565b34801561102157600080fd5b5061103360043560ff60243516613372565b6040805163ffffffff9092168252519081900360200190f35b34801561105857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526105069436949293602493928401919081908401838280828437509497506133c49650505050505050565b3480156110b157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104a994369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506139499650505050505050565b34801561114857600080fd5b506104a9600435613b45565b34801561116057600080fd5b50610506613baa565b34801561117557600080fd5b5061055a613bb0565b34801561118a57600080fd5b506104a9600160a060020a036004351660ff60243581169060443516613bb5565b3480156111b757600080fd5b506104a9600160a060020a0360043516613bc2565b3480156111d857600080fd5b5061055a600160a060020a0360043516613c27565b3480156111f957600080fd5b506104a96004351515613c45565b34801561121357600080fd5b50610506613cba565b600454600160a060020a03165b90565b600254600160a060020a031681565b6000611247600f613cc0565b905090565b600354600160a060020a031632148061126f5750600354600160a060020a031633145b151561127a57600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a0381166000908152601c602052604090205460ff165b919050565b60095460ff1681565b6000806112d333611f68565b15156001146112e157600080fd5b5060009050805b602f548110156113375782600160a060020a0316602e8281548110151561130b57fe5b600091825260209091200154600160a060020a0316141561132f5760019150611337565b6001016112e8565b8115156113e557602f54602e54141561139a57602e80546001810182556000919091527f37fa166cbdbfbb1561ccd9ea985ec0218b5e68502e230525f544285b2bdf3d7e018054600160a060020a031916600160a060020a0385161790556113db565b82602e602f548154811015156113ac57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b602f805460010190555b60408051600160a060020a038516815290517fb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd9149181900360200190a161142d83600180611438565b505050565b60165490565b600480546040805160e060020a6363e6ffdd028152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd9160248082019260209290919082900301818787803b15801561149257600080fd5b505af11580156114a6573d6000803e3d6000fd5b505050506040513d60208110156114bc57600080fd5b50519050600160a060020a03811615156114e0576114db858585611713565b6114eb565b6114eb818585611713565b5050505050565b600181565b600954610100900460ff1681565b60325460ff1681565b602e80548290811061151c57fe5b600091825260209091200154600160a060020a0316905081565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e149160248082019260209290919082900301818887803b1580156115a257600080fd5b505af11580156115b6573d6000803e3d6000fd5b505050506040513d60208110156115cc57600080fd5b505191505b5090565b60095462010000900460ff1681565b600281565b60006115f433612a23565b15156115ff57600080fd5b7f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c730426040516020018083600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106116985780518252601f199092019160209182019101611679565b51815160001960209485036101000a019081169019919091161790526040805194909201849003842084526000908401819052838201523360608401526103e842026080840152519182900360a001935090915050a15060015b92915050565b603080548290811061151c57fe5b61142d601b848484613e05565b600083905080600160a060020a031663091600e66040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561175657600080fd5b505af115801561176a573d6000803e3d6000fd5b505050506040513d602081101561178057600080fd5b5051602554610100900460ff9081169116141561182557604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b15801561180857600080fd5b505af115801561181c573d6000803e3d6000fd5b50505050611bea565b80600160a060020a03166312915a306040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561186357600080fd5b505af1158015611877573d6000803e3d6000fd5b505050506040513d602081101561188d57600080fd5b5051602554610100900460ff9081169116141561191557604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b15801561180857600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561195357600080fd5b505af1158015611967573d6000803e3d6000fd5b505050506040513d602081101561197d57600080fd5b5051602554610100900460ff90811691161415611a0557604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b15801561180857600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611a4357600080fd5b505af1158015611a57573d6000803e3d6000fd5b505050506040513d6020811015611a6d57600080fd5b5051602554610100900460ff90811691161415611af557604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b15801561180857600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611b3357600080fd5b505af1158015611b47573d6000803e3d6000fd5b505050506040513d6020811015611b5d57600080fd5b5051602554610100900460ff90811691161415611be557604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b15801561180857600080fd5b600080fd5b50505050565b6003546000908190600160a060020a0384811691161415611c145760019150611c6c565b5060005b603054811015611c675782600160a060020a0316603082815481101515611c3b57fe5b600091825260209091200154600160a060020a03161415611c5f5760019150611c6c565b600101611c18565b600091505b50919050565b6000611c7d33611bf0565b1515611c8857600080fd5b611c928383611e04565b9392505050565b60255460ff1681565b601580546000919083908110611cb457fe5b600091825260209091200154600160a060020a031692915050565b611cd833611bf0565b1515611ce357600080fd5b60328054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6000806000806000611d2a600b613cc0565b611d346013613cc0565b611d3e600f613cc0565b611d486017613cc0565b611d52601b613cc0565b945094509450945094509091929394565b600160a060020a031660009081526014602052604090205460ff1690565b60135460165460ff9091169082565b6000828152600760209081526040822060ff8481169290920490911690601f841690600282900a9081908460088110611dc557fe5b600881049091015460046007909216919091026101000a90041663ffffffff1615611df1576001611df4565b60005b9695505050505050565b60295490565b6000828152600760209081526040822060ff8481169290920490911690601f841690600282900a90849082908560088110611e3b57fe5b600881049091015460046007909216919091026101000a90041663ffffffff1615611e67576001611e6a565b60005b9050801515611ec357600087815260076020526040902082908560088110611e8e57fe5b60088104909101805463ffffffff60046007909416939093026101000a80820484169094178316840292909302199092161790555b6040805188815260ff881660208201528215158183015290517f4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d9181900360600190a19695505050505050565b602c5460ff1681565b61142d600f848484613e05565b60285481565b600354600160a060020a0316321480611f4f5750600354600160a060020a031633145b1515611f5a57600080fd5b600354600160a060020a0316ff5b603254600090600160a060020a038381166101009092041614806116f257506116f2826122c9565b6000611f9a611536565b1515611fa557600080fd5b602c5460ff161515611fb657600080fd5b600060278054600181600116156101000203166002900490501115612065576029805460018181018084556000939093526027805461202c937fcb7c14ce178f56e2e8d86ab33ebc0ae081ba8556a00cd122038841867181caac01926002610100918316159190910260001901909116046145bd565b5050602854602a80546001810182556000919091527fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d201555b602b805461208891602791600260001961010060018416150201909116046145bd565b50426028556040805160208101918290526000908190526120ab91602b9161463e565b50602c805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a03166120ec61121c565b60408051600160a060020a03808516825283166020820152606091810182815260278054600260001961010060018416150201909116049383018490529260808301908490801561217e5780601f106121535761010080835404028352916020019161217e565b820191906000526020600020905b81548152906001019060200180831161216157829003601f168201915b505094505050505060405180910390a150600190565b601f5460225460ff9091169082565b602d5481565b602f5481565b601a5490565b60ff841615611bea57611bea6121ca856141f8565b848484613e05565b60015481565b6121e06124d9565b15156121eb57600080fd5b60408051602081019182905260009081905261220991602b9161463e565b50602c805460ff19169055565b602b805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561229c5780601f106122715761010080835404028352916020019161229c565b820191906000526020600020905b81548152906001019060200180831161227f57829003601f168201915b505050505081565b600954640100000000900460ff1681565b602554610100900460ff1681565b60315481565b6003546000908190600160a060020a03848116911614806122f25750602554606460ff90911610155b156123005760019150611c6c565b602554600061010090910460ff16111561244557600480546040805160e060020a6363e6ffdd028152600160a060020a0387811694820194909452905192909116916363e6ffdd916024808201926020929091908290030181600087803b15801561236a57600080fd5b505af115801561237e573d6000803e3d6000fd5b505050506040513d602081101561239457600080fd5b5051602554604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a916064808201926020929091908290030181600087803b15801561241257600080fd5b505af1158015612426573d6000803e3d6000fd5b505050506040513d602081101561243c57600080fd5b50519150611c6c565b60009150611c6c565b6009546301000000900460ff1681565b600160a060020a031660009081526010602052604090205460ff1690565b601b54601e5460ff9091169082565b600254600160a060020a031632146124a257600080fd5b600160a060020a03811615156124b757600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a0316321490565b601d80546000919083908110611cb457fe5b600061250733611bf0565b151561251257600080fd5b600860ff83161061252257600080fd5b600083815260076020526040902060ff83166008811061253e57fe5b60088082049290920154600086815260076020819052604090912092166004026101000a900463ffffffff1692509060ff841690811061257a57fe5b600881049091018054600163ffffffff60046007909516949094026101000a80830485169190910184168102908402199091161790556040805185815260ff8516602082015291831682820152517f77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f9181900360600190a1505050565b6003546000908190600160a060020a031632148061261f5750600354600160a060020a031633145b151561262a57600080fd5b5060009050805b6031548110156126805782600160a060020a031660308281548110151561265457fe5b600091825260209091200154600160a060020a031614156126785760019150612680565b600101612631565b81151561272e5760315460305414156126e357603080546001810182556000919091527f6ff97a59c90d62cc7236ba3a37cd85351bf564556780cf8c1157a220f31f0cbb018054600160a060020a031916600160a060020a038516179055612724565b8260306031548154811015156126f557fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b6031805460010190555b60408051600160a060020a038516815290517f93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d611179181900360200190a161142d8360026001611438565b6000903b1190565b602a80548290811061278d57fe5b600091825260209091200154905081565b60298054829081106127ac57fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529350909183018282801561229c5780601f106122715761010080835404028352916020019161229c565b61142d600b848484613e05565b600061282c848484612cad565b949350505050565b6000611247326122c9565b600081565b60006112476017613cc0565b600061285b33611f68565b151560011480612873575033600160a060020a038316145b151561287e57600080fd5b5060005b602f548110156129a15781600160a060020a0316602e828154811015156128a557fe5b600091825260209091200154600160a060020a0316141561299957602e8054829081106128ce57fe5b60009182526020909120018054600160a060020a0319169055602f5460001901811461298a57602e6001602f540381548110151561290857fe5b600091825260209091200154602e8054600160a060020a03909216918390811061292e57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550602e6001602f540381548110151561297057fe5b60009182526020909120018054600160a060020a03191690555b602f80546000190190556129a1565b600101612882565b60408051600160a060020a038416815290517f745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c9181900360200190a16129ea8260016000611438565b5050565b60095461142d906121ca906301000000900460ff166141f8565b600354600160a060020a031681565b6000611247600b613cc0565b6003546000908190600160a060020a0384811691161480612a4c5750602554600a60ff90911610155b15612a5a5760019150611c6c565b602554600061010090910460ff16111561244557600480546040805160e060020a6363e6ffdd028152600160a060020a0387811694820194909452905192909116916363e6ffdd916024808201926020929091908290030181600087803b158015612ac457600080fd5b505af1158015612ad8573d6000803e3d6000fd5b505050506040513d6020811015612aee57600080fd5b5051602554604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a916064808201926020929091908290030181600087803b15801561241257600080fd5b600a81565b612b796124d9565b1515612b8457600080fd5b602c5460ff1615612b9457600080fd5b8051608011612ba257600080fd5b8051612bb590602b90602084019061463e565b50602c805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316612bf961121c565b60408051600160a060020a038085168252831660208201526060918101828152602b80546002600019610100600184161502019091160493830184905292608083019084908015612c8b5780601f10612c6057610100808354040283529160200191612c8b565b820191906000526020600020905b815481529060010190602001808311612c6e57829003601f168201915b505094505050505060405180910390a150565b601754601a5460ff9091169082565b600060ff841615612cd257612ccb612cc4856141f8565b8484614295565b9050611c92565b5060009392505050565b600160a060020a031660009081526018602052604090205460ff1690565b600f5460125460ff9091169082565b612d11612834565b1515612d1c57600080fd5b6025805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b601980546000919083908110611cb457fe5b606060008060208451111515612e4f57505081518083015160008181526005602090815260409182902080548351601f600261010060018516150260001901909316929092049182018490048402810184019094528084529394939091830182828015612e435780601f10612e1857610100808354040283529160200191612e43565b820191906000526020600020905b815481529060010190602001808311612e2657829003601f168201915b50505050509250612f3d565b6006846040518082805190602001908083835b60208310612e815780518252601f199092019160209182019101612e62565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f6002600183161590980290950116959095049283018290048202880182019052818752929450925050830182828015612f355780601f10612f0a57610100808354040283529160200191612f35565b820191906000526020600020905b815481529060010190602001808311612f1857829003601f168201915b505050505092505b5050919050565b6032546101009004600160a060020a031681565b600454600160a060020a031681565b600080612f726146ac565b3360008181526010602081815260408084208054600a60ff8083168281068216808c5260648206819003831682038190038316968c0187905292546101009004821660020282168b8801819052988a9052969095529590950190910191821660ff1990941684179055929550935015801590612fef575060ff8316155b15612fff57612fff600f856142e9565b60408051308152600160a060020a038616602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a150505050565b613057612834565b151561306257600080fd5b60408051602080825260278054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156131015780601f106130d657610100808354040283529160200191613101565b820191906000526020600020905b8154815290600101906020018083116130e457829003601f168201915b50509250505060405180910390a1565b600b54600e5460ff9091169082565b600e5490565b600354600090600160a060020a031633148061314a575033600160a060020a038316145b151561315557600080fd5b5060005b6031548110156132785781600160a060020a031660308281548110151561317c57fe5b600091825260209091200154600160a060020a031614156132705760308054829081106131a557fe5b60009182526020909120018054600160a060020a03191690556031546000190181146132615760306001603154038154811015156131df57fe5b60009182526020909120015460308054600160a060020a03909216918390811061320557fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550603060016031540381548110151561324757fe5b60009182526020909120018054600160a060020a03191690555b60318054600019019055613278565b600101613159565b60408051600160a060020a038416815290517f2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b959181900360200190a16129ea8260026000611438565b601180546000919083908110611cb457fe5b600d80546000919083908110611cb457fe5b60006112476013613cc0565b60006001821515141561330e57613307836122c9565b90506116f2565b61330783612a23565b6027805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561229c5780601f106122715761010080835404028352916020019161229c565b6000600860ff83161061338457600080fd5b600083815260076020526040902060ff8316600881106133a057fe5b600891828204019190066004029054906101000a900463ffffffff16905092915050565b60008060008060008060008060006133da6124d9565b15156133e557600080fd5b896040516020018082805190602001908083835b602083106134185780518252601f1990920191602091820191016133f9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831061347b5780518252601f19909201916020918201910161345c565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902097506027604051602001808280546001816001161561010002031660029004801561350a5780601f106134e857610100808354040283529182019161350a565b820191906000526020600020905b8154815290600101906020018083116134f6575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831061354d5780518252601f19909201916020918201910161352e565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912099505050508787141561373a5760295415156135b5576040805160208101918290526000908190526135aa9160279161463e565b506000602855613660565b6000955060009450600093505b6029548410156136185784602a858154811015156135dc57fe5b9060005260206000200154111561360d57839550602a848154811015156135ff57fe5b906000526020600020015494505b6001909301926135c2565b602980548790811061362657fe5b90600052602060002001602790805460018160011615610100020316600290046136519291906145bd565b50602885905561366086614380565b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168b60006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156136f55781810151838201526020016136dd565b50505050905090810190601f1680156137225780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a16000985061393c565b6000199250600091505b60295482101561385957602980548390811061375c57fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156137c45780601f106137a25761010080835404028352918201916137c4565b820191906000526020600020905b8154815290600101906020018083116137b0575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106138075780518252601f1990920191602091820191016137e8565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912093505050508781141561384e5761384682614380565b819250613859565b600190910190613744565b60001983141561386857600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168b856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156138fc5781810151838201526020016138e4565b50505050905090810190601f1680156139295780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18298505b5050505050505050919050565b60008061395533611bf0565b151561396057600080fd5b83516020106139bb575050815180830151600081815260056020526040812091929161398b916146cb565b6000835111156139b657600082815260056020908152604090912084516139b49286019061463e565b505b613aa6565b6006846040518082805190602001908083835b602083106139ed5780518252601f1990920191602091820191016139ce565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220613a269250905060006146cb565b600083511115613aa657826006856040518082805190602001908083835b60208310613a635780518252601f199092019160209182019101613a44565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381019093208451613aa4959194919091019250905061463e565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c846040518080602001828103825283818151815260200191508051906020019080838360005b83811015613b05578181015183820152602001613aed565b50505050905090810190601f168015613b325780820380516001836020036101000a031916815260200191505b509250505060405180910390a150505050565b613b4e33611bf0565b1515613b5957600080fd5b600081815260076020526040812090613b72828261470f565b50506040805182815290517f87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f9181900360200190a150565b60125490565b606481565b61142d6013848484613e05565b600354600160a060020a0316321480613be55750600354600160a060020a031633145b1515613bf057600080fd5b600160a060020a0381161515613c0557600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a03166000908152600c602052604090205460ff1690565b600354600160a060020a0316321480613c685750600354600160a060020a031633145b1515613c7357600080fd5b6032805482151560ff19909116811790915560408051918252517f04c71e53d136838eea703132a77007b0526b9a7691cdb7a6017a93673f865cbb9181900360200190a150565b601e5490565b600080805b8360030154811015613dfe57613cff8460020182815481101515613ce557fe5b600091825260209091200154600160a060020a0316612777565b1515613df55760028401805482908110613d1557fe5b60009182526020909120018054600160a060020a0319169055600384015460019290920191600019018114613de457836002016001856003015403815481101515613d5c57fe5b600091825260209091200154600285018054600160a060020a039092169183908110613d8457fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550836002016001856003015403815481101515613dca57fe5b60009182526020909120018054600160a060020a03191690555b600384018054600019019055613df9565b6001015b613cc5565b5092915050565b600080600080600080613e166146ac565b6000806000613e2432611f68565b600480546040805160e060020a6363e6ffdd028152329381019390935251929c5060009b50600160a060020a0316995089916363e6ffdd9160248082019260209290919082900301818f87803b158015613e7d57600080fd5b505af1158015613e91573d6000803e3d6000fd5b505050506040513d6020811015613ea757600080fd5b8101908080519060200190929190505050965086955085600160a060020a0316637fb52f1a8f60000160009054906101000a900460ff168f60026040518463ffffffff1660e060020a028152600401808460ff1660ff16815260200183600160a060020a0316600160a060020a031681526020018260ff1660ff1681526020019350505050602060405180830381600087803b158015613f4657600080fd5b505af1158015613f5a573d6000803e3d6000fd5b505050506040513d6020811015613f7057600080fd5b810190808051906020019092919050505098508d60010160008e600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a900460ff169450600a8560ff16811515613fc957fe5b0660ff90811680865260648783160681900382166020870181905287030381166040860152600093508b92508216158015614008575089806140085750885b1561401257600192505b60ff8b16158015906140215750895b8015614043575060018460ff8e166003811061403957fe5b602002015160ff16145b156140515760019250600291505b60ff8b16158015906140605750885b8015614083575060028460ff8e166003811061407857fe5b602002015160ff1614155b156140915760019250600191505b60ff8b16158015906140a05750895b80156140a95750885b156140b75760019250600291505b8215156140c357600080fd5b600a60ff8d16600381106140d357fe5b602081049091015460ff601f9092166101000a9004811683029085908e16600381106140fb57fe5b60ff909216602092909202015283600260200201518460016020020151856000602002015101019050808e60010160008f600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508060ff16600014158015614179575060ff8516155b15614188576141888e8e6142e9565b60ff8116151561419e5761419c8e8e614482565b505b60408051308152600160a060020a038f16602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a15050505050505050505050505050565b60095460009060ff838116911614156142135750600f6112b9565b60095460ff838116610100909204161415614230575060136112b9565b60095460ff8381166201000090920416141561424e5750600b6112b9565b60095460ff83811664010000000090920416141561426e5750601b6112b9565b60095460ff838116630100000090920416141561428d575060176112b9565b50601f919050565b600160a060020a038216600090815260018401602052604081205460ff90811690600a908416600381106142c557fe5b60208104919091015460ff601f9092166101000a9004811691161015949350505050565b600282015460038301541015614342578082600201836003015481548110151561430f57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550614373565b60028201805460018101825560009182526020909120018054600160a060020a031916600160a060020a0383161790555b5060030180546001019055565b602980548290811061438e57fe5b9060005260206000200160006143a491906146cb565b602a8054829081106143b257fe5b6000918252602082200155602954600019018114614458576029805460001981019081106143dc57fe5b906000526020600020016029828154811015156143f557fe5b90600052602060002001908054600181600116156101000203166002900461441e9291906145bd565b50602a8054600019810190811061443157fe5b9060005260206000200154602a8281548110151561444b57fe5b6000918252602090912001555b602980549061446b906000198301614716565b50602a8054906129ea90600019830161473a565b50565b6000805b8360030154811015612cd25782600160a060020a031684600201828154811015156144ad57fe5b600091825260209091200154600160a060020a031614156145b557600284018054829081106144d857fe5b60009182526020909120018054600160a060020a031916905560038401546000190181146145a05783600201600185600301540381548110151561451857fe5b600091825260209091200154600285018054600160a060020a03909216918390811061454057fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555083600201600185600301540381548110151561458657fe5b60009182526020909120018054600160a060020a03191690555b60038401805460001901905560019150613dfe565b600101614486565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106145f65780548555614632565b8280016001018555821561463257600052602060002091601f016020900482015b82811115614632578254825591600101919060010190614617565b506115d192915061475a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061467f57805160ff1916838001178555614632565b82800160010185558215614632579182015b82811115614632578251825591602001919060010190614691565b6060604051908101604052806003906020820280388339509192915050565b50805460018160011615610100020316600290046000825580601f106146f1575061447f565b601f01602090049060005260206000209081019061447f919061475a565b5060009055565b81548183558181111561142d5760008381526020902061142d918101908301614774565b81548183558181111561142d5760008381526020902061142d9181019083015b61122991905b808211156115d15760008155600101614760565b61122991905b808211156115d157600061478e82826146cb565b5060010161477a5600a165627a7a72305820bb87a1446292947f9a9e739ff8036ba8fea596b5e604b24ce61ac941850bc8780029a165627a7a7230582099afd2d41b9dd42cd5731fe6db8e1009d92ecffd8ce062bde440a4cc846f05410029"

// DeployBaseGroupFactory deploys a new Ethereum contract, binding an instance of BaseGroupFactory to it.
func DeployBaseGroupFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseGroupFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseGroupFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseGroupFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseGroupFactory{BaseGroupFactoryCaller: BaseGroupFactoryCaller{contract: contract}, BaseGroupFactoryTransactor: BaseGroupFactoryTransactor{contract: contract}, BaseGroupFactoryFilterer: BaseGroupFactoryFilterer{contract: contract}}, nil
}

// BaseGroupFactory is an auto generated Go binding around an Ethereum contract.
type BaseGroupFactory struct {
	BaseGroupFactoryCaller     // Read-only binding to the contract
	BaseGroupFactoryTransactor // Write-only binding to the contract
	BaseGroupFactoryFilterer   // Log filterer for contract events
}

// BaseGroupFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseGroupFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseGroupFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseGroupFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseGroupFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseGroupFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseGroupFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseGroupFactorySession struct {
	Contract     *BaseGroupFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseGroupFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseGroupFactoryCallerSession struct {
	Contract *BaseGroupFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// BaseGroupFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseGroupFactoryTransactorSession struct {
	Contract     *BaseGroupFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// BaseGroupFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseGroupFactoryRaw struct {
	Contract *BaseGroupFactory // Generic contract binding to access the raw methods on
}

// BaseGroupFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseGroupFactoryCallerRaw struct {
	Contract *BaseGroupFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseGroupFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseGroupFactoryTransactorRaw struct {
	Contract *BaseGroupFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseGroupFactory creates a new instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactory(address common.Address, backend bind.ContractBackend) (*BaseGroupFactory, error) {
	contract, err := bindBaseGroupFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactory{BaseGroupFactoryCaller: BaseGroupFactoryCaller{contract: contract}, BaseGroupFactoryTransactor: BaseGroupFactoryTransactor{contract: contract}, BaseGroupFactoryFilterer: BaseGroupFactoryFilterer{contract: contract}}, nil
}

// NewBaseGroupFactoryCaller creates a new read-only instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseGroupFactoryCaller, error) {
	contract, err := bindBaseGroupFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryCaller{contract: contract}, nil
}

// NewBaseGroupFactoryTransactor creates a new write-only instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseGroupFactoryTransactor, error) {
	contract, err := bindBaseGroupFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryTransactor{contract: contract}, nil
}

// NewBaseGroupFactoryFilterer creates a new log filterer instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseGroupFactoryFilterer, error) {
	contract, err := bindBaseGroupFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryFilterer{contract: contract}, nil
}

// bindBaseGroupFactory binds a generic wrapper to an already deployed contract.
func bindBaseGroupFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseGroupFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseGroupFactory *BaseGroupFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseGroupFactory.Contract.BaseGroupFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseGroupFactory *BaseGroupFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.BaseGroupFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseGroupFactory *BaseGroupFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.BaseGroupFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseGroupFactory *BaseGroupFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseGroupFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseGroupFactory *BaseGroupFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseGroupFactory *BaseGroupFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseGroupFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactorySession) ContentSpace() (common.Address, error) {
	return _BaseGroupFactory.Contract.ContentSpace(&_BaseGroupFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseGroupFactory.Contract.ContentSpace(&_BaseGroupFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseGroupFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactorySession) Creator() (common.Address, error) {
	return _BaseGroupFactory.Contract.Creator(&_BaseGroupFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseGroupFactory.Contract.Creator(&_BaseGroupFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseGroupFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactorySession) Owner() (common.Address, error) {
	return _BaseGroupFactory.Contract.Owner(&_BaseGroupFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseGroupFactory.Contract.Owner(&_BaseGroupFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseGroupFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactorySession) Version() ([32]byte, error) {
	return _BaseGroupFactory.Contract.Version(&_BaseGroupFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseGroupFactory.Contract.Version(&_BaseGroupFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseGroupFactory.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactorySession) VersionAPI() ([32]byte, error) {
	return _BaseGroupFactory.Contract.VersionAPI(&_BaseGroupFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactoryCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseGroupFactory.Contract.VersionAPI(&_BaseGroupFactory.CallOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseGroupFactory *BaseGroupFactoryTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "createGroup")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseGroupFactory *BaseGroupFactorySession) CreateGroup() (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.CreateGroup(&_BaseGroupFactory.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseGroupFactory *BaseGroupFactoryTransactorSession) CreateGroup() (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.CreateGroup(&_BaseGroupFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseGroupFactory *BaseGroupFactorySession) Kill() (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.Kill(&_BaseGroupFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.Kill(&_BaseGroupFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseGroupFactory *BaseGroupFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.TransferCreatorship(&_BaseGroupFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.TransferCreatorship(&_BaseGroupFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseGroupFactory *BaseGroupFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.TransferOwnership(&_BaseGroupFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.Contract.TransferOwnership(&_BaseGroupFactory.TransactOpts, newOwner)
}

// BaseLibraryABI is the input ABI used to generate the binding from.
const BaseLibraryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"updateAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approvalRequestsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeReviewerGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addAccessorGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reviewerGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributorGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accessorGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeContributorGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"submitApprovalRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPendingApprovalRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addContributorGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_contract\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"approveContent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contentAddr\",\"type\":\"address\"}],\"name\":\"deleteContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvalRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reviewerGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addReviewerGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessorGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeAccessorGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"},{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"content_type\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"}],\"name\":\"ContentObjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"}],\"name\":\"ContentObjectDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ContributorGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ContributorGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ReviewerGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ReviewerGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"AccessorGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"AccessorGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operationCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"UnauthorizedOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"ApproveContentRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"ApproveContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addressKms\",\"type\":\"address\"}],\"name\":\"UpdateKmsAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// BaseLibraryFuncSigs maps the 4-byte function signature to its string representation.
var BaseLibraryFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"2c11f392": "accessorGroups(uint256)",
	"e5538fd2": "accessorGroupsLength()",
	"1d0f4351": "addAccessorGroup(address)",
	"0f58a786": "addContentType(address,address)",
	"679a9a3c": "addContributorGroup(address)",
	"dc3c29c0": "addReviewerGroup(address)",
	"32eaf21b": "addressKMS()",
	"8cb13c2e": "approvalRequests(uint256)",
	"16308394": "approvalRequestsLength()",
	"87e86b2c": "approveContent(address,bool,string)",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"0eaec2c5": "canContribute(address)",
	"81beeb64": "canEdit()",
	"cbcd4461": "canPublish()",
	"9b55f901": "canPublish(address)",
	"29d00219": "canReview(address)",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"1cdbee5a": "contentTypeContracts(address)",
	"991a3a7c": "contentTypes(uint256)",
	"c65bcbe2": "contentTypesLength()",
	"2393553b": "contributorGroups(uint256)",
	"470750bb": "contributorGroupsLength()",
	"331b86c0": "countVersionHashes()",
	"1e35d8fa": "createContent(address)",
	"02d05d3f": "creator()",
	"87fcd0b8": "deleteContent(address)",
	"e1a70717": "deleteVersion(string)",
	"1f2caaec": "findTypeByHash(bytes32)",
	"ac55c906": "getMeta(bytes)",
	"63dab9d4": "getPendingApprovalRequest(uint256)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"6380501f": "indexCategory()",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"2cf99422": "publish(address)",
	"e542b7cb": "putMeta(bytes,bytes)",
	"e8de515f": "removeAccessorGroup(address)",
	"fd089196": "removeContentType(address)",
	"386493e0": "removeContributorGroup(address)",
	"1b969895": "removeReviewerGroup(address)",
	"3dd71d99": "requiresReview()",
	"952e464b": "reviewerGroups(uint256)",
	"21770a84": "reviewerGroupsLength()",
	"c9e8e72d": "setAddressKMS(address)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"aa024e8b": "setVisibility(uint8)",
	"49102e61": "submitApprovalRequest()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"011e01a5": "updateAddressKMS(address)",
	"c287e0ed": "updateRequest()",
	"29dedde5": "validType(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
	"9cb121ba": "whitelistedType(address)",
}

// BaseLibraryBin is the compiled bytecode used for deploying new contracts.
var BaseLibraryBin = "0x608060408181527f4f776e61626c6532303230303231303131303130304d4c00000000000000000060009081557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006007556008805460ff191690911761ff00191690557f4564697461626c653230323030363236313830343030504f00000000000000006009557f436f6e7461696e657232303230303331363133353330304d4c0000000000000060105560138190557f426173654c69627261727932303230303331363133353230304d4c00000000006015556019819055601a819055601b819055601d55806145a98339810160405280516020909101516002805432600160a060020a03199182168117909255600380548216909217909155600480548216600160a060020a0393841617905560118054909116919092161790556008805461ffff1916610300179055614429806101806000396000f3006080604052600436106103495763ffffffff60e060020a600035041662821de3811461034b578063011e01a51461037c57806302d05d3f1461039d5780630eaec2c5146103b25780630f58a786146103e75780630fe1b5a21461040e578063100508a21461043b57806314cfabb314610466578063163083941461047b5780631b969895146104a25780631bf7a912146104c35780631cdbee5a146105445780631d0f4351146105655780631e35d8fa146105865780631f2caaec146105a757806321770a84146105bf57806322e564eb146105d45780632393553b1461060157806324d7806c1461061957806329adec141461063a57806329d002191461064f57806329dedde5146106705780632c11f392146106915780632cf99422146106a957806332eaf21b146106ca578063331b86c0146106df578063375a6e7c146106f4578063386493e0146107095780633dd71d991461072a57806340b87a261461073f57806341c0e1b514610754578063446e882614610769578063470750bb1461077157806349102e611461078657806354fd4d501461079b5780635f4fcae1146107b05780635f6a1301146107c5578063628449fd146107da5780636380501f1461086457806363dab9d414610879578063679a9a3c1461089157806367e5c3bf146108b25780636d2e4b1b146108d35780636e375427146108f45780637886f747146109095780637ca8f6181461092157806381beeb641461093957806387e86b2c1461094e57806387fcd0b8146109b95780638cb13c2e146109da5780638da5cb5b146109f2578063952e464b14610a0757806395a078e814610a1f57806397ac4fd214610a405780639867db7414610a55578063991a3a7c14610aae5780639b55f90114610ac65780639cb121ba14610ae7578063aa024e8b14610b08578063ac55c90614610b23578063af570c0414610b7c578063c287e0ed14610b91578063c65bcbe214610ba6578063c9e8e72d14610bbb578063cbcd446114610bdc578063dc3c29c014610bf1578063e02dd9c214610c12578063e1a7071714610c27578063e542b7cb14610c80578063e5538fd214610d17578063e8de515f14610d2c578063ef1d7dc214610d4d578063f2fde38b14610d62578063fd08919614610d83575b005b34801561035757600080fd5b50610360610da4565b60408051600160a060020a039092168252519081900360200190f35b34801561038857600080fd5b50610349600160a060020a0360043516610db4565b3480156103a957600080fd5b50610360610e21565b3480156103be57600080fd5b506103d3600160a060020a0360043516610e30565b604080519115158252519081900360200190f35b3480156103f357600080fd5b50610349600160a060020a0360043581169060243516610ead565b34801561041a57600080fd5b50610349600160a060020a036004351660ff60243581169060443516611022565b34801561044757600080fd5b506104506110f2565b6040805160ff9092168252519081900360200190f35b34801561047257600080fd5b506103d36110f7565b34801561048757600080fd5b50610490611196565b60408051918252519081900360200190f35b3480156104ae57600080fd5b506103d3600160a060020a036004351661119c565b604080516020600480358082013583810280860185019096528085526103d395369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506112959650505050505050565b34801561055057600080fd5b50610360600160a060020a03600435166113a3565b34801561057157600080fd5b50610349600160a060020a03600435166113be565b34801561059257600080fd5b50610360600160a060020a036004351661143b565b3480156105b357600080fd5b50610360600435611534565b3480156105cb57600080fd5b506104906117b8565b3480156105e057600080fd5b50610349600160a060020a036004351660ff602435811690604435166117be565b34801561060d57600080fd5b50610360600435611c9b565b34801561062557600080fd5b506103d3600160a060020a0360043516611cc3565b34801561064657600080fd5b50610450611cec565b34801561065b57600080fd5b506103d3600160a060020a0360043516611cf5565b34801561067c57600080fd5b506103d3600160a060020a0360043516611d78565b34801561069d57600080fd5b50610360600435611d96565b3480156106b557600080fd5b506103d3600160a060020a0360043516611da4565b3480156106d657600080fd5b50610360611edb565b3480156106eb57600080fd5b50610490611eea565b34801561070057600080fd5b506103d3611ef0565b34801561071557600080fd5b506103d3600160a060020a0360043516611ef9565b34801561073657600080fd5b506103d3611f73565b34801561074b57600080fd5b50610490611f7c565b34801561076057600080fd5b50610349611f82565b6103d3611fbe565b34801561077d57600080fd5b506104906121c2565b34801561079257600080fd5b506103d36121c8565b3480156107a757600080fd5b506104906123e1565b3480156107bc57600080fd5b506104906123e7565b3480156107d157600080fd5b506103496123ed565b3480156107e657600080fd5b506107ef61242b565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610829578181015183820152602001610811565b50505050905090810190601f1680156108565780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561087057600080fd5b506104506124b9565b34801561088557600080fd5b506103606004356124c7565b34801561089d57600080fd5b50610349600160a060020a0360043516612512565b3480156108be57600080fd5b506103d3600160a060020a036004351661258c565b3480156108df57600080fd5b50610349600160a060020a0360043516612727565b34801561090057600080fd5b506103d3612775565b34801561091557600080fd5b50610490600435612784565b34801561092d57600080fd5b506107ef6004356127a3565b34801561094557600080fd5b506103d3612817565b34801561095a57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526103d3948235600160a060020a031694602480351515953695946064949201919081908401838280828437509497506128229650505050505050565b3480156109c557600080fd5b50610349600160a060020a0360043516612b42565b3480156109e657600080fd5b50610360600435612be8565b3480156109fe57600080fd5b50610360612bf6565b348015610a1357600080fd5b50610360600435612c05565b348015610a2b57600080fd5b506103d3600160a060020a0360043516612c13565b348015610a4c57600080fd5b50610450612d72565b348015610a6157600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610349943694929360249392840191908190840183828082843750949750612d779650505050505050565b348015610aba57600080fd5b50610360600435612ea4565b348015610ad257600080fd5b506103d3600160a060020a0360043516612eb2565b348015610af357600080fd5b506103d3600160a060020a0360043516612ee0565b348015610b1457600080fd5b5061034960ff60043516612f37565b348015610b2f57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526107ef943694929360249392840191908190840183828082843750949750612fb19650505050505050565b348015610b8857600080fd5b5061036061315f565b348015610b9d57600080fd5b5061034961316e565b348015610bb257600080fd5b50610490613230565b348015610bc757600080fd5b50610349600160a060020a0360043516613236565b348015610be857600080fd5b506103d3613286565b348015610bfd57600080fd5b50610349600160a060020a03600435166132b8565b348015610c1e57600080fd5b506107ef613331565b348015610c3357600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261049094369492936024939284019190819084018382808284375094975061338c9650505050505050565b348015610c8c57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261034994369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506139119650505050505050565b348015610d2357600080fd5b50610490613b0d565b348015610d3857600080fd5b506103d3600160a060020a0360043516613b13565b348015610d5957600080fd5b50610450613bf6565b348015610d6e57600080fd5b50610349600160a060020a0360043516613bfb565b348015610d8f57600080fd5b506103d3600160a060020a0360043516613c60565b600454600160a060020a03165b90565b610dbc612817565b1515610dc757600080fd5b60118054600160a060020a031916600160a060020a03838116919091179182905560408051929091168252517f74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608916020908290030190a150565b600254600160a060020a031681565b6000610e3b8261258c565b80610ea55750610ea5826016805480602002602001604051908101604052809291908181526020018280548015610e9b57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610e7d575b5050505050613e03565b90505b919050565b600354600160a060020a0316321480610ed05750600354600160a060020a031633145b1515610edb57600080fd5b600160a060020a0380831660009081526014602052604090205416158015610f095750610f0782612ee0565b155b15610fb5576012546013541015610f5f57816012601354815481101515610f2c57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550610fab565b601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444018054600160a060020a031916600160a060020a0384161790555b6013805460010190555b600160a060020a038281166000818152601460209081526040918290208054600160a060020a0319169486169485179055815192835282019290925281517f280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7929181900390910190a15050565b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd9160248082019260209290919082900301818787803b15801561109257600080fd5b505af11580156110a6573d6000803e3d6000fd5b505050506040513d60208110156110bc57600080fd5b50519050600160a060020a03811615156110e0576110db8585856117be565b6110eb565b6110eb8185856117be565b5050505050565b600181565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e149160248082019260209290919082900301818887803b15801561116357600080fd5b505af1158015611177573d6000803e3d6000fd5b505050506040513d602081101561118d57600080fd5b505191505b5090565b601d5481565b6000806111a7612817565b15156111b257600080fd5b50601a546111c283601783613f04565b601a81905581111561128a5760408051600160a060020a038516815290517fdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb9181900360200190a161126e83601880548060200260200160405190810160405280929190818152602001828054801561126457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611246575b505050505061401e565b1515611281576112818360016000611022565b6001915061128f565b600091505b50919050565b60006112a033612c13565b15156112ab57600080fd5b7f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c730426040516020018083600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106113445780518252601f199092019160209182019101611325565b51815160001960209485036101000a019081169019919091161790526040805194909201849003842084526000908401819052838201523360608401526103e842026080840152519182900360a001935090915050a150600192915050565b601460205260009081526040902054600160a060020a031681565b60006113c8612817565b15156113d357600080fd5b50601b546113e382601883614077565b601b8190558110156114375760408051600160a060020a038416815290517f3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d4119181900360200190a161143782600180611022565b5050565b60048054604080517fbf4e088f0000000000000000000000000000000000000000000000000000000081523093810193909352600160a060020a03848116602485015290516000938493929092169163bf4e088f91604480830192602092919082900301818787803b1580156114b057600080fd5b505af11580156114c4573d6000803e3d6000fd5b505050506040513d60208110156114da57600080fd5b505160045460408051600160a060020a038085168252808816602083015290921682820152519192507fadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878919081900360600190a192915050565b600080805b6012548210156117ac57601280548390811061155157fe5b6000918252602091829020015460408051808401889052815180820385018152908201918290528051600160a060020a03909316945092909182918401908083835b602083106115b25780518252601f199092019160209182019101611593565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681600160a060020a031663e02dd9c26040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561162157600080fd5b505af1158015611635573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561165e57600080fd5b81019080805164010000000081111561167657600080fd5b8201602081018481111561168957600080fd5b81516401000000008111828201871017156116a357600080fd5b50509291905050506040516020018082805190602001908083835b602083106116dd5780518252601f1990920191602091820191016116be565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106117405780518252601f199092019160209182019101611721565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156117a157601280548390811061178557fe5b600091825260209091200154600160a060020a031692506117b1565b600190910190611539565b600092505b5050919050565b601a5481565b600083905080600160a060020a031663091600e66040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561180157600080fd5b505af1158015611815573d6000803e3d6000fd5b505050506040513d602081101561182b57600080fd5b5051600854610100900460ff908116911614156118d057604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b1580156118b357600080fd5b505af11580156118c7573d6000803e3d6000fd5b50505050611c95565b80600160a060020a03166312915a306040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561190e57600080fd5b505af1158015611922573d6000803e3d6000fd5b505050506040513d602081101561193857600080fd5b5051600854610100900460ff908116911614156119c057604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b1580156118b357600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156119fe57600080fd5b505af1158015611a12573d6000803e3d6000fd5b505050506040513d6020811015611a2857600080fd5b5051600854610100900460ff90811691161415611ab057604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b1580156118b357600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611aee57600080fd5b505af1158015611b02573d6000803e3d6000fd5b505050506040513d6020811015611b1857600080fd5b5051600854610100900460ff90811691161415611ba057604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b1580156118b357600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611bde57600080fd5b505af1158015611bf2573d6000803e3d6000fd5b505050506040513d6020811015611c0857600080fd5b5051600854610100900460ff90811691161415611c9057604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b1580156118b357600080fd5b600080fd5b50505050565b6016805482908110611ca957fe5b600091825260209091200154600160a060020a0316905081565b600354600090600160a060020a0383811691161415611ce457506001610ea8565b506000919050565b60085460ff1681565b600354600090600160a060020a0383811691161415611d1657506001610ea8565b610ea5826017805480602002602001604051908101604052809291908181526020018280548015610e9b57602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610e7d575050505050613e03565b600060135460001415611d8d57506001610ea8565b610ea582612ee0565b6018805482908110611ca957fe5b6000808033600160a060020a03851614611dbd57600080fd5b83915081600160a060020a0316638280dd8f60016040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b158015611e0a57600080fd5b505af1158015611e1e573d6000803e3d6000fd5b505050506040513d6020811015611e3457600080fd5b5050604080517f27c1c21d0000000000000000000000000000000000000000000000000000000081529051600092508291600160a060020a038516916327c1c21d9160048082019260209290919082900301818787803b158015611e9757600080fd5b505af1158015611eab573d6000803e3d6000fd5b505050506040513d6020811015611ec157600080fd5b50511315611ed457611ed16121c8565b90505b9392505050565b601154600160a060020a031681565b600c5490565b600f5460ff1681565b600080611f04612817565b1515611f0f57600080fd5b50601954611f1f83601683613f04565b601981905581111561128a5760408051600160a060020a038516815290517fbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c9181900360200190a161128183600080611022565b601a5460001090565b600b5481565b600354600160a060020a0316321480611fa55750600354600160a060020a031633145b1515611fb057600080fd5b600354600160a060020a0316ff5b6000611fc86110f7565b1515611fd357600080fd5b600f5460ff161515611fe457600080fd5b6000600a805460018160011615610100020316600290049050111561209357600c80546001818101808455600093909352600a805461205a937fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70192600261010091831615919091026000190190911604614244565b5050600b54600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501555b600e80546120b691600a9160026000196101006001841615020190911604614244565b5042600b556040805160208101918290526000908190526120d991600e916142c5565b50600f805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a031661211a610da4565b60408051600160a060020a038085168252831660208201526060918101828152600a805460026000196101006001841615020190911604938301849052926080830190849080156121ac5780601f10612181576101008083540402835291602001916121ac565b820191906000526020600020905b81548152906001019060200180831161218f57829003601f168201915b505094505050505060405180910390a150600190565b60195481565b600033806121d4611f73565b15156122aa5780600160a060020a0316638280dd8f60006040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b15801561222457600080fd5b505af1158015612238573d6000803e3d6000fd5b505050506040513d602081101561224e57600080fd5b505060408051600160a060020a038416815260016020820152606081830181905260009082015290517f70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b4429181900360a00190a1600192506123dc565b600160a060020a0382166000908152601e6020526040902054156122d157600092506123dc565b601c54601d5410156123225781601c601d548154811015156122ef57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555061236e565b601c80546001810182556000919091527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211018054600160a060020a031916600160a060020a0384161790555b601d8054600160a060020a0384166000818152601e60209081526040918290206001948501905584549093019093558251908152329181019190915281517f0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a929181900390910190a1600192505b505090565b60155481565b60015481565b6123f5612775565b151561240057600080fd5b60408051602081019182905260009081905261241e91600e916142c5565b50600f805460ff19169055565b600e805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156124b15780601f10612486576101008083540402835291602001916124b1565b820191906000526020600020905b81548152906001019060200180831161249457829003601f168201915b505050505081565b600854610100900460ff1681565b6000601d54600014806124dc575081601d5411155b156124e957506000610ea8565b601c8054839081106124f757fe5b600091825260209091200154600160a060020a031692915050565b600061251c612817565b151561252757600080fd5b5060195461253782601683614077565b60198190558110156114375760408051600160a060020a038416815290517f218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d619181900360200190a16114378260006001611022565b6003546000908190600160a060020a03848116911614806125b55750600854606460ff90911610155b156125c3576001915061128f565b600854600061010090910460ff16111561271e5760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a0387811694820194909452905192909116916363e6ffdd916024808201926020929091908290030181600087803b15801561264357600080fd5b505af1158015612657573d6000803e3d6000fd5b505050506040513d602081101561266d57600080fd5b5051600854604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a916064808201926020929091908290030181600087803b1580156126eb57600080fd5b505af11580156126ff573d6000803e3d6000fd5b505050506040513d602081101561271557600080fd5b5051915061128f565b6000915061128f565b600254600160a060020a0316321461273e57600080fd5b600160a060020a038116151561275357600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600061277f612817565b905090565b600d80548290811061279257fe5b600091825260209091200154905081565b600c8054829081106127b157fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156124b15780601f10612486576101008083540402835291602001916124b1565b600061277f3261258c565b60008060008060008061283432611cf5565b151560011461284257600080fd5b600160a060020a0389166000908152601e6020526040902054601c805460001990920196508a9550908690811061287557fe5b600091825260208083209091018054600160a060020a0319169055601d8054600019018155600160a060020a038c168352601e90915260408220919091555485101561296a57601c601d548154811015156128cc57fe5b600091825260209091200154601c8054600160a060020a0390921694508491879081106128f557fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550601c601d5481548110151561293457fe5b600091825260208083209091018054600160a060020a0319169055600160a060020a0385168252601e9052604090206001860190555b83600160a060020a03166327c1c21d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156129a857600080fd5b505af11580156129bc573d6000803e3d6000fd5b505050506040513d60208110156129d257600080fd5b505191506000821315612b3157600188151514156129f2575060006129f7565b506000195b83600160a060020a0316638280dd8f826040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b158015612a4057600080fd5b505af1158015612a54573d6000803e3d6000fd5b505050506040513d6020811015612a6a57600080fd5b505060408051600160a060020a038b16815289151560208281019190915260609282018381528a519383019390935289517f70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442938d938d938d93919291608084019185019080838360005b83811015612aec578181015183820152602001612ad4565b50505050905090810190601f168015612b195780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160019550612b36565b600095505b50505050509392505050565b600081905080600160a060020a03166341c0e1b56040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015612b8557600080fd5b505af1158015612b99573d6000803e3d6000fd5b505060045460408051600160a060020a038088168252909216602083015280517f36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e945091829003019150a15050565b601c805482908110611ca957fe5b600354600160a060020a031681565b6017805482908110611ca957fe5b6003546000908190600160a060020a0384811691161480612c3c5750600854600a60ff90911610155b15612c4a576001915061128f565b600854600061010090910460ff16111561271e5760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a0387811694820194909452905192909116916363e6ffdd916024808201926020929091908290030181600087803b158015612cca57600080fd5b505af1158015612cde573d6000803e3d6000fd5b505050506040513d6020811015612cf457600080fd5b5051600854604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a916064808201926020929091908290030181600087803b1580156126eb57600080fd5b600a81565b612d7f612775565b1515612d8a57600080fd5b600f5460ff1615612d9a57600080fd5b8051608011612da857600080fd5b8051612dbb90600e9060208401906142c5565b50600f805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316612dff610da4565b60408051600160a060020a038085168252831660208201526060918101828152600e80546002600019610100600184161502019091160493830184905292608083019084908015612e915780601f10612e6657610100808354040283529160200191612e91565b820191906000526020600020905b815481529060010190602001808311612e7457829003601f168201915b505094505050505060405180910390a150565b6012805482908110611ca957fe5b600354600090600160a060020a0383811691161480610ea5575050600354600160a060020a03163314919050565b600080805b601354811015612f305783600160a060020a0316601282815481101515612f0857fe5b600091825260209091200154600160a060020a03161415612f2857600191505b600101612ee5565b5092915050565b612f3f612817565b1515612f4a57600080fd5b6008805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b60606000806020845111151561306b57505081518083015160008181526005602090815260409182902080548351601f60026101006001851615026000190190931692909204918201849004840281018401909452808452939493909183018282801561305f5780601f106130345761010080835404028352916020019161305f565b820191906000526020600020905b81548152906001019060200180831161304257829003601f168201915b505050505092506117b1565b6006846040518082805190602001908083835b6020831061309d5780518252601f19909201916020918201910161307e565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156131515780601f1061312657610100808354040283529160200191613151565b820191906000526020600020905b81548152906001019060200180831161313457829003601f168201915b505050505092505050919050565b600454600160a060020a031681565b613176612817565b151561318157600080fd5b604080516020808252600a8054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156132205780601f106131f557610100808354040283529160200191613220565b820191906000526020600020905b81548152906001019060200180831161320357829003601f168201915b50509250505060405180910390a1565b60135481565b600354600160a060020a03163214806132595750600354600160a060020a031633145b151561326457600080fd5b60118054600160a060020a031916600160a060020a0392909216919091179055565b600354600090600160a060020a03163314806132a557506132a5612817565b156132b257506001610db1565b50600090565b60006132c2612817565b15156132cd57600080fd5b50601a546132dd82601783614077565b601a8190558110156114375760408051600160a060020a038416815290517f1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb9181900360200190a161143782600180611022565b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156124b15780601f10612486576101008083540402835291602001916124b1565b60008060008060008060008060006133a2612775565b15156133ad57600080fd5b896040516020018082805190602001908083835b602083106133e05780518252601f1990920191602091820191016133c1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106134435780518252601f199092019160209182019101613424565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209750600a60405160200180828054600181600116156101000203166002900480156134d25780601f106134b05761010080835404028352918201916134d2565b820191906000526020600020905b8154815290600101906020018083116134be575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106135155780518252601f1990920191602091820191016134f6565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912099505050508787141561370257600c54151561357d5760408051602081019182905260009081905261357291600a916142c5565b506000600b55613628565b6000955060009450600093505b600c548410156135e05784600d858154811015156135a457fe5b906000526020600020015411156135d557839550600d848154811015156135c757fe5b906000526020600020015494505b60019093019261358a565b600c8054879081106135ee57fe5b90600052602060002001600a9080546001816001161561010002031660029004613619929190614244565b50600b85905561362886614142565b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168b60006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156136bd5781810151838201526020016136a5565b50505050905090810190601f1680156136ea5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009850613904565b6000199250600091505b600c5482101561382157600c80548390811061372457fe5b90600052602060002001604051602001808280546001816001161561010002031660029004801561378c5780601f1061376a57610100808354040283529182019161378c565b820191906000526020600020905b815481529060010190602001808311613778575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106137cf5780518252601f1990920191602091820191016137b0565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209350505050878114156138165761380e82614142565b819250613821565b60019091019061370c565b60001983141561383057600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168b856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156138c45781810151838201526020016138ac565b50505050905090810190601f1680156138f15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18298505b5050505050505050919050565b60008061391d33611cc3565b151561392857600080fd5b8351602010613983575050815180830151600081815260056020526040812091929161395391614333565b60008351111561397e576000828152600560209081526040909120845161397c928601906142c5565b505b613a6e565b6006846040518082805190602001908083835b602083106139b55780518252601f199092019160209182019101613996565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092206139ee925090506000614333565b600083511115613a6e57826006856040518082805190602001908083835b60208310613a2b5780518252601f199092019160209182019101613a0c565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381019093208451613a6c95919491909101925090506142c5565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c846040518080602001828103825283818151815260200191508051906020019080838360005b83811015613acd578181015183820152602001613ab5565b50505050905090810190601f168015613afa5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150505050565b601b5481565b600080613b1e612817565b1515613b2957600080fd5b50601b54613b3983601883613f04565b601b81905581111561128a5760408051600160a060020a038516815290517fc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f0819181900360200190a1613be383601780548060200260200160405190810160405280929190818152602001828054801561126457602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161124657505050505061401e565b151561128a5761128a8360016000611022565b606481565b600354600160a060020a0316321480613c1e5750600354600160a060020a031633145b1515613c2957600080fd5b600160a060020a0381161515613c3e57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b60035460009081908190600160a060020a0316321480613c8a5750600354600160a060020a031633145b1515613c9557600080fd5b50506013546000190160005b6013548110156117ac5783600160a060020a0316601282815481101515613cc457fe5b600091825260209091200154600160a060020a03161415613dfb576012805482908110613ced57fe5b60009182526020909120018054600160a060020a0319169055808214613d92576012805483908110613d1b57fe5b60009182526020909120015460128054600160a060020a039092169183908110613d4157fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556012805483908110613d7857fe5b60009182526020909120018054600160a060020a03191690555b6013829055600160a060020a0384166000818152601460209081526040918290208054600160a060020a0319169055815192835290517fd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e29281900390910190a1600192506117b1565b600101613ca1565b600080805b8351821015613ef7578382815181101515613e1f57fe5b60209081029091010151600160a060020a031615613eec578382815181101515613e4557fe5b6020908102909101810151604080517f95a078e8000000000000000000000000000000000000000000000000000000008152600160a060020a0389811660048301529151929450908416926395a078e8926024808401938290030181600087803b158015613eb257600080fd5b505af1158015613ec6573d6000803e3d6000fd5b505050506040513d6020811015613edc57600080fd5b505115613eec5760019250613efc565b600190910190613e08565b600092505b505092915050565b6000805b82811015614012578381815481101515613f1e57fe5b600091825260209091200154600160a060020a038681169116141561400a578381815481101515613f4b57fe5b60009182526020909120018054600160a060020a031916905560001983018114613fff578360018403815481101515613f8057fe5b6000918252602090912001548454600160a060020a0390911690859083908110613fa657fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055508360018403815481101515613fe557fe5b60009182526020909120018054600160a060020a03191690555b600183039150614016565b600101613f08565b8291505b509392505050565b6000805b825181101561406d57828181518110151561403957fe5b90602001906020020151600160a060020a031684600160a060020a031614156140655760019150612f30565b600101614022565b5060009392505050565b6000805b828110156140c057838181548110151561409157fe5b600091825260209091200154600160a060020a03868116911614156140b857829150614016565b60010161407b565b835483101561410b578484848154811015156140d857fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550614137565b8354600181018555600085815260209020018054600160a060020a031916600160a060020a0387161790555b505060010192915050565b600c80548290811061415057fe5b9060005260206000200160006141669190614333565b600d80548290811061417457fe5b6000918252602082200155600c5460001901811461421a57600c8054600019810190811061419e57fe5b90600052602060002001600c828154811015156141b757fe5b9060005260206000200190805460018160011615610100020316600290046141e0929190614244565b50600d805460001981019081106141f357fe5b9060005260206000200154600d8281548110151561420d57fe5b6000918252602090912001555b600c80549061422d906000198301614377565b50600d8054906114379060001983016143a0565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061427d57805485556142b9565b828001600101855582156142b957600052602060002091601f016020900482015b828111156142b957825482559160010191906001019061429e565b506111929291506143c0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061430657805160ff19168380011785556142b9565b828001600101855582156142b9579182015b828111156142b9578251825591602001919060010190614318565b50805460018160011615610100020316600290046000825580601f106143595750614241565b601f01602090049060005260206000209081019061424191906143c0565b81548183558181111561439b5760008381526020902061439b9181019083016143da565b505050565b81548183558181111561439b5760008381526020902061439b9181019083015b610db191905b8082111561119257600081556001016143c6565b610db191905b808211156111925760006143f48282614333565b506001016143e05600a165627a7a7230582037d5d2c8895f85741917f0ce1bcf4ec23380e8ca2307759602b3351f8ca4c5aa0029"

// DeployBaseLibrary deploys a new Ethereum contract, binding an instance of BaseLibrary to it.
func DeployBaseLibrary(auth *bind.TransactOpts, backend bind.ContractBackend, address_KMS common.Address, content_space common.Address) (common.Address, *types.Transaction, *BaseLibrary, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseLibraryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseLibraryBin), backend, address_KMS, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseLibrary{BaseLibraryCaller: BaseLibraryCaller{contract: contract}, BaseLibraryTransactor: BaseLibraryTransactor{contract: contract}, BaseLibraryFilterer: BaseLibraryFilterer{contract: contract}}, nil
}

// BaseLibrary is an auto generated Go binding around an Ethereum contract.
type BaseLibrary struct {
	BaseLibraryCaller     // Read-only binding to the contract
	BaseLibraryTransactor // Write-only binding to the contract
	BaseLibraryFilterer   // Log filterer for contract events
}

// BaseLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseLibrarySession struct {
	Contract     *BaseLibrary      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseLibraryCallerSession struct {
	Contract *BaseLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// BaseLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseLibraryTransactorSession struct {
	Contract     *BaseLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// BaseLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseLibraryRaw struct {
	Contract *BaseLibrary // Generic contract binding to access the raw methods on
}

// BaseLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseLibraryCallerRaw struct {
	Contract *BaseLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseLibraryTransactorRaw struct {
	Contract *BaseLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseLibrary creates a new instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibrary(address common.Address, backend bind.ContractBackend) (*BaseLibrary, error) {
	contract, err := bindBaseLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseLibrary{BaseLibraryCaller: BaseLibraryCaller{contract: contract}, BaseLibraryTransactor: BaseLibraryTransactor{contract: contract}, BaseLibraryFilterer: BaseLibraryFilterer{contract: contract}}, nil
}

// NewBaseLibraryCaller creates a new read-only instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryCaller(address common.Address, caller bind.ContractCaller) (*BaseLibraryCaller, error) {
	contract, err := bindBaseLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryCaller{contract: contract}, nil
}

// NewBaseLibraryTransactor creates a new write-only instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseLibraryTransactor, error) {
	contract, err := bindBaseLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryTransactor{contract: contract}, nil
}

// NewBaseLibraryFilterer creates a new log filterer instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseLibraryFilterer, error) {
	contract, err := bindBaseLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFilterer{contract: contract}, nil
}

// bindBaseLibrary binds a generic wrapper to an already deployed contract.
func bindBaseLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseLibrary *BaseLibraryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseLibrary.Contract.BaseLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseLibrary *BaseLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.Contract.BaseLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseLibrary *BaseLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseLibrary.Contract.BaseLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseLibrary *BaseLibraryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseLibrary *BaseLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseLibrary *BaseLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseLibrary.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseLibrary *BaseLibrarySession) CANACCESS() (uint8, error) {
	return _BaseLibrary.Contract.CANACCESS(&_BaseLibrary.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCallerSession) CANACCESS() (uint8, error) {
	return _BaseLibrary.Contract.CANACCESS(&_BaseLibrary.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseLibrary *BaseLibrarySession) CANEDIT() (uint8, error) {
	return _BaseLibrary.Contract.CANEDIT(&_BaseLibrary.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCallerSession) CANEDIT() (uint8, error) {
	return _BaseLibrary.Contract.CANEDIT(&_BaseLibrary.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseLibrary *BaseLibrarySession) CANSEE() (uint8, error) {
	return _BaseLibrary.Contract.CANSEE(&_BaseLibrary.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCallerSession) CANSEE() (uint8, error) {
	return _BaseLibrary.Contract.CANSEE(&_BaseLibrary.CallOpts)
}

// AccessorGroups is a free data retrieval call binding the contract method 0x2c11f392.
//
// Solidity: function accessorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) AccessorGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "accessorGroups", arg0)
	return *ret0, err
}

// AccessorGroups is a free data retrieval call binding the contract method 0x2c11f392.
//
// Solidity: function accessorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) AccessorGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.AccessorGroups(&_BaseLibrary.CallOpts, arg0)
}

// AccessorGroups is a free data retrieval call binding the contract method 0x2c11f392.
//
// Solidity: function accessorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) AccessorGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.AccessorGroups(&_BaseLibrary.CallOpts, arg0)
}

// AccessorGroupsLength is a free data retrieval call binding the contract method 0xe5538fd2.
//
// Solidity: function accessorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) AccessorGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "accessorGroupsLength")
	return *ret0, err
}

// AccessorGroupsLength is a free data retrieval call binding the contract method 0xe5538fd2.
//
// Solidity: function accessorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) AccessorGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.AccessorGroupsLength(&_BaseLibrary.CallOpts)
}

// AccessorGroupsLength is a free data retrieval call binding the contract method 0xe5538fd2.
//
// Solidity: function accessorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) AccessorGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.AccessorGroupsLength(&_BaseLibrary.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) AddressKMS() (common.Address, error) {
	return _BaseLibrary.Contract.AddressKMS(&_BaseLibrary.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) AddressKMS() (common.Address, error) {
	return _BaseLibrary.Contract.AddressKMS(&_BaseLibrary.CallOpts)
}

// ApprovalRequests is a free data retrieval call binding the contract method 0x8cb13c2e.
//
// Solidity: function approvalRequests(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ApprovalRequests(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "approvalRequests", arg0)
	return *ret0, err
}

// ApprovalRequests is a free data retrieval call binding the contract method 0x8cb13c2e.
//
// Solidity: function approvalRequests(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ApprovalRequests(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ApprovalRequests(&_BaseLibrary.CallOpts, arg0)
}

// ApprovalRequests is a free data retrieval call binding the contract method 0x8cb13c2e.
//
// Solidity: function approvalRequests(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ApprovalRequests(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ApprovalRequests(&_BaseLibrary.CallOpts, arg0)
}

// ApprovalRequestsLength is a free data retrieval call binding the contract method 0x16308394.
//
// Solidity: function approvalRequestsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ApprovalRequestsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "approvalRequestsLength")
	return *ret0, err
}

// ApprovalRequestsLength is a free data retrieval call binding the contract method 0x16308394.
//
// Solidity: function approvalRequestsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) ApprovalRequestsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ApprovalRequestsLength(&_BaseLibrary.CallOpts)
}

// ApprovalRequestsLength is a free data retrieval call binding the contract method 0x16308394.
//
// Solidity: function approvalRequestsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) ApprovalRequestsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ApprovalRequestsLength(&_BaseLibrary.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanCommit() (bool, error) {
	return _BaseLibrary.Contract.CanCommit(&_BaseLibrary.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanCommit() (bool, error) {
	return _BaseLibrary.Contract.CanCommit(&_BaseLibrary.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanConfirm() (bool, error) {
	return _BaseLibrary.Contract.CanConfirm(&_BaseLibrary.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanConfirm() (bool, error) {
	return _BaseLibrary.Contract.CanConfirm(&_BaseLibrary.CallOpts)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canContribute", _candidate)
	return *ret0, err
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanContribute(&_BaseLibrary.CallOpts, _candidate)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanContribute(&_BaseLibrary.CallOpts, _candidate)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanEdit() (bool, error) {
	return _BaseLibrary.Contract.CanEdit(&_BaseLibrary.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanEdit() (bool, error) {
	return _BaseLibrary.Contract.CanEdit(&_BaseLibrary.CallOpts)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canPublish", _candidate)
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanPublish(&_BaseLibrary.CallOpts, _candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanPublish(&_BaseLibrary.CallOpts, _candidate)
}

// CanPublish0 is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanPublish0(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canPublish0")
	return *ret0, err
}

// CanPublish0 is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanPublish0() (bool, error) {
	return _BaseLibrary.Contract.CanPublish0(&_BaseLibrary.CallOpts)
}

// CanPublish0 is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanPublish0() (bool, error) {
	return _BaseLibrary.Contract.CanPublish0(&_BaseLibrary.CallOpts)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanReview(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "canReview", _candidate)
	return *ret0, err
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CanReview(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanReview(&_BaseLibrary.CallOpts, _candidate)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CanReview(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.CanReview(&_BaseLibrary.CallOpts, _candidate)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) CommitPending() (bool, error) {
	return _BaseLibrary.Contract.CommitPending(&_BaseLibrary.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) CommitPending() (bool, error) {
	return _BaseLibrary.Contract.CommitPending(&_BaseLibrary.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ContentSpace() (common.Address, error) {
	return _BaseLibrary.Contract.ContentSpace(&_BaseLibrary.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseLibrary.Contract.ContentSpace(&_BaseLibrary.CallOpts)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contentTypeContracts", arg0)
	return *ret0, err
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseLibrary.Contract.ContentTypeContracts(&_BaseLibrary.CallOpts, arg0)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseLibrary.Contract.ContentTypeContracts(&_BaseLibrary.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contentTypes", arg0)
	return *ret0, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ContentTypes(&_BaseLibrary.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ContentTypes(&_BaseLibrary.CallOpts, arg0)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contentTypesLength")
	return *ret0, err
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) ContentTypesLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ContentTypesLength(&_BaseLibrary.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) ContentTypesLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ContentTypesLength(&_BaseLibrary.CallOpts)
}

// ContributorGroups is a free data retrieval call binding the contract method 0x2393553b.
//
// Solidity: function contributorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContributorGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contributorGroups", arg0)
	return *ret0, err
}

// ContributorGroups is a free data retrieval call binding the contract method 0x2393553b.
//
// Solidity: function contributorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ContributorGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ContributorGroups(&_BaseLibrary.CallOpts, arg0)
}

// ContributorGroups is a free data retrieval call binding the contract method 0x2393553b.
//
// Solidity: function contributorGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ContributorGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ContributorGroups(&_BaseLibrary.CallOpts, arg0)
}

// ContributorGroupsLength is a free data retrieval call binding the contract method 0x470750bb.
//
// Solidity: function contributorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ContributorGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "contributorGroupsLength")
	return *ret0, err
}

// ContributorGroupsLength is a free data retrieval call binding the contract method 0x470750bb.
//
// Solidity: function contributorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) ContributorGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ContributorGroupsLength(&_BaseLibrary.CallOpts)
}

// ContributorGroupsLength is a free data retrieval call binding the contract method 0x470750bb.
//
// Solidity: function contributorGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) ContributorGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ContributorGroupsLength(&_BaseLibrary.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) CountVersionHashes() (*big.Int, error) {
	return _BaseLibrary.Contract.CountVersionHashes(&_BaseLibrary.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseLibrary.Contract.CountVersionHashes(&_BaseLibrary.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) Creator() (common.Address, error) {
	return _BaseLibrary.Contract.Creator(&_BaseLibrary.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) Creator() (common.Address, error) {
	return _BaseLibrary.Contract.Creator(&_BaseLibrary.CallOpts)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "findTypeByHash", typeHash)
	return *ret0, err
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseLibrary.Contract.FindTypeByHash(&_BaseLibrary.CallOpts, typeHash)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseLibrary.Contract.FindTypeByHash(&_BaseLibrary.CallOpts, typeHash)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseLibrary *BaseLibraryCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseLibrary *BaseLibrarySession) GetMeta(key []byte) ([]byte, error) {
	return _BaseLibrary.Contract.GetMeta(&_BaseLibrary.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseLibrary *BaseLibraryCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseLibrary.Contract.GetMeta(&_BaseLibrary.CallOpts, key)
}

// GetPendingApprovalRequest is a free data retrieval call binding the contract method 0x63dab9d4.
//
// Solidity: function getPendingApprovalRequest(uint256 index) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) GetPendingApprovalRequest(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "getPendingApprovalRequest", index)
	return *ret0, err
}

// GetPendingApprovalRequest is a free data retrieval call binding the contract method 0x63dab9d4.
//
// Solidity: function getPendingApprovalRequest(uint256 index) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) GetPendingApprovalRequest(index *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.GetPendingApprovalRequest(&_BaseLibrary.CallOpts, index)
}

// GetPendingApprovalRequest is a free data retrieval call binding the contract method 0x63dab9d4.
//
// Solidity: function getPendingApprovalRequest(uint256 index) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) GetPendingApprovalRequest(index *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.GetPendingApprovalRequest(&_BaseLibrary.CallOpts, index)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.HasAccess(&_BaseLibrary.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.HasAccess(&_BaseLibrary.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.HasEditorRight(&_BaseLibrary.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.HasEditorRight(&_BaseLibrary.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseLibrary *BaseLibrarySession) IndexCategory() (uint8, error) {
	return _BaseLibrary.Contract.IndexCategory(&_BaseLibrary.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCallerSession) IndexCategory() (uint8, error) {
	return _BaseLibrary.Contract.IndexCategory(&_BaseLibrary.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.IsAdmin(&_BaseLibrary.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseLibrary.Contract.IsAdmin(&_BaseLibrary.CallOpts, _candidate)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseLibrary *BaseLibraryCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseLibrary *BaseLibrarySession) ObjectHash() (string, error) {
	return _BaseLibrary.Contract.ObjectHash(&_BaseLibrary.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseLibrary *BaseLibraryCallerSession) ObjectHash() (string, error) {
	return _BaseLibrary.Contract.ObjectHash(&_BaseLibrary.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) ObjectTimestamp() (*big.Int, error) {
	return _BaseLibrary.Contract.ObjectTimestamp(&_BaseLibrary.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseLibrary.Contract.ObjectTimestamp(&_BaseLibrary.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) Owner() (common.Address, error) {
	return _BaseLibrary.Contract.Owner(&_BaseLibrary.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) Owner() (common.Address, error) {
	return _BaseLibrary.Contract.Owner(&_BaseLibrary.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ParentAddress() (common.Address, error) {
	return _BaseLibrary.Contract.ParentAddress(&_BaseLibrary.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ParentAddress() (common.Address, error) {
	return _BaseLibrary.Contract.ParentAddress(&_BaseLibrary.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseLibrary *BaseLibraryCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseLibrary *BaseLibrarySession) PendingHash() (string, error) {
	return _BaseLibrary.Contract.PendingHash(&_BaseLibrary.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseLibrary *BaseLibraryCallerSession) PendingHash() (string, error) {
	return _BaseLibrary.Contract.PendingHash(&_BaseLibrary.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "requiresReview")
	return *ret0, err
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) RequiresReview() (bool, error) {
	return _BaseLibrary.Contract.RequiresReview(&_BaseLibrary.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) RequiresReview() (bool, error) {
	return _BaseLibrary.Contract.RequiresReview(&_BaseLibrary.CallOpts)
}

// ReviewerGroups is a free data retrieval call binding the contract method 0x952e464b.
//
// Solidity: function reviewerGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCaller) ReviewerGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "reviewerGroups", arg0)
	return *ret0, err
}

// ReviewerGroups is a free data retrieval call binding the contract method 0x952e464b.
//
// Solidity: function reviewerGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibrarySession) ReviewerGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ReviewerGroups(&_BaseLibrary.CallOpts, arg0)
}

// ReviewerGroups is a free data retrieval call binding the contract method 0x952e464b.
//
// Solidity: function reviewerGroups(uint256 ) constant returns(address)
func (_BaseLibrary *BaseLibraryCallerSession) ReviewerGroups(arg0 *big.Int) (common.Address, error) {
	return _BaseLibrary.Contract.ReviewerGroups(&_BaseLibrary.CallOpts, arg0)
}

// ReviewerGroupsLength is a free data retrieval call binding the contract method 0x21770a84.
//
// Solidity: function reviewerGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ReviewerGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "reviewerGroupsLength")
	return *ret0, err
}

// ReviewerGroupsLength is a free data retrieval call binding the contract method 0x21770a84.
//
// Solidity: function reviewerGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) ReviewerGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ReviewerGroupsLength(&_BaseLibrary.CallOpts)
}

// ReviewerGroupsLength is a free data retrieval call binding the contract method 0x21770a84.
//
// Solidity: function reviewerGroupsLength() constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) ReviewerGroupsLength() (*big.Int, error) {
	return _BaseLibrary.Contract.ReviewerGroupsLength(&_BaseLibrary.CallOpts)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "validType", content_type)
	return *ret0, err
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) ValidType(content_type common.Address) (bool, error) {
	return _BaseLibrary.Contract.ValidType(&_BaseLibrary.CallOpts, content_type)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseLibrary.Contract.ValidType(&_BaseLibrary.CallOpts, content_type)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibrary *BaseLibraryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibrary *BaseLibrarySession) Version() ([32]byte, error) {
	return _BaseLibrary.Contract.Version(&_BaseLibrary.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibrary *BaseLibraryCallerSession) Version() ([32]byte, error) {
	return _BaseLibrary.Contract.Version(&_BaseLibrary.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseLibrary *BaseLibraryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseLibrary *BaseLibrarySession) VersionAPI() ([32]byte, error) {
	return _BaseLibrary.Contract.VersionAPI(&_BaseLibrary.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseLibrary *BaseLibraryCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseLibrary.Contract.VersionAPI(&_BaseLibrary.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseLibrary *BaseLibraryCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseLibrary *BaseLibrarySession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseLibrary.Contract.VersionHashes(&_BaseLibrary.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseLibrary *BaseLibraryCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseLibrary.Contract.VersionHashes(&_BaseLibrary.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseLibrary *BaseLibrarySession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseLibrary.Contract.VersionTimestamp(&_BaseLibrary.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseLibrary *BaseLibraryCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseLibrary.Contract.VersionTimestamp(&_BaseLibrary.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseLibrary *BaseLibrarySession) Visibility() (uint8, error) {
	return _BaseLibrary.Contract.Visibility(&_BaseLibrary.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseLibrary *BaseLibraryCallerSession) Visibility() (uint8, error) {
	return _BaseLibrary.Contract.Visibility(&_BaseLibrary.CallOpts)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibraryCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseLibrary.contract.Call(opts, out, "whitelistedType", content_type)
	return *ret0, err
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibrarySession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseLibrary.Contract.WhitelistedType(&_BaseLibrary.CallOpts, content_type)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseLibrary *BaseLibraryCallerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseLibrary.Contract.WhitelistedType(&_BaseLibrary.CallOpts, content_type)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) AccessRequestV3(opts *bind.TransactOpts, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "accessRequestV3", customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseLibrary *BaseLibrarySession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AccessRequestV3(&_BaseLibrary.TransactOpts, customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AccessRequestV3(&_BaseLibrary.TransactOpts, customValues, stakeholders)
}

// AddAccessorGroup is a paid mutator transaction binding the contract method 0x1d0f4351.
//
// Solidity: function addAccessorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddAccessorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addAccessorGroup", group)
}

// AddAccessorGroup is a paid mutator transaction binding the contract method 0x1d0f4351.
//
// Solidity: function addAccessorGroup(address group) returns()
func (_BaseLibrary *BaseLibrarySession) AddAccessorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddAccessorGroup(&_BaseLibrary.TransactOpts, group)
}

// AddAccessorGroup is a paid mutator transaction binding the contract method 0x1d0f4351.
//
// Solidity: function addAccessorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) AddAccessorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddAccessorGroup(&_BaseLibrary.TransactOpts, group)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseLibrary *BaseLibrarySession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddContentType(&_BaseLibrary.TransactOpts, content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddContentType(&_BaseLibrary.TransactOpts, content_type, content_contract)
}

// AddContributorGroup is a paid mutator transaction binding the contract method 0x679a9a3c.
//
// Solidity: function addContributorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddContributorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addContributorGroup", group)
}

// AddContributorGroup is a paid mutator transaction binding the contract method 0x679a9a3c.
//
// Solidity: function addContributorGroup(address group) returns()
func (_BaseLibrary *BaseLibrarySession) AddContributorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddContributorGroup(&_BaseLibrary.TransactOpts, group)
}

// AddContributorGroup is a paid mutator transaction binding the contract method 0x679a9a3c.
//
// Solidity: function addContributorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) AddContributorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddContributorGroup(&_BaseLibrary.TransactOpts, group)
}

// AddReviewerGroup is a paid mutator transaction binding the contract method 0xdc3c29c0.
//
// Solidity: function addReviewerGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddReviewerGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addReviewerGroup", group)
}

// AddReviewerGroup is a paid mutator transaction binding the contract method 0xdc3c29c0.
//
// Solidity: function addReviewerGroup(address group) returns()
func (_BaseLibrary *BaseLibrarySession) AddReviewerGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddReviewerGroup(&_BaseLibrary.TransactOpts, group)
}

// AddReviewerGroup is a paid mutator transaction binding the contract method 0xdc3c29c0.
//
// Solidity: function addReviewerGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) AddReviewerGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.AddReviewerGroup(&_BaseLibrary.TransactOpts, group)
}

// ApproveContent is a paid mutator transaction binding the contract method 0x87e86b2c.
//
// Solidity: function approveContent(address content_contract, bool approved, string note) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) ApproveContent(opts *bind.TransactOpts, content_contract common.Address, approved bool, note string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "approveContent", content_contract, approved, note)
}

// ApproveContent is a paid mutator transaction binding the contract method 0x87e86b2c.
//
// Solidity: function approveContent(address content_contract, bool approved, string note) returns(bool)
func (_BaseLibrary *BaseLibrarySession) ApproveContent(content_contract common.Address, approved bool, note string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.ApproveContent(&_BaseLibrary.TransactOpts, content_contract, approved, note)
}

// ApproveContent is a paid mutator transaction binding the contract method 0x87e86b2c.
//
// Solidity: function approveContent(address content_contract, bool approved, string note) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) ApproveContent(content_contract common.Address, approved bool, note string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.ApproveContent(&_BaseLibrary.TransactOpts, content_contract, approved, note)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseLibrary *BaseLibraryTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseLibrary *BaseLibrarySession) ClearPending() (*types.Transaction, error) {
	return _BaseLibrary.Contract.ClearPending(&_BaseLibrary.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseLibrary *BaseLibraryTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseLibrary.Contract.ClearPending(&_BaseLibrary.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseLibrary *BaseLibraryTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseLibrary *BaseLibrarySession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.Commit(&_BaseLibrary.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.Commit(&_BaseLibrary.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseLibrary *BaseLibrarySession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseLibrary.Contract.ConfirmCommit(&_BaseLibrary.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseLibrary.Contract.ConfirmCommit(&_BaseLibrary.TransactOpts)
}

// CreateContent is a paid mutator transaction binding the contract method 0x1e35d8fa.
//
// Solidity: function createContent(address content_type) returns(address)
func (_BaseLibrary *BaseLibraryTransactor) CreateContent(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "createContent", content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0x1e35d8fa.
//
// Solidity: function createContent(address content_type) returns(address)
func (_BaseLibrary *BaseLibrarySession) CreateContent(content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.CreateContent(&_BaseLibrary.TransactOpts, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0x1e35d8fa.
//
// Solidity: function createContent(address content_type) returns(address)
func (_BaseLibrary *BaseLibraryTransactorSession) CreateContent(content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.CreateContent(&_BaseLibrary.TransactOpts, content_type)
}

// DeleteContent is a paid mutator transaction binding the contract method 0x87fcd0b8.
//
// Solidity: function deleteContent(address _contentAddr) returns()
func (_BaseLibrary *BaseLibraryTransactor) DeleteContent(opts *bind.TransactOpts, _contentAddr common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "deleteContent", _contentAddr)
}

// DeleteContent is a paid mutator transaction binding the contract method 0x87fcd0b8.
//
// Solidity: function deleteContent(address _contentAddr) returns()
func (_BaseLibrary *BaseLibrarySession) DeleteContent(_contentAddr common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.DeleteContent(&_BaseLibrary.TransactOpts, _contentAddr)
}

// DeleteContent is a paid mutator transaction binding the contract method 0x87fcd0b8.
//
// Solidity: function deleteContent(address _contentAddr) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) DeleteContent(_contentAddr common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.DeleteContent(&_BaseLibrary.TransactOpts, _contentAddr)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseLibrary *BaseLibraryTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseLibrary *BaseLibrarySession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.DeleteVersion(&_BaseLibrary.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseLibrary *BaseLibraryTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseLibrary.Contract.DeleteVersion(&_BaseLibrary.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibrary *BaseLibraryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibrary *BaseLibrarySession) Kill() (*types.Transaction, error) {
	return _BaseLibrary.Contract.Kill(&_BaseLibrary.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibrary *BaseLibraryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseLibrary.Contract.Kill(&_BaseLibrary.TransactOpts)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "publish", contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseLibrary *BaseLibrarySession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.Publish(&_BaseLibrary.TransactOpts, contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.Publish(&_BaseLibrary.TransactOpts, contentObj)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseLibrary *BaseLibraryTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseLibrary *BaseLibrarySession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseLibrary.Contract.PutMeta(&_BaseLibrary.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseLibrary.Contract.PutMeta(&_BaseLibrary.TransactOpts, key, value)
}

// RemoveAccessorGroup is a paid mutator transaction binding the contract method 0xe8de515f.
//
// Solidity: function removeAccessorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveAccessorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeAccessorGroup", group)
}

// RemoveAccessorGroup is a paid mutator transaction binding the contract method 0xe8de515f.
//
// Solidity: function removeAccessorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibrarySession) RemoveAccessorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveAccessorGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveAccessorGroup is a paid mutator transaction binding the contract method 0xe8de515f.
//
// Solidity: function removeAccessorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) RemoveAccessorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveAccessorGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseLibrary *BaseLibrarySession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveContentType(&_BaseLibrary.TransactOpts, content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveContentType(&_BaseLibrary.TransactOpts, content_type)
}

// RemoveContributorGroup is a paid mutator transaction binding the contract method 0x386493e0.
//
// Solidity: function removeContributorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveContributorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeContributorGroup", group)
}

// RemoveContributorGroup is a paid mutator transaction binding the contract method 0x386493e0.
//
// Solidity: function removeContributorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibrarySession) RemoveContributorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveContributorGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveContributorGroup is a paid mutator transaction binding the contract method 0x386493e0.
//
// Solidity: function removeContributorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) RemoveContributorGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveContributorGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveReviewerGroup is a paid mutator transaction binding the contract method 0x1b969895.
//
// Solidity: function removeReviewerGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveReviewerGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeReviewerGroup", group)
}

// RemoveReviewerGroup is a paid mutator transaction binding the contract method 0x1b969895.
//
// Solidity: function removeReviewerGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibrarySession) RemoveReviewerGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveReviewerGroup(&_BaseLibrary.TransactOpts, group)
}

// RemoveReviewerGroup is a paid mutator transaction binding the contract method 0x1b969895.
//
// Solidity: function removeReviewerGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) RemoveReviewerGroup(group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.RemoveReviewerGroup(&_BaseLibrary.TransactOpts, group)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibrarySession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetAddressKMS(&_BaseLibrary.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetAddressKMS(&_BaseLibrary.TransactOpts, address_KMS)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibrarySession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetGroupRights(&_BaseLibrary.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetGroupRights(&_BaseLibrary.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibrarySession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetRights(&_BaseLibrary.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetRights(&_BaseLibrary.TransactOpts, stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseLibrary *BaseLibrarySession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetVisibility(&_BaseLibrary.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseLibrary.Contract.SetVisibility(&_BaseLibrary.TransactOpts, _visibility_code)
}

// SubmitApprovalRequest is a paid mutator transaction binding the contract method 0x49102e61.
//
// Solidity: function submitApprovalRequest() returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) SubmitApprovalRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "submitApprovalRequest")
}

// SubmitApprovalRequest is a paid mutator transaction binding the contract method 0x49102e61.
//
// Solidity: function submitApprovalRequest() returns(bool)
func (_BaseLibrary *BaseLibrarySession) SubmitApprovalRequest() (*types.Transaction, error) {
	return _BaseLibrary.Contract.SubmitApprovalRequest(&_BaseLibrary.TransactOpts)
}

// SubmitApprovalRequest is a paid mutator transaction binding the contract method 0x49102e61.
//
// Solidity: function submitApprovalRequest() returns(bool)
func (_BaseLibrary *BaseLibraryTransactorSession) SubmitApprovalRequest() (*types.Transaction, error) {
	return _BaseLibrary.Contract.SubmitApprovalRequest(&_BaseLibrary.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibrary *BaseLibraryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibrary *BaseLibrarySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.TransferCreatorship(&_BaseLibrary.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.TransferCreatorship(&_BaseLibrary.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibrary *BaseLibraryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibrary *BaseLibrarySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.TransferOwnership(&_BaseLibrary.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.TransferOwnership(&_BaseLibrary.TransactOpts, newOwner)
}

// UpdateAddressKMS is a paid mutator transaction binding the contract method 0x011e01a5.
//
// Solidity: function updateAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactor) UpdateAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "updateAddressKMS", address_KMS)
}

// UpdateAddressKMS is a paid mutator transaction binding the contract method 0x011e01a5.
//
// Solidity: function updateAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibrarySession) UpdateAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.UpdateAddressKMS(&_BaseLibrary.TransactOpts, address_KMS)
}

// UpdateAddressKMS is a paid mutator transaction binding the contract method 0x011e01a5.
//
// Solidity: function updateAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactorSession) UpdateAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.Contract.UpdateAddressKMS(&_BaseLibrary.TransactOpts, address_KMS)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseLibrary *BaseLibraryTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseLibrary *BaseLibrarySession) UpdateRequest() (*types.Transaction, error) {
	return _BaseLibrary.Contract.UpdateRequest(&_BaseLibrary.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseLibrary *BaseLibraryTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseLibrary.Contract.UpdateRequest(&_BaseLibrary.TransactOpts)
}

// BaseLibraryAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseLibrary contract.
type BaseLibraryAccessRequestV3Iterator struct {
	Event *BaseLibraryAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessRequestV3 represents a AccessRequestV3 event raised by the BaseLibrary contract.
type BaseLibraryAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseLibraryAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessRequestV3Iterator{contract: _BaseLibrary.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessRequestV3)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessRequestV3(log types.Log) (*BaseLibraryAccessRequestV3, error) {
	event := new(BaseLibraryAccessRequestV3)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryAccessorGroupAddedIterator is returned from FilterAccessorGroupAdded and is used to iterate over the raw logs and unpacked data for AccessorGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupAddedIterator struct {
	Event *BaseLibraryAccessorGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessorGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessorGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessorGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessorGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessorGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessorGroupAdded represents a AccessorGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAccessorGroupAdded is a free log retrieval operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessorGroupAdded(opts *bind.FilterOpts) (*BaseLibraryAccessorGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessorGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessorGroupAddedIterator{contract: _BaseLibrary.contract, event: "AccessorGroupAdded", logs: logs, sub: sub}, nil
}

// WatchAccessorGroupAdded is a free log subscription operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessorGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessorGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessorGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessorGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessorGroupAdded is a log parse operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessorGroupAdded(log types.Log) (*BaseLibraryAccessorGroupAdded, error) {
	event := new(BaseLibraryAccessorGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryAccessorGroupRemovedIterator is returned from FilterAccessorGroupRemoved and is used to iterate over the raw logs and unpacked data for AccessorGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupRemovedIterator struct {
	Event *BaseLibraryAccessorGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessorGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessorGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessorGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessorGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessorGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessorGroupRemoved represents a AccessorGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAccessorGroupRemoved is a free log retrieval operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessorGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryAccessorGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessorGroupRemovedIterator{contract: _BaseLibrary.contract, event: "AccessorGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchAccessorGroupRemoved is a free log subscription operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessorGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessorGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessorGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessorGroupRemoved is a log parse operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessorGroupRemoved(log types.Log) (*BaseLibraryAccessorGroupRemoved, error) {
	event := new(BaseLibraryAccessorGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryApproveContentIterator is returned from FilterApproveContent and is used to iterate over the raw logs and unpacked data for ApproveContent events raised by the BaseLibrary contract.
type BaseLibraryApproveContentIterator struct {
	Event *BaseLibraryApproveContent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryApproveContentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryApproveContent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryApproveContent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryApproveContentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryApproveContentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryApproveContent represents a ApproveContent event raised by the BaseLibrary contract.
type BaseLibraryApproveContent struct {
	ContentAddress common.Address
	Approved       bool
	Note           string
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApproveContent is a free log retrieval operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) FilterApproveContent(opts *bind.FilterOpts) (*BaseLibraryApproveContentIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ApproveContent")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryApproveContentIterator{contract: _BaseLibrary.contract, event: "ApproveContent", logs: logs, sub: sub}, nil
}

// WatchApproveContent is a free log subscription operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) WatchApproveContent(opts *bind.WatchOpts, sink chan<- *BaseLibraryApproveContent) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ApproveContent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryApproveContent)
				if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveContent is a log parse operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) ParseApproveContent(log types.Log) (*BaseLibraryApproveContent, error) {
	event := new(BaseLibraryApproveContent)
	if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryApproveContentRequestIterator is returned from FilterApproveContentRequest and is used to iterate over the raw logs and unpacked data for ApproveContentRequest events raised by the BaseLibrary contract.
type BaseLibraryApproveContentRequestIterator struct {
	Event *BaseLibraryApproveContentRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryApproveContentRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryApproveContentRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryApproveContentRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryApproveContentRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryApproveContentRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryApproveContentRequest represents a ApproveContentRequest event raised by the BaseLibrary contract.
type BaseLibraryApproveContentRequest struct {
	ContentAddress common.Address
	Submitter      common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApproveContentRequest is a free log retrieval operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) FilterApproveContentRequest(opts *bind.FilterOpts) (*BaseLibraryApproveContentRequestIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ApproveContentRequest")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryApproveContentRequestIterator{contract: _BaseLibrary.contract, event: "ApproveContentRequest", logs: logs, sub: sub}, nil
}

// WatchApproveContentRequest is a free log subscription operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) WatchApproveContentRequest(opts *bind.WatchOpts, sink chan<- *BaseLibraryApproveContentRequest) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ApproveContentRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryApproveContentRequest)
				if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContentRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveContentRequest is a log parse operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) ParseApproveContentRequest(log types.Log) (*BaseLibraryApproveContentRequest, error) {
	event := new(BaseLibraryApproveContentRequest)
	if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContentRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseLibrary contract.
type BaseLibraryCommitPendingIterator struct {
	Event *BaseLibraryCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryCommitPending represents a CommitPending event raised by the BaseLibrary contract.
type BaseLibraryCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseLibraryCommitPendingIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryCommitPendingIterator{contract: _BaseLibrary.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseLibraryCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryCommitPending)
				if err := _BaseLibrary.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseCommitPending(log types.Log) (*BaseLibraryCommitPending, error) {
	event := new(BaseLibraryCommitPending)
	if err := _BaseLibrary.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContentObjectCreatedIterator is returned from FilterContentObjectCreated and is used to iterate over the raw logs and unpacked data for ContentObjectCreated events raised by the BaseLibrary contract.
type BaseLibraryContentObjectCreatedIterator struct {
	Event *BaseLibraryContentObjectCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentObjectCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentObjectCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentObjectCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentObjectCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentObjectCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentObjectCreated represents a ContentObjectCreated event raised by the BaseLibrary contract.
type BaseLibraryContentObjectCreated struct {
	ContentAddress common.Address
	ContentType    common.Address
	SpaceAddress   common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterContentObjectCreated is a free log retrieval operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentObjectCreated(opts *bind.FilterOpts) (*BaseLibraryContentObjectCreatedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentObjectCreated")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentObjectCreatedIterator{contract: _BaseLibrary.contract, event: "ContentObjectCreated", logs: logs, sub: sub}, nil
}

// WatchContentObjectCreated is a free log subscription operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentObjectCreated(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentObjectCreated) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentObjectCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentObjectCreated)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectCreated is a log parse operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentObjectCreated(log types.Log) (*BaseLibraryContentObjectCreated, error) {
	event := new(BaseLibraryContentObjectCreated)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContentObjectDeletedIterator is returned from FilterContentObjectDeleted and is used to iterate over the raw logs and unpacked data for ContentObjectDeleted events raised by the BaseLibrary contract.
type BaseLibraryContentObjectDeletedIterator struct {
	Event *BaseLibraryContentObjectDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentObjectDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentObjectDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentObjectDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentObjectDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentObjectDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentObjectDeleted represents a ContentObjectDeleted event raised by the BaseLibrary contract.
type BaseLibraryContentObjectDeleted struct {
	ContentAddress common.Address
	SpaceAddress   common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterContentObjectDeleted is a free log retrieval operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentObjectDeleted(opts *bind.FilterOpts) (*BaseLibraryContentObjectDeletedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentObjectDeleted")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentObjectDeletedIterator{contract: _BaseLibrary.contract, event: "ContentObjectDeleted", logs: logs, sub: sub}, nil
}

// WatchContentObjectDeleted is a free log subscription operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentObjectDeleted(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentObjectDeleted) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentObjectDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentObjectDeleted)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectDeleted is a log parse operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentObjectDeleted(log types.Log) (*BaseLibraryContentObjectDeleted, error) {
	event := new(BaseLibraryContentObjectDeleted)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectDeleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseLibrary contract.
type BaseLibraryContentTypeAddedIterator struct {
	Event *BaseLibraryContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentTypeAdded represents a ContentTypeAdded event raised by the BaseLibrary contract.
type BaseLibraryContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseLibraryContentTypeAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentTypeAddedIterator{contract: _BaseLibrary.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentTypeAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentTypeAdded(log types.Log) (*BaseLibraryContentTypeAdded, error) {
	event := new(BaseLibraryContentTypeAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseLibrary contract.
type BaseLibraryContentTypeRemovedIterator struct {
	Event *BaseLibraryContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseLibrary contract.
type BaseLibraryContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseLibraryContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentTypeRemovedIterator{contract: _BaseLibrary.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentTypeRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentTypeRemoved(log types.Log) (*BaseLibraryContentTypeRemoved, error) {
	event := new(BaseLibraryContentTypeRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContributorGroupAddedIterator is returned from FilterContributorGroupAdded and is used to iterate over the raw logs and unpacked data for ContributorGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryContributorGroupAddedIterator struct {
	Event *BaseLibraryContributorGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContributorGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContributorGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContributorGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContributorGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContributorGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContributorGroupAdded represents a ContributorGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryContributorGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterContributorGroupAdded is a free log retrieval operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterContributorGroupAdded(opts *bind.FilterOpts) (*BaseLibraryContributorGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContributorGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContributorGroupAddedIterator{contract: _BaseLibrary.contract, event: "ContributorGroupAdded", logs: logs, sub: sub}, nil
}

// WatchContributorGroupAdded is a free log subscription operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchContributorGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryContributorGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContributorGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContributorGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContributorGroupAdded is a log parse operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseContributorGroupAdded(log types.Log) (*BaseLibraryContributorGroupAdded, error) {
	event := new(BaseLibraryContributorGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryContributorGroupRemovedIterator is returned from FilterContributorGroupRemoved and is used to iterate over the raw logs and unpacked data for ContributorGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryContributorGroupRemovedIterator struct {
	Event *BaseLibraryContributorGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContributorGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContributorGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContributorGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContributorGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContributorGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContributorGroupRemoved represents a ContributorGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryContributorGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterContributorGroupRemoved is a free log retrieval operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterContributorGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryContributorGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContributorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContributorGroupRemovedIterator{contract: _BaseLibrary.contract, event: "ContributorGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchContributorGroupRemoved is a free log subscription operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchContributorGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryContributorGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContributorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContributorGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContributorGroupRemoved is a log parse operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseContributorGroupRemoved(log types.Log) (*BaseLibraryContributorGroupRemoved, error) {
	event := new(BaseLibraryContributorGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseLibrary contract.
type BaseLibraryObjectMetaChangedIterator struct {
	Event *BaseLibraryObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseLibrary contract.
type BaseLibraryObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseLibrary *BaseLibraryFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseLibraryObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryObjectMetaChangedIterator{contract: _BaseLibrary.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseLibrary *BaseLibraryFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseLibraryObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryObjectMetaChanged)
				if err := _BaseLibrary.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseLibrary *BaseLibraryFilterer) ParseObjectMetaChanged(log types.Log) (*BaseLibraryObjectMetaChanged, error) {
	event := new(BaseLibraryObjectMetaChanged)
	if err := _BaseLibrary.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryReviewerGroupAddedIterator is returned from FilterReviewerGroupAdded and is used to iterate over the raw logs and unpacked data for ReviewerGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupAddedIterator struct {
	Event *BaseLibraryReviewerGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryReviewerGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryReviewerGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryReviewerGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryReviewerGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryReviewerGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryReviewerGroupAdded represents a ReviewerGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReviewerGroupAdded is a free log retrieval operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterReviewerGroupAdded(opts *bind.FilterOpts) (*BaseLibraryReviewerGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ReviewerGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryReviewerGroupAddedIterator{contract: _BaseLibrary.contract, event: "ReviewerGroupAdded", logs: logs, sub: sub}, nil
}

// WatchReviewerGroupAdded is a free log subscription operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchReviewerGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryReviewerGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ReviewerGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryReviewerGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewerGroupAdded is a log parse operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseReviewerGroupAdded(log types.Log) (*BaseLibraryReviewerGroupAdded, error) {
	event := new(BaseLibraryReviewerGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryReviewerGroupRemovedIterator is returned from FilterReviewerGroupRemoved and is used to iterate over the raw logs and unpacked data for ReviewerGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupRemovedIterator struct {
	Event *BaseLibraryReviewerGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryReviewerGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryReviewerGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryReviewerGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryReviewerGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryReviewerGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryReviewerGroupRemoved represents a ReviewerGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReviewerGroupRemoved is a free log retrieval operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterReviewerGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryReviewerGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ReviewerGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryReviewerGroupRemovedIterator{contract: _BaseLibrary.contract, event: "ReviewerGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchReviewerGroupRemoved is a free log subscription operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchReviewerGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryReviewerGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ReviewerGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryReviewerGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewerGroupRemoved is a log parse operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseReviewerGroupRemoved(log types.Log) (*BaseLibraryReviewerGroupRemoved, error) {
	event := new(BaseLibraryReviewerGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryUnauthorizedOperationIterator is returned from FilterUnauthorizedOperation and is used to iterate over the raw logs and unpacked data for UnauthorizedOperation events raised by the BaseLibrary contract.
type BaseLibraryUnauthorizedOperationIterator struct {
	Event *BaseLibraryUnauthorizedOperation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUnauthorizedOperationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUnauthorizedOperation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUnauthorizedOperation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUnauthorizedOperationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUnauthorizedOperationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUnauthorizedOperation represents a UnauthorizedOperation event raised by the BaseLibrary contract.
type BaseLibraryUnauthorizedOperation struct {
	OperationCode *big.Int
	Candidate     common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUnauthorizedOperation is a free log retrieval operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) FilterUnauthorizedOperation(opts *bind.FilterOpts) (*BaseLibraryUnauthorizedOperationIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUnauthorizedOperationIterator{contract: _BaseLibrary.contract, event: "UnauthorizedOperation", logs: logs, sub: sub}, nil
}

// WatchUnauthorizedOperation is a free log subscription operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) WatchUnauthorizedOperation(opts *bind.WatchOpts, sink chan<- *BaseLibraryUnauthorizedOperation) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUnauthorizedOperation)
				if err := _BaseLibrary.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnauthorizedOperation is a log parse operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) ParseUnauthorizedOperation(log types.Log) (*BaseLibraryUnauthorizedOperation, error) {
	event := new(BaseLibraryUnauthorizedOperation)
	if err := _BaseLibrary.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryUpdateKmsAddressIterator is returned from FilterUpdateKmsAddress and is used to iterate over the raw logs and unpacked data for UpdateKmsAddress events raised by the BaseLibrary contract.
type BaseLibraryUpdateKmsAddressIterator struct {
	Event *BaseLibraryUpdateKmsAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUpdateKmsAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUpdateKmsAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUpdateKmsAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUpdateKmsAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUpdateKmsAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUpdateKmsAddress represents a UpdateKmsAddress event raised by the BaseLibrary contract.
type BaseLibraryUpdateKmsAddress struct {
	AddressKms common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateKmsAddress is a free log retrieval operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) FilterUpdateKmsAddress(opts *bind.FilterOpts) (*BaseLibraryUpdateKmsAddressIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UpdateKmsAddress")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUpdateKmsAddressIterator{contract: _BaseLibrary.contract, event: "UpdateKmsAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateKmsAddress is a free log subscription operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) WatchUpdateKmsAddress(opts *bind.WatchOpts, sink chan<- *BaseLibraryUpdateKmsAddress) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UpdateKmsAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUpdateKmsAddress)
				if err := _BaseLibrary.contract.UnpackLog(event, "UpdateKmsAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateKmsAddress is a log parse operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) ParseUpdateKmsAddress(log types.Log) (*BaseLibraryUpdateKmsAddress, error) {
	event := new(BaseLibraryUpdateKmsAddress)
	if err := _BaseLibrary.contract.UnpackLog(event, "UpdateKmsAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseLibrary contract.
type BaseLibraryUpdateRequestIterator struct {
	Event *BaseLibraryUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUpdateRequest represents a UpdateRequest event raised by the BaseLibrary contract.
type BaseLibraryUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseLibraryUpdateRequestIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUpdateRequestIterator{contract: _BaseLibrary.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseLibraryUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUpdateRequest)
				if err := _BaseLibrary.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseUpdateRequest(log types.Log) (*BaseLibraryUpdateRequest, error) {
	event := new(BaseLibraryUpdateRequest)
	if err := _BaseLibrary.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseLibrary contract.
type BaseLibraryVersionConfirmIterator struct {
	Event *BaseLibraryVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryVersionConfirm represents a VersionConfirm event raised by the BaseLibrary contract.
type BaseLibraryVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseLibraryVersionConfirmIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryVersionConfirmIterator{contract: _BaseLibrary.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseLibraryVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryVersionConfirm)
				if err := _BaseLibrary.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseVersionConfirm(log types.Log) (*BaseLibraryVersionConfirm, error) {
	event := new(BaseLibraryVersionConfirm)
	if err := _BaseLibrary.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseLibrary contract.
type BaseLibraryVersionDeleteIterator struct {
	Event *BaseLibraryVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryVersionDelete represents a VersionDelete event raised by the BaseLibrary contract.
type BaseLibraryVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseLibraryVersionDeleteIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryVersionDeleteIterator{contract: _BaseLibrary.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseLibraryVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryVersionDelete)
				if err := _BaseLibrary.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) ParseVersionDelete(log types.Log) (*BaseLibraryVersionDelete, error) {
	event := new(BaseLibraryVersionDelete)
	if err := _BaseLibrary.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseLibrary contract.
type BaseLibraryVisibilityChangedIterator struct {
	Event *BaseLibraryVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryVisibilityChanged represents a VisibilityChanged event raised by the BaseLibrary contract.
type BaseLibraryVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseLibrary *BaseLibraryFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseLibraryVisibilityChangedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryVisibilityChangedIterator{contract: _BaseLibrary.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseLibrary *BaseLibraryFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseLibraryVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryVisibilityChanged)
				if err := _BaseLibrary.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseLibrary *BaseLibraryFilterer) ParseVisibilityChanged(log types.Log) (*BaseLibraryVisibilityChanged, error) {
	event := new(BaseLibraryVisibilityChanged)
	if err := _BaseLibrary.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseLibraryFactoryABI is the input ABI used to generate the binding from.
const BaseLibraryFactoryABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseLibraryFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseLibraryFactoryFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"40b89f06": "createLibrary(address)",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// BaseLibraryFactoryBin is the compiled bytecode used for deploying new contracts.
var BaseLibraryFactoryBin = ""

// DeployBaseLibraryFactory deploys a new Ethereum contract, binding an instance of BaseLibraryFactory to it.
func DeployBaseLibraryFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseLibraryFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseLibraryFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseLibraryFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseLibraryFactory{BaseLibraryFactoryCaller: BaseLibraryFactoryCaller{contract: contract}, BaseLibraryFactoryTransactor: BaseLibraryFactoryTransactor{contract: contract}, BaseLibraryFactoryFilterer: BaseLibraryFactoryFilterer{contract: contract}}, nil
}

// BaseLibraryFactory is an auto generated Go binding around an Ethereum contract.
type BaseLibraryFactory struct {
	BaseLibraryFactoryCaller     // Read-only binding to the contract
	BaseLibraryFactoryTransactor // Write-only binding to the contract
	BaseLibraryFactoryFilterer   // Log filterer for contract events
}

// BaseLibraryFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseLibraryFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseLibraryFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseLibraryFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseLibraryFactorySession struct {
	Contract     *BaseLibraryFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BaseLibraryFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseLibraryFactoryCallerSession struct {
	Contract *BaseLibraryFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// BaseLibraryFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseLibraryFactoryTransactorSession struct {
	Contract     *BaseLibraryFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// BaseLibraryFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseLibraryFactoryRaw struct {
	Contract *BaseLibraryFactory // Generic contract binding to access the raw methods on
}

// BaseLibraryFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseLibraryFactoryCallerRaw struct {
	Contract *BaseLibraryFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseLibraryFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseLibraryFactoryTransactorRaw struct {
	Contract *BaseLibraryFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseLibraryFactory creates a new instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactory(address common.Address, backend bind.ContractBackend) (*BaseLibraryFactory, error) {
	contract, err := bindBaseLibraryFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactory{BaseLibraryFactoryCaller: BaseLibraryFactoryCaller{contract: contract}, BaseLibraryFactoryTransactor: BaseLibraryFactoryTransactor{contract: contract}, BaseLibraryFactoryFilterer: BaseLibraryFactoryFilterer{contract: contract}}, nil
}

// NewBaseLibraryFactoryCaller creates a new read-only instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseLibraryFactoryCaller, error) {
	contract, err := bindBaseLibraryFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryCaller{contract: contract}, nil
}

// NewBaseLibraryFactoryTransactor creates a new write-only instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseLibraryFactoryTransactor, error) {
	contract, err := bindBaseLibraryFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryTransactor{contract: contract}, nil
}

// NewBaseLibraryFactoryFilterer creates a new log filterer instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseLibraryFactoryFilterer, error) {
	contract, err := bindBaseLibraryFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryFilterer{contract: contract}, nil
}

// bindBaseLibraryFactory binds a generic wrapper to an already deployed contract.
func bindBaseLibraryFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseLibraryFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseLibraryFactory *BaseLibraryFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseLibraryFactory.Contract.BaseLibraryFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseLibraryFactory *BaseLibraryFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.BaseLibraryFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseLibraryFactory *BaseLibraryFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.BaseLibraryFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseLibraryFactory *BaseLibraryFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseLibraryFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibraryFactory.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactorySession) ContentSpace() (common.Address, error) {
	return _BaseLibraryFactory.Contract.ContentSpace(&_BaseLibraryFactory.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCallerSession) ContentSpace() (common.Address, error) {
	return _BaseLibraryFactory.Contract.ContentSpace(&_BaseLibraryFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibraryFactory.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactorySession) Creator() (common.Address, error) {
	return _BaseLibraryFactory.Contract.Creator(&_BaseLibraryFactory.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCallerSession) Creator() (common.Address, error) {
	return _BaseLibraryFactory.Contract.Creator(&_BaseLibraryFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseLibraryFactory.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactorySession) Owner() (common.Address, error) {
	return _BaseLibraryFactory.Contract.Owner(&_BaseLibraryFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCallerSession) Owner() (common.Address, error) {
	return _BaseLibraryFactory.Contract.Owner(&_BaseLibraryFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseLibraryFactory.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactorySession) Version() ([32]byte, error) {
	return _BaseLibraryFactory.Contract.Version(&_BaseLibraryFactory.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactoryCallerSession) Version() ([32]byte, error) {
	return _BaseLibraryFactory.Contract.Version(&_BaseLibraryFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseLibraryFactory.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactorySession) VersionAPI() ([32]byte, error) {
	return _BaseLibraryFactory.Contract.VersionAPI(&_BaseLibraryFactory.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactoryCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseLibraryFactory.Contract.VersionAPI(&_BaseLibraryFactory.CallOpts)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) CreateLibrary(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "createLibrary", address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseLibraryFactory *BaseLibraryFactorySession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.CreateLibrary(&_BaseLibraryFactory.TransactOpts, address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorSession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.CreateLibrary(&_BaseLibraryFactory.TransactOpts, address_KMS)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibraryFactory *BaseLibraryFactorySession) Kill() (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.Kill(&_BaseLibraryFactory.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.Kill(&_BaseLibraryFactory.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibraryFactory *BaseLibraryFactorySession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.TransferCreatorship(&_BaseLibraryFactory.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.TransferCreatorship(&_BaseLibraryFactory.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibraryFactory *BaseLibraryFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.TransferOwnership(&_BaseLibraryFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.Contract.TransferOwnership(&_BaseLibraryFactory.TransactOpts, newOwner)
}

// BaseTenantSpaceABI is the input ABI used to generate the binding from.
const BaseTenantSpaceABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factoryManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_func4Bytes\",\"type\":\"bytes4[]\"},{\"name\":\"_funcAddr\",\"type\":\"address\"}],\"name\":\"addFuncs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listKey\",\"type\":\"bytes32\"}],\"name\":\"listLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeMan\",\"type\":\"address\"}],\"name\":\"setNodeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listKey\",\"type\":\"bytes32\"},{\"name\":\"itemOrd\",\"type\":\"uint256\"}],\"name\":\"removeListOrd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBitInternal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"checkIdsRemove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTenantID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsAddress\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factMan\",\"type\":\"address\"}],\"name\":\"setFactoryManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listsMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"getKMSID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GROUP_ID_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_groupAddr\",\"type\":\"address\"}],\"name\":\"addGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listKey\",\"type\":\"bytes32\"},{\"name\":\"itemVal\",\"type\":\"string\"}],\"name\":\"addListItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsMan\",\"type\":\"address\"}],\"name\":\"setKmsManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_desc\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userMan\",\"type\":\"address\"}],\"name\":\"setUserManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nodeManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_func4Bytes\",\"type\":\"bytes4\"},{\"name\":\"_p1\",\"type\":\"uint256\"},{\"name\":\"_p2\",\"type\":\"address\"},{\"name\":\"_encAuthToken\",\"type\":\"bytes\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"callFuncUintAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kmsManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lib\",\"type\":\"address\"},{\"name\":\"_contentType\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"funcMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_groupAddr\",\"type\":\"address\"}],\"name\":\"removeGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defLeewaySecs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"checkKMSAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"createUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupsMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_func4Bytes\",\"type\":\"bytes4\"},{\"name\":\"_encAuthToken\",\"type\":\"bytes\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"checkCallFunc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defTokenExpSecs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contentSpace\",\"type\":\"address\"},{\"name\":\"_tenantName\",\"type\":\"string\"},{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CreateTenant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"GetAccessWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"func4Bytes\",\"type\":\"bytes4[]\"},{\"indexed\":false,\"name\":\"funcAddr\",\"type\":\"address\"}],\"name\":\"FunctionsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"groupAddr\",\"type\":\"address\"}],\"name\":\"AddTenantGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"groupAddr\",\"type\":\"address\"}],\"name\":\"RemoveTenantGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevManager\",\"type\":\"address\"}],\"name\":\"SetUserManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevManager\",\"type\":\"address\"}],\"name\":\"SetNodeManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevManager\",\"type\":\"address\"}],\"name\":\"SetFactoryManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevManager\",\"type\":\"address\"}],\"name\":\"SetKmsManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint32\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ord\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"prev\",\"type\":\"bool\"}],\"name\":\"BitSetAndGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"}],\"name\":\"WordGroupDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// BaseTenantSpaceFuncSigs maps the 4-byte function signature to its string representation.
var BaseTenantSpaceFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"58d40b25": "GROUP_ID_ADMIN()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"0f58a786": "addContentType(address,address)",
	"0a581edc": "addFuncs(bytes4[],address)",
	"65d8dd34": "addGroup(bytes32,address)",
	"74daf3a0": "addListItem(bytes32,string)",
	"32eaf21b": "addressKMS()",
	"9c075d67": "callFuncUintAddr(bytes4,uint256,address,bytes,uint8,bytes32,bytes32)",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"0eaec2c5": "canContribute(address)",
	"81beeb64": "canEdit()",
	"26683e14": "canNodePublish(address)",
	"9b55f901": "canPublish(address)",
	"29d00219": "canReview(address)",
	"ed1f6456": "checkCallFunc(bytes4,bytes,uint8,bytes32,bytes32)",
	"36ed8c79": "checkIdsRemove(bytes32)",
	"d6be0f49": "checkKMSAddr(address)",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"1cdbee5a": "contentTypeContracts(address)",
	"991a3a7c": "contentTypes(uint256)",
	"c65bcbe2": "contentTypesLength()",
	"331b86c0": "countVersionHashes()",
	"bf4e088f": "createContent(address,address)",
	"b8cfaf05": "createContentType()",
	"575185ed": "createGroup()",
	"40b89f06": "createLibrary(address)",
	"e7cf0c66": "createUserWallet(address)",
	"02d05d3f": "creator()",
	"d21a8c94": "defLeewaySecs()",
	"f1df8140": "defTokenExpSecs()",
	"e57097c9": "deleteGroup(bytes32)",
	"e1a70717": "deleteVersion(string)",
	"7284e416": "description()",
	"032b5a73": "factoryManager()",
	"1f2caaec": "findTypeByHash(bytes32)",
	"c2a21f14": "funcMapping(bytes4)",
	"30f846a2": "getBit(bytes32,uint8)",
	"e1954b61": "getCounter(bytes32,uint8)",
	"589aafc1": "getKMSID(address)",
	"268bfac4": "getKMSInfo(string,bytes)",
	"ac55c906": "getMeta(bytes)",
	"401262c8": "getTenantID()",
	"4093d7a1": "groupIds(uint256)",
	"ea8a3ed8": "groupsMapping(bytes32,uint256)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"7558cbf0": "incrementCounter(bytes32,uint8)",
	"6380501f": "indexCategory()",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"ac65b649": "kmsManager()",
	"11a3fa38": "listLength(bytes32)",
	"4d368f10": "listsMapping(bytes32,uint256)",
	"06fdde03": "name()",
	"9bb5cd3f": "nodeManager()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"2cf99422": "publish(address)",
	"e542b7cb": "putMeta(bytes,bytes)",
	"fd089196": "removeContentType(address)",
	"cb3899b3": "removeGroup(bytes32,address)",
	"1fa12f11": "removeListOrd(bytes32,uint256)",
	"3dd71d99": "requiresReview()",
	"c9e8e72d": "setAddressKMS(address)",
	"24d7c18d": "setAndGetBit(bytes32,uint8)",
	"33f12cf4": "setAndGetBitInternal(bytes32,uint8)",
	"90c3f38f": "setDescription(string)",
	"430e621e": "setFactoryManager(address)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"87e38281": "setKmsManager(address)",
	"1319e7e1": "setNodeManager(address)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"97d0b02c": "setUserManager(address)",
	"aa024e8b": "setVisibility(uint8)",
	"a9059cbb": "transfer(address,uint256)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"5c8a7687": "userManager()",
	"63e6ffdd": "userWallets(address)",
	"29dedde5": "validType(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
	"9cb121ba": "whitelistedType(address)",
}

// BaseTenantSpaceBin is the compiled bytecode used for deploying new contracts.
var BaseTenantSpaceBin = "0x608060408190527f4f776e61626c6532303230303231303131303130304d4c00000000000000000060009081557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006008556009805460ff191690911761ff00191690557f4564697461626c653230323030363236313830343030504f0000000000000000600a557f436f6e7461696e657232303230303331363133353330304d4c000000000000006011556014557f4261736554656e616e7453706163653230323030353034313230303030504f00601655620151806019556078601a55620060bd388190039081908339810160409081528151602080840151928401516002805432600160a060020a03199182168117909255600380549091169091179055929093018051919390929160009162000164916017918601906200031a565b5083905080600160a060020a0316638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620001c057600080fd5b505af1158015620001d5573d6000803e3d6000fd5b505050506040513d6020811015620001ec57600080fd5b5051600160a060020a0316331480620002955750604080517fd6be0f490000000000000000000000000000000000000000000000000000000081523360048201529051600091600160a060020a0384169163d6be0f499160248082019260209290919082900301818787803b1580156200026557600080fd5b505af11580156200027a573d6000803e3d6000fd5b505050506040513d60208110156200029157600080fd5b5051115b1515620002a157600080fd5b60048054600160a060020a03808716600160a060020a031992831617909255601280548584169216919091179055601654600354604080519283529216602082015281517fc2fe67ac699789805c53a93eea70eb0e316deaf8db4b810382d2412ba4fcb4c8929181900390910190a150505050620003bf565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200035d57805160ff19168380011785556200038d565b828001600101855582156200038d579182015b828111156200038d57825182559160200191906001019062000370565b506200039b9291506200039f565b5090565b620003bc91905b808211156200039b5760008155600101620003a6565b90565b615cee80620003cf6000396000f3006080604052600436106104515763ffffffff60e060020a600035041662821de3811461045357806302d05d3f14610484578063032b5a731461049957806306fdde03146104ae5780630a581edc146105385780630eaec2c5146105985780630f58a786146105cd5780630fe1b5a2146105f4578063100508a21461062157806311a3fa381461064c5780631319e7e11461067657806314cfabb3146106975780631bf7a912146106ac5780631cdbee5a1461072d5780631f2caaec1461074e5780631fa12f111461076657806322e564eb1461078157806324d7806c146107ae57806324d7c18d146107cf57806326683e14146107ed578063268bfac41461080e57806329adec141461091857806329d002191461092d57806329dedde51461094e5780632cf994221461096f57806330f846a21461099057806332eaf21b146109ae578063331b86c0146109c357806333f12cf4146109d857806336ed8c79146109f6578063375a6e7c14610a0e5780633dd71d9914610a23578063401262c814610a385780634093d7a114610a4d57806340b87a2614610a6557806340b89f0614610a7a57806341c0e1b514610a9b578063430e621e14610ab0578063446e882614610ad15780634d368f1014610ad957806354fd4d5014610af4578063575185ed14610b09578063589aafc114610b1e57806358d40b2514610b3f5780635c8a768714610b545780635f4fcae114610b695780635f6a130114610b7e578063628449fd14610b935780636380501f14610ba857806363e6ffdd14610bbd57806365d8dd3414610bde57806367e5c3bf14610c025780636d2e4b1b14610c235780636e37542714610c445780637284e41614610c5957806374daf3a014610c6e5780637558cbf014610ccc5780637886f74714610cea5780637ca8f61814610d0257806381beeb6414610d1a57806387e3828114610d2f5780638da5cb5b14610d5057806390c3f38f14610d6557806395a078e814610dbe57806397ac4fd214610ddf57806397d0b02c14610df45780639867db7414610e15578063991a3a7c14610e6e5780639b55f901146105985780639bb5cd3f14610e865780639c075d6714610e9b5780639cb121ba14610f20578063a9059cbb14610f41578063aa024e8b14610f65578063ac55c90614610f80578063ac65b64914610fd9578063af570c0414610fee578063b8cfaf0514611003578063bf4e088f14611018578063c287e0ed1461103f578063c2a21f1414611054578063c65bcbe214611076578063c9e8e72d1461108b578063cb3899b3146110ac578063d21a8c94146110d0578063d6be0f49146110e5578063e02dd9c214611106578063e1954b611461111b578063e1a7071714611152578063e542b7cb146111ab578063e57097c914611242578063e7cf0c661461125a578063ea8a3ed81461127b578063ed1f645614611296578063ef1d7dc21461130d578063f1df814014611322578063f2fde38b14611337578063fd08919614611358575b005b34801561045f57600080fd5b50610468611379565b60408051600160a060020a039092168252519081900360200190f35b34801561049057600080fd5b50610468611389565b3480156104a557600080fd5b50610468611398565b3480156104ba57600080fd5b506104c36113a7565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104fd5781810151838201526020016104e5565b50505050905090810190601f16801561052a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561054457600080fd5b50604080516020600480358082013583810280860185019096528085526104519536959394602494938501929182918501908490808284375094975050509235600160a060020a0316935061143592505050565b3480156105a457600080fd5b506105b9600160a060020a0360043516611549565b604080519115158252519081900360200190f35b3480156105d957600080fd5b50610451600160a060020a036004358116906024351661157a565b34801561060057600080fd5b50610451600160a060020a036004351660ff602435811690604435166116ef565b34801561062d57600080fd5b506106366117a9565b6040805160ff9092168252519081900360200190f35b34801561065857600080fd5b506106646004356117ae565b60408051918252519081900360200190f35b34801561068257600080fd5b50610451600160a060020a03600435166117c0565b3480156106a357600080fd5b506105b9611842565b604080516020600480358082013583810280860185019096528085526105b995369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506119569650505050505050565b34801561073957600080fd5b50610468600160a060020a0360043516611a65565b34801561075a57600080fd5b50610468600435611a80565b34801561077257600080fd5b50610451600435602435611d04565b34801561078d57600080fd5b50610451600160a060020a036004351660ff60243581169060443516611df8565b3480156107ba57600080fd5b506105b9600160a060020a03600435166122cf565b3480156107db57600080fd5b506105b960043560ff60243516612507565b3480156107f957600080fd5b506105b9600160a060020a036004351661252e565b34801561081a57600080fd5b5061083a602460048035828101929082013591813591820191013561264c565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561087b578181015183820152602001610863565b50505050905090810190601f1680156108a85780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156108db5781810151838201526020016108c3565b50505050905090810190601f1680156109085780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561092457600080fd5b5061063661295c565b34801561093957600080fd5b506105b9600160a060020a0360043516612965565b34801561095a57600080fd5b506105b9600160a060020a036004351661296b565b34801561097b57600080fd5b506105b9600160a060020a0360043516612989565b34801561099c57600080fd5b506105b960043560ff60243516612aab565b3480156109ba57600080fd5b50610468612b19565b3480156109cf57600080fd5b50610664612b28565b3480156109e457600080fd5b506105b960043560ff60243516612b2e565b348015610a0257600080fd5b50610451600435612c3a565b348015610a1a57600080fd5b506105b9612d04565b348015610a2f57600080fd5b506105b9612d0d565b348015610a4457600080fd5b506104c3612d12565b348015610a5957600080fd5b50610664600435612d8c565b348015610a7157600080fd5b50610664612dab565b348015610a8657600080fd5b50610468600160a060020a0360043516612db1565b348015610aa757600080fd5b50610451612e99565b348015610abc57600080fd5b50610451600160a060020a0360043516612ed5565b6105b9612f53565b348015610ae557600080fd5b506104c3600435602435613157565b348015610b0057600080fd5b506106646131da565b348015610b1557600080fd5b506104686131e0565b348015610b2a57600080fd5b506104c3600160a060020a036004351661330b565b348015610b4b57600080fd5b5061066461350f565b348015610b6057600080fd5b50610468613521565b348015610b7557600080fd5b50610664613530565b348015610b8a57600080fd5b50610451613536565b348015610b9f57600080fd5b506104c3613574565b348015610bb457600080fd5b506106366135cf565b348015610bc957600080fd5b50610468600160a060020a03600435166135dd565b348015610bea57600080fd5b50610451600435600160a060020a0360243516613699565b348015610c0e57600080fd5b506105b9600160a060020a0360043516613809565b348015610c2f57600080fd5b50610451600160a060020a036004351661398e565b348015610c5057600080fd5b506105b96139dc565b348015610c6557600080fd5b506104c36139ed565b348015610c7a57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610451958335953695604494919390910191908190840183828082843750949750613a489650505050505050565b348015610cd857600080fd5b5061045160043560ff60243516613a90565b348015610cf657600080fd5b50610664600435613b8b565b348015610d0e57600080fd5b506104c3600435613b99565b348015610d2657600080fd5b506105b9613c0d565b348015610d3b57600080fd5b50610451600160a060020a0360043516613c1d565b348015610d5c57600080fd5b50610468613c9b565b348015610d7157600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610451943694929360249392840191908190840183828082843750949750613caa9650505050505050565b348015610dca57600080fd5b506105b9600160a060020a0360043516613cd1565b348015610deb57600080fd5b50610636613e1a565b348015610e0057600080fd5b50610451600160a060020a0360043516613e1f565b348015610e2157600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610451943694929360249392840191908190840183828082843750949750613e9d9650505050505050565b348015610e7a57600080fd5b50610468600435613fca565b348015610e9257600080fd5b50610468613ff2565b348015610ea757600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261045194600160e060020a0319813516946024803595600160a060020a036044351695369560849493019181908401838280828437509497505050833560ff1694505050602082013591604001359050614001565b348015610f2c57600080fd5b506105b9600160a060020a036004351661419d565b348015610f4d57600080fd5b50610451600160a060020a03600435166024356141f4565b348015610f7157600080fd5b5061045160ff6004351661423e565b348015610f8c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104c39436949293602493928401919081908401838280828437509497506142b89650505050505050565b348015610fe557600080fd5b50610468614466565b348015610ffa57600080fd5b50610468614475565b34801561100f57600080fd5b50610468614484565b34801561102457600080fd5b50610468600160a060020a0360043581169060243516614548565b34801561104b57600080fd5b506104516146a6565b34801561106057600080fd5b50610468600160e060020a031960043516614768565b34801561108257600080fd5b50610664614783565b34801561109757600080fd5b50610451600160a060020a0360043516614789565b3480156110b857600080fd5b50610451600435600160a060020a03602435166147d9565b3480156110dc57600080fd5b506106646149b4565b3480156110f157600080fd5b50610664600160a060020a03600435166149ba565b34801561111257600080fd5b506104c3614aa2565b34801561112757600080fd5b5061113960043560ff60243516614afd565b6040805163ffffffff9092168252519081900360200190f35b34801561115e57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610664943694929360249392840191908190840183828082843750949750614b4f9650505050505050565b3480156111b757600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261045194369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506150d49650505050505050565b34801561124e57600080fd5b506104516004356152d0565b34801561126657600080fd5b50610468600160a060020a0360043516615335565b34801561128757600080fd5b5061046860043560243561541d565b3480156112a257600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526105b9958335600160e060020a0319169536956044949193909101919081908401838280828437509497505050833560ff1694505050602082013591604001359050615454565b34801561131957600080fd5b50610636615650565b34801561132e57600080fd5b50610664615655565b34801561134357600080fd5b50610451600160a060020a036004351661565b565b34801561136457600080fd5b506105b9600160a060020a03600435166156c0565b600454600160a060020a03165b90565b600254600160a060020a031681565b602154600160a060020a031681565b6017805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561142d5780601f106114025761010080835404028352916020019161142d565b820191906000526020600020905b81548152906001019060200180831161141057829003601f168201915b505050505081565b6000611440336122cf565b151561144b57600080fd5b5060005b82518110156114b55781601e6000858481518110151561146b57fe5b602090810291909101810151600160e060020a03191682528101919091526040016000208054600160a060020a031916600160a060020a039290921691909117905560010161144f565b7f2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de88742668383604051808060200183600160a060020a0316600160a060020a03168152602001828103825284818151815260200191508051906020019060200280838360005b83811015611530578181015183820152602001611518565b50505050905001935050505060405180910390a1505050565b600354600090600160a060020a03838116911614806115725750600354600160a060020a031633145b90505b919050565b600354600160a060020a031632148061159d5750600354600160a060020a031633145b15156115a857600080fd5b600160a060020a03808316600090815260156020526040902054161580156115d657506115d48261419d565b155b1561168257601354601454101561162c578160136014548154811015156115f957fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550611678565b601380546001810182556000919091527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090018054600160a060020a031916600160a060020a0384161790555b6014805460010190555b600160a060020a038281166000818152601560209081526040918290208054600160a060020a0319169486169485179055815192835282019290925281517f280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7929181900390910190a15050565b600480546040805160e060020a6363e6ffdd028152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd9160248082019260209290919082900301818787803b15801561174957600080fd5b505af115801561175d573d6000803e3d6000fd5b505050506040513d602081101561177357600080fd5b50519050600160a060020a038116151561179757611792858585611df8565b6117a2565b6117a2818585611df8565b5050505050565b600181565b6000908152601d602052604090205490565b6117c9336122cf565b15156117d457600080fd5b6020805460408051600160a060020a0380861682529092169282019290925281517f9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b56177929181900390910190a160208054600160a060020a031916600160a060020a0392909216919091179055565b602054600090600160a060020a0316156118d457602080546040805160e260020a63099a0f850281523360048201529051600160a060020a03909216926326683e14926024808401938290030181600087803b1580156118a157600080fd5b505af11580156118b5573d6000803e3d6000fd5b505050506040513d60208110156118cb57600080fd5b50519050611386565b600480546040805160e260020a63099a0f85028152339381019390935251600160a060020a03909116916326683e149160248083019260209291908290030181600087803b15801561192557600080fd5b505af1158015611939573d6000803e3d6000fd5b505050506040513d602081101561194f57600080fd5b5051905090565b600061196133613cd1565b151561196c57600080fd5b7f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c730426040516020018083600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310611a055780518252601f1990920191602091820191016119e6565b51815160001960209485036101000a019081169019919091161790526040805194909201849003842084526000908401819052838201523360608401526103e842026080840152519182900360a001935090915050a15060015b92915050565b601560205260009081526040902054600160a060020a031681565b600080805b601354821015611cf8576013805483908110611a9d57fe5b6000918252602091829020015460408051808401889052815180820385018152908201918290528051600160a060020a03909316945092909182918401908083835b60208310611afe5780518252601f199092019160209182019101611adf565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681600160a060020a031663e02dd9c26040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611b6d57600080fd5b505af1158015611b81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611baa57600080fd5b810190808051640100000000811115611bc257600080fd5b82016020810184811115611bd557600080fd5b8151640100000000811182820187101715611bef57600080fd5b50509291905050506040516020018082805190602001908083835b60208310611c295780518252601f199092019160209182019101611c0a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611c8c5780518252601f199092019160209182019101611c6d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415611ced576013805483908110611cd157fe5b600091825260209091200154600160a060020a03169250611cfd565b600190910190611a85565b600092505b5050919050565b6000611d0f336122cf565b1515611d1a57600080fd5b506000828152601d60205260409020546000190180821015611da3576000838152601d60205260409020805482908110611d5057fe5b60009182526020808320868452601d90915260409092208054929091019184908110611d7857fe5b906000526020600020019080546001816001161561010002031660029004611da1929190615ae3565b505b6000838152601d60205260409020805482908110611dbd57fe5b906000526020600020016000611dd39190615b64565b6000838152601d60205260409020805490611df2906000198301615ba8565b50505050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611e3b57600080fd5b505af1158015611e4f573d6000803e3d6000fd5b505050506040513d6020811015611e6557600080fd5b5051600954610100900460ff90811691161415611f0a57604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b158015611eed57600080fd5b505af1158015611f01573d6000803e3d6000fd5b50505050611df2565b80600160a060020a03166312915a306040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611f4857600080fd5b505af1158015611f5c573d6000803e3d6000fd5b505050506040513d6020811015611f7257600080fd5b5051600954610100900460ff90811691161415611ffa57604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b158015611eed57600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561203857600080fd5b505af115801561204c573d6000803e3d6000fd5b505050506040513d602081101561206257600080fd5b5051600954610100900460ff908116911614156120ea57604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b158015611eed57600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561212857600080fd5b505af115801561213c573d6000803e3d6000fd5b505050506040513d602081101561215257600080fd5b5051600954610100900460ff908116911614156121da57604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b158015611eed57600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561221857600080fd5b505af115801561222c573d6000803e3d6000fd5b505050506040513d602081101561224257600080fd5b5051600954610100900460ff908116911614156122ca57604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b158015611eed57600080fd5b600080fd5b60035460009060609082908190600160a060020a03868116911614156122f857600193506124ff565b600080516020615ca3833981519152600052601b60209081527f0a58d5f3ee890e812ab4348db38dcfb4af382fa21d010a42202bfcfb1bf9ee17805460408051828502810185019091528181529283018282801561237f57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612361575b50505050509250600091505b82518210156124fa5782828151811015156123a257fe5b90602001906020020151905080600160a060020a031663d8961c8d8660006040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a031681526020018215151515815260200192505050602060405180830381600087803b15801561241657600080fd5b505af115801561242a573d6000803e3d6000fd5b505050506040513d602081101561244057600080fd5b5051806124e15750604080517fd8961c8d000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301526001602483015291519183169163d8961c8d916044808201926020929091908290030181600087803b1580156124b457600080fd5b505af11580156124c8573d6000803e3d6000fd5b505050506040513d60208110156124de57600080fd5b50515b156124ef57600193506124ff565b60019091019061238b565b600093505b505050919050565b6000612512336122cf565b151561251d57600080fd5b6125278383612b2e565b9392505050565b602054600090600160a060020a0316156125c457602080546040805160e260020a63099a0f85028152600160a060020a038681166004830152915191909216926326683e1492602480820193918290030181600087803b15801561259157600080fd5b505af11580156125a5573d6000803e3d6000fd5b505050506040513d60208110156125bb57600080fd5b50519050611575565b600480546040805160e260020a63099a0f85028152600160a060020a0386811694820194909452905192909116916326683e14916024808201926020929091908290030181600087803b15801561261a57600080fd5b505af115801561262e573d6000803e3d6000fd5b505050506040513d602081101561264457600080fd5b505192915050565b6022546060908190600160a060020a0316156127dd57602254604080517f268bfac40000000000000000000000000000000000000000000000000000000081526004810191825260448101889052600160a060020a039092169163268bfac491899189918991899190819060248101906064018787808284379091018481038352858152602001905085858082843782019150509650505050505050600060405180830381600087803b15801561270257600080fd5b505af1158015612716573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561273f57600080fd5b81019080805164010000000081111561275757600080fd5b8201602081018481111561276a57600080fd5b815164010000000081118282018710171561278457600080fd5b505092919060200180516401000000008111156127a057600080fd5b820160208101848111156127b357600080fd5b81516401000000008111828201871017156127cd57600080fd5b5094965094506129539350505050565b60048054604080517f268bfac400000000000000000000000000000000000000000000000000000000815292830190815260448301889052600160a060020a039091169163268bfac491899189918991899190819060248101906064018787808284379091018481038352858152602001905085858082843782019150509650505050505050600060405180830381600087803b15801561287d57600080fd5b505af1158015612891573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160409081528110156128ba57600080fd5b8101908080516401000000008111156128d257600080fd5b820160208101848111156128e557600080fd5b81516401000000008111828201871017156128ff57600080fd5b5050929190602001805164010000000081111561291b57600080fd5b8201602081018481111561292e57600080fd5b815164010000000081118282018710171561294857600080fd5b509496509450505050505b94509492505050565b60095460ff1681565b50600090565b60006014546000141561298057506001611575565b6115728261419d565b60008033600160a060020a038416146129a157600080fd5b82905080600160a060020a0316638280dd8f60006040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b1580156129ee57600080fd5b505af1158015612a02573d6000803e3d6000fd5b505050506040513d6020811015612a1857600080fd5b5050604080517f27c1c21d0000000000000000000000000000000000000000000000000000000081529051600160a060020a038316916327c1c21d9160048083019260209291908290030181600087803b158015612a7557600080fd5b505af1158015612a89573d6000803e3d6000fd5b505050506040513d6020811015612a9f57600080fd5b50511591505b50919050565b6000828152600760209081526040822060ff8481169290920490911690601f841690600282900a9081908460088110612ae057fe5b600881049091015460046007909216919091026101000a90041663ffffffff1615612b0c576001612b0f565b60005b9695505050505050565b601254600160a060020a031681565b600d5490565b6000828152600760209081526040822060ff8481169290920490911690601f841690600282900a90849082908560088110612b6557fe5b600881049091015460046007909216919091026101000a90041663ffffffff1615612b91576001612b94565b60005b9050801515612bed57600087815260076020526040902082908560088110612bb857fe5b60088104909101805463ffffffff60046007909416939093026101000a80820484169094178316840292909302199092161790555b6040805188815260ff881660208201528215158183015290517f4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d9181900360600190a19695505050505050565b6000818152601b60205260408120541515612d00575060005b601c54811015612d0057601c805483919083908110612c6e57fe5b6000918252602090912001541415612cf857601c54600019018114612cc657601c80546000198101908110612c9f57fe5b9060005260206000200154601c82815481101515612cb957fe5b6000918252602090912001555b601c80546000198101908110612cd857fe5b6000918252602082200155601c80546000190190612cf69082615bcc565b505b600101612c53565b5050565b60105460ff1681565b600090565b600080516020615ca38339815191526000908152601b6020527f0a58d5f3ee890e812ab4348db38dcfb4af382fa21d010a42202bfcfb1bf9ee178054606092919082908110612d5d57fe5b600091825260209091200154600160a060020a03169050612d85612d7f615863565b82615868565b91505b5090565b601c805482908110612d9a57fe5b600091825260209091200154905081565b600c5481565b602154600090600160a060020a031615612e2d57602154604080517f40b89f06000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152915191909216916340b89f069160248083019260209291908290030181600087803b15801561259157600080fd5b60048054604080517f40b89f06000000000000000000000000000000000000000000000000000000008152600160a060020a0386811694820194909452905192909116916340b89f06916024808201926020929091908290030181600087803b15801561261a57600080fd5b600354600160a060020a0316321480612ebc5750600354600160a060020a031633145b1515612ec757600080fd5b600354600160a060020a0316ff5b612ede336122cf565b1515612ee957600080fd5b60215460408051600160a060020a038085168252909216602083015280517ffa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f6619281900390910190a160218054600160a060020a031916600160a060020a0392909216919091179055565b6000612f5d611842565b1515612f6857600080fd5b60105460ff161515612f7957600080fd5b6000600b805460018160011615610100020316600290049050111561302857600d80546001818101808455600093909352600b8054612fef937fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50192600261010091831615919091026000190190911604615ae3565b5050600c54600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd01555b600f805461304b91600b9160026000196101006001841615020190911604615ae3565b5042600c5560408051602081019182905260009081905261306e91600f91615bf0565b506010805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a03166130af611379565b60408051600160a060020a038085168252831660208201526060918101828152600b805460026000196101006001841615020190911604938301849052926080830190849080156131415780601f1061311657610100808354040283529160200191613141565b820191906000526020600020905b81548152906001019060200180831161312457829003601f168201915b505094505050505060405180910390a150600190565b601d6020528160005260406000208181548110151561317257fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815294509092509083018282801561142d5780601f106114025761010080835404028352916020019161142d565b60165481565b6021546000908190600160a060020a03161561327c57602160009054906101000a9004600160a060020a0316600160a060020a031663575185ed6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561324957600080fd5b505af115801561325d573d6000803e3d6000fd5b505050506040513d602081101561327357600080fd5b50519150612d88565b60048054604080517f575185ed0000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263575185ed9282820192602092908290030181600087803b1580156132d957600080fd5b505af11580156132ed573d6000803e3d6000fd5b505050506040513d602081101561330357600080fd5b505191505090565b602254606090600160a060020a03161561341657602254604080517f589aafc1000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163589aafc191602480830192600092919082900301818387803b15801561338657600080fd5b505af115801561339a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156133c357600080fd5b8101908080516401000000008111156133db57600080fd5b820160208101848111156133ee57600080fd5b815164010000000081118282018710171561340857600080fd5b509094506115759350505050565b60048054604080517f589aafc1000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051929091169163589aafc19160248082019260009290919082900301818387803b15801561348157600080fd5b505af1158015613495573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156134be57600080fd5b8101908080516401000000008111156134d657600080fd5b820160208101848111156134e957600080fd5b815164010000000081118282018710171561350357600080fd5b50909695505050505050565b600080516020615ca383398151915281565b601f54600160a060020a031681565b60015481565b61353e6139dc565b151561354957600080fd5b60408051602081019182905260009081905261356791600f91615bf0565b506010805460ff19169055565b600f805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561142d5780601f106114025761010080835404028352916020019161142d565b600954610100900460ff1681565b601f54600090600160a060020a03161561364357601f546040805160e060020a6363e6ffdd028152600160a060020a038581166004830152915191909216916363e6ffdd9160248083019260209291908290030181600087803b15801561259157600080fd5b600480546040805160e060020a6363e6ffdd028152600160a060020a0386811694820194909452905192909116916363e6ffdd916024808201926020929091908290030181600087803b15801561261a57600080fd5b60006136a4336122cf565b15156136af57600080fd5b600160a060020a03821615156136c457600080fd5b5060005b6000838152601b602052604090205481101561374757600080516020615ca38339815191528314156136f957600080fd5b6000838152601b602052604090208054600160a060020a03841691908390811061371f57fe5b600091825260209091200154600160a060020a0316141561373f57613804565b6001016136c8565b6000838152601b60209081526040822080546001808201808455928552929093209092018054600160a060020a031916600160a060020a03861617905514156137c057601c80546001810182556000919091527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211018390555b60408051848152600160a060020a038416602082015281517f145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471929181900390910190a15b505050565b6003546000908190600160a060020a03848116911614806138325750600954606460ff90911610155b156138405760019150612aa5565b600954600061010090910460ff16111561398557600480546040805160e060020a6363e6ffdd028152600160a060020a0387811694820194909452905192909116916363e6ffdd916024808201926020929091908290030181600087803b1580156138aa57600080fd5b505af11580156138be573d6000803e3d6000fd5b505050506040513d60208110156138d457600080fd5b5051600954604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a916064808201926020929091908290030181600087803b15801561395257600080fd5b505af1158015613966573d6000803e3d6000fd5b505050506040513d602081101561397c57600080fd5b50519150612aa5565b60009150612aa5565b600254600160a060020a031632146139a557600080fd5b600160a060020a03811615156139ba57600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a0316321490565b6018805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561142d5780601f106114025761010080835404028352916020019161142d565b613a51336122cf565b1515613a5c57600080fd5b6000828152601d6020908152604082208054600181018083559184529282902084519193611df29391019190850190615bf0565b6000613a9b336122cf565b1515613aa657600080fd5b600860ff831610613ab657600080fd5b600083815260076020526040902060ff831660088110613ad257fe5b60088082049290920154600086815260076020819052604090912092166004026101000a900463ffffffff1692509060ff8416908110613b0e57fe5b600881049091018054600163ffffffff60046007909516949094026101000a80830485169190910184168102908402199091161790556040805185815260ff8516602082015291831682820152517f77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f9181900360600190a1505050565b600e805482908110612d9a57fe5b600d805482908110613ba757fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529350909183018282801561142d5780601f106114025761010080835404028352916020019161142d565b6000613c1832613809565b905090565b613c26336122cf565b1515613c3157600080fd5b60225460408051600160a060020a038085168252909216602083015280517f78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee964779281900390910190a160228054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a031681565b613cb3336122cf565b1515613cbe57600080fd5b8051612d00906018906020840190615bf0565b6003546000908190600160a060020a0384811691161480613cfa5750600954600a60ff90911610155b15613d085760019150612aa5565b600954600061010090910460ff16111561398557600480546040805160e060020a6363e6ffdd028152600160a060020a0387811694820194909452905192909116916363e6ffdd916024808201926020929091908290030181600087803b158015613d7257600080fd5b505af1158015613d86573d6000803e3d6000fd5b505050506040513d6020811015613d9c57600080fd5b5051600954604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a916064808201926020929091908290030181600087803b15801561395257600080fd5b600a81565b613e28336122cf565b1515613e3357600080fd5b601f5460408051600160a060020a038085168252909216602083015280517fc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce02999281900390910190a1601f8054600160a060020a031916600160a060020a0392909216919091179055565b613ea56139dc565b1515613eb057600080fd5b60105460ff1615613ec057600080fd5b8051608011613ece57600080fd5b8051613ee190600f906020840190615bf0565b506010805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316613f25611379565b60408051600160a060020a038085168252831660208201526060918101828152600f80546002600019610100600184161502019091160493830184905292608083019084908015613fb75780601f10613f8c57610100808354040283529160200191613fb7565b820191906000526020600020905b815481529060010190602001808311613f9a57829003601f168201915b505094505050505060405180910390a150565b6013805482908110613fd857fe5b600091825260209091200154600160a060020a0316905081565b602054600160a060020a031681565b6000806140118987878787615454565b151561401c57600080fd5b600160e060020a031989166000908152601e60209081526040808320549051604481018c9052600160a060020a038b811660648301526060602483019081528b5160848401528b5191909316965086948e948c948f948f949193849360a49092019291880191908190849084905b838110156140a257818101518382015260200161408a565b50505050905090810190601f1680156140cf5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e060020a0319909916989098178852518151919790965086955093509150819050838360005b8381101561414557818101518382015260200161412d565b50505050905090810190601f1680156141725780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af49250505080151561419257600080fd5b505050505050505050565b600080805b6014548110156141ed5783600160a060020a03166013828154811015156141c557fe5b600091825260209091200154600160a060020a031614156141e557600191505b6001016141a2565b5092915050565b6141fd336122cf565b151561420857600080fd5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015613804573d6000803e3d6000fd5b614246613c0d565b151561425157600080fd5b6009805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b60606000806020845111151561437257505081518083015160008181526005602090815260409182902080548351601f6002610100600185161502600019019093169290920491820184900484028101840190945280845293949390918301828280156143665780601f1061433b57610100808354040283529160200191614366565b820191906000526020600020905b81548152906001019060200180831161434957829003601f168201915b50505050509250611cfd565b6006846040518082805190602001908083835b602083106143a45780518252601f199092019160209182019101614385565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156144585780601f1061442d57610100808354040283529160200191614458565b820191906000526020600020905b81548152906001019060200180831161443b57829003601f168201915b505050505092505050919050565b602254600160a060020a031681565b600454600160a060020a031681565b602154600090600160a060020a0316156144eb57602160009054906101000a9004600160a060020a0316600160a060020a031663b8cfaf056040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156118a157600080fd5b60048054604080517fb8cfaf050000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263b8cfaf059282820192602092908290030181600087803b15801561192557600080fd5b602154600090600160a060020a0316156145ff57602154604080517fbf4e088f000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015285811660248301529151919092169163bf4e088f9160448083019260209291908290030181600087803b1580156145cc57600080fd5b505af11580156145e0573d6000803e3d6000fd5b505050506040513d60208110156145f657600080fd5b50519050611a5f565b60048054604080517fbf4e088f000000000000000000000000000000000000000000000000000000008152600160a060020a038781169482019490945285841660248201529051929091169163bf4e088f916044808201926020929091908290030181600087803b15801561467357600080fd5b505af1158015614687573d6000803e3d6000fd5b505050506040513d602081101561469d57600080fd5b50519392505050565b6146ae613c0d565b15156146b957600080fd5b604080516020808252600b8054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156147585780601f1061472d57610100808354040283529160200191614758565b820191906000526020600020905b81548152906001019060200180831161473b57829003601f168201915b50509250505060405180910390a1565b601e60205260009081526040902054600160a060020a031681565b60145481565b600354600160a060020a03163214806147ac5750600354600160a060020a031633145b15156147b757600080fd5b60128054600160a060020a031916600160a060020a0392909216919091179055565b6000806147e5336122cf565b15156147f057600080fd5b600080516020615ca383398151915284141561480b57600080fd5b600091505b6000848152601b6020526040902054821015611df2576000848152601b602052604090208054600160a060020a03851691908490811061484c57fe5b600091825260209091200154600160a060020a031614156149a957506000838152601b602052604090205460001981018214614902576000848152601b60205260409020805460001983019081106148a057fe5b6000918252602080832090910154868352601b90915260409091208054600160a060020a0390921691849081106148d357fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b6000848152601b602052604090208054600019830190811061492057fe5b600091825260208083209091018054600160a060020a0319169055858252601b905260409020805460001901906149579082615bcc565b5061496184612c3a565b60408051858152600160a060020a038516602082015281517fa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456929181900390910190a1611df2565b600190910190614810565b601a5481565b602254600090600160a060020a031615614a3657602254604080517fd6be0f49000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163d6be0f499160248083019260209291908290030181600087803b15801561259157600080fd5b60048054604080517fd6be0f49000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051929091169163d6be0f49916024808201926020929091908290030181600087803b15801561261a57600080fd5b600b805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561142d5780601f106114025761010080835404028352916020019161142d565b6000600860ff831610614b0f57600080fd5b600083815260076020526040902060ff831660088110614b2b57fe5b600891828204019190066004029054906101000a900463ffffffff16905092915050565b6000806000806000806000806000614b656139dc565b1515614b7057600080fd5b896040516020018082805190602001908083835b60208310614ba35780518252601f199092019160209182019101614b84565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310614c065780518252601f199092019160209182019101614be7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209750600b6040516020018082805460018160011615610100020316600290048015614c955780601f10614c73576101008083540402835291820191614c95565b820191906000526020600020905b815481529060010190602001808311614c81575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310614cd85780518252601f199092019160209182019101614cb9565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120995050505087871415614ec557600d541515614d4057604080516020810191829052600090819052614d3591600b91615bf0565b506000600c55614deb565b6000955060009450600093505b600d54841015614da35784600e85815481101515614d6757fe5b90600052602060002001541115614d9857839550600e84815481101515614d8a57fe5b906000526020600020015494505b600190930192614d4d565b600d805487908110614db157fe5b90600052602060002001600b9080546001816001161561010002031660029004614ddc929190615ae3565b50600c859055614deb866158e4565b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168b60006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614e80578181015183820152602001614e68565b50505050905090810190601f168015614ead5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600098506150c7565b6000199250600091505b600d54821015614fe457600d805483908110614ee757fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015614f4f5780601f10614f2d576101008083540402835291820191614f4f565b820191906000526020600020905b815481529060010190602001808311614f3b575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310614f925780518252601f199092019160209182019101614f73565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120935050505087811415614fd957614fd1826158e4565b819250614fe4565b600190910190614ecf565b600019831415614ff357600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168b856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561508757818101518382015260200161506f565b50505050905090810190601f1680156150b45780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18298505b5050505050505050919050565b6000806150e0336122cf565b15156150eb57600080fd5b8351602010615146575050815180830151600081815260056020526040812091929161511691615b64565b600083511115615141576000828152600560209081526040909120845161513f92860190615bf0565b505b615231565b6006846040518082805190602001908083835b602083106151785780518252601f199092019160209182019101615159565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092206151b1925090506000615b64565b60008351111561523157826006856040518082805190602001908083835b602083106151ee5780518252601f1990920191602091820191016151cf565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161522f9591949190910192509050615bf0565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c846040518080602001828103825283818151815260200191508051906020019080838360005b83811015615290578181015183820152602001615278565b50505050905090810190601f1680156152bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150505050565b6152d9336122cf565b15156152e457600080fd5b6000818152600760205260408120906152fd8282615c5e565b50506040805182815290517f87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f9181900360200190a150565b601f54600090600160a060020a0316156153b157601f54604080517fe7cf0c66000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163e7cf0c669160248083019260209291908290030181600087803b15801561259157600080fd5b60048054604080517fe7cf0c66000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051929091169163e7cf0c66916024808201926020929091908290030181600087803b15801561261a57600080fd5b601b6020528160005260406000208181548110151561543857fe5b600091825260209091200154600160a060020a03169150829050565b600160e060020a031985166000908152601e6020526040812054600160a060020a03168180808084151561548757600080fd5b60018a6040518082805190602001908083835b602083106154b95780518252601f19909201916020918201910161549a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208a8a8a604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af115801561555a573d6000803e3d6000fd5b50505060206040510351935061556f846122cf565b151561557e5760009550615642565b6155bd6040805190810160405280600381526020017f69696400000000000000000000000000000000000000000000000000000000008152508b6159e6565b9250600160a060020a03831630146155d85760009550615642565b6156176040805190810160405280600381526020017f69617400000000000000000000000000000000000000000000000000000000008152508b615a76565b9150811561563d576103e88204601a544201039050601954811115151561563d57600080fd5b600195505b505050505095945050505050565b606481565b60195481565b600354600160a060020a031632148061567e5750600354600160a060020a031633145b151561568957600080fd5b600160a060020a038116151561569e57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b60035460009081908190600160a060020a03163214806156ea5750600354600160a060020a031633145b15156156f557600080fd5b50506014546000190160005b601454811015611cf85783600160a060020a031660138281548110151561572457fe5b600091825260209091200154600160a060020a0316141561585b57601380548290811061574d57fe5b60009182526020909120018054600160a060020a03191690558082146157f257601380548390811061577b57fe5b60009182526020909120015460138054600160a060020a0390921691839081106157a157fe5b60009182526020909120018054600160a060020a031916600160a060020a039290921691909117905560138054839081106157d857fe5b60009182526020909120018054600160a060020a03191690555b6014829055600160a060020a0384166000818152601560209081526040918290208054600160a060020a0319169055815192835290517fd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e29281900390910190a160019250611cfd565b600101615701565b600e90565b604080517f6d616b654944537472696e6728696e742c6164647265737329000000000000008152815190819003601901812080825260e060020a850260048301819052600883018590526060939192909160ff91908160288160008681f18015156158d257600080fd5b50604080820190529695505050505050565b600d8054829081106158f257fe5b9060005260206000200160006159089190615b64565b600e80548290811061591657fe5b6000918252602082200155600d546000190181146159bc57600d8054600019810190811061594057fe5b90600052602060002001600d8281548110151561595957fe5b906000526020600020019080546001816001161561010002031660029004615982929190615ae3565b50600e8054600019810190811061599557fe5b9060005260206000200154600e828154811015156159af57fe5b6000918252602090912001555b600d8054906159cf906000198301615ba8565b50600e805490612d00906000198301615bcc565b50565b604080517f6765744164647265737328737472696e672c627974657329000000000000000081529051908190036018018120825181835260208501516004840181905260009360fe92906024820190865b83811015615a54576020818a018101516024848401015201615a37565b5060208183836000896000f18080156122ca5750505198975050505050505050565b604080517f67657455696e7428737472696e672c627974657329000000000000000000000081529051908190036015018120825181835260208501516004840181905260009360fe929060248201908683811015615a54576020818a018101516024848401015201615a37565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615b1c5780548555615b58565b82800160010185558215615b5857600052602060002091601f016020900482015b82811115615b58578254825591600101919060010190615b3d565b50612d88929150615c65565b50805460018160011615610100020316600290046000825580601f10615b8a57506159e3565b601f0160209004906000526020600020908101906159e39190615c65565b81548183558181111561380457600083815260209020613804918101908301615c7f565b81548183558181111561380457600083815260209020613804918101908301615c65565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615c3157805160ff1916838001178555615b58565b82800160010185558215615b58579182015b82811115615b58578251825591602001919060010190615c43565b5060009055565b61138691905b80821115612d885760008155600101615c6b565b61138691905b80821115612d88576000615c998282615b64565b50600101615c85560074656e616e745f61646d696e0000000000000000000000000000000000000000a165627a7a7230582053a8d1595d26d5f018356c6a9b7a4b87dde045745ddbcd421926842b939e31130029"

// DeployBaseTenantSpace deploys a new Ethereum contract, binding an instance of BaseTenantSpace to it.
func DeployBaseTenantSpace(auth *bind.TransactOpts, backend bind.ContractBackend, _contentSpace common.Address, _tenantName string, _kmsAddr common.Address) (common.Address, *types.Transaction, *BaseTenantSpace, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseTenantSpaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseTenantSpaceBin), backend, _contentSpace, _tenantName, _kmsAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseTenantSpace{BaseTenantSpaceCaller: BaseTenantSpaceCaller{contract: contract}, BaseTenantSpaceTransactor: BaseTenantSpaceTransactor{contract: contract}, BaseTenantSpaceFilterer: BaseTenantSpaceFilterer{contract: contract}}, nil
}

// BaseTenantSpace is an auto generated Go binding around an Ethereum contract.
type BaseTenantSpace struct {
	BaseTenantSpaceCaller     // Read-only binding to the contract
	BaseTenantSpaceTransactor // Write-only binding to the contract
	BaseTenantSpaceFilterer   // Log filterer for contract events
}

// BaseTenantSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseTenantSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseTenantSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseTenantSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseTenantSpaceSession struct {
	Contract     *BaseTenantSpace  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseTenantSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseTenantSpaceCallerSession struct {
	Contract *BaseTenantSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// BaseTenantSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseTenantSpaceTransactorSession struct {
	Contract     *BaseTenantSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// BaseTenantSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseTenantSpaceRaw struct {
	Contract *BaseTenantSpace // Generic contract binding to access the raw methods on
}

// BaseTenantSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseTenantSpaceCallerRaw struct {
	Contract *BaseTenantSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// BaseTenantSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseTenantSpaceTransactorRaw struct {
	Contract *BaseTenantSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseTenantSpace creates a new instance of BaseTenantSpace, bound to a specific deployed contract.
func NewBaseTenantSpace(address common.Address, backend bind.ContractBackend) (*BaseTenantSpace, error) {
	contract, err := bindBaseTenantSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpace{BaseTenantSpaceCaller: BaseTenantSpaceCaller{contract: contract}, BaseTenantSpaceTransactor: BaseTenantSpaceTransactor{contract: contract}, BaseTenantSpaceFilterer: BaseTenantSpaceFilterer{contract: contract}}, nil
}

// NewBaseTenantSpaceCaller creates a new read-only instance of BaseTenantSpace, bound to a specific deployed contract.
func NewBaseTenantSpaceCaller(address common.Address, caller bind.ContractCaller) (*BaseTenantSpaceCaller, error) {
	contract, err := bindBaseTenantSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceCaller{contract: contract}, nil
}

// NewBaseTenantSpaceTransactor creates a new write-only instance of BaseTenantSpace, bound to a specific deployed contract.
func NewBaseTenantSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseTenantSpaceTransactor, error) {
	contract, err := bindBaseTenantSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceTransactor{contract: contract}, nil
}

// NewBaseTenantSpaceFilterer creates a new log filterer instance of BaseTenantSpace, bound to a specific deployed contract.
func NewBaseTenantSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseTenantSpaceFilterer, error) {
	contract, err := bindBaseTenantSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceFilterer{contract: contract}, nil
}

// bindBaseTenantSpace binds a generic wrapper to an already deployed contract.
func bindBaseTenantSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseTenantSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseTenantSpace *BaseTenantSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseTenantSpace.Contract.BaseTenantSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseTenantSpace *BaseTenantSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.BaseTenantSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseTenantSpace *BaseTenantSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.BaseTenantSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseTenantSpace *BaseTenantSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseTenantSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseTenantSpace *BaseTenantSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseTenantSpace *BaseTenantSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceSession) CANACCESS() (uint8, error) {
	return _BaseTenantSpace.Contract.CANACCESS(&_BaseTenantSpace.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CANACCESS() (uint8, error) {
	return _BaseTenantSpace.Contract.CANACCESS(&_BaseTenantSpace.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceSession) CANEDIT() (uint8, error) {
	return _BaseTenantSpace.Contract.CANEDIT(&_BaseTenantSpace.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CANEDIT() (uint8, error) {
	return _BaseTenantSpace.Contract.CANEDIT(&_BaseTenantSpace.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceSession) CANSEE() (uint8, error) {
	return _BaseTenantSpace.Contract.CANSEE(&_BaseTenantSpace.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CANSEE() (uint8, error) {
	return _BaseTenantSpace.Contract.CANSEE(&_BaseTenantSpace.CallOpts)
}

// GROUPIDADMIN is a free data retrieval call binding the contract method 0x58d40b25.
//
// Solidity: function GROUP_ID_ADMIN() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GROUPIDADMIN(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "GROUP_ID_ADMIN")
	return *ret0, err
}

// GROUPIDADMIN is a free data retrieval call binding the contract method 0x58d40b25.
//
// Solidity: function GROUP_ID_ADMIN() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceSession) GROUPIDADMIN() ([32]byte, error) {
	return _BaseTenantSpace.Contract.GROUPIDADMIN(&_BaseTenantSpace.CallOpts)
}

// GROUPIDADMIN is a free data retrieval call binding the contract method 0x58d40b25.
//
// Solidity: function GROUP_ID_ADMIN() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GROUPIDADMIN() ([32]byte, error) {
	return _BaseTenantSpace.Contract.GROUPIDADMIN(&_BaseTenantSpace.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) AddressKMS() (common.Address, error) {
	return _BaseTenantSpace.Contract.AddressKMS(&_BaseTenantSpace.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) AddressKMS() (common.Address, error) {
	return _BaseTenantSpace.Contract.AddressKMS(&_BaseTenantSpace.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CanCommit() (bool, error) {
	return _BaseTenantSpace.Contract.CanCommit(&_BaseTenantSpace.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CanCommit() (bool, error) {
	return _BaseTenantSpace.Contract.CanCommit(&_BaseTenantSpace.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CanConfirm() (bool, error) {
	return _BaseTenantSpace.Contract.CanConfirm(&_BaseTenantSpace.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CanConfirm() (bool, error) {
	return _BaseTenantSpace.Contract.CanConfirm(&_BaseTenantSpace.CallOpts)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "canContribute", _candidate)
	return *ret0, err
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.CanContribute(&_BaseTenantSpace.CallOpts, _candidate)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.CanContribute(&_BaseTenantSpace.CallOpts, _candidate)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CanEdit() (bool, error) {
	return _BaseTenantSpace.Contract.CanEdit(&_BaseTenantSpace.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CanEdit() (bool, error) {
	return _BaseTenantSpace.Contract.CanEdit(&_BaseTenantSpace.CallOpts)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanNodePublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "canNodePublish", _candidate)
	return *ret0, err
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CanNodePublish(_candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.CanNodePublish(&_BaseTenantSpace.CallOpts, _candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CanNodePublish(_candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.CanNodePublish(&_BaseTenantSpace.CallOpts, _candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "canPublish", _candidate)
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.CanPublish(&_BaseTenantSpace.CallOpts, _candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.CanPublish(&_BaseTenantSpace.CallOpts, _candidate)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "canReview", arg0)
	return *ret0, err
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CanReview(arg0 common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.CanReview(&_BaseTenantSpace.CallOpts, arg0)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CanReview(arg0 common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.CanReview(&_BaseTenantSpace.CallOpts, arg0)
}

// CheckCallFunc is a free data retrieval call binding the contract method 0xed1f6456.
//
// Solidity: function checkCallFunc(bytes4 _func4Bytes, bytes _encAuthToken, uint8 _v, bytes32 _r, bytes32 _s) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CheckCallFunc(opts *bind.CallOpts, _func4Bytes [4]byte, _encAuthToken []byte, _v uint8, _r [32]byte, _s [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "checkCallFunc", _func4Bytes, _encAuthToken, _v, _r, _s)
	return *ret0, err
}

// CheckCallFunc is a free data retrieval call binding the contract method 0xed1f6456.
//
// Solidity: function checkCallFunc(bytes4 _func4Bytes, bytes _encAuthToken, uint8 _v, bytes32 _r, bytes32 _s) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CheckCallFunc(_func4Bytes [4]byte, _encAuthToken []byte, _v uint8, _r [32]byte, _s [32]byte) (bool, error) {
	return _BaseTenantSpace.Contract.CheckCallFunc(&_BaseTenantSpace.CallOpts, _func4Bytes, _encAuthToken, _v, _r, _s)
}

// CheckCallFunc is a free data retrieval call binding the contract method 0xed1f6456.
//
// Solidity: function checkCallFunc(bytes4 _func4Bytes, bytes _encAuthToken, uint8 _v, bytes32 _r, bytes32 _s) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CheckCallFunc(_func4Bytes [4]byte, _encAuthToken []byte, _v uint8, _r [32]byte, _s [32]byte) (bool, error) {
	return _BaseTenantSpace.Contract.CheckCallFunc(&_BaseTenantSpace.CallOpts, _func4Bytes, _encAuthToken, _v, _r, _s)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CheckKMSAddr(opts *bind.CallOpts, _kmsAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "checkKMSAddr", _kmsAddr)
	return *ret0, err
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _BaseTenantSpace.Contract.CheckKMSAddr(&_BaseTenantSpace.CallOpts, _kmsAddr)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _BaseTenantSpace.Contract.CheckKMSAddr(&_BaseTenantSpace.CallOpts, _kmsAddr)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) CommitPending() (bool, error) {
	return _BaseTenantSpace.Contract.CommitPending(&_BaseTenantSpace.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CommitPending() (bool, error) {
	return _BaseTenantSpace.Contract.CommitPending(&_BaseTenantSpace.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) ContentSpace() (common.Address, error) {
	return _BaseTenantSpace.Contract.ContentSpace(&_BaseTenantSpace.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ContentSpace() (common.Address, error) {
	return _BaseTenantSpace.Contract.ContentSpace(&_BaseTenantSpace.CallOpts)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "contentTypeContracts", arg0)
	return *ret0, err
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseTenantSpace.Contract.ContentTypeContracts(&_BaseTenantSpace.CallOpts, arg0)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _BaseTenantSpace.Contract.ContentTypeContracts(&_BaseTenantSpace.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "contentTypes", arg0)
	return *ret0, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseTenantSpace.Contract.ContentTypes(&_BaseTenantSpace.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _BaseTenantSpace.Contract.ContentTypes(&_BaseTenantSpace.CallOpts, arg0)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "contentTypesLength")
	return *ret0, err
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) ContentTypesLength() (*big.Int, error) {
	return _BaseTenantSpace.Contract.ContentTypesLength(&_BaseTenantSpace.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ContentTypesLength() (*big.Int, error) {
	return _BaseTenantSpace.Contract.ContentTypesLength(&_BaseTenantSpace.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) CountVersionHashes() (*big.Int, error) {
	return _BaseTenantSpace.Contract.CountVersionHashes(&_BaseTenantSpace.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) CountVersionHashes() (*big.Int, error) {
	return _BaseTenantSpace.Contract.CountVersionHashes(&_BaseTenantSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) Creator() (common.Address, error) {
	return _BaseTenantSpace.Contract.Creator(&_BaseTenantSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) Creator() (common.Address, error) {
	return _BaseTenantSpace.Contract.Creator(&_BaseTenantSpace.CallOpts)
}

// DefLeewaySecs is a free data retrieval call binding the contract method 0xd21a8c94.
//
// Solidity: function defLeewaySecs() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) DefLeewaySecs(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "defLeewaySecs")
	return *ret0, err
}

// DefLeewaySecs is a free data retrieval call binding the contract method 0xd21a8c94.
//
// Solidity: function defLeewaySecs() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) DefLeewaySecs() (*big.Int, error) {
	return _BaseTenantSpace.Contract.DefLeewaySecs(&_BaseTenantSpace.CallOpts)
}

// DefLeewaySecs is a free data retrieval call binding the contract method 0xd21a8c94.
//
// Solidity: function defLeewaySecs() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) DefLeewaySecs() (*big.Int, error) {
	return _BaseTenantSpace.Contract.DefLeewaySecs(&_BaseTenantSpace.CallOpts)
}

// DefTokenExpSecs is a free data retrieval call binding the contract method 0xf1df8140.
//
// Solidity: function defTokenExpSecs() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) DefTokenExpSecs(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "defTokenExpSecs")
	return *ret0, err
}

// DefTokenExpSecs is a free data retrieval call binding the contract method 0xf1df8140.
//
// Solidity: function defTokenExpSecs() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) DefTokenExpSecs() (*big.Int, error) {
	return _BaseTenantSpace.Contract.DefTokenExpSecs(&_BaseTenantSpace.CallOpts)
}

// DefTokenExpSecs is a free data retrieval call binding the contract method 0xf1df8140.
//
// Solidity: function defTokenExpSecs() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) DefTokenExpSecs() (*big.Int, error) {
	return _BaseTenantSpace.Contract.DefTokenExpSecs(&_BaseTenantSpace.CallOpts)
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Description(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "description")
	return *ret0, err
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) Description() (string, error) {
	return _BaseTenantSpace.Contract.Description(&_BaseTenantSpace.CallOpts)
}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) Description() (string, error) {
	return _BaseTenantSpace.Contract.Description(&_BaseTenantSpace.CallOpts)
}

// FactoryManager is a free data retrieval call binding the contract method 0x032b5a73.
//
// Solidity: function factoryManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) FactoryManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "factoryManager")
	return *ret0, err
}

// FactoryManager is a free data retrieval call binding the contract method 0x032b5a73.
//
// Solidity: function factoryManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) FactoryManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.FactoryManager(&_BaseTenantSpace.CallOpts)
}

// FactoryManager is a free data retrieval call binding the contract method 0x032b5a73.
//
// Solidity: function factoryManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) FactoryManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.FactoryManager(&_BaseTenantSpace.CallOpts)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "findTypeByHash", typeHash)
	return *ret0, err
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseTenantSpace.Contract.FindTypeByHash(&_BaseTenantSpace.CallOpts, typeHash)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _BaseTenantSpace.Contract.FindTypeByHash(&_BaseTenantSpace.CallOpts, typeHash)
}

// FuncMapping is a free data retrieval call binding the contract method 0xc2a21f14.
//
// Solidity: function funcMapping(bytes4 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) FuncMapping(opts *bind.CallOpts, arg0 [4]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "funcMapping", arg0)
	return *ret0, err
}

// FuncMapping is a free data retrieval call binding the contract method 0xc2a21f14.
//
// Solidity: function funcMapping(bytes4 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) FuncMapping(arg0 [4]byte) (common.Address, error) {
	return _BaseTenantSpace.Contract.FuncMapping(&_BaseTenantSpace.CallOpts, arg0)
}

// FuncMapping is a free data retrieval call binding the contract method 0xc2a21f14.
//
// Solidity: function funcMapping(bytes4 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) FuncMapping(arg0 [4]byte) (common.Address, error) {
	return _BaseTenantSpace.Contract.FuncMapping(&_BaseTenantSpace.CallOpts, arg0)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetBit(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "getBit", _ident, _ord)
	return *ret0, err
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _BaseTenantSpace.Contract.GetBit(&_BaseTenantSpace.CallOpts, _ident, _ord)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _BaseTenantSpace.Contract.GetBit(&_BaseTenantSpace.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetCounter(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "getCounter", _ident, _ord)
	return *ret0, err
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseTenantSpace *BaseTenantSpaceSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _BaseTenantSpace.Contract.GetCounter(&_BaseTenantSpace.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _BaseTenantSpace.Contract.GetCounter(&_BaseTenantSpace.CallOpts, _ident, _ord)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetKMSID(opts *bind.CallOpts, _kmsAddr common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "getKMSID", _kmsAddr)
	return *ret0, err
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _BaseTenantSpace.Contract.GetKMSID(&_BaseTenantSpace.CallOpts, _kmsAddr)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _BaseTenantSpace.Contract.GetKMSID(&_BaseTenantSpace.CallOpts, _kmsAddr)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes _prefix) constant returns(string, string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetKMSInfo(opts *bind.CallOpts, _kmsID string, _prefix []byte) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _BaseTenantSpace.contract.Call(opts, out, "getKMSInfo", _kmsID, _prefix)
	return *ret0, *ret1, err
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes _prefix) constant returns(string, string)
func (_BaseTenantSpace *BaseTenantSpaceSession) GetKMSInfo(_kmsID string, _prefix []byte) (string, string, error) {
	return _BaseTenantSpace.Contract.GetKMSInfo(&_BaseTenantSpace.CallOpts, _kmsID, _prefix)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes _prefix) constant returns(string, string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GetKMSInfo(_kmsID string, _prefix []byte) (string, string, error) {
	return _BaseTenantSpace.Contract.GetKMSInfo(&_BaseTenantSpace.CallOpts, _kmsID, _prefix)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseTenantSpace *BaseTenantSpaceSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseTenantSpace.Contract.GetMeta(&_BaseTenantSpace.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _BaseTenantSpace.Contract.GetMeta(&_BaseTenantSpace.CallOpts, key)
}

// GetTenantID is a free data retrieval call binding the contract method 0x401262c8.
//
// Solidity: function getTenantID() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetTenantID(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "getTenantID")
	return *ret0, err
}

// GetTenantID is a free data retrieval call binding the contract method 0x401262c8.
//
// Solidity: function getTenantID() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) GetTenantID() (string, error) {
	return _BaseTenantSpace.Contract.GetTenantID(&_BaseTenantSpace.CallOpts)
}

// GetTenantID is a free data retrieval call binding the contract method 0x401262c8.
//
// Solidity: function getTenantID() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GetTenantID() (string, error) {
	return _BaseTenantSpace.Contract.GetTenantID(&_BaseTenantSpace.CallOpts)
}

// GroupIds is a free data retrieval call binding the contract method 0x4093d7a1.
//
// Solidity: function groupIds(uint256 ) constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GroupIds(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "groupIds", arg0)
	return *ret0, err
}

// GroupIds is a free data retrieval call binding the contract method 0x4093d7a1.
//
// Solidity: function groupIds(uint256 ) constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceSession) GroupIds(arg0 *big.Int) ([32]byte, error) {
	return _BaseTenantSpace.Contract.GroupIds(&_BaseTenantSpace.CallOpts, arg0)
}

// GroupIds is a free data retrieval call binding the contract method 0x4093d7a1.
//
// Solidity: function groupIds(uint256 ) constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GroupIds(arg0 *big.Int) ([32]byte, error) {
	return _BaseTenantSpace.Contract.GroupIds(&_BaseTenantSpace.CallOpts, arg0)
}

// GroupsMapping is a free data retrieval call binding the contract method 0xea8a3ed8.
//
// Solidity: function groupsMapping(bytes32 , uint256 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GroupsMapping(opts *bind.CallOpts, arg0 [32]byte, arg1 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "groupsMapping", arg0, arg1)
	return *ret0, err
}

// GroupsMapping is a free data retrieval call binding the contract method 0xea8a3ed8.
//
// Solidity: function groupsMapping(bytes32 , uint256 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) GroupsMapping(arg0 [32]byte, arg1 *big.Int) (common.Address, error) {
	return _BaseTenantSpace.Contract.GroupsMapping(&_BaseTenantSpace.CallOpts, arg0, arg1)
}

// GroupsMapping is a free data retrieval call binding the contract method 0xea8a3ed8.
//
// Solidity: function groupsMapping(bytes32 , uint256 ) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) GroupsMapping(arg0 [32]byte, arg1 *big.Int) (common.Address, error) {
	return _BaseTenantSpace.Contract.GroupsMapping(&_BaseTenantSpace.CallOpts, arg0, arg1)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.HasAccess(&_BaseTenantSpace.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.HasAccess(&_BaseTenantSpace.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.HasEditorRight(&_BaseTenantSpace.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.HasEditorRight(&_BaseTenantSpace.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceSession) IndexCategory() (uint8, error) {
	return _BaseTenantSpace.Contract.IndexCategory(&_BaseTenantSpace.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) IndexCategory() (uint8, error) {
	return _BaseTenantSpace.Contract.IndexCategory(&_BaseTenantSpace.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.IsAdmin(&_BaseTenantSpace.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.IsAdmin(&_BaseTenantSpace.CallOpts, _candidate)
}

// KmsManager is a free data retrieval call binding the contract method 0xac65b649.
//
// Solidity: function kmsManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) KmsManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "kmsManager")
	return *ret0, err
}

// KmsManager is a free data retrieval call binding the contract method 0xac65b649.
//
// Solidity: function kmsManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) KmsManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.KmsManager(&_BaseTenantSpace.CallOpts)
}

// KmsManager is a free data retrieval call binding the contract method 0xac65b649.
//
// Solidity: function kmsManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) KmsManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.KmsManager(&_BaseTenantSpace.CallOpts)
}

// ListLength is a free data retrieval call binding the contract method 0x11a3fa38.
//
// Solidity: function listLength(bytes32 listKey) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ListLength(opts *bind.CallOpts, listKey [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "listLength", listKey)
	return *ret0, err
}

// ListLength is a free data retrieval call binding the contract method 0x11a3fa38.
//
// Solidity: function listLength(bytes32 listKey) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) ListLength(listKey [32]byte) (*big.Int, error) {
	return _BaseTenantSpace.Contract.ListLength(&_BaseTenantSpace.CallOpts, listKey)
}

// ListLength is a free data retrieval call binding the contract method 0x11a3fa38.
//
// Solidity: function listLength(bytes32 listKey) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ListLength(listKey [32]byte) (*big.Int, error) {
	return _BaseTenantSpace.Contract.ListLength(&_BaseTenantSpace.CallOpts, listKey)
}

// ListsMapping is a free data retrieval call binding the contract method 0x4d368f10.
//
// Solidity: function listsMapping(bytes32 , uint256 ) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ListsMapping(opts *bind.CallOpts, arg0 [32]byte, arg1 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "listsMapping", arg0, arg1)
	return *ret0, err
}

// ListsMapping is a free data retrieval call binding the contract method 0x4d368f10.
//
// Solidity: function listsMapping(bytes32 , uint256 ) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) ListsMapping(arg0 [32]byte, arg1 *big.Int) (string, error) {
	return _BaseTenantSpace.Contract.ListsMapping(&_BaseTenantSpace.CallOpts, arg0, arg1)
}

// ListsMapping is a free data retrieval call binding the contract method 0x4d368f10.
//
// Solidity: function listsMapping(bytes32 , uint256 ) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ListsMapping(arg0 [32]byte, arg1 *big.Int) (string, error) {
	return _BaseTenantSpace.Contract.ListsMapping(&_BaseTenantSpace.CallOpts, arg0, arg1)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) Name() (string, error) {
	return _BaseTenantSpace.Contract.Name(&_BaseTenantSpace.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) Name() (string, error) {
	return _BaseTenantSpace.Contract.Name(&_BaseTenantSpace.CallOpts)
}

// NodeManager is a free data retrieval call binding the contract method 0x9bb5cd3f.
//
// Solidity: function nodeManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) NodeManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "nodeManager")
	return *ret0, err
}

// NodeManager is a free data retrieval call binding the contract method 0x9bb5cd3f.
//
// Solidity: function nodeManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) NodeManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.NodeManager(&_BaseTenantSpace.CallOpts)
}

// NodeManager is a free data retrieval call binding the contract method 0x9bb5cd3f.
//
// Solidity: function nodeManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) NodeManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.NodeManager(&_BaseTenantSpace.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) ObjectHash() (string, error) {
	return _BaseTenantSpace.Contract.ObjectHash(&_BaseTenantSpace.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ObjectHash() (string, error) {
	return _BaseTenantSpace.Contract.ObjectHash(&_BaseTenantSpace.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseTenantSpace.Contract.ObjectTimestamp(&_BaseTenantSpace.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _BaseTenantSpace.Contract.ObjectTimestamp(&_BaseTenantSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) Owner() (common.Address, error) {
	return _BaseTenantSpace.Contract.Owner(&_BaseTenantSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) Owner() (common.Address, error) {
	return _BaseTenantSpace.Contract.Owner(&_BaseTenantSpace.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) ParentAddress() (common.Address, error) {
	return _BaseTenantSpace.Contract.ParentAddress(&_BaseTenantSpace.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ParentAddress() (common.Address, error) {
	return _BaseTenantSpace.Contract.ParentAddress(&_BaseTenantSpace.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) PendingHash() (string, error) {
	return _BaseTenantSpace.Contract.PendingHash(&_BaseTenantSpace.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) PendingHash() (string, error) {
	return _BaseTenantSpace.Contract.PendingHash(&_BaseTenantSpace.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "requiresReview")
	return *ret0, err
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) RequiresReview() (bool, error) {
	return _BaseTenantSpace.Contract.RequiresReview(&_BaseTenantSpace.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) RequiresReview() (bool, error) {
	return _BaseTenantSpace.Contract.RequiresReview(&_BaseTenantSpace.CallOpts)
}

// UserManager is a free data retrieval call binding the contract method 0x5c8a7687.
//
// Solidity: function userManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) UserManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "userManager")
	return *ret0, err
}

// UserManager is a free data retrieval call binding the contract method 0x5c8a7687.
//
// Solidity: function userManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) UserManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.UserManager(&_BaseTenantSpace.CallOpts)
}

// UserManager is a free data retrieval call binding the contract method 0x5c8a7687.
//
// Solidity: function userManager() constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) UserManager() (common.Address, error) {
	return _BaseTenantSpace.Contract.UserManager(&_BaseTenantSpace.CallOpts)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) UserWallets(opts *bind.CallOpts, _userAddr common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "userWallets", _userAddr)
	return *ret0, err
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) UserWallets(_userAddr common.Address) (common.Address, error) {
	return _BaseTenantSpace.Contract.UserWallets(&_BaseTenantSpace.CallOpts, _userAddr)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) UserWallets(_userAddr common.Address) (common.Address, error) {
	return _BaseTenantSpace.Contract.UserWallets(&_BaseTenantSpace.CallOpts, _userAddr)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "validType", content_type)
	return *ret0, err
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.ValidType(&_BaseTenantSpace.CallOpts, content_type)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) ValidType(content_type common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.ValidType(&_BaseTenantSpace.CallOpts, content_type)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceSession) Version() ([32]byte, error) {
	return _BaseTenantSpace.Contract.Version(&_BaseTenantSpace.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) Version() ([32]byte, error) {
	return _BaseTenantSpace.Contract.Version(&_BaseTenantSpace.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceSession) VersionAPI() ([32]byte, error) {
	return _BaseTenantSpace.Contract.VersionAPI(&_BaseTenantSpace.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) VersionAPI() ([32]byte, error) {
	return _BaseTenantSpace.Contract.VersionAPI(&_BaseTenantSpace.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseTenantSpace.Contract.VersionHashes(&_BaseTenantSpace.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _BaseTenantSpace.Contract.VersionHashes(&_BaseTenantSpace.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseTenantSpace.Contract.VersionTimestamp(&_BaseTenantSpace.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _BaseTenantSpace.Contract.VersionTimestamp(&_BaseTenantSpace.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceSession) Visibility() (uint8, error) {
	return _BaseTenantSpace.Contract.Visibility(&_BaseTenantSpace.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) Visibility() (uint8, error) {
	return _BaseTenantSpace.Contract.Visibility(&_BaseTenantSpace.CallOpts)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BaseTenantSpace.contract.Call(opts, out, "whitelistedType", content_type)
	return *ret0, err
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.WhitelistedType(&_BaseTenantSpace.CallOpts, content_type)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCallerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _BaseTenantSpace.Contract.WhitelistedType(&_BaseTenantSpace.CallOpts, content_type)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) AccessRequestV3(opts *bind.TransactOpts, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "accessRequestV3", customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AccessRequestV3(&_BaseTenantSpace.TransactOpts, customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AccessRequestV3(&_BaseTenantSpace.TransactOpts, customValues, stakeholders)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AddContentType(&_BaseTenantSpace.TransactOpts, content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AddContentType(&_BaseTenantSpace.TransactOpts, content_type, content_contract)
}

// AddFuncs is a paid mutator transaction binding the contract method 0x0a581edc.
//
// Solidity: function addFuncs(bytes4[] _func4Bytes, address _funcAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) AddFuncs(opts *bind.TransactOpts, _func4Bytes [][4]byte, _funcAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "addFuncs", _func4Bytes, _funcAddr)
}

// AddFuncs is a paid mutator transaction binding the contract method 0x0a581edc.
//
// Solidity: function addFuncs(bytes4[] _func4Bytes, address _funcAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) AddFuncs(_func4Bytes [][4]byte, _funcAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AddFuncs(&_BaseTenantSpace.TransactOpts, _func4Bytes, _funcAddr)
}

// AddFuncs is a paid mutator transaction binding the contract method 0x0a581edc.
//
// Solidity: function addFuncs(bytes4[] _func4Bytes, address _funcAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) AddFuncs(_func4Bytes [][4]byte, _funcAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AddFuncs(&_BaseTenantSpace.TransactOpts, _func4Bytes, _funcAddr)
}

// AddGroup is a paid mutator transaction binding the contract method 0x65d8dd34.
//
// Solidity: function addGroup(bytes32 _id, address _groupAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) AddGroup(opts *bind.TransactOpts, _id [32]byte, _groupAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "addGroup", _id, _groupAddr)
}

// AddGroup is a paid mutator transaction binding the contract method 0x65d8dd34.
//
// Solidity: function addGroup(bytes32 _id, address _groupAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) AddGroup(_id [32]byte, _groupAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AddGroup(&_BaseTenantSpace.TransactOpts, _id, _groupAddr)
}

// AddGroup is a paid mutator transaction binding the contract method 0x65d8dd34.
//
// Solidity: function addGroup(bytes32 _id, address _groupAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) AddGroup(_id [32]byte, _groupAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AddGroup(&_BaseTenantSpace.TransactOpts, _id, _groupAddr)
}

// AddListItem is a paid mutator transaction binding the contract method 0x74daf3a0.
//
// Solidity: function addListItem(bytes32 listKey, string itemVal) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) AddListItem(opts *bind.TransactOpts, listKey [32]byte, itemVal string) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "addListItem", listKey, itemVal)
}

// AddListItem is a paid mutator transaction binding the contract method 0x74daf3a0.
//
// Solidity: function addListItem(bytes32 listKey, string itemVal) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) AddListItem(listKey [32]byte, itemVal string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AddListItem(&_BaseTenantSpace.TransactOpts, listKey, itemVal)
}

// AddListItem is a paid mutator transaction binding the contract method 0x74daf3a0.
//
// Solidity: function addListItem(bytes32 listKey, string itemVal) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) AddListItem(listKey [32]byte, itemVal string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.AddListItem(&_BaseTenantSpace.TransactOpts, listKey, itemVal)
}

// CallFuncUintAddr is a paid mutator transaction binding the contract method 0x9c075d67.
//
// Solidity: function callFuncUintAddr(bytes4 _func4Bytes, uint256 _p1, address _p2, bytes _encAuthToken, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CallFuncUintAddr(opts *bind.TransactOpts, _func4Bytes [4]byte, _p1 *big.Int, _p2 common.Address, _encAuthToken []byte, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "callFuncUintAddr", _func4Bytes, _p1, _p2, _encAuthToken, _v, _r, _s)
}

// CallFuncUintAddr is a paid mutator transaction binding the contract method 0x9c075d67.
//
// Solidity: function callFuncUintAddr(bytes4 _func4Bytes, uint256 _p1, address _p2, bytes _encAuthToken, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) CallFuncUintAddr(_func4Bytes [4]byte, _p1 *big.Int, _p2 common.Address, _encAuthToken []byte, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CallFuncUintAddr(&_BaseTenantSpace.TransactOpts, _func4Bytes, _p1, _p2, _encAuthToken, _v, _r, _s)
}

// CallFuncUintAddr is a paid mutator transaction binding the contract method 0x9c075d67.
//
// Solidity: function callFuncUintAddr(bytes4 _func4Bytes, uint256 _p1, address _p2, bytes _encAuthToken, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) CallFuncUintAddr(_func4Bytes [4]byte, _p1 *big.Int, _p2 common.Address, _encAuthToken []byte, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CallFuncUintAddr(&_BaseTenantSpace.TransactOpts, _func4Bytes, _p1, _p2, _encAuthToken, _v, _r, _s)
}

// CheckIdsRemove is a paid mutator transaction binding the contract method 0x36ed8c79.
//
// Solidity: function checkIdsRemove(bytes32 _id) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CheckIdsRemove(opts *bind.TransactOpts, _id [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "checkIdsRemove", _id)
}

// CheckIdsRemove is a paid mutator transaction binding the contract method 0x36ed8c79.
//
// Solidity: function checkIdsRemove(bytes32 _id) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) CheckIdsRemove(_id [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CheckIdsRemove(&_BaseTenantSpace.TransactOpts, _id)
}

// CheckIdsRemove is a paid mutator transaction binding the contract method 0x36ed8c79.
//
// Solidity: function checkIdsRemove(bytes32 _id) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) CheckIdsRemove(_id [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CheckIdsRemove(&_BaseTenantSpace.TransactOpts, _id)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) ClearPending() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.ClearPending(&_BaseTenantSpace.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) ClearPending() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.ClearPending(&_BaseTenantSpace.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.Commit(&_BaseTenantSpace.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.Commit(&_BaseTenantSpace.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.ConfirmCommit(&_BaseTenantSpace.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.ConfirmCommit(&_BaseTenantSpace.TransactOpts)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address _lib, address _contentType) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateContent(opts *bind.TransactOpts, _lib common.Address, _contentType common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createContent", _lib, _contentType)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address _lib, address _contentType) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) CreateContent(_lib common.Address, _contentType common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateContent(&_BaseTenantSpace.TransactOpts, _lib, _contentType)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address _lib, address _contentType) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) CreateContent(_lib common.Address, _contentType common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateContent(&_BaseTenantSpace.TransactOpts, _lib, _contentType)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createContentType")
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) CreateContentType() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateContentType(&_BaseTenantSpace.TransactOpts)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) CreateContentType() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateContentType(&_BaseTenantSpace.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createGroup")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) CreateGroup() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateGroup(&_BaseTenantSpace.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) CreateGroup() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateGroup(&_BaseTenantSpace.TransactOpts)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address _kmsAddress) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateLibrary(opts *bind.TransactOpts, _kmsAddress common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createLibrary", _kmsAddress)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address _kmsAddress) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) CreateLibrary(_kmsAddress common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateLibrary(&_BaseTenantSpace.TransactOpts, _kmsAddress)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address _kmsAddress) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) CreateLibrary(_kmsAddress common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateLibrary(&_BaseTenantSpace.TransactOpts, _kmsAddress)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _userAddr) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateUserWallet(opts *bind.TransactOpts, _userAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createUserWallet", _userAddr)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _userAddr) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceSession) CreateUserWallet(_userAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateUserWallet(&_BaseTenantSpace.TransactOpts, _userAddr)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _userAddr) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) CreateUserWallet(_userAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.CreateUserWallet(&_BaseTenantSpace.TransactOpts, _userAddr)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) DeleteGroup(opts *bind.TransactOpts, _ident [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "deleteGroup", _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.DeleteGroup(&_BaseTenantSpace.TransactOpts, _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.DeleteGroup(&_BaseTenantSpace.TransactOpts, _ident)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseTenantSpace *BaseTenantSpaceSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.DeleteVersion(&_BaseTenantSpace.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.DeleteVersion(&_BaseTenantSpace.TransactOpts, _versionHash)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) IncrementCounter(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "incrementCounter", _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.IncrementCounter(&_BaseTenantSpace.TransactOpts, _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.IncrementCounter(&_BaseTenantSpace.TransactOpts, _ident, _ord)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) Kill() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.Kill(&_BaseTenantSpace.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) Kill() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.Kill(&_BaseTenantSpace.TransactOpts)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "publish", contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.Publish(&_BaseTenantSpace.TransactOpts, contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.Publish(&_BaseTenantSpace.TransactOpts, contentObj)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.PutMeta(&_BaseTenantSpace.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.PutMeta(&_BaseTenantSpace.TransactOpts, key, value)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.RemoveContentType(&_BaseTenantSpace.TransactOpts, content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.RemoveContentType(&_BaseTenantSpace.TransactOpts, content_type)
}

// RemoveGroup is a paid mutator transaction binding the contract method 0xcb3899b3.
//
// Solidity: function removeGroup(bytes32 _id, address _groupAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) RemoveGroup(opts *bind.TransactOpts, _id [32]byte, _groupAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "removeGroup", _id, _groupAddr)
}

// RemoveGroup is a paid mutator transaction binding the contract method 0xcb3899b3.
//
// Solidity: function removeGroup(bytes32 _id, address _groupAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) RemoveGroup(_id [32]byte, _groupAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.RemoveGroup(&_BaseTenantSpace.TransactOpts, _id, _groupAddr)
}

// RemoveGroup is a paid mutator transaction binding the contract method 0xcb3899b3.
//
// Solidity: function removeGroup(bytes32 _id, address _groupAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) RemoveGroup(_id [32]byte, _groupAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.RemoveGroup(&_BaseTenantSpace.TransactOpts, _id, _groupAddr)
}

// RemoveListOrd is a paid mutator transaction binding the contract method 0x1fa12f11.
//
// Solidity: function removeListOrd(bytes32 listKey, uint256 itemOrd) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) RemoveListOrd(opts *bind.TransactOpts, listKey [32]byte, itemOrd *big.Int) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "removeListOrd", listKey, itemOrd)
}

// RemoveListOrd is a paid mutator transaction binding the contract method 0x1fa12f11.
//
// Solidity: function removeListOrd(bytes32 listKey, uint256 itemOrd) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) RemoveListOrd(listKey [32]byte, itemOrd *big.Int) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.RemoveListOrd(&_BaseTenantSpace.TransactOpts, listKey, itemOrd)
}

// RemoveListOrd is a paid mutator transaction binding the contract method 0x1fa12f11.
//
// Solidity: function removeListOrd(bytes32 listKey, uint256 itemOrd) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) RemoveListOrd(listKey [32]byte, itemOrd *big.Int) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.RemoveListOrd(&_BaseTenantSpace.TransactOpts, listKey, itemOrd)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetAddressKMS(&_BaseTenantSpace.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetAddressKMS(&_BaseTenantSpace.TransactOpts, address_KMS)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetAndGetBit(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setAndGetBit", _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetAndGetBit(&_BaseTenantSpace.TransactOpts, _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetAndGetBit(&_BaseTenantSpace.TransactOpts, _ident, _ord)
}

// SetAndGetBitInternal is a paid mutator transaction binding the contract method 0x33f12cf4.
//
// Solidity: function setAndGetBitInternal(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetAndGetBitInternal(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setAndGetBitInternal", _ident, _ord)
}

// SetAndGetBitInternal is a paid mutator transaction binding the contract method 0x33f12cf4.
//
// Solidity: function setAndGetBitInternal(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceSession) SetAndGetBitInternal(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetAndGetBitInternal(&_BaseTenantSpace.TransactOpts, _ident, _ord)
}

// SetAndGetBitInternal is a paid mutator transaction binding the contract method 0x33f12cf4.
//
// Solidity: function setAndGetBitInternal(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetAndGetBitInternal(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetAndGetBitInternal(&_BaseTenantSpace.TransactOpts, _ident, _ord)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string _desc) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetDescription(opts *bind.TransactOpts, _desc string) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setDescription", _desc)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string _desc) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetDescription(_desc string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetDescription(&_BaseTenantSpace.TransactOpts, _desc)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string _desc) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetDescription(_desc string) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetDescription(&_BaseTenantSpace.TransactOpts, _desc)
}

// SetFactoryManager is a paid mutator transaction binding the contract method 0x430e621e.
//
// Solidity: function setFactoryManager(address _factMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetFactoryManager(opts *bind.TransactOpts, _factMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setFactoryManager", _factMan)
}

// SetFactoryManager is a paid mutator transaction binding the contract method 0x430e621e.
//
// Solidity: function setFactoryManager(address _factMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetFactoryManager(_factMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetFactoryManager(&_BaseTenantSpace.TransactOpts, _factMan)
}

// SetFactoryManager is a paid mutator transaction binding the contract method 0x430e621e.
//
// Solidity: function setFactoryManager(address _factMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetFactoryManager(_factMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetFactoryManager(&_BaseTenantSpace.TransactOpts, _factMan)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetGroupRights(&_BaseTenantSpace.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetGroupRights(&_BaseTenantSpace.TransactOpts, group, access_type, access)
}

// SetKmsManager is a paid mutator transaction binding the contract method 0x87e38281.
//
// Solidity: function setKmsManager(address _kmsMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetKmsManager(opts *bind.TransactOpts, _kmsMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setKmsManager", _kmsMan)
}

// SetKmsManager is a paid mutator transaction binding the contract method 0x87e38281.
//
// Solidity: function setKmsManager(address _kmsMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetKmsManager(_kmsMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetKmsManager(&_BaseTenantSpace.TransactOpts, _kmsMan)
}

// SetKmsManager is a paid mutator transaction binding the contract method 0x87e38281.
//
// Solidity: function setKmsManager(address _kmsMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetKmsManager(_kmsMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetKmsManager(&_BaseTenantSpace.TransactOpts, _kmsMan)
}

// SetNodeManager is a paid mutator transaction binding the contract method 0x1319e7e1.
//
// Solidity: function setNodeManager(address _nodeMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetNodeManager(opts *bind.TransactOpts, _nodeMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setNodeManager", _nodeMan)
}

// SetNodeManager is a paid mutator transaction binding the contract method 0x1319e7e1.
//
// Solidity: function setNodeManager(address _nodeMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetNodeManager(_nodeMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetNodeManager(&_BaseTenantSpace.TransactOpts, _nodeMan)
}

// SetNodeManager is a paid mutator transaction binding the contract method 0x1319e7e1.
//
// Solidity: function setNodeManager(address _nodeMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetNodeManager(_nodeMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetNodeManager(&_BaseTenantSpace.TransactOpts, _nodeMan)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetRights(&_BaseTenantSpace.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetRights(&_BaseTenantSpace.TransactOpts, stakeholder, access_type, access)
}

// SetUserManager is a paid mutator transaction binding the contract method 0x97d0b02c.
//
// Solidity: function setUserManager(address _userMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetUserManager(opts *bind.TransactOpts, _userMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setUserManager", _userMan)
}

// SetUserManager is a paid mutator transaction binding the contract method 0x97d0b02c.
//
// Solidity: function setUserManager(address _userMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetUserManager(_userMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetUserManager(&_BaseTenantSpace.TransactOpts, _userMan)
}

// SetUserManager is a paid mutator transaction binding the contract method 0x97d0b02c.
//
// Solidity: function setUserManager(address _userMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetUserManager(_userMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetUserManager(&_BaseTenantSpace.TransactOpts, _userMan)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetVisibility(&_BaseTenantSpace.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.SetVisibility(&_BaseTenantSpace.TransactOpts, _visibility_code)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "transfer", _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.Transfer(&_BaseTenantSpace.TransactOpts, _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.Transfer(&_BaseTenantSpace.TransactOpts, _to, _amount)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.TransferCreatorship(&_BaseTenantSpace.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.TransferCreatorship(&_BaseTenantSpace.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.TransferOwnership(&_BaseTenantSpace.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.TransferOwnership(&_BaseTenantSpace.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseTenantSpace *BaseTenantSpaceSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.UpdateRequest(&_BaseTenantSpace.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _BaseTenantSpace.Contract.UpdateRequest(&_BaseTenantSpace.TransactOpts)
}

// BaseTenantSpaceAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseTenantSpace contract.
type BaseTenantSpaceAccessRequestV3Iterator struct {
	Event *BaseTenantSpaceAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceAccessRequestV3 represents a AccessRequestV3 event raised by the BaseTenantSpace contract.
type BaseTenantSpaceAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseTenantSpaceAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceAccessRequestV3Iterator{contract: _BaseTenantSpace.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceAccessRequestV3)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseAccessRequestV3(log types.Log) (*BaseTenantSpaceAccessRequestV3, error) {
	event := new(BaseTenantSpaceAccessRequestV3)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceAddTenantGroupIterator is returned from FilterAddTenantGroup and is used to iterate over the raw logs and unpacked data for AddTenantGroup events raised by the BaseTenantSpace contract.
type BaseTenantSpaceAddTenantGroupIterator struct {
	Event *BaseTenantSpaceAddTenantGroup // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceAddTenantGroupIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceAddTenantGroup)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceAddTenantGroup)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceAddTenantGroupIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceAddTenantGroupIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceAddTenantGroup represents a AddTenantGroup event raised by the BaseTenantSpace contract.
type BaseTenantSpaceAddTenantGroup struct {
	GroupId   [32]byte
	GroupAddr common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddTenantGroup is a free log retrieval operation binding the contract event 0x145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471.
//
// Solidity: event AddTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterAddTenantGroup(opts *bind.FilterOpts) (*BaseTenantSpaceAddTenantGroupIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "AddTenantGroup")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceAddTenantGroupIterator{contract: _BaseTenantSpace.contract, event: "AddTenantGroup", logs: logs, sub: sub}, nil
}

// WatchAddTenantGroup is a free log subscription operation binding the contract event 0x145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471.
//
// Solidity: event AddTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchAddTenantGroup(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceAddTenantGroup) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "AddTenantGroup")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceAddTenantGroup)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "AddTenantGroup", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddTenantGroup is a log parse operation binding the contract event 0x145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471.
//
// Solidity: event AddTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseAddTenantGroup(log types.Log) (*BaseTenantSpaceAddTenantGroup, error) {
	event := new(BaseTenantSpaceAddTenantGroup)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "AddTenantGroup", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceBitSetAndGetIterator is returned from FilterBitSetAndGet and is used to iterate over the raw logs and unpacked data for BitSetAndGet events raised by the BaseTenantSpace contract.
type BaseTenantSpaceBitSetAndGetIterator struct {
	Event *BaseTenantSpaceBitSetAndGet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceBitSetAndGetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceBitSetAndGet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceBitSetAndGet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceBitSetAndGetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceBitSetAndGetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceBitSetAndGet represents a BitSetAndGet event raised by the BaseTenantSpace contract.
type BaseTenantSpaceBitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBitSetAndGet is a free log retrieval operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterBitSetAndGet(opts *bind.FilterOpts) (*BaseTenantSpaceBitSetAndGetIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceBitSetAndGetIterator{contract: _BaseTenantSpace.contract, event: "BitSetAndGet", logs: logs, sub: sub}, nil
}

// WatchBitSetAndGet is a free log subscription operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchBitSetAndGet(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceBitSetAndGet) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceBitSetAndGet)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitSetAndGet is a log parse operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseBitSetAndGet(log types.Log) (*BaseTenantSpaceBitSetAndGet, error) {
	event := new(BaseTenantSpaceBitSetAndGet)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseTenantSpace contract.
type BaseTenantSpaceCommitPendingIterator struct {
	Event *BaseTenantSpaceCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceCommitPending represents a CommitPending event raised by the BaseTenantSpace contract.
type BaseTenantSpaceCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseTenantSpaceCommitPendingIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceCommitPendingIterator{contract: _BaseTenantSpace.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceCommitPending)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseCommitPending(log types.Log) (*BaseTenantSpaceCommitPending, error) {
	event := new(BaseTenantSpaceCommitPending)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseTenantSpace contract.
type BaseTenantSpaceContentTypeAddedIterator struct {
	Event *BaseTenantSpaceContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceContentTypeAdded represents a ContentTypeAdded event raised by the BaseTenantSpace contract.
type BaseTenantSpaceContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseTenantSpaceContentTypeAddedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceContentTypeAddedIterator{contract: _BaseTenantSpace.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceContentTypeAdded)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseContentTypeAdded(log types.Log) (*BaseTenantSpaceContentTypeAdded, error) {
	event := new(BaseTenantSpaceContentTypeAdded)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseTenantSpace contract.
type BaseTenantSpaceContentTypeRemovedIterator struct {
	Event *BaseTenantSpaceContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseTenantSpace contract.
type BaseTenantSpaceContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseTenantSpaceContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceContentTypeRemovedIterator{contract: _BaseTenantSpace.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceContentTypeRemoved)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseContentTypeRemoved(log types.Log) (*BaseTenantSpaceContentTypeRemoved, error) {
	event := new(BaseTenantSpaceContentTypeRemoved)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceCounterIncrementedIterator is returned from FilterCounterIncremented and is used to iterate over the raw logs and unpacked data for CounterIncremented events raised by the BaseTenantSpace contract.
type BaseTenantSpaceCounterIncrementedIterator struct {
	Event *BaseTenantSpaceCounterIncremented // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceCounterIncrementedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceCounterIncremented)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceCounterIncremented)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceCounterIncrementedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceCounterIncrementedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceCounterIncremented represents a CounterIncremented event raised by the BaseTenantSpace contract.
type BaseTenantSpaceCounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterIncremented is a free log retrieval operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterCounterIncremented(opts *bind.FilterOpts) (*BaseTenantSpaceCounterIncrementedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceCounterIncrementedIterator{contract: _BaseTenantSpace.contract, event: "CounterIncremented", logs: logs, sub: sub}, nil
}

// WatchCounterIncremented is a free log subscription operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchCounterIncremented(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceCounterIncremented) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceCounterIncremented)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterIncremented is a log parse operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseCounterIncremented(log types.Log) (*BaseTenantSpaceCounterIncremented, error) {
	event := new(BaseTenantSpaceCounterIncremented)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceCreateTenantIterator is returned from FilterCreateTenant and is used to iterate over the raw logs and unpacked data for CreateTenant events raised by the BaseTenantSpace contract.
type BaseTenantSpaceCreateTenantIterator struct {
	Event *BaseTenantSpaceCreateTenant // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceCreateTenantIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceCreateTenant)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceCreateTenant)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceCreateTenantIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceCreateTenantIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceCreateTenant represents a CreateTenant event raised by the BaseTenantSpace contract.
type BaseTenantSpaceCreateTenant struct {
	Version [32]byte
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterCreateTenant is a free log retrieval operation binding the contract event 0xc2fe67ac699789805c53a93eea70eb0e316deaf8db4b810382d2412ba4fcb4c8.
//
// Solidity: event CreateTenant(bytes32 version, address owner)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterCreateTenant(opts *bind.FilterOpts) (*BaseTenantSpaceCreateTenantIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "CreateTenant")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceCreateTenantIterator{contract: _BaseTenantSpace.contract, event: "CreateTenant", logs: logs, sub: sub}, nil
}

// WatchCreateTenant is a free log subscription operation binding the contract event 0xc2fe67ac699789805c53a93eea70eb0e316deaf8db4b810382d2412ba4fcb4c8.
//
// Solidity: event CreateTenant(bytes32 version, address owner)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchCreateTenant(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceCreateTenant) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "CreateTenant")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceCreateTenant)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "CreateTenant", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateTenant is a log parse operation binding the contract event 0xc2fe67ac699789805c53a93eea70eb0e316deaf8db4b810382d2412ba4fcb4c8.
//
// Solidity: event CreateTenant(bytes32 version, address owner)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseCreateTenant(log types.Log) (*BaseTenantSpaceCreateTenant, error) {
	event := new(BaseTenantSpaceCreateTenant)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "CreateTenant", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceFunctionsAddedIterator is returned from FilterFunctionsAdded and is used to iterate over the raw logs and unpacked data for FunctionsAdded events raised by the BaseTenantSpace contract.
type BaseTenantSpaceFunctionsAddedIterator struct {
	Event *BaseTenantSpaceFunctionsAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceFunctionsAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceFunctionsAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceFunctionsAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceFunctionsAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceFunctionsAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceFunctionsAdded represents a FunctionsAdded event raised by the BaseTenantSpace contract.
type BaseTenantSpaceFunctionsAdded struct {
	Func4Bytes [][4]byte
	FuncAddr   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterFunctionsAdded is a free log retrieval operation binding the contract event 0x2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de8874266.
//
// Solidity: event FunctionsAdded(bytes4[] func4Bytes, address funcAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterFunctionsAdded(opts *bind.FilterOpts) (*BaseTenantSpaceFunctionsAddedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "FunctionsAdded")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceFunctionsAddedIterator{contract: _BaseTenantSpace.contract, event: "FunctionsAdded", logs: logs, sub: sub}, nil
}

// WatchFunctionsAdded is a free log subscription operation binding the contract event 0x2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de8874266.
//
// Solidity: event FunctionsAdded(bytes4[] func4Bytes, address funcAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchFunctionsAdded(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceFunctionsAdded) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "FunctionsAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceFunctionsAdded)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "FunctionsAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFunctionsAdded is a log parse operation binding the contract event 0x2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de8874266.
//
// Solidity: event FunctionsAdded(bytes4[] func4Bytes, address funcAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseFunctionsAdded(log types.Log) (*BaseTenantSpaceFunctionsAdded, error) {
	event := new(BaseTenantSpaceFunctionsAdded)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "FunctionsAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceGetAccessWalletIterator is returned from FilterGetAccessWallet and is used to iterate over the raw logs and unpacked data for GetAccessWallet events raised by the BaseTenantSpace contract.
type BaseTenantSpaceGetAccessWalletIterator struct {
	Event *BaseTenantSpaceGetAccessWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceGetAccessWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceGetAccessWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceGetAccessWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceGetAccessWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceGetAccessWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceGetAccessWallet represents a GetAccessWallet event raised by the BaseTenantSpace contract.
type BaseTenantSpaceGetAccessWallet struct {
	WalletAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterGetAccessWallet is a free log retrieval operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterGetAccessWallet(opts *bind.FilterOpts) (*BaseTenantSpaceGetAccessWalletIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceGetAccessWalletIterator{contract: _BaseTenantSpace.contract, event: "GetAccessWallet", logs: logs, sub: sub}, nil
}

// WatchGetAccessWallet is a free log subscription operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchGetAccessWallet(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceGetAccessWallet) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceGetAccessWallet)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGetAccessWallet is a log parse operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseGetAccessWallet(log types.Log) (*BaseTenantSpaceGetAccessWallet, error) {
	event := new(BaseTenantSpaceGetAccessWallet)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseTenantSpace contract.
type BaseTenantSpaceObjectMetaChangedIterator struct {
	Event *BaseTenantSpaceObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseTenantSpace contract.
type BaseTenantSpaceObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseTenantSpaceObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceObjectMetaChangedIterator{contract: _BaseTenantSpace.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceObjectMetaChanged)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseObjectMetaChanged(log types.Log) (*BaseTenantSpaceObjectMetaChanged, error) {
	event := new(BaseTenantSpaceObjectMetaChanged)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceRemoveTenantGroupIterator is returned from FilterRemoveTenantGroup and is used to iterate over the raw logs and unpacked data for RemoveTenantGroup events raised by the BaseTenantSpace contract.
type BaseTenantSpaceRemoveTenantGroupIterator struct {
	Event *BaseTenantSpaceRemoveTenantGroup // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceRemoveTenantGroupIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceRemoveTenantGroup)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceRemoveTenantGroup)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceRemoveTenantGroupIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceRemoveTenantGroupIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceRemoveTenantGroup represents a RemoveTenantGroup event raised by the BaseTenantSpace contract.
type BaseTenantSpaceRemoveTenantGroup struct {
	GroupId   [32]byte
	GroupAddr common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoveTenantGroup is a free log retrieval operation binding the contract event 0xa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456.
//
// Solidity: event RemoveTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterRemoveTenantGroup(opts *bind.FilterOpts) (*BaseTenantSpaceRemoveTenantGroupIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "RemoveTenantGroup")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceRemoveTenantGroupIterator{contract: _BaseTenantSpace.contract, event: "RemoveTenantGroup", logs: logs, sub: sub}, nil
}

// WatchRemoveTenantGroup is a free log subscription operation binding the contract event 0xa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456.
//
// Solidity: event RemoveTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchRemoveTenantGroup(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceRemoveTenantGroup) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "RemoveTenantGroup")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceRemoveTenantGroup)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "RemoveTenantGroup", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveTenantGroup is a log parse operation binding the contract event 0xa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456.
//
// Solidity: event RemoveTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseRemoveTenantGroup(log types.Log) (*BaseTenantSpaceRemoveTenantGroup, error) {
	event := new(BaseTenantSpaceRemoveTenantGroup)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "RemoveTenantGroup", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceSetFactoryManagerIterator is returned from FilterSetFactoryManager and is used to iterate over the raw logs and unpacked data for SetFactoryManager events raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetFactoryManagerIterator struct {
	Event *BaseTenantSpaceSetFactoryManager // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceSetFactoryManagerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceSetFactoryManager)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceSetFactoryManager)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceSetFactoryManagerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceSetFactoryManagerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceSetFactoryManager represents a SetFactoryManager event raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetFactoryManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetFactoryManager is a free log retrieval operation binding the contract event 0xfa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f661.
//
// Solidity: event SetFactoryManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterSetFactoryManager(opts *bind.FilterOpts) (*BaseTenantSpaceSetFactoryManagerIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "SetFactoryManager")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceSetFactoryManagerIterator{contract: _BaseTenantSpace.contract, event: "SetFactoryManager", logs: logs, sub: sub}, nil
}

// WatchSetFactoryManager is a free log subscription operation binding the contract event 0xfa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f661.
//
// Solidity: event SetFactoryManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchSetFactoryManager(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceSetFactoryManager) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "SetFactoryManager")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceSetFactoryManager)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "SetFactoryManager", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFactoryManager is a log parse operation binding the contract event 0xfa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f661.
//
// Solidity: event SetFactoryManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseSetFactoryManager(log types.Log) (*BaseTenantSpaceSetFactoryManager, error) {
	event := new(BaseTenantSpaceSetFactoryManager)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "SetFactoryManager", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceSetKmsManagerIterator is returned from FilterSetKmsManager and is used to iterate over the raw logs and unpacked data for SetKmsManager events raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetKmsManagerIterator struct {
	Event *BaseTenantSpaceSetKmsManager // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceSetKmsManagerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceSetKmsManager)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceSetKmsManager)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceSetKmsManagerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceSetKmsManagerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceSetKmsManager represents a SetKmsManager event raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetKmsManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetKmsManager is a free log retrieval operation binding the contract event 0x78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee96477.
//
// Solidity: event SetKmsManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterSetKmsManager(opts *bind.FilterOpts) (*BaseTenantSpaceSetKmsManagerIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "SetKmsManager")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceSetKmsManagerIterator{contract: _BaseTenantSpace.contract, event: "SetKmsManager", logs: logs, sub: sub}, nil
}

// WatchSetKmsManager is a free log subscription operation binding the contract event 0x78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee96477.
//
// Solidity: event SetKmsManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchSetKmsManager(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceSetKmsManager) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "SetKmsManager")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceSetKmsManager)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "SetKmsManager", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetKmsManager is a log parse operation binding the contract event 0x78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee96477.
//
// Solidity: event SetKmsManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseSetKmsManager(log types.Log) (*BaseTenantSpaceSetKmsManager, error) {
	event := new(BaseTenantSpaceSetKmsManager)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "SetKmsManager", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceSetNodeManagerIterator is returned from FilterSetNodeManager and is used to iterate over the raw logs and unpacked data for SetNodeManager events raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetNodeManagerIterator struct {
	Event *BaseTenantSpaceSetNodeManager // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceSetNodeManagerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceSetNodeManager)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceSetNodeManager)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceSetNodeManagerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceSetNodeManagerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceSetNodeManager represents a SetNodeManager event raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetNodeManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetNodeManager is a free log retrieval operation binding the contract event 0x9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b56177.
//
// Solidity: event SetNodeManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterSetNodeManager(opts *bind.FilterOpts) (*BaseTenantSpaceSetNodeManagerIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "SetNodeManager")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceSetNodeManagerIterator{contract: _BaseTenantSpace.contract, event: "SetNodeManager", logs: logs, sub: sub}, nil
}

// WatchSetNodeManager is a free log subscription operation binding the contract event 0x9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b56177.
//
// Solidity: event SetNodeManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchSetNodeManager(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceSetNodeManager) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "SetNodeManager")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceSetNodeManager)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "SetNodeManager", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetNodeManager is a log parse operation binding the contract event 0x9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b56177.
//
// Solidity: event SetNodeManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseSetNodeManager(log types.Log) (*BaseTenantSpaceSetNodeManager, error) {
	event := new(BaseTenantSpaceSetNodeManager)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "SetNodeManager", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceSetUserManagerIterator is returned from FilterSetUserManager and is used to iterate over the raw logs and unpacked data for SetUserManager events raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetUserManagerIterator struct {
	Event *BaseTenantSpaceSetUserManager // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceSetUserManagerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceSetUserManager)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceSetUserManager)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceSetUserManagerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceSetUserManagerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceSetUserManager represents a SetUserManager event raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetUserManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetUserManager is a free log retrieval operation binding the contract event 0xc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce0299.
//
// Solidity: event SetUserManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterSetUserManager(opts *bind.FilterOpts) (*BaseTenantSpaceSetUserManagerIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "SetUserManager")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceSetUserManagerIterator{contract: _BaseTenantSpace.contract, event: "SetUserManager", logs: logs, sub: sub}, nil
}

// WatchSetUserManager is a free log subscription operation binding the contract event 0xc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce0299.
//
// Solidity: event SetUserManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchSetUserManager(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceSetUserManager) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "SetUserManager")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceSetUserManager)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "SetUserManager", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetUserManager is a log parse operation binding the contract event 0xc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce0299.
//
// Solidity: event SetUserManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseSetUserManager(log types.Log) (*BaseTenantSpaceSetUserManager, error) {
	event := new(BaseTenantSpaceSetUserManager)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "SetUserManager", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseTenantSpace contract.
type BaseTenantSpaceUpdateRequestIterator struct {
	Event *BaseTenantSpaceUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceUpdateRequest represents a UpdateRequest event raised by the BaseTenantSpace contract.
type BaseTenantSpaceUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseTenantSpaceUpdateRequestIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceUpdateRequestIterator{contract: _BaseTenantSpace.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceUpdateRequest)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseUpdateRequest(log types.Log) (*BaseTenantSpaceUpdateRequest, error) {
	event := new(BaseTenantSpaceUpdateRequest)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseTenantSpace contract.
type BaseTenantSpaceVersionConfirmIterator struct {
	Event *BaseTenantSpaceVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceVersionConfirm represents a VersionConfirm event raised by the BaseTenantSpace contract.
type BaseTenantSpaceVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseTenantSpaceVersionConfirmIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceVersionConfirmIterator{contract: _BaseTenantSpace.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceVersionConfirm)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseVersionConfirm(log types.Log) (*BaseTenantSpaceVersionConfirm, error) {
	event := new(BaseTenantSpaceVersionConfirm)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseTenantSpace contract.
type BaseTenantSpaceVersionDeleteIterator struct {
	Event *BaseTenantSpaceVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceVersionDelete represents a VersionDelete event raised by the BaseTenantSpace contract.
type BaseTenantSpaceVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseTenantSpaceVersionDeleteIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceVersionDeleteIterator{contract: _BaseTenantSpace.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceVersionDelete)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseVersionDelete(log types.Log) (*BaseTenantSpaceVersionDelete, error) {
	event := new(BaseTenantSpaceVersionDelete)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseTenantSpace contract.
type BaseTenantSpaceVisibilityChangedIterator struct {
	Event *BaseTenantSpaceVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceVisibilityChanged represents a VisibilityChanged event raised by the BaseTenantSpace contract.
type BaseTenantSpaceVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseTenantSpaceVisibilityChangedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceVisibilityChangedIterator{contract: _BaseTenantSpace.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceVisibilityChanged)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseVisibilityChanged(log types.Log) (*BaseTenantSpaceVisibilityChanged, error) {
	event := new(BaseTenantSpaceVisibilityChanged)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseTenantSpaceWordGroupDeletedIterator is returned from FilterWordGroupDeleted and is used to iterate over the raw logs and unpacked data for WordGroupDeleted events raised by the BaseTenantSpace contract.
type BaseTenantSpaceWordGroupDeletedIterator struct {
	Event *BaseTenantSpaceWordGroupDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceWordGroupDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceWordGroupDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceWordGroupDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceWordGroupDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceWordGroupDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceWordGroupDeleted represents a WordGroupDeleted event raised by the BaseTenantSpace contract.
type BaseTenantSpaceWordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWordGroupDeleted is a free log retrieval operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterWordGroupDeleted(opts *bind.FilterOpts) (*BaseTenantSpaceWordGroupDeletedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceWordGroupDeletedIterator{contract: _BaseTenantSpace.contract, event: "WordGroupDeleted", logs: logs, sub: sub}, nil
}

// WatchWordGroupDeleted is a free log subscription operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchWordGroupDeleted(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceWordGroupDeleted) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceWordGroupDeleted)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWordGroupDeleted is a log parse operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseWordGroupDeleted(log types.Log) (*BaseTenantSpaceWordGroupDeleted, error) {
	event := new(BaseTenantSpaceWordGroupDeleted)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerABI is the input ABI used to generate the binding from.
const ContainerABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"}]"

// ContainerFuncSigs maps the 4-byte function signature to its string representation.
var ContainerFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"0f58a786": "addContentType(address,address)",
	"32eaf21b": "addressKMS()",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"0eaec2c5": "canContribute(address)",
	"81beeb64": "canEdit()",
	"9b55f901": "canPublish(address)",
	"29d00219": "canReview(address)",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"1cdbee5a": "contentTypeContracts(address)",
	"991a3a7c": "contentTypes(uint256)",
	"c65bcbe2": "contentTypesLength()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"1f2caaec": "findTypeByHash(bytes32)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"6380501f": "indexCategory()",
	"41c0e1b5": "kill()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"2cf99422": "publish(address)",
	"fd089196": "removeContentType(address)",
	"3dd71d99": "requiresReview()",
	"c9e8e72d": "setAddressKMS(address)",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"aa024e8b": "setVisibility(uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"29dedde5": "validType(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
	"9cb121ba": "whitelistedType(address)",
}

// ContainerBin is the compiled bytecode used for deploying new contracts.
var ContainerBin = ""

// DeployContainer deploys a new Ethereum contract, binding an instance of Container to it.
func DeployContainer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Container, error) {
	parsed, err := abi.JSON(strings.NewReader(ContainerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ContainerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Container{ContainerCaller: ContainerCaller{contract: contract}, ContainerTransactor: ContainerTransactor{contract: contract}, ContainerFilterer: ContainerFilterer{contract: contract}}, nil
}

// Container is an auto generated Go binding around an Ethereum contract.
type Container struct {
	ContainerCaller     // Read-only binding to the contract
	ContainerTransactor // Write-only binding to the contract
	ContainerFilterer   // Log filterer for contract events
}

// ContainerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContainerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContainerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContainerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContainerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContainerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContainerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContainerSession struct {
	Contract     *Container        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContainerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContainerCallerSession struct {
	Contract *ContainerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ContainerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContainerTransactorSession struct {
	Contract     *ContainerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ContainerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContainerRaw struct {
	Contract *Container // Generic contract binding to access the raw methods on
}

// ContainerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContainerCallerRaw struct {
	Contract *ContainerCaller // Generic read-only contract binding to access the raw methods on
}

// ContainerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContainerTransactorRaw struct {
	Contract *ContainerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContainer creates a new instance of Container, bound to a specific deployed contract.
func NewContainer(address common.Address, backend bind.ContractBackend) (*Container, error) {
	contract, err := bindContainer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Container{ContainerCaller: ContainerCaller{contract: contract}, ContainerTransactor: ContainerTransactor{contract: contract}, ContainerFilterer: ContainerFilterer{contract: contract}}, nil
}

// NewContainerCaller creates a new read-only instance of Container, bound to a specific deployed contract.
func NewContainerCaller(address common.Address, caller bind.ContractCaller) (*ContainerCaller, error) {
	contract, err := bindContainer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContainerCaller{contract: contract}, nil
}

// NewContainerTransactor creates a new write-only instance of Container, bound to a specific deployed contract.
func NewContainerTransactor(address common.Address, transactor bind.ContractTransactor) (*ContainerTransactor, error) {
	contract, err := bindContainer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContainerTransactor{contract: contract}, nil
}

// NewContainerFilterer creates a new log filterer instance of Container, bound to a specific deployed contract.
func NewContainerFilterer(address common.Address, filterer bind.ContractFilterer) (*ContainerFilterer, error) {
	contract, err := bindContainer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContainerFilterer{contract: contract}, nil
}

// bindContainer binds a generic wrapper to an already deployed contract.
func bindContainer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContainerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Container *ContainerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Container.Contract.ContainerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Container *ContainerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.Contract.ContainerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Container *ContainerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Container.Contract.ContainerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Container *ContainerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Container.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Container *ContainerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Container *ContainerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Container.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Container *ContainerCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Container *ContainerSession) CANACCESS() (uint8, error) {
	return _Container.Contract.CANACCESS(&_Container.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Container *ContainerCallerSession) CANACCESS() (uint8, error) {
	return _Container.Contract.CANACCESS(&_Container.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Container *ContainerCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Container *ContainerSession) CANEDIT() (uint8, error) {
	return _Container.Contract.CANEDIT(&_Container.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Container *ContainerCallerSession) CANEDIT() (uint8, error) {
	return _Container.Contract.CANEDIT(&_Container.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Container *ContainerCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Container *ContainerSession) CANSEE() (uint8, error) {
	return _Container.Contract.CANSEE(&_Container.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Container *ContainerCallerSession) CANSEE() (uint8, error) {
	return _Container.Contract.CANSEE(&_Container.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_Container *ContainerCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "addressKMS")
	return *ret0, err
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_Container *ContainerSession) AddressKMS() (common.Address, error) {
	return _Container.Contract.AddressKMS(&_Container.CallOpts)
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() constant returns(address)
func (_Container *ContainerCallerSession) AddressKMS() (common.Address, error) {
	return _Container.Contract.AddressKMS(&_Container.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Container *ContainerCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Container *ContainerSession) CanCommit() (bool, error) {
	return _Container.Contract.CanCommit(&_Container.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Container *ContainerCallerSession) CanCommit() (bool, error) {
	return _Container.Contract.CanCommit(&_Container.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Container *ContainerCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Container *ContainerSession) CanConfirm() (bool, error) {
	return _Container.Contract.CanConfirm(&_Container.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Container *ContainerCallerSession) CanConfirm() (bool, error) {
	return _Container.Contract.CanConfirm(&_Container.CallOpts)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_Container *ContainerCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canContribute", _candidate)
	return *ret0, err
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_Container *ContainerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _Container.Contract.CanContribute(&_Container.CallOpts, _candidate)
}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) constant returns(bool)
func (_Container *ContainerCallerSession) CanContribute(_candidate common.Address) (bool, error) {
	return _Container.Contract.CanContribute(&_Container.CallOpts, _candidate)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_Container *ContainerCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_Container *ContainerSession) CanEdit() (bool, error) {
	return _Container.Contract.CanEdit(&_Container.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_Container *ContainerCallerSession) CanEdit() (bool, error) {
	return _Container.Contract.CanEdit(&_Container.CallOpts)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_Container *ContainerCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canPublish", _candidate)
	return *ret0, err
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_Container *ContainerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _Container.Contract.CanPublish(&_Container.CallOpts, _candidate)
}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) constant returns(bool)
func (_Container *ContainerCallerSession) CanPublish(_candidate common.Address) (bool, error) {
	return _Container.Contract.CanPublish(&_Container.CallOpts, _candidate)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_Container *ContainerCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "canReview", arg0)
	return *ret0, err
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_Container *ContainerSession) CanReview(arg0 common.Address) (bool, error) {
	return _Container.Contract.CanReview(&_Container.CallOpts, arg0)
}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) constant returns(bool)
func (_Container *ContainerCallerSession) CanReview(arg0 common.Address) (bool, error) {
	return _Container.Contract.CanReview(&_Container.CallOpts, arg0)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Container *ContainerCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Container *ContainerSession) CommitPending() (bool, error) {
	return _Container.Contract.CommitPending(&_Container.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Container *ContainerCallerSession) CommitPending() (bool, error) {
	return _Container.Contract.CommitPending(&_Container.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Container *ContainerCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Container *ContainerSession) ContentSpace() (common.Address, error) {
	return _Container.Contract.ContentSpace(&_Container.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Container *ContainerCallerSession) ContentSpace() (common.Address, error) {
	return _Container.Contract.ContentSpace(&_Container.CallOpts)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_Container *ContainerCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "contentTypeContracts", arg0)
	return *ret0, err
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_Container *ContainerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _Container.Contract.ContentTypeContracts(&_Container.CallOpts, arg0)
}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) constant returns(address)
func (_Container *ContainerCallerSession) ContentTypeContracts(arg0 common.Address) (common.Address, error) {
	return _Container.Contract.ContentTypeContracts(&_Container.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_Container *ContainerCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "contentTypes", arg0)
	return *ret0, err
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_Container *ContainerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _Container.Contract.ContentTypes(&_Container.CallOpts, arg0)
}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) constant returns(address)
func (_Container *ContainerCallerSession) ContentTypes(arg0 *big.Int) (common.Address, error) {
	return _Container.Contract.ContentTypes(&_Container.CallOpts, arg0)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_Container *ContainerCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "contentTypesLength")
	return *ret0, err
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_Container *ContainerSession) ContentTypesLength() (*big.Int, error) {
	return _Container.Contract.ContentTypesLength(&_Container.CallOpts)
}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() constant returns(uint256)
func (_Container *ContainerCallerSession) ContentTypesLength() (*big.Int, error) {
	return _Container.Contract.ContentTypesLength(&_Container.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Container *ContainerCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Container *ContainerSession) CountVersionHashes() (*big.Int, error) {
	return _Container.Contract.CountVersionHashes(&_Container.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Container *ContainerCallerSession) CountVersionHashes() (*big.Int, error) {
	return _Container.Contract.CountVersionHashes(&_Container.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Container *ContainerCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Container *ContainerSession) Creator() (common.Address, error) {
	return _Container.Contract.Creator(&_Container.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Container *ContainerCallerSession) Creator() (common.Address, error) {
	return _Container.Contract.Creator(&_Container.CallOpts)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_Container *ContainerCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "findTypeByHash", typeHash)
	return *ret0, err
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_Container *ContainerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _Container.Contract.FindTypeByHash(&_Container.CallOpts, typeHash)
}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) constant returns(address)
func (_Container *ContainerCallerSession) FindTypeByHash(typeHash [32]byte) (common.Address, error) {
	return _Container.Contract.FindTypeByHash(&_Container.CallOpts, typeHash)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Container *ContainerCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Container *ContainerSession) HasAccess(candidate common.Address) (bool, error) {
	return _Container.Contract.HasAccess(&_Container.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Container *ContainerCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _Container.Contract.HasAccess(&_Container.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_Container *ContainerCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_Container *ContainerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _Container.Contract.HasEditorRight(&_Container.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_Container *ContainerCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _Container.Contract.HasEditorRight(&_Container.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Container *ContainerCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Container *ContainerSession) IndexCategory() (uint8, error) {
	return _Container.Contract.IndexCategory(&_Container.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Container *ContainerCallerSession) IndexCategory() (uint8, error) {
	return _Container.Contract.IndexCategory(&_Container.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Container *ContainerCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Container *ContainerSession) ObjectHash() (string, error) {
	return _Container.Contract.ObjectHash(&_Container.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Container *ContainerCallerSession) ObjectHash() (string, error) {
	return _Container.Contract.ObjectHash(&_Container.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_Container *ContainerCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_Container *ContainerSession) ObjectTimestamp() (*big.Int, error) {
	return _Container.Contract.ObjectTimestamp(&_Container.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_Container *ContainerCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _Container.Contract.ObjectTimestamp(&_Container.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Container *ContainerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Container *ContainerSession) Owner() (common.Address, error) {
	return _Container.Contract.Owner(&_Container.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Container *ContainerCallerSession) Owner() (common.Address, error) {
	return _Container.Contract.Owner(&_Container.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Container *ContainerCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Container *ContainerSession) ParentAddress() (common.Address, error) {
	return _Container.Contract.ParentAddress(&_Container.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Container *ContainerCallerSession) ParentAddress() (common.Address, error) {
	return _Container.Contract.ParentAddress(&_Container.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Container *ContainerCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Container *ContainerSession) PendingHash() (string, error) {
	return _Container.Contract.PendingHash(&_Container.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Container *ContainerCallerSession) PendingHash() (string, error) {
	return _Container.Contract.PendingHash(&_Container.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_Container *ContainerCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "requiresReview")
	return *ret0, err
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_Container *ContainerSession) RequiresReview() (bool, error) {
	return _Container.Contract.RequiresReview(&_Container.CallOpts)
}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() constant returns(bool)
func (_Container *ContainerCallerSession) RequiresReview() (bool, error) {
	return _Container.Contract.RequiresReview(&_Container.CallOpts)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_Container *ContainerCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "validType", content_type)
	return *ret0, err
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_Container *ContainerSession) ValidType(content_type common.Address) (bool, error) {
	return _Container.Contract.ValidType(&_Container.CallOpts, content_type)
}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) constant returns(bool)
func (_Container *ContainerCallerSession) ValidType(content_type common.Address) (bool, error) {
	return _Container.Contract.ValidType(&_Container.CallOpts, content_type)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Container *ContainerCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Container *ContainerSession) Version() ([32]byte, error) {
	return _Container.Contract.Version(&_Container.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Container *ContainerCallerSession) Version() ([32]byte, error) {
	return _Container.Contract.Version(&_Container.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Container *ContainerCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Container *ContainerSession) VersionAPI() ([32]byte, error) {
	return _Container.Contract.VersionAPI(&_Container.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Container *ContainerCallerSession) VersionAPI() ([32]byte, error) {
	return _Container.Contract.VersionAPI(&_Container.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Container *ContainerCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Container *ContainerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _Container.Contract.VersionHashes(&_Container.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Container *ContainerCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _Container.Contract.VersionHashes(&_Container.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Container *ContainerCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Container *ContainerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _Container.Contract.VersionTimestamp(&_Container.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Container *ContainerCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _Container.Contract.VersionTimestamp(&_Container.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Container *ContainerCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Container *ContainerSession) Visibility() (uint8, error) {
	return _Container.Contract.Visibility(&_Container.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Container *ContainerCallerSession) Visibility() (uint8, error) {
	return _Container.Contract.Visibility(&_Container.CallOpts)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_Container *ContainerCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Container.contract.Call(opts, out, "whitelistedType", content_type)
	return *ret0, err
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_Container *ContainerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _Container.Contract.WhitelistedType(&_Container.CallOpts, content_type)
}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) constant returns(bool)
func (_Container *ContainerCallerSession) WhitelistedType(content_type common.Address) (bool, error) {
	return _Container.Contract.WhitelistedType(&_Container.CallOpts, content_type)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_Container *ContainerTransactor) AccessRequestV3(opts *bind.TransactOpts, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "accessRequestV3", customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_Container *ContainerSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _Container.Contract.AccessRequestV3(&_Container.TransactOpts, customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_Container *ContainerTransactorSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _Container.Contract.AccessRequestV3(&_Container.TransactOpts, customValues, stakeholders)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_Container *ContainerTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_Container *ContainerSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _Container.Contract.AddContentType(&_Container.TransactOpts, content_type, content_contract)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_Container *ContainerTransactorSession) AddContentType(content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _Container.Contract.AddContentType(&_Container.TransactOpts, content_type, content_contract)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Container *ContainerTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Container *ContainerSession) ClearPending() (*types.Transaction, error) {
	return _Container.Contract.ClearPending(&_Container.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Container *ContainerTransactorSession) ClearPending() (*types.Transaction, error) {
	return _Container.Contract.ClearPending(&_Container.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Container *ContainerTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Container *ContainerSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _Container.Contract.Commit(&_Container.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Container *ContainerTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _Container.Contract.Commit(&_Container.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Container *ContainerTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Container *ContainerSession) ConfirmCommit() (*types.Transaction, error) {
	return _Container.Contract.ConfirmCommit(&_Container.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Container *ContainerTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _Container.Contract.ConfirmCommit(&_Container.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Container *ContainerTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Container *ContainerSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _Container.Contract.DeleteVersion(&_Container.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Container *ContainerTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _Container.Contract.DeleteVersion(&_Container.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Container *ContainerTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Container *ContainerSession) Kill() (*types.Transaction, error) {
	return _Container.Contract.Kill(&_Container.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Container *ContainerTransactorSession) Kill() (*types.Transaction, error) {
	return _Container.Contract.Kill(&_Container.TransactOpts)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_Container *ContainerTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "publish", contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_Container *ContainerSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _Container.Contract.Publish(&_Container.TransactOpts, contentObj)
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_Container *ContainerTransactorSession) Publish(contentObj common.Address) (*types.Transaction, error) {
	return _Container.Contract.Publish(&_Container.TransactOpts, contentObj)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_Container *ContainerTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_Container *ContainerSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _Container.Contract.RemoveContentType(&_Container.TransactOpts, content_type)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_Container *ContainerTransactorSession) RemoveContentType(content_type common.Address) (*types.Transaction, error) {
	return _Container.Contract.RemoveContentType(&_Container.TransactOpts, content_type)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_Container *ContainerTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_Container *ContainerSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _Container.Contract.SetAddressKMS(&_Container.TransactOpts, address_KMS)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_Container *ContainerTransactorSession) SetAddressKMS(address_KMS common.Address) (*types.Transaction, error) {
	return _Container.Contract.SetAddressKMS(&_Container.TransactOpts, address_KMS)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_Container *ContainerTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_Container *ContainerSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Container.Contract.SetGroupRights(&_Container.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_Container *ContainerTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Container.Contract.SetGroupRights(&_Container.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_Container *ContainerTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_Container *ContainerSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Container.Contract.SetRights(&_Container.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_Container *ContainerTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Container.Contract.SetRights(&_Container.TransactOpts, stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Container *ContainerTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Container *ContainerSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _Container.Contract.SetVisibility(&_Container.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Container *ContainerTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _Container.Contract.SetVisibility(&_Container.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Container *ContainerTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Container *ContainerSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Container.Contract.TransferCreatorship(&_Container.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Container *ContainerTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Container.Contract.TransferCreatorship(&_Container.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Container *ContainerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Container *ContainerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Container.Contract.TransferOwnership(&_Container.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Container *ContainerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Container.Contract.TransferOwnership(&_Container.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Container *ContainerTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Container *ContainerSession) UpdateRequest() (*types.Transaction, error) {
	return _Container.Contract.UpdateRequest(&_Container.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Container *ContainerTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _Container.Contract.UpdateRequest(&_Container.TransactOpts)
}

// ContainerAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the Container contract.
type ContainerAccessRequestV3Iterator struct {
	Event *ContainerAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerAccessRequestV3 represents a AccessRequestV3 event raised by the Container contract.
type ContainerAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Container *ContainerFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*ContainerAccessRequestV3Iterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &ContainerAccessRequestV3Iterator{contract: _Container.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Container *ContainerFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *ContainerAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerAccessRequestV3)
				if err := _Container.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Container *ContainerFilterer) ParseAccessRequestV3(log types.Log) (*ContainerAccessRequestV3, error) {
	event := new(ContainerAccessRequestV3)
	if err := _Container.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the Container contract.
type ContainerCommitPendingIterator struct {
	Event *ContainerCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerCommitPending represents a CommitPending event raised by the Container contract.
type ContainerCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) FilterCommitPending(opts *bind.FilterOpts) (*ContainerCommitPendingIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &ContainerCommitPendingIterator{contract: _Container.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *ContainerCommitPending) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerCommitPending)
				if err := _Container.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) ParseCommitPending(log types.Log) (*ContainerCommitPending, error) {
	event := new(ContainerCommitPending)
	if err := _Container.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the Container contract.
type ContainerContentTypeAddedIterator struct {
	Event *ContainerContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerContentTypeAdded represents a ContentTypeAdded event raised by the Container contract.
type ContainerContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*ContainerContentTypeAddedIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &ContainerContentTypeAddedIterator{contract: _Container.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *ContainerContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerContentTypeAdded)
				if err := _Container.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) ParseContentTypeAdded(log types.Log) (*ContainerContentTypeAdded, error) {
	event := new(ContainerContentTypeAdded)
	if err := _Container.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the Container contract.
type ContainerContentTypeRemovedIterator struct {
	Event *ContainerContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerContentTypeRemoved represents a ContentTypeRemoved event raised by the Container contract.
type ContainerContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*ContainerContentTypeRemovedIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &ContainerContentTypeRemovedIterator{contract: _Container.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *ContainerContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerContentTypeRemoved)
				if err := _Container.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) ParseContentTypeRemoved(log types.Log) (*ContainerContentTypeRemoved, error) {
	event := new(ContainerContentTypeRemoved)
	if err := _Container.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the Container contract.
type ContainerUpdateRequestIterator struct {
	Event *ContainerUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerUpdateRequest represents a UpdateRequest event raised by the Container contract.
type ContainerUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*ContainerUpdateRequestIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &ContainerUpdateRequestIterator{contract: _Container.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *ContainerUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerUpdateRequest)
				if err := _Container.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) ParseUpdateRequest(log types.Log) (*ContainerUpdateRequest, error) {
	event := new(ContainerUpdateRequest)
	if err := _Container.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the Container contract.
type ContainerVersionConfirmIterator struct {
	Event *ContainerVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerVersionConfirm represents a VersionConfirm event raised by the Container contract.
type ContainerVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*ContainerVersionConfirmIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &ContainerVersionConfirmIterator{contract: _Container.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *ContainerVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerVersionConfirm)
				if err := _Container.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) ParseVersionConfirm(log types.Log) (*ContainerVersionConfirm, error) {
	event := new(ContainerVersionConfirm)
	if err := _Container.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the Container contract.
type ContainerVersionDeleteIterator struct {
	Event *ContainerVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerVersionDelete represents a VersionDelete event raised by the Container contract.
type ContainerVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*ContainerVersionDeleteIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &ContainerVersionDeleteIterator{contract: _Container.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *ContainerVersionDelete) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerVersionDelete)
				if err := _Container.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) ParseVersionDelete(log types.Log) (*ContainerVersionDelete, error) {
	event := new(ContainerVersionDelete)
	if err := _Container.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContainerVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the Container contract.
type ContainerVisibilityChangedIterator struct {
	Event *ContainerVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerVisibilityChanged represents a VisibilityChanged event raised by the Container contract.
type ContainerVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Container *ContainerFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*ContainerVisibilityChangedIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &ContainerVisibilityChangedIterator{contract: _Container.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Container *ContainerFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *ContainerVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerVisibilityChanged)
				if err := _Container.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Container *ContainerFilterer) ParseVisibilityChanged(log types.Log) (*ContainerVisibilityChanged, error) {
	event := new(ContainerVisibilityChanged)
	if err := _Container.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentABI is the input ABI used to generate the binding from.
const ContentABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"runFinalize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commandKill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposed_status_code\",\"type\":\"int256\"}],\"name\":\"runStatusChange\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"runDescribeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"runAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runKillExt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runKill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_CHARGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"runAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposedStatusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"returnStatusCode\",\"type\":\"int256\"}],\"name\":\"RunStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"calculatedAccessCharge\",\"type\":\"int256\"}],\"name\":\"RunAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunFinalize\",\"type\":\"event\"}]"

// ContentFuncSigs maps the 4-byte function signature to its string representation.
var ContentFuncSigs = map[string]string{
	"6af27417": "DEFAULT_ACCESS()",
	"f185db0c": "DEFAULT_CHARGE()",
	"b535b03e": "DEFAULT_SEE()",
	"2de3ecd1": "commandKill()",
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"f9b4aa02": "runAccess(uint256,bytes32[],address[],address)",
	"74ba4609": "runAccessInfo(bytes32[],address[],address)",
	"7b1cdb3e": "runCreate()",
	"45080442": "runDescribeStatus(int256)",
	"c9f3d94c": "runEdit()",
	"1a485ccd": "runFinalize(uint256,bytes32[],address[],address)",
	"9e99bbea": "runKill()",
	"860b2492": "runKillExt()",
	"3513a805": "runStatusChange(int256)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// ContentBin is the compiled bytecode used for deploying new contracts.
var ContentBin = "0x60806040527f4f776e61626c6532303230303231303131303130304d4c0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f436f6e74656e7432303230303231303136343130304d4c00000000000000000060055560028054600160a060020a0319908116329081179092556003805490911690911790556106e6806100a26000396000f30060806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461011e5780631a485ccd1461014f5780632de3ecd1146101f25780633513a8051461020757806341c0e1b514610212578063450804421461022757806354fd4d501461023f5780635f4fcae1146102545780636af27417146102695780636d2e4b1b1461029457806374ba4609146102b55780637b1cdb3e1461037d578063860b2492146103855780638da5cb5b1461038d5780639e99bbea1461037d578063af570c04146103a2578063b535b03e146103b7578063c9f3d94c146103cc578063f185db0c146103e1578063f2fde38b146103f6578063f9b4aa021461014f575b005b34801561012a57600080fd5b50610133610417565b60408051600160a060020a039092168252519081900360200190f35b6040805160206004602480358281013584810280870186019097528086526101e096843596369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975050509235600160a060020a0316935061042692505050565b60408051918252519081900360200190f35b3480156101fe57600080fd5b5061011c610430565b6101e06004356104fb565b34801561021e57600080fd5b5061011c6104fe565b34801561023357600080fd5b506101e060043561052c565b34801561024b57600080fd5b506101e0610532565b34801561026057600080fd5b506101e0610538565b34801561027557600080fd5b5061027e61053e565b6040805160ff9092168252519081900360200190f35b3480156102a057600080fd5b5061011c600160a060020a0360043516610543565b3480156102c157600080fd5b506040805160206004803580820135838102808601850190965280855261034e95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975050509235600160a060020a0316935061059e92505050565b6040805160ff958616815293851660208501529190931682820152606082019290925290519081900360800190f35b6101e06105ad565b6101e06105b2565b34801561039957600080fd5b5061013361061b565b3480156103ae57600080fd5b5061013361062a565b3480156103c357600080fd5b5061027e610639565b3480156103d857600080fd5b506101e061063e565b3480156103ed57600080fd5b5061027e610643565b34801561040257600080fd5b5061011c600160a060020a0360043516610648565b600254600160a060020a031681565b6000949350505050565b600654600090600160a060020a0316331461044a57600080fd5b33905030600160a060020a031681600160a060020a0316632310167f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156104ae57600080fd5b505af11580156104c2573d6000803e3d6000fd5b505050506040513d60208110156104d857600080fd5b5051600160a060020a0316146104ed57600080fd5b600354600160a060020a0316ff5b90565b600354600160a060020a03163214806105215750600354600160a060020a031633145b15156104ed57600080fd5b50600090565b60055481565b60015481565b600281565b600254600160a060020a0316321461055a57600080fd5b600160a060020a038116151561056f57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60076000808093509350935093565b600090565b6000806105bd6105ad565b905080606414806105cf57508061044c145b156105f8576006805473ffffffffffffffffffffffffffffffffffffffff191633179055610616565b6006805473ffffffffffffffffffffffffffffffffffffffff191690555b919050565b600354600160a060020a031681565b600454600160a060020a031681565b600181565b606490565b600481565b600354600160a060020a031632148061066b5750600354600160a060020a031633145b151561067657600080fd5b600160a060020a038116151561068b57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820d785293d3dff344754bc1f3f36aabdd1ac762063b3d521f84da4323eb946d9270029"

// DeployContent deploys a new Ethereum contract, binding an instance of Content to it.
func DeployContent(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Content, error) {
	parsed, err := abi.JSON(strings.NewReader(ContentABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ContentBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Content{ContentCaller: ContentCaller{contract: contract}, ContentTransactor: ContentTransactor{contract: contract}, ContentFilterer: ContentFilterer{contract: contract}}, nil
}

// Content is an auto generated Go binding around an Ethereum contract.
type Content struct {
	ContentCaller     // Read-only binding to the contract
	ContentTransactor // Write-only binding to the contract
	ContentFilterer   // Log filterer for contract events
}

// ContentCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContentSession struct {
	Contract     *Content          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContentCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContentCallerSession struct {
	Contract *ContentCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ContentTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContentTransactorSession struct {
	Contract     *ContentTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ContentRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContentRaw struct {
	Contract *Content // Generic contract binding to access the raw methods on
}

// ContentCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContentCallerRaw struct {
	Contract *ContentCaller // Generic read-only contract binding to access the raw methods on
}

// ContentTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContentTransactorRaw struct {
	Contract *ContentTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContent creates a new instance of Content, bound to a specific deployed contract.
func NewContent(address common.Address, backend bind.ContractBackend) (*Content, error) {
	contract, err := bindContent(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Content{ContentCaller: ContentCaller{contract: contract}, ContentTransactor: ContentTransactor{contract: contract}, ContentFilterer: ContentFilterer{contract: contract}}, nil
}

// NewContentCaller creates a new read-only instance of Content, bound to a specific deployed contract.
func NewContentCaller(address common.Address, caller bind.ContractCaller) (*ContentCaller, error) {
	contract, err := bindContent(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContentCaller{contract: contract}, nil
}

// NewContentTransactor creates a new write-only instance of Content, bound to a specific deployed contract.
func NewContentTransactor(address common.Address, transactor bind.ContractTransactor) (*ContentTransactor, error) {
	contract, err := bindContent(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContentTransactor{contract: contract}, nil
}

// NewContentFilterer creates a new log filterer instance of Content, bound to a specific deployed contract.
func NewContentFilterer(address common.Address, filterer bind.ContractFilterer) (*ContentFilterer, error) {
	contract, err := bindContent(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContentFilterer{contract: contract}, nil
}

// bindContent binds a generic wrapper to an already deployed contract.
func bindContent(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContentABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Content *ContentRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Content.Contract.ContentCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Content *ContentRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.Contract.ContentTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Content *ContentRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Content.Contract.ContentTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Content *ContentCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Content.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Content *ContentTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Content *ContentTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Content.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_Content *ContentCaller) DEFAULTACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "DEFAULT_ACCESS")
	return *ret0, err
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_Content *ContentSession) DEFAULTACCESS() (uint8, error) {
	return _Content.Contract.DEFAULTACCESS(&_Content.CallOpts)
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() constant returns(uint8)
func (_Content *ContentCallerSession) DEFAULTACCESS() (uint8, error) {
	return _Content.Contract.DEFAULTACCESS(&_Content.CallOpts)
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_Content *ContentCaller) DEFAULTCHARGE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "DEFAULT_CHARGE")
	return *ret0, err
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_Content *ContentSession) DEFAULTCHARGE() (uint8, error) {
	return _Content.Contract.DEFAULTCHARGE(&_Content.CallOpts)
}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() constant returns(uint8)
func (_Content *ContentCallerSession) DEFAULTCHARGE() (uint8, error) {
	return _Content.Contract.DEFAULTCHARGE(&_Content.CallOpts)
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_Content *ContentCaller) DEFAULTSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "DEFAULT_SEE")
	return *ret0, err
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_Content *ContentSession) DEFAULTSEE() (uint8, error) {
	return _Content.Contract.DEFAULTSEE(&_Content.CallOpts)
}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() constant returns(uint8)
func (_Content *ContentCallerSession) DEFAULTSEE() (uint8, error) {
	return _Content.Contract.DEFAULTSEE(&_Content.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Content *ContentCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Content *ContentSession) ContentSpace() (common.Address, error) {
	return _Content.Contract.ContentSpace(&_Content.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Content *ContentCallerSession) ContentSpace() (common.Address, error) {
	return _Content.Contract.ContentSpace(&_Content.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Content *ContentCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Content *ContentSession) Creator() (common.Address, error) {
	return _Content.Contract.Creator(&_Content.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Content *ContentCallerSession) Creator() (common.Address, error) {
	return _Content.Contract.Creator(&_Content.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Content *ContentCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Content *ContentSession) Owner() (common.Address, error) {
	return _Content.Contract.Owner(&_Content.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Content *ContentCallerSession) Owner() (common.Address, error) {
	return _Content.Contract.Owner(&_Content.CallOpts)
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x74ba4609.
//
// Solidity: function runAccessInfo(bytes32[] , address[] , address accessor) constant returns(uint8, uint8, uint8, uint256)
func (_Content *ContentCaller) RunAccessInfo(opts *bind.CallOpts, arg0 [][32]byte, arg1 []common.Address, accessor common.Address) (uint8, uint8, uint8, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(uint8)
		ret3 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Content.contract.Call(opts, out, "runAccessInfo", arg0, arg1, accessor)
	return *ret0, *ret1, *ret2, *ret3, err
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x74ba4609.
//
// Solidity: function runAccessInfo(bytes32[] , address[] , address accessor) constant returns(uint8, uint8, uint8, uint256)
func (_Content *ContentSession) RunAccessInfo(arg0 [][32]byte, arg1 []common.Address, accessor common.Address) (uint8, uint8, uint8, *big.Int, error) {
	return _Content.Contract.RunAccessInfo(&_Content.CallOpts, arg0, arg1, accessor)
}

// RunAccessInfo is a free data retrieval call binding the contract method 0x74ba4609.
//
// Solidity: function runAccessInfo(bytes32[] , address[] , address accessor) constant returns(uint8, uint8, uint8, uint256)
func (_Content *ContentCallerSession) RunAccessInfo(arg0 [][32]byte, arg1 []common.Address, accessor common.Address) (uint8, uint8, uint8, *big.Int, error) {
	return _Content.Contract.RunAccessInfo(&_Content.CallOpts, arg0, arg1, accessor)
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_Content *ContentCaller) RunDescribeStatus(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "runDescribeStatus", arg0)
	return *ret0, err
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_Content *ContentSession) RunDescribeStatus(arg0 *big.Int) ([32]byte, error) {
	return _Content.Contract.RunDescribeStatus(&_Content.CallOpts, arg0)
}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) constant returns(bytes32)
func (_Content *ContentCallerSession) RunDescribeStatus(arg0 *big.Int) ([32]byte, error) {
	return _Content.Contract.RunDescribeStatus(&_Content.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Content *ContentCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Content *ContentSession) Version() ([32]byte, error) {
	return _Content.Contract.Version(&_Content.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Content *ContentCallerSession) Version() ([32]byte, error) {
	return _Content.Contract.Version(&_Content.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Content *ContentCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Content.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Content *ContentSession) VersionAPI() ([32]byte, error) {
	return _Content.Contract.VersionAPI(&_Content.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Content *ContentCallerSession) VersionAPI() ([32]byte, error) {
	return _Content.Contract.VersionAPI(&_Content.CallOpts)
}

// CommandKill is a paid mutator transaction binding the contract method 0x2de3ecd1.
//
// Solidity: function commandKill() returns()
func (_Content *ContentTransactor) CommandKill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "commandKill")
}

// CommandKill is a paid mutator transaction binding the contract method 0x2de3ecd1.
//
// Solidity: function commandKill() returns()
func (_Content *ContentSession) CommandKill() (*types.Transaction, error) {
	return _Content.Contract.CommandKill(&_Content.TransactOpts)
}

// CommandKill is a paid mutator transaction binding the contract method 0x2de3ecd1.
//
// Solidity: function commandKill() returns()
func (_Content *ContentTransactorSession) CommandKill() (*types.Transaction, error) {
	return _Content.Contract.CommandKill(&_Content.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Content *ContentTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Content *ContentSession) Kill() (*types.Transaction, error) {
	return _Content.Contract.Kill(&_Content.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Content *ContentTransactorSession) Kill() (*types.Transaction, error) {
	return _Content.Contract.Kill(&_Content.TransactOpts)
}

// RunAccess is a paid mutator transaction binding the contract method 0xf9b4aa02.
//
// Solidity: function runAccess(uint256 , bytes32[] , address[] , address accessor) returns(uint256)
func (_Content *ContentTransactor) RunAccess(opts *bind.TransactOpts, arg0 *big.Int, arg1 [][32]byte, arg2 []common.Address, accessor common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runAccess", arg0, arg1, arg2, accessor)
}

// RunAccess is a paid mutator transaction binding the contract method 0xf9b4aa02.
//
// Solidity: function runAccess(uint256 , bytes32[] , address[] , address accessor) returns(uint256)
func (_Content *ContentSession) RunAccess(arg0 *big.Int, arg1 [][32]byte, arg2 []common.Address, accessor common.Address) (*types.Transaction, error) {
	return _Content.Contract.RunAccess(&_Content.TransactOpts, arg0, arg1, arg2, accessor)
}

// RunAccess is a paid mutator transaction binding the contract method 0xf9b4aa02.
//
// Solidity: function runAccess(uint256 , bytes32[] , address[] , address accessor) returns(uint256)
func (_Content *ContentTransactorSession) RunAccess(arg0 *big.Int, arg1 [][32]byte, arg2 []common.Address, accessor common.Address) (*types.Transaction, error) {
	return _Content.Contract.RunAccess(&_Content.TransactOpts, arg0, arg1, arg2, accessor)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_Content *ContentTransactor) RunCreate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runCreate")
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_Content *ContentSession) RunCreate() (*types.Transaction, error) {
	return _Content.Contract.RunCreate(&_Content.TransactOpts)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() returns(uint256)
func (_Content *ContentTransactorSession) RunCreate() (*types.Transaction, error) {
	return _Content.Contract.RunCreate(&_Content.TransactOpts)
}

// RunEdit is a paid mutator transaction binding the contract method 0xc9f3d94c.
//
// Solidity: function runEdit() returns(uint256)
func (_Content *ContentTransactor) RunEdit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runEdit")
}

// RunEdit is a paid mutator transaction binding the contract method 0xc9f3d94c.
//
// Solidity: function runEdit() returns(uint256)
func (_Content *ContentSession) RunEdit() (*types.Transaction, error) {
	return _Content.Contract.RunEdit(&_Content.TransactOpts)
}

// RunEdit is a paid mutator transaction binding the contract method 0xc9f3d94c.
//
// Solidity: function runEdit() returns(uint256)
func (_Content *ContentTransactorSession) RunEdit() (*types.Transaction, error) {
	return _Content.Contract.RunEdit(&_Content.TransactOpts)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x1a485ccd.
//
// Solidity: function runFinalize(uint256 , bytes32[] , address[] , address accessor) returns(uint256)
func (_Content *ContentTransactor) RunFinalize(opts *bind.TransactOpts, arg0 *big.Int, arg1 [][32]byte, arg2 []common.Address, accessor common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runFinalize", arg0, arg1, arg2, accessor)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x1a485ccd.
//
// Solidity: function runFinalize(uint256 , bytes32[] , address[] , address accessor) returns(uint256)
func (_Content *ContentSession) RunFinalize(arg0 *big.Int, arg1 [][32]byte, arg2 []common.Address, accessor common.Address) (*types.Transaction, error) {
	return _Content.Contract.RunFinalize(&_Content.TransactOpts, arg0, arg1, arg2, accessor)
}

// RunFinalize is a paid mutator transaction binding the contract method 0x1a485ccd.
//
// Solidity: function runFinalize(uint256 , bytes32[] , address[] , address accessor) returns(uint256)
func (_Content *ContentTransactorSession) RunFinalize(arg0 *big.Int, arg1 [][32]byte, arg2 []common.Address, accessor common.Address) (*types.Transaction, error) {
	return _Content.Contract.RunFinalize(&_Content.TransactOpts, arg0, arg1, arg2, accessor)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_Content *ContentTransactor) RunKill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runKill")
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_Content *ContentSession) RunKill() (*types.Transaction, error) {
	return _Content.Contract.RunKill(&_Content.TransactOpts)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() returns(uint256)
func (_Content *ContentTransactorSession) RunKill() (*types.Transaction, error) {
	return _Content.Contract.RunKill(&_Content.TransactOpts)
}

// RunKillExt is a paid mutator transaction binding the contract method 0x860b2492.
//
// Solidity: function runKillExt() returns(uint256)
func (_Content *ContentTransactor) RunKillExt(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runKillExt")
}

// RunKillExt is a paid mutator transaction binding the contract method 0x860b2492.
//
// Solidity: function runKillExt() returns(uint256)
func (_Content *ContentSession) RunKillExt() (*types.Transaction, error) {
	return _Content.Contract.RunKillExt(&_Content.TransactOpts)
}

// RunKillExt is a paid mutator transaction binding the contract method 0x860b2492.
//
// Solidity: function runKillExt() returns(uint256)
func (_Content *ContentTransactorSession) RunKillExt() (*types.Transaction, error) {
	return _Content.Contract.RunKillExt(&_Content.TransactOpts)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_Content *ContentTransactor) RunStatusChange(opts *bind.TransactOpts, proposed_status_code *big.Int) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runStatusChange", proposed_status_code)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_Content *ContentSession) RunStatusChange(proposed_status_code *big.Int) (*types.Transaction, error) {
	return _Content.Contract.RunStatusChange(&_Content.TransactOpts, proposed_status_code)
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) returns(int256)
func (_Content *ContentTransactorSession) RunStatusChange(proposed_status_code *big.Int) (*types.Transaction, error) {
	return _Content.Contract.RunStatusChange(&_Content.TransactOpts, proposed_status_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Content *ContentTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Content *ContentSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Content.Contract.TransferCreatorship(&_Content.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Content *ContentTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Content.Contract.TransferCreatorship(&_Content.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Content *ContentTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Content *ContentSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Content.Contract.TransferOwnership(&_Content.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Content *ContentTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Content.Contract.TransferOwnership(&_Content.TransactOpts, newOwner)
}

// ContentLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the Content contract.
type ContentLogIterator struct {
	Event *ContentLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLog represents a Log event raised by the Content contract.
type ContentLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) FilterLog(opts *bind.FilterOpts) (*ContentLogIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &ContentLogIterator{contract: _Content.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *ContentLog) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLog)
				if err := _Content.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) ParseLog(log types.Log) (*ContentLog, error) {
	event := new(ContentLog)
	if err := _Content.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the Content contract.
type ContentLogAddressIterator struct {
	Event *ContentLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogAddress represents a LogAddress event raised by the Content contract.
type ContentLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) FilterLogAddress(opts *bind.FilterOpts) (*ContentLogAddressIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &ContentLogAddressIterator{contract: _Content.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *ContentLogAddress) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogAddress)
				if err := _Content.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) ParseLogAddress(log types.Log) (*ContentLogAddress, error) {
	event := new(ContentLogAddress)
	if err := _Content.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the Content contract.
type ContentLogBoolIterator struct {
	Event *ContentLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogBool represents a LogBool event raised by the Content contract.
type ContentLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) FilterLogBool(opts *bind.FilterOpts) (*ContentLogBoolIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &ContentLogBoolIterator{contract: _Content.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *ContentLogBool) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogBool)
				if err := _Content.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) ParseLogBool(log types.Log) (*ContentLogBool, error) {
	event := new(ContentLogBool)
	if err := _Content.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the Content contract.
type ContentLogBytes32Iterator struct {
	Event *ContentLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogBytes32 represents a LogBytes32 event raised by the Content contract.
type ContentLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*ContentLogBytes32Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &ContentLogBytes32Iterator{contract: _Content.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *ContentLogBytes32) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogBytes32)
				if err := _Content.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) ParseLogBytes32(log types.Log) (*ContentLogBytes32, error) {
	event := new(ContentLogBytes32)
	if err := _Content.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the Content contract.
type ContentLogInt256Iterator struct {
	Event *ContentLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogInt256 represents a LogInt256 event raised by the Content contract.
type ContentLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) FilterLogInt256(opts *bind.FilterOpts) (*ContentLogInt256Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &ContentLogInt256Iterator{contract: _Content.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *ContentLogInt256) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogInt256)
				if err := _Content.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) ParseLogInt256(log types.Log) (*ContentLogInt256, error) {
	event := new(ContentLogInt256)
	if err := _Content.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the Content contract.
type ContentLogPaymentIterator struct {
	Event *ContentLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogPayment represents a LogPayment event raised by the Content contract.
type ContentLogPayment struct {
	Label  string
	Payee  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) FilterLogPayment(opts *bind.FilterOpts) (*ContentLogPaymentIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &ContentLogPaymentIterator{contract: _Content.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *ContentLogPayment) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogPayment)
				if err := _Content.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) ParseLogPayment(log types.Log) (*ContentLogPayment, error) {
	event := new(ContentLogPayment)
	if err := _Content.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the Content contract.
type ContentLogUint256Iterator struct {
	Event *ContentLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogUint256 represents a LogUint256 event raised by the Content contract.
type ContentLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) FilterLogUint256(opts *bind.FilterOpts) (*ContentLogUint256Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &ContentLogUint256Iterator{contract: _Content.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *ContentLogUint256) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogUint256)
				if err := _Content.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) ParseLogUint256(log types.Log) (*ContentLogUint256, error) {
	event := new(ContentLogUint256)
	if err := _Content.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunAccessIterator is returned from FilterRunAccess and is used to iterate over the raw logs and unpacked data for RunAccess events raised by the Content contract.
type ContentRunAccessIterator struct {
	Event *ContentRunAccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunAccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunAccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunAccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunAccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunAccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunAccess represents a RunAccess event raised by the Content contract.
type ContentRunAccess struct {
	RequestNonce *big.Int
	Result       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRunAccess is a free log retrieval operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) FilterRunAccess(opts *bind.FilterOpts) (*ContentRunAccessIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return &ContentRunAccessIterator{contract: _Content.contract, event: "RunAccess", logs: logs, sub: sub}, nil
}

// WatchRunAccess is a free log subscription operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) WatchRunAccess(opts *bind.WatchOpts, sink chan<- *ContentRunAccess) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunAccess)
				if err := _Content.contract.UnpackLog(event, "RunAccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccess is a log parse operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) ParseRunAccess(log types.Log) (*ContentRunAccess, error) {
	event := new(ContentRunAccess)
	if err := _Content.contract.UnpackLog(event, "RunAccess", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunAccessChargeIterator is returned from FilterRunAccessCharge and is used to iterate over the raw logs and unpacked data for RunAccessCharge events raised by the Content contract.
type ContentRunAccessChargeIterator struct {
	Event *ContentRunAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunAccessCharge represents a RunAccessCharge event raised by the Content contract.
type ContentRunAccessCharge struct {
	CalculatedAccessCharge *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRunAccessCharge is a free log retrieval operation binding the contract event 0xe1f170f83120da6c17cd0ed37a683fc996637c63d2c94a60c806d4cb7466f47b.
//
// Solidity: event RunAccessCharge(int256 calculatedAccessCharge)
func (_Content *ContentFilterer) FilterRunAccessCharge(opts *bind.FilterOpts) (*ContentRunAccessChargeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return &ContentRunAccessChargeIterator{contract: _Content.contract, event: "RunAccessCharge", logs: logs, sub: sub}, nil
}

// WatchRunAccessCharge is a free log subscription operation binding the contract event 0xe1f170f83120da6c17cd0ed37a683fc996637c63d2c94a60c806d4cb7466f47b.
//
// Solidity: event RunAccessCharge(int256 calculatedAccessCharge)
func (_Content *ContentFilterer) WatchRunAccessCharge(opts *bind.WatchOpts, sink chan<- *ContentRunAccessCharge) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunAccessCharge)
				if err := _Content.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccessCharge is a log parse operation binding the contract event 0xe1f170f83120da6c17cd0ed37a683fc996637c63d2c94a60c806d4cb7466f47b.
//
// Solidity: event RunAccessCharge(int256 calculatedAccessCharge)
func (_Content *ContentFilterer) ParseRunAccessCharge(log types.Log) (*ContentRunAccessCharge, error) {
	event := new(ContentRunAccessCharge)
	if err := _Content.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunCreateIterator is returned from FilterRunCreate and is used to iterate over the raw logs and unpacked data for RunCreate events raised by the Content contract.
type ContentRunCreateIterator struct {
	Event *ContentRunCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunCreate represents a RunCreate event raised by the Content contract.
type ContentRunCreate struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunCreate is a free log retrieval operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) FilterRunCreate(opts *bind.FilterOpts) (*ContentRunCreateIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return &ContentRunCreateIterator{contract: _Content.contract, event: "RunCreate", logs: logs, sub: sub}, nil
}

// WatchRunCreate is a free log subscription operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) WatchRunCreate(opts *bind.WatchOpts, sink chan<- *ContentRunCreate) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunCreate)
				if err := _Content.contract.UnpackLog(event, "RunCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunCreate is a log parse operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) ParseRunCreate(log types.Log) (*ContentRunCreate, error) {
	event := new(ContentRunCreate)
	if err := _Content.contract.UnpackLog(event, "RunCreate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunFinalizeIterator is returned from FilterRunFinalize and is used to iterate over the raw logs and unpacked data for RunFinalize events raised by the Content contract.
type ContentRunFinalizeIterator struct {
	Event *ContentRunFinalize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunFinalizeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunFinalize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunFinalize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunFinalizeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunFinalizeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunFinalize represents a RunFinalize event raised by the Content contract.
type ContentRunFinalize struct {
	RequestNonce *big.Int
	Result       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRunFinalize is a free log retrieval operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) FilterRunFinalize(opts *bind.FilterOpts) (*ContentRunFinalizeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return &ContentRunFinalizeIterator{contract: _Content.contract, event: "RunFinalize", logs: logs, sub: sub}, nil
}

// WatchRunFinalize is a free log subscription operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) WatchRunFinalize(opts *bind.WatchOpts, sink chan<- *ContentRunFinalize) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunFinalize)
				if err := _Content.contract.UnpackLog(event, "RunFinalize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunFinalize is a log parse operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) ParseRunFinalize(log types.Log) (*ContentRunFinalize, error) {
	event := new(ContentRunFinalize)
	if err := _Content.contract.UnpackLog(event, "RunFinalize", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunKillIterator is returned from FilterRunKill and is used to iterate over the raw logs and unpacked data for RunKill events raised by the Content contract.
type ContentRunKillIterator struct {
	Event *ContentRunKill // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunKillIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunKill)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunKill)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunKillIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunKillIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunKill represents a RunKill event raised by the Content contract.
type ContentRunKill struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunKill is a free log retrieval operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) FilterRunKill(opts *bind.FilterOpts) (*ContentRunKillIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return &ContentRunKillIterator{contract: _Content.contract, event: "RunKill", logs: logs, sub: sub}, nil
}

// WatchRunKill is a free log subscription operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) WatchRunKill(opts *bind.WatchOpts, sink chan<- *ContentRunKill) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunKill)
				if err := _Content.contract.UnpackLog(event, "RunKill", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunKill is a log parse operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) ParseRunKill(log types.Log) (*ContentRunKill, error) {
	event := new(ContentRunKill)
	if err := _Content.contract.UnpackLog(event, "RunKill", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ContentRunStatusChangeIterator is returned from FilterRunStatusChange and is used to iterate over the raw logs and unpacked data for RunStatusChange events raised by the Content contract.
type ContentRunStatusChangeIterator struct {
	Event *ContentRunStatusChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunStatusChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunStatusChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunStatusChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunStatusChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunStatusChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunStatusChange represents a RunStatusChange event raised by the Content contract.
type ContentRunStatusChange struct {
	ProposedStatusCode *big.Int
	ReturnStatusCode   *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRunStatusChange is a free log retrieval operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) FilterRunStatusChange(opts *bind.FilterOpts) (*ContentRunStatusChangeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return &ContentRunStatusChangeIterator{contract: _Content.contract, event: "RunStatusChange", logs: logs, sub: sub}, nil
}

// WatchRunStatusChange is a free log subscription operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) WatchRunStatusChange(opts *bind.WatchOpts, sink chan<- *ContentRunStatusChange) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunStatusChange)
				if err := _Content.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunStatusChange is a log parse operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) ParseRunStatusChange(log types.Log) (*ContentRunStatusChange, error) {
	event := new(ContentRunStatusChange)
	if err := _Content.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
		return nil, err
	}
	return event, nil
}

// CounterObjectABI is the input ABI used to generate the binding from.
const CounterObjectABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBitInternal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint32\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ord\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"prev\",\"type\":\"bool\"}],\"name\":\"BitSetAndGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"}],\"name\":\"WordGroupDeleted\",\"type\":\"event\"}]"

// CounterObjectFuncSigs maps the 4-byte function signature to its string representation.
var CounterObjectFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"e57097c9": "deleteGroup(bytes32)",
	"30f846a2": "getBit(bytes32,uint8)",
	"e1954b61": "getCounter(bytes32,uint8)",
	"7558cbf0": "incrementCounter(bytes32,uint8)",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"24d7c18d": "setAndGetBit(bytes32,uint8)",
	"33f12cf4": "setAndGetBitInternal(bytes32,uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// CounterObjectBin is the compiled bytecode used for deploying new contracts.
var CounterObjectBin = "0x60806040527f4f776e61626c6532303230303231303131303130304d4c0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060015560028054600160a060020a0319908116329081179092556003805490911690911790556107b88061007e6000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146100dc57806324d7806c1461010d57806324d7c18d1461014257806330f846a21461016057806333f12cf41461017e57806341c0e1b51461019c57806354fd4d50146101b15780635f4fcae1146101d85780636d2e4b1b146101ed5780637558cbf01461020e5780638da5cb5b1461022c578063af570c0414610241578063e1954b6114610256578063e57097c91461028d578063f2fde38b146102a5575b005b3480156100e857600080fd5b506100f16102c6565b60408051600160a060020a039092168252519081900360200190f35b34801561011957600080fd5b5061012e600160a060020a03600435166102d5565b604080519115158252519081900360200190f35b34801561014e57600080fd5b5061012e60043560ff602435166102ff565b34801561016c57600080fd5b5061012e60043560ff60243516610326565b34801561018a57600080fd5b5061012e60043560ff60243516610394565b3480156101a857600080fd5b506100da6104a0565b3480156101bd57600080fd5b506101c66104dc565b60408051918252519081900360200190f35b3480156101e457600080fd5b506101c66104e2565b3480156101f957600080fd5b506100da600160a060020a03600435166104e8565b34801561021a57600080fd5b506100da60043560ff60243516610543565b34801561023857600080fd5b506100f161063e565b34801561024d57600080fd5b506100f161064d565b34801561026257600080fd5b5061027460043560ff6024351661065c565b6040805163ffffffff9092168252519081900360200190f35b34801561029957600080fd5b506100da6004356106ae565b3480156102b157600080fd5b506100da600160a060020a0360043516610713565b600254600160a060020a031681565b600354600090600160a060020a03838116911614156102f6575060016102fa565b5060005b919050565b600061030a336102d5565b151561031557600080fd5b61031f8383610394565b9392505050565b6000828152600560209081526040822060ff8481169290920490911690601f841690600282900a908190846008811061035b57fe5b600881049091015460046007909216919091026101000a90041663ffffffff161561038757600161038a565b60005b9695505050505050565b6000828152600560209081526040822060ff8481169290920490911690601f841690600282900a908490829085600881106103cb57fe5b600881049091015460046007909216919091026101000a90041663ffffffff16156103f75760016103fa565b60005b90508015156104535760008781526005602052604090208290856008811061041e57fe5b60088104909101805463ffffffff60046007909416939093026101000a80820484169094178316840292909302199092161790555b6040805188815260ff881660208201528215158183015290517f4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d9181900360600190a19695505050505050565b600354600160a060020a03163214806104c35750600354600160a060020a031633145b15156104ce57600080fd5b600354600160a060020a0316ff5b60005481565b60015481565b600254600160a060020a031632146104ff57600080fd5b600160a060020a038116151561051457600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061054e336102d5565b151561055957600080fd5b600860ff83161061056957600080fd5b600083815260056020526040902060ff83166008811061058557fe5b60088082049290920154600086815260056020526040902060079092166004026101000a900463ffffffff1692509060ff84169081106105c157fe5b600881049091018054600163ffffffff60046007909516949094026101000a80830485169190910184168102908402199091161790556040805185815260ff8516602082015291831682820152517f77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f9181900360600190a1505050565b600354600160a060020a031681565b600454600160a060020a031681565b6000600860ff83161061066e57600080fd5b600083815260056020526040902060ff83166008811061068a57fe5b600891828204019190066004029054906101000a900463ffffffff16905092915050565b6106b7336102d5565b15156106c257600080fd5b6000818152600560205260408120906106db8282610785565b50506040805182815290517f87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f9181900360200190a150565b600354600160a060020a03163214806107365750600354600160a060020a031633145b151561074157600080fd5b600160a060020a038116151561075657600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b50600090555600a165627a7a72305820521842f6991f03408d0be3feddaca52ff5f40cc1feca137e245d97789498a53d0029"

// DeployCounterObject deploys a new Ethereum contract, binding an instance of CounterObject to it.
func DeployCounterObject(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CounterObject, error) {
	parsed, err := abi.JSON(strings.NewReader(CounterObjectABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CounterObjectBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CounterObject{CounterObjectCaller: CounterObjectCaller{contract: contract}, CounterObjectTransactor: CounterObjectTransactor{contract: contract}, CounterObjectFilterer: CounterObjectFilterer{contract: contract}}, nil
}

// CounterObject is an auto generated Go binding around an Ethereum contract.
type CounterObject struct {
	CounterObjectCaller     // Read-only binding to the contract
	CounterObjectTransactor // Write-only binding to the contract
	CounterObjectFilterer   // Log filterer for contract events
}

// CounterObjectCaller is an auto generated read-only Go binding around an Ethereum contract.
type CounterObjectCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CounterObjectTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CounterObjectTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CounterObjectFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CounterObjectFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CounterObjectSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CounterObjectSession struct {
	Contract     *CounterObject    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CounterObjectCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CounterObjectCallerSession struct {
	Contract *CounterObjectCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// CounterObjectTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CounterObjectTransactorSession struct {
	Contract     *CounterObjectTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// CounterObjectRaw is an auto generated low-level Go binding around an Ethereum contract.
type CounterObjectRaw struct {
	Contract *CounterObject // Generic contract binding to access the raw methods on
}

// CounterObjectCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CounterObjectCallerRaw struct {
	Contract *CounterObjectCaller // Generic read-only contract binding to access the raw methods on
}

// CounterObjectTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CounterObjectTransactorRaw struct {
	Contract *CounterObjectTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCounterObject creates a new instance of CounterObject, bound to a specific deployed contract.
func NewCounterObject(address common.Address, backend bind.ContractBackend) (*CounterObject, error) {
	contract, err := bindCounterObject(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CounterObject{CounterObjectCaller: CounterObjectCaller{contract: contract}, CounterObjectTransactor: CounterObjectTransactor{contract: contract}, CounterObjectFilterer: CounterObjectFilterer{contract: contract}}, nil
}

// NewCounterObjectCaller creates a new read-only instance of CounterObject, bound to a specific deployed contract.
func NewCounterObjectCaller(address common.Address, caller bind.ContractCaller) (*CounterObjectCaller, error) {
	contract, err := bindCounterObject(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CounterObjectCaller{contract: contract}, nil
}

// NewCounterObjectTransactor creates a new write-only instance of CounterObject, bound to a specific deployed contract.
func NewCounterObjectTransactor(address common.Address, transactor bind.ContractTransactor) (*CounterObjectTransactor, error) {
	contract, err := bindCounterObject(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CounterObjectTransactor{contract: contract}, nil
}

// NewCounterObjectFilterer creates a new log filterer instance of CounterObject, bound to a specific deployed contract.
func NewCounterObjectFilterer(address common.Address, filterer bind.ContractFilterer) (*CounterObjectFilterer, error) {
	contract, err := bindCounterObject(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CounterObjectFilterer{contract: contract}, nil
}

// bindCounterObject binds a generic wrapper to an already deployed contract.
func bindCounterObject(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CounterObjectABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CounterObject *CounterObjectRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CounterObject.Contract.CounterObjectCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CounterObject *CounterObjectRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CounterObject.Contract.CounterObjectTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CounterObject *CounterObjectRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CounterObject.Contract.CounterObjectTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CounterObject *CounterObjectCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CounterObject.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CounterObject *CounterObjectTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CounterObject.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CounterObject *CounterObjectTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CounterObject.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_CounterObject *CounterObjectCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_CounterObject *CounterObjectSession) ContentSpace() (common.Address, error) {
	return _CounterObject.Contract.ContentSpace(&_CounterObject.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_CounterObject *CounterObjectCallerSession) ContentSpace() (common.Address, error) {
	return _CounterObject.Contract.ContentSpace(&_CounterObject.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_CounterObject *CounterObjectCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_CounterObject *CounterObjectSession) Creator() (common.Address, error) {
	return _CounterObject.Contract.Creator(&_CounterObject.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_CounterObject *CounterObjectCallerSession) Creator() (common.Address, error) {
	return _CounterObject.Contract.Creator(&_CounterObject.CallOpts)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_CounterObject *CounterObjectCaller) GetBit(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "getBit", _ident, _ord)
	return *ret0, err
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_CounterObject *CounterObjectSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _CounterObject.Contract.GetBit(&_CounterObject.CallOpts, _ident, _ord)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_CounterObject *CounterObjectCallerSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _CounterObject.Contract.GetBit(&_CounterObject.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_CounterObject *CounterObjectCaller) GetCounter(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "getCounter", _ident, _ord)
	return *ret0, err
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_CounterObject *CounterObjectSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _CounterObject.Contract.GetCounter(&_CounterObject.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_CounterObject *CounterObjectCallerSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _CounterObject.Contract.GetCounter(&_CounterObject.CallOpts, _ident, _ord)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_CounterObject *CounterObjectCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_CounterObject *CounterObjectSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _CounterObject.Contract.IsAdmin(&_CounterObject.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_CounterObject *CounterObjectCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _CounterObject.Contract.IsAdmin(&_CounterObject.CallOpts, _candidate)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_CounterObject *CounterObjectCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_CounterObject *CounterObjectSession) Owner() (common.Address, error) {
	return _CounterObject.Contract.Owner(&_CounterObject.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_CounterObject *CounterObjectCallerSession) Owner() (common.Address, error) {
	return _CounterObject.Contract.Owner(&_CounterObject.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_CounterObject *CounterObjectCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_CounterObject *CounterObjectSession) Version() ([32]byte, error) {
	return _CounterObject.Contract.Version(&_CounterObject.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_CounterObject *CounterObjectCallerSession) Version() ([32]byte, error) {
	return _CounterObject.Contract.Version(&_CounterObject.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_CounterObject *CounterObjectCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _CounterObject.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_CounterObject *CounterObjectSession) VersionAPI() ([32]byte, error) {
	return _CounterObject.Contract.VersionAPI(&_CounterObject.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_CounterObject *CounterObjectCallerSession) VersionAPI() ([32]byte, error) {
	return _CounterObject.Contract.VersionAPI(&_CounterObject.CallOpts)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_CounterObject *CounterObjectTransactor) DeleteGroup(opts *bind.TransactOpts, _ident [32]byte) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "deleteGroup", _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_CounterObject *CounterObjectSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _CounterObject.Contract.DeleteGroup(&_CounterObject.TransactOpts, _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_CounterObject *CounterObjectTransactorSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _CounterObject.Contract.DeleteGroup(&_CounterObject.TransactOpts, _ident)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_CounterObject *CounterObjectTransactor) IncrementCounter(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "incrementCounter", _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_CounterObject *CounterObjectSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.Contract.IncrementCounter(&_CounterObject.TransactOpts, _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_CounterObject *CounterObjectTransactorSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.Contract.IncrementCounter(&_CounterObject.TransactOpts, _ident, _ord)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_CounterObject *CounterObjectTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_CounterObject *CounterObjectSession) Kill() (*types.Transaction, error) {
	return _CounterObject.Contract.Kill(&_CounterObject.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_CounterObject *CounterObjectTransactorSession) Kill() (*types.Transaction, error) {
	return _CounterObject.Contract.Kill(&_CounterObject.TransactOpts)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_CounterObject *CounterObjectTransactor) SetAndGetBit(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "setAndGetBit", _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_CounterObject *CounterObjectSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.Contract.SetAndGetBit(&_CounterObject.TransactOpts, _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_CounterObject *CounterObjectTransactorSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.Contract.SetAndGetBit(&_CounterObject.TransactOpts, _ident, _ord)
}

// SetAndGetBitInternal is a paid mutator transaction binding the contract method 0x33f12cf4.
//
// Solidity: function setAndGetBitInternal(bytes32 _ident, uint8 _ord) returns(bool)
func (_CounterObject *CounterObjectTransactor) SetAndGetBitInternal(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "setAndGetBitInternal", _ident, _ord)
}

// SetAndGetBitInternal is a paid mutator transaction binding the contract method 0x33f12cf4.
//
// Solidity: function setAndGetBitInternal(bytes32 _ident, uint8 _ord) returns(bool)
func (_CounterObject *CounterObjectSession) SetAndGetBitInternal(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.Contract.SetAndGetBitInternal(&_CounterObject.TransactOpts, _ident, _ord)
}

// SetAndGetBitInternal is a paid mutator transaction binding the contract method 0x33f12cf4.
//
// Solidity: function setAndGetBitInternal(bytes32 _ident, uint8 _ord) returns(bool)
func (_CounterObject *CounterObjectTransactorSession) SetAndGetBitInternal(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.Contract.SetAndGetBitInternal(&_CounterObject.TransactOpts, _ident, _ord)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_CounterObject *CounterObjectTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_CounterObject *CounterObjectSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _CounterObject.Contract.TransferCreatorship(&_CounterObject.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_CounterObject *CounterObjectTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _CounterObject.Contract.TransferCreatorship(&_CounterObject.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CounterObject *CounterObjectTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CounterObject *CounterObjectSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CounterObject.Contract.TransferOwnership(&_CounterObject.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CounterObject *CounterObjectTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CounterObject.Contract.TransferOwnership(&_CounterObject.TransactOpts, newOwner)
}

// CounterObjectBitSetAndGetIterator is returned from FilterBitSetAndGet and is used to iterate over the raw logs and unpacked data for BitSetAndGet events raised by the CounterObject contract.
type CounterObjectBitSetAndGetIterator struct {
	Event *CounterObjectBitSetAndGet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CounterObjectBitSetAndGetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CounterObjectBitSetAndGet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CounterObjectBitSetAndGet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CounterObjectBitSetAndGetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CounterObjectBitSetAndGetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CounterObjectBitSetAndGet represents a BitSetAndGet event raised by the CounterObject contract.
type CounterObjectBitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBitSetAndGet is a free log retrieval operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_CounterObject *CounterObjectFilterer) FilterBitSetAndGet(opts *bind.FilterOpts) (*CounterObjectBitSetAndGetIterator, error) {

	logs, sub, err := _CounterObject.contract.FilterLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return &CounterObjectBitSetAndGetIterator{contract: _CounterObject.contract, event: "BitSetAndGet", logs: logs, sub: sub}, nil
}

// WatchBitSetAndGet is a free log subscription operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_CounterObject *CounterObjectFilterer) WatchBitSetAndGet(opts *bind.WatchOpts, sink chan<- *CounterObjectBitSetAndGet) (event.Subscription, error) {

	logs, sub, err := _CounterObject.contract.WatchLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CounterObjectBitSetAndGet)
				if err := _CounterObject.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitSetAndGet is a log parse operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_CounterObject *CounterObjectFilterer) ParseBitSetAndGet(log types.Log) (*CounterObjectBitSetAndGet, error) {
	event := new(CounterObjectBitSetAndGet)
	if err := _CounterObject.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// CounterObjectCounterIncrementedIterator is returned from FilterCounterIncremented and is used to iterate over the raw logs and unpacked data for CounterIncremented events raised by the CounterObject contract.
type CounterObjectCounterIncrementedIterator struct {
	Event *CounterObjectCounterIncremented // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CounterObjectCounterIncrementedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CounterObjectCounterIncremented)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CounterObjectCounterIncremented)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CounterObjectCounterIncrementedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CounterObjectCounterIncrementedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CounterObjectCounterIncremented represents a CounterIncremented event raised by the CounterObject contract.
type CounterObjectCounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterIncremented is a free log retrieval operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_CounterObject *CounterObjectFilterer) FilterCounterIncremented(opts *bind.FilterOpts) (*CounterObjectCounterIncrementedIterator, error) {

	logs, sub, err := _CounterObject.contract.FilterLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return &CounterObjectCounterIncrementedIterator{contract: _CounterObject.contract, event: "CounterIncremented", logs: logs, sub: sub}, nil
}

// WatchCounterIncremented is a free log subscription operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_CounterObject *CounterObjectFilterer) WatchCounterIncremented(opts *bind.WatchOpts, sink chan<- *CounterObjectCounterIncremented) (event.Subscription, error) {

	logs, sub, err := _CounterObject.contract.WatchLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CounterObjectCounterIncremented)
				if err := _CounterObject.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterIncremented is a log parse operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_CounterObject *CounterObjectFilterer) ParseCounterIncremented(log types.Log) (*CounterObjectCounterIncremented, error) {
	event := new(CounterObjectCounterIncremented)
	if err := _CounterObject.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
		return nil, err
	}
	return event, nil
}

// CounterObjectWordGroupDeletedIterator is returned from FilterWordGroupDeleted and is used to iterate over the raw logs and unpacked data for WordGroupDeleted events raised by the CounterObject contract.
type CounterObjectWordGroupDeletedIterator struct {
	Event *CounterObjectWordGroupDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CounterObjectWordGroupDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CounterObjectWordGroupDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CounterObjectWordGroupDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CounterObjectWordGroupDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CounterObjectWordGroupDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CounterObjectWordGroupDeleted represents a WordGroupDeleted event raised by the CounterObject contract.
type CounterObjectWordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWordGroupDeleted is a free log retrieval operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_CounterObject *CounterObjectFilterer) FilterWordGroupDeleted(opts *bind.FilterOpts) (*CounterObjectWordGroupDeletedIterator, error) {

	logs, sub, err := _CounterObject.contract.FilterLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return &CounterObjectWordGroupDeletedIterator{contract: _CounterObject.contract, event: "WordGroupDeleted", logs: logs, sub: sub}, nil
}

// WatchWordGroupDeleted is a free log subscription operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_CounterObject *CounterObjectFilterer) WatchWordGroupDeleted(opts *bind.WatchOpts, sink chan<- *CounterObjectWordGroupDeleted) (event.Subscription, error) {

	logs, sub, err := _CounterObject.contract.WatchLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CounterObjectWordGroupDeleted)
				if err := _CounterObject.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWordGroupDeleted is a log parse operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_CounterObject *CounterObjectFilterer) ParseWordGroupDeleted(log types.Log) (*CounterObjectWordGroupDeleted, error) {
	event := new(CounterObjectWordGroupDeleted)
	if err := _CounterObject.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableABI is the input ABI used to generate the binding from.
const EditableABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"}]"

// EditableFuncSigs maps the 4-byte function signature to its string representation.
var EditableFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"81beeb64": "canEdit()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"6380501f": "indexCategory()",
	"41c0e1b5": "kill()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"aa024e8b": "setVisibility(uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
}

// EditableBin is the compiled bytecode used for deploying new contracts.
var EditableBin = ""

// DeployEditable deploys a new Ethereum contract, binding an instance of Editable to it.
func DeployEditable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Editable, error) {
	parsed, err := abi.JSON(strings.NewReader(EditableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(EditableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Editable{EditableCaller: EditableCaller{contract: contract}, EditableTransactor: EditableTransactor{contract: contract}, EditableFilterer: EditableFilterer{contract: contract}}, nil
}

// Editable is an auto generated Go binding around an Ethereum contract.
type Editable struct {
	EditableCaller     // Read-only binding to the contract
	EditableTransactor // Write-only binding to the contract
	EditableFilterer   // Log filterer for contract events
}

// EditableCaller is an auto generated read-only Go binding around an Ethereum contract.
type EditableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EditableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EditableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EditableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EditableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EditableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EditableSession struct {
	Contract     *Editable         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EditableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EditableCallerSession struct {
	Contract *EditableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// EditableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EditableTransactorSession struct {
	Contract     *EditableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// EditableRaw is an auto generated low-level Go binding around an Ethereum contract.
type EditableRaw struct {
	Contract *Editable // Generic contract binding to access the raw methods on
}

// EditableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EditableCallerRaw struct {
	Contract *EditableCaller // Generic read-only contract binding to access the raw methods on
}

// EditableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EditableTransactorRaw struct {
	Contract *EditableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEditable creates a new instance of Editable, bound to a specific deployed contract.
func NewEditable(address common.Address, backend bind.ContractBackend) (*Editable, error) {
	contract, err := bindEditable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Editable{EditableCaller: EditableCaller{contract: contract}, EditableTransactor: EditableTransactor{contract: contract}, EditableFilterer: EditableFilterer{contract: contract}}, nil
}

// NewEditableCaller creates a new read-only instance of Editable, bound to a specific deployed contract.
func NewEditableCaller(address common.Address, caller bind.ContractCaller) (*EditableCaller, error) {
	contract, err := bindEditable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EditableCaller{contract: contract}, nil
}

// NewEditableTransactor creates a new write-only instance of Editable, bound to a specific deployed contract.
func NewEditableTransactor(address common.Address, transactor bind.ContractTransactor) (*EditableTransactor, error) {
	contract, err := bindEditable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EditableTransactor{contract: contract}, nil
}

// NewEditableFilterer creates a new log filterer instance of Editable, bound to a specific deployed contract.
func NewEditableFilterer(address common.Address, filterer bind.ContractFilterer) (*EditableFilterer, error) {
	contract, err := bindEditable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EditableFilterer{contract: contract}, nil
}

// bindEditable binds a generic wrapper to an already deployed contract.
func bindEditable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EditableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Editable *EditableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Editable.Contract.EditableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Editable *EditableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.Contract.EditableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Editable *EditableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Editable.Contract.EditableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Editable *EditableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Editable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Editable *EditableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Editable *EditableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Editable.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Editable *EditableCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Editable *EditableSession) CANACCESS() (uint8, error) {
	return _Editable.Contract.CANACCESS(&_Editable.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_Editable *EditableCallerSession) CANACCESS() (uint8, error) {
	return _Editable.Contract.CANACCESS(&_Editable.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Editable *EditableCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Editable *EditableSession) CANEDIT() (uint8, error) {
	return _Editable.Contract.CANEDIT(&_Editable.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_Editable *EditableCallerSession) CANEDIT() (uint8, error) {
	return _Editable.Contract.CANEDIT(&_Editable.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Editable *EditableCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Editable *EditableSession) CANSEE() (uint8, error) {
	return _Editable.Contract.CANSEE(&_Editable.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_Editable *EditableCallerSession) CANSEE() (uint8, error) {
	return _Editable.Contract.CANSEE(&_Editable.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Editable *EditableCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Editable *EditableSession) CanCommit() (bool, error) {
	return _Editable.Contract.CanCommit(&_Editable.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_Editable *EditableCallerSession) CanCommit() (bool, error) {
	return _Editable.Contract.CanCommit(&_Editable.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Editable *EditableCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Editable *EditableSession) CanConfirm() (bool, error) {
	return _Editable.Contract.CanConfirm(&_Editable.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_Editable *EditableCallerSession) CanConfirm() (bool, error) {
	return _Editable.Contract.CanConfirm(&_Editable.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_Editable *EditableCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_Editable *EditableSession) CanEdit() (bool, error) {
	return _Editable.Contract.CanEdit(&_Editable.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_Editable *EditableCallerSession) CanEdit() (bool, error) {
	return _Editable.Contract.CanEdit(&_Editable.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Editable *EditableCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Editable *EditableSession) CommitPending() (bool, error) {
	return _Editable.Contract.CommitPending(&_Editable.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_Editable *EditableCallerSession) CommitPending() (bool, error) {
	return _Editable.Contract.CommitPending(&_Editable.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Editable *EditableCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Editable *EditableSession) ContentSpace() (common.Address, error) {
	return _Editable.Contract.ContentSpace(&_Editable.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Editable *EditableCallerSession) ContentSpace() (common.Address, error) {
	return _Editable.Contract.ContentSpace(&_Editable.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Editable *EditableCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Editable *EditableSession) CountVersionHashes() (*big.Int, error) {
	return _Editable.Contract.CountVersionHashes(&_Editable.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_Editable *EditableCallerSession) CountVersionHashes() (*big.Int, error) {
	return _Editable.Contract.CountVersionHashes(&_Editable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Editable *EditableCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Editable *EditableSession) Creator() (common.Address, error) {
	return _Editable.Contract.Creator(&_Editable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Editable *EditableCallerSession) Creator() (common.Address, error) {
	return _Editable.Contract.Creator(&_Editable.CallOpts)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Editable *EditableCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Editable *EditableSession) HasAccess(candidate common.Address) (bool, error) {
	return _Editable.Contract.HasAccess(&_Editable.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_Editable *EditableCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _Editable.Contract.HasAccess(&_Editable.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_Editable *EditableCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_Editable *EditableSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _Editable.Contract.HasEditorRight(&_Editable.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_Editable *EditableCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _Editable.Contract.HasEditorRight(&_Editable.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Editable *EditableCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Editable *EditableSession) IndexCategory() (uint8, error) {
	return _Editable.Contract.IndexCategory(&_Editable.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_Editable *EditableCallerSession) IndexCategory() (uint8, error) {
	return _Editable.Contract.IndexCategory(&_Editable.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Editable *EditableCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Editable *EditableSession) ObjectHash() (string, error) {
	return _Editable.Contract.ObjectHash(&_Editable.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_Editable *EditableCallerSession) ObjectHash() (string, error) {
	return _Editable.Contract.ObjectHash(&_Editable.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_Editable *EditableCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_Editable *EditableSession) ObjectTimestamp() (*big.Int, error) {
	return _Editable.Contract.ObjectTimestamp(&_Editable.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_Editable *EditableCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _Editable.Contract.ObjectTimestamp(&_Editable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Editable *EditableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Editable *EditableSession) Owner() (common.Address, error) {
	return _Editable.Contract.Owner(&_Editable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Editable *EditableCallerSession) Owner() (common.Address, error) {
	return _Editable.Contract.Owner(&_Editable.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Editable *EditableCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Editable *EditableSession) ParentAddress() (common.Address, error) {
	return _Editable.Contract.ParentAddress(&_Editable.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_Editable *EditableCallerSession) ParentAddress() (common.Address, error) {
	return _Editable.Contract.ParentAddress(&_Editable.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Editable *EditableCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Editable *EditableSession) PendingHash() (string, error) {
	return _Editable.Contract.PendingHash(&_Editable.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_Editable *EditableCallerSession) PendingHash() (string, error) {
	return _Editable.Contract.PendingHash(&_Editable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Editable *EditableCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Editable *EditableSession) Version() ([32]byte, error) {
	return _Editable.Contract.Version(&_Editable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Editable *EditableCallerSession) Version() ([32]byte, error) {
	return _Editable.Contract.Version(&_Editable.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Editable *EditableCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Editable *EditableSession) VersionAPI() ([32]byte, error) {
	return _Editable.Contract.VersionAPI(&_Editable.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Editable *EditableCallerSession) VersionAPI() ([32]byte, error) {
	return _Editable.Contract.VersionAPI(&_Editable.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Editable *EditableCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Editable *EditableSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _Editable.Contract.VersionHashes(&_Editable.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_Editable *EditableCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _Editable.Contract.VersionHashes(&_Editable.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Editable *EditableCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Editable *EditableSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _Editable.Contract.VersionTimestamp(&_Editable.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_Editable *EditableCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _Editable.Contract.VersionTimestamp(&_Editable.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Editable *EditableCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Editable.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Editable *EditableSession) Visibility() (uint8, error) {
	return _Editable.Contract.Visibility(&_Editable.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_Editable *EditableCallerSession) Visibility() (uint8, error) {
	return _Editable.Contract.Visibility(&_Editable.CallOpts)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_Editable *EditableTransactor) AccessRequestV3(opts *bind.TransactOpts, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "accessRequestV3", customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_Editable *EditableSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _Editable.Contract.AccessRequestV3(&_Editable.TransactOpts, customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_Editable *EditableTransactorSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _Editable.Contract.AccessRequestV3(&_Editable.TransactOpts, customValues, stakeholders)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Editable *EditableTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Editable *EditableSession) ClearPending() (*types.Transaction, error) {
	return _Editable.Contract.ClearPending(&_Editable.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Editable *EditableTransactorSession) ClearPending() (*types.Transaction, error) {
	return _Editable.Contract.ClearPending(&_Editable.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Editable *EditableTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Editable *EditableSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _Editable.Contract.Commit(&_Editable.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Editable *EditableTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _Editable.Contract.Commit(&_Editable.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Editable *EditableTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Editable *EditableSession) ConfirmCommit() (*types.Transaction, error) {
	return _Editable.Contract.ConfirmCommit(&_Editable.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_Editable *EditableTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _Editable.Contract.ConfirmCommit(&_Editable.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Editable *EditableTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Editable *EditableSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _Editable.Contract.DeleteVersion(&_Editable.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Editable *EditableTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _Editable.Contract.DeleteVersion(&_Editable.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Editable *EditableTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Editable *EditableSession) Kill() (*types.Transaction, error) {
	return _Editable.Contract.Kill(&_Editable.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Editable *EditableTransactorSession) Kill() (*types.Transaction, error) {
	return _Editable.Contract.Kill(&_Editable.TransactOpts)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_Editable *EditableTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_Editable *EditableSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Editable.Contract.SetGroupRights(&_Editable.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_Editable *EditableTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Editable.Contract.SetGroupRights(&_Editable.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_Editable *EditableTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_Editable *EditableSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Editable.Contract.SetRights(&_Editable.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_Editable *EditableTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Editable.Contract.SetRights(&_Editable.TransactOpts, stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Editable *EditableTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Editable *EditableSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _Editable.Contract.SetVisibility(&_Editable.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Editable *EditableTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _Editable.Contract.SetVisibility(&_Editable.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Editable *EditableTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Editable *EditableSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Editable.Contract.TransferCreatorship(&_Editable.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Editable *EditableTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Editable.Contract.TransferCreatorship(&_Editable.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Editable *EditableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Editable *EditableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Editable.Contract.TransferOwnership(&_Editable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Editable *EditableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Editable.Contract.TransferOwnership(&_Editable.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Editable *EditableTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Editable *EditableSession) UpdateRequest() (*types.Transaction, error) {
	return _Editable.Contract.UpdateRequest(&_Editable.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Editable *EditableTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _Editable.Contract.UpdateRequest(&_Editable.TransactOpts)
}

// EditableAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the Editable contract.
type EditableAccessRequestV3Iterator struct {
	Event *EditableAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableAccessRequestV3 represents a AccessRequestV3 event raised by the Editable contract.
type EditableAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Editable *EditableFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*EditableAccessRequestV3Iterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &EditableAccessRequestV3Iterator{contract: _Editable.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Editable *EditableFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *EditableAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableAccessRequestV3)
				if err := _Editable.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Editable *EditableFilterer) ParseAccessRequestV3(log types.Log) (*EditableAccessRequestV3, error) {
	event := new(EditableAccessRequestV3)
	if err := _Editable.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the Editable contract.
type EditableCommitPendingIterator struct {
	Event *EditableCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableCommitPending represents a CommitPending event raised by the Editable contract.
type EditableCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) FilterCommitPending(opts *bind.FilterOpts) (*EditableCommitPendingIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &EditableCommitPendingIterator{contract: _Editable.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *EditableCommitPending) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableCommitPending)
				if err := _Editable.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) ParseCommitPending(log types.Log) (*EditableCommitPending, error) {
	event := new(EditableCommitPending)
	if err := _Editable.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the Editable contract.
type EditableUpdateRequestIterator struct {
	Event *EditableUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableUpdateRequest represents a UpdateRequest event raised by the Editable contract.
type EditableUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*EditableUpdateRequestIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &EditableUpdateRequestIterator{contract: _Editable.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *EditableUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableUpdateRequest)
				if err := _Editable.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) ParseUpdateRequest(log types.Log) (*EditableUpdateRequest, error) {
	event := new(EditableUpdateRequest)
	if err := _Editable.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the Editable contract.
type EditableVersionConfirmIterator struct {
	Event *EditableVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableVersionConfirm represents a VersionConfirm event raised by the Editable contract.
type EditableVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*EditableVersionConfirmIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &EditableVersionConfirmIterator{contract: _Editable.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *EditableVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableVersionConfirm)
				if err := _Editable.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) ParseVersionConfirm(log types.Log) (*EditableVersionConfirm, error) {
	event := new(EditableVersionConfirm)
	if err := _Editable.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the Editable contract.
type EditableVersionDeleteIterator struct {
	Event *EditableVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableVersionDelete represents a VersionDelete event raised by the Editable contract.
type EditableVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*EditableVersionDeleteIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &EditableVersionDeleteIterator{contract: _Editable.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *EditableVersionDelete) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableVersionDelete)
				if err := _Editable.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) ParseVersionDelete(log types.Log) (*EditableVersionDelete, error) {
	event := new(EditableVersionDelete)
	if err := _Editable.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EditableVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the Editable contract.
type EditableVisibilityChangedIterator struct {
	Event *EditableVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableVisibilityChanged represents a VisibilityChanged event raised by the Editable contract.
type EditableVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Editable *EditableFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*EditableVisibilityChangedIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &EditableVisibilityChangedIterator{contract: _Editable.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Editable *EditableFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *EditableVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableVisibilityChanged)
				if err := _Editable.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Editable *EditableFilterer) ParseVisibilityChanged(log types.Log) (*EditableVisibilityChanged, error) {
	event := new(EditableVisibilityChanged)
	if err := _Editable.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EncTokenABI is the input ABI used to generate the binding from.
const EncTokenABI = "[]"

// EncTokenBin is the compiled bytecode used for deploying new contracts.
var EncTokenBin = "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a723058201e4b845b9e143cdf9f5f8e9a8815a25604fbaa0cecac4a40f9e6769f605deb4c0029"

// DeployEncToken deploys a new Ethereum contract, binding an instance of EncToken to it.
func DeployEncToken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EncToken, error) {
	parsed, err := abi.JSON(strings.NewReader(EncTokenABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(EncTokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EncToken{EncTokenCaller: EncTokenCaller{contract: contract}, EncTokenTransactor: EncTokenTransactor{contract: contract}, EncTokenFilterer: EncTokenFilterer{contract: contract}}, nil
}

// EncToken is an auto generated Go binding around an Ethereum contract.
type EncToken struct {
	EncTokenCaller     // Read-only binding to the contract
	EncTokenTransactor // Write-only binding to the contract
	EncTokenFilterer   // Log filterer for contract events
}

// EncTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type EncTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EncTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EncTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EncTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EncTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EncTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EncTokenSession struct {
	Contract     *EncToken         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EncTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EncTokenCallerSession struct {
	Contract *EncTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// EncTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EncTokenTransactorSession struct {
	Contract     *EncTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// EncTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type EncTokenRaw struct {
	Contract *EncToken // Generic contract binding to access the raw methods on
}

// EncTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EncTokenCallerRaw struct {
	Contract *EncTokenCaller // Generic read-only contract binding to access the raw methods on
}

// EncTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EncTokenTransactorRaw struct {
	Contract *EncTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEncToken creates a new instance of EncToken, bound to a specific deployed contract.
func NewEncToken(address common.Address, backend bind.ContractBackend) (*EncToken, error) {
	contract, err := bindEncToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EncToken{EncTokenCaller: EncTokenCaller{contract: contract}, EncTokenTransactor: EncTokenTransactor{contract: contract}, EncTokenFilterer: EncTokenFilterer{contract: contract}}, nil
}

// NewEncTokenCaller creates a new read-only instance of EncToken, bound to a specific deployed contract.
func NewEncTokenCaller(address common.Address, caller bind.ContractCaller) (*EncTokenCaller, error) {
	contract, err := bindEncToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EncTokenCaller{contract: contract}, nil
}

// NewEncTokenTransactor creates a new write-only instance of EncToken, bound to a specific deployed contract.
func NewEncTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*EncTokenTransactor, error) {
	contract, err := bindEncToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EncTokenTransactor{contract: contract}, nil
}

// NewEncTokenFilterer creates a new log filterer instance of EncToken, bound to a specific deployed contract.
func NewEncTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*EncTokenFilterer, error) {
	contract, err := bindEncToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EncTokenFilterer{contract: contract}, nil
}

// bindEncToken binds a generic wrapper to an already deployed contract.
func bindEncToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EncTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EncToken *EncTokenRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _EncToken.Contract.EncTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EncToken *EncTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EncToken.Contract.EncTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EncToken *EncTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EncToken.Contract.EncTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EncToken *EncTokenCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _EncToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EncToken *EncTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EncToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EncToken *EncTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EncToken.Contract.contract.Transact(opts, method, params...)
}

// ExternalUserWalletABI is the input ABI used to generate the binding from.
const ExternalUserWalletABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressExtUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressTA\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_content_space\",\"type\":\"address\"},{\"name\":\"_taAddr\",\"type\":\"address\"},{\"name\":\"_extUserAddr\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"extUserAddr\",\"type\":\"address\"}],\"name\":\"CreateExtUserWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"}]"

// ExternalUserWalletFuncSigs maps the 4-byte function signature to its string representation.
var ExternalUserWalletFuncSigs = map[string]string{
	"97ac4fd2": "CAN_ACCESS()",
	"ef1d7dc2": "CAN_EDIT()",
	"100508a2": "CAN_SEE()",
	"f1551887": "accessRequest()",
	"1bf7a912": "accessRequestV3(bytes32[],address[])",
	"5ab11d21": "addressExtUser()",
	"fed2b125": "addressTA()",
	"6e375427": "canCommit()",
	"14cfabb3": "canConfirm()",
	"81beeb64": "canEdit()",
	"4e71e0c8": "claimOwnership()",
	"5f6a1301": "clearPending()",
	"9867db74": "commit(string)",
	"375a6e7c": "commitPending()",
	"446e8826": "confirmCommit()",
	"af570c04": "contentSpace()",
	"331b86c0": "countVersionHashes()",
	"02d05d3f": "creator()",
	"e1a70717": "deleteVersion(string)",
	"95a078e8": "hasAccess(address)",
	"67e5c3bf": "hasEditorRight(address)",
	"6380501f": "indexCategory()",
	"41c0e1b5": "kill()",
	"e02dd9c2": "objectHash()",
	"40b87a26": "objectTimestamp()",
	"8da5cb5b": "owner()",
	"00821de3": "parentAddress()",
	"628449fd": "pendingHash()",
	"22e564eb": "setGroupRights(address,uint8,uint8)",
	"0fe1b5a2": "setRights(address,uint8,uint8)",
	"aa024e8b": "setVisibility(uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c287e0ed": "updateRequest()",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
	"7ca8f618": "versionHashes(uint256)",
	"7886f747": "versionTimestamp(uint256)",
	"29adec14": "visibility()",
}

// ExternalUserWalletBin is the compiled bytecode used for deploying new contracts.
var ExternalUserWalletBin = ""

// DeployExternalUserWallet deploys a new Ethereum contract, binding an instance of ExternalUserWallet to it.
func DeployExternalUserWallet(auth *bind.TransactOpts, backend bind.ContractBackend, _content_space common.Address, _taAddr common.Address, _extUserAddr common.Address) (common.Address, *types.Transaction, *ExternalUserWallet, error) {
	parsed, err := abi.JSON(strings.NewReader(ExternalUserWalletABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ExternalUserWalletBin), backend, _content_space, _taAddr, _extUserAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ExternalUserWallet{ExternalUserWalletCaller: ExternalUserWalletCaller{contract: contract}, ExternalUserWalletTransactor: ExternalUserWalletTransactor{contract: contract}, ExternalUserWalletFilterer: ExternalUserWalletFilterer{contract: contract}}, nil
}

// ExternalUserWallet is an auto generated Go binding around an Ethereum contract.
type ExternalUserWallet struct {
	ExternalUserWalletCaller     // Read-only binding to the contract
	ExternalUserWalletTransactor // Write-only binding to the contract
	ExternalUserWalletFilterer   // Log filterer for contract events
}

// ExternalUserWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type ExternalUserWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExternalUserWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ExternalUserWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExternalUserWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ExternalUserWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExternalUserWalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ExternalUserWalletSession struct {
	Contract     *ExternalUserWallet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ExternalUserWalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ExternalUserWalletCallerSession struct {
	Contract *ExternalUserWalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ExternalUserWalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ExternalUserWalletTransactorSession struct {
	Contract     *ExternalUserWalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ExternalUserWalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type ExternalUserWalletRaw struct {
	Contract *ExternalUserWallet // Generic contract binding to access the raw methods on
}

// ExternalUserWalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ExternalUserWalletCallerRaw struct {
	Contract *ExternalUserWalletCaller // Generic read-only contract binding to access the raw methods on
}

// ExternalUserWalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ExternalUserWalletTransactorRaw struct {
	Contract *ExternalUserWalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewExternalUserWallet creates a new instance of ExternalUserWallet, bound to a specific deployed contract.
func NewExternalUserWallet(address common.Address, backend bind.ContractBackend) (*ExternalUserWallet, error) {
	contract, err := bindExternalUserWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ExternalUserWallet{ExternalUserWalletCaller: ExternalUserWalletCaller{contract: contract}, ExternalUserWalletTransactor: ExternalUserWalletTransactor{contract: contract}, ExternalUserWalletFilterer: ExternalUserWalletFilterer{contract: contract}}, nil
}

// NewExternalUserWalletCaller creates a new read-only instance of ExternalUserWallet, bound to a specific deployed contract.
func NewExternalUserWalletCaller(address common.Address, caller bind.ContractCaller) (*ExternalUserWalletCaller, error) {
	contract, err := bindExternalUserWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ExternalUserWalletCaller{contract: contract}, nil
}

// NewExternalUserWalletTransactor creates a new write-only instance of ExternalUserWallet, bound to a specific deployed contract.
func NewExternalUserWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*ExternalUserWalletTransactor, error) {
	contract, err := bindExternalUserWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ExternalUserWalletTransactor{contract: contract}, nil
}

// NewExternalUserWalletFilterer creates a new log filterer instance of ExternalUserWallet, bound to a specific deployed contract.
func NewExternalUserWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*ExternalUserWalletFilterer, error) {
	contract, err := bindExternalUserWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ExternalUserWalletFilterer{contract: contract}, nil
}

// bindExternalUserWallet binds a generic wrapper to an already deployed contract.
func bindExternalUserWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ExternalUserWalletABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExternalUserWallet *ExternalUserWalletRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExternalUserWallet.Contract.ExternalUserWalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExternalUserWallet *ExternalUserWalletRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.ExternalUserWalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExternalUserWallet *ExternalUserWalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.ExternalUserWalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ExternalUserWallet *ExternalUserWalletCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ExternalUserWallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ExternalUserWallet *ExternalUserWalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ExternalUserWallet *ExternalUserWalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.contract.Transact(opts, method, params...)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "CAN_ACCESS")
	return *ret0, err
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletSession) CANACCESS() (uint8, error) {
	return _ExternalUserWallet.Contract.CANACCESS(&_ExternalUserWallet.CallOpts)
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) CANACCESS() (uint8, error) {
	return _ExternalUserWallet.Contract.CANACCESS(&_ExternalUserWallet.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "CAN_EDIT")
	return *ret0, err
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletSession) CANEDIT() (uint8, error) {
	return _ExternalUserWallet.Contract.CANEDIT(&_ExternalUserWallet.CallOpts)
}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) CANEDIT() (uint8, error) {
	return _ExternalUserWallet.Contract.CANEDIT(&_ExternalUserWallet.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "CAN_SEE")
	return *ret0, err
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletSession) CANSEE() (uint8, error) {
	return _ExternalUserWallet.Contract.CANSEE(&_ExternalUserWallet.CallOpts)
}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) CANSEE() (uint8, error) {
	return _ExternalUserWallet.Contract.CANSEE(&_ExternalUserWallet.CallOpts)
}

// AddressExtUser is a free data retrieval call binding the contract method 0x5ab11d21.
//
// Solidity: function addressExtUser() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletCaller) AddressExtUser(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "addressExtUser")
	return *ret0, err
}

// AddressExtUser is a free data retrieval call binding the contract method 0x5ab11d21.
//
// Solidity: function addressExtUser() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletSession) AddressExtUser() (common.Address, error) {
	return _ExternalUserWallet.Contract.AddressExtUser(&_ExternalUserWallet.CallOpts)
}

// AddressExtUser is a free data retrieval call binding the contract method 0x5ab11d21.
//
// Solidity: function addressExtUser() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) AddressExtUser() (common.Address, error) {
	return _ExternalUserWallet.Contract.AddressExtUser(&_ExternalUserWallet.CallOpts)
}

// AddressTA is a free data retrieval call binding the contract method 0xfed2b125.
//
// Solidity: function addressTA() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletCaller) AddressTA(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "addressTA")
	return *ret0, err
}

// AddressTA is a free data retrieval call binding the contract method 0xfed2b125.
//
// Solidity: function addressTA() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletSession) AddressTA() (common.Address, error) {
	return _ExternalUserWallet.Contract.AddressTA(&_ExternalUserWallet.CallOpts)
}

// AddressTA is a free data retrieval call binding the contract method 0xfed2b125.
//
// Solidity: function addressTA() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) AddressTA() (common.Address, error) {
	return _ExternalUserWallet.Contract.AddressTA(&_ExternalUserWallet.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "canCommit")
	return *ret0, err
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletSession) CanCommit() (bool, error) {
	return _ExternalUserWallet.Contract.CanCommit(&_ExternalUserWallet.CallOpts)
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) CanCommit() (bool, error) {
	return _ExternalUserWallet.Contract.CanCommit(&_ExternalUserWallet.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "canConfirm")
	return *ret0, err
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletSession) CanConfirm() (bool, error) {
	return _ExternalUserWallet.Contract.CanConfirm(&_ExternalUserWallet.CallOpts)
}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) CanConfirm() (bool, error) {
	return _ExternalUserWallet.Contract.CanConfirm(&_ExternalUserWallet.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "canEdit")
	return *ret0, err
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletSession) CanEdit() (bool, error) {
	return _ExternalUserWallet.Contract.CanEdit(&_ExternalUserWallet.CallOpts)
}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) CanEdit() (bool, error) {
	return _ExternalUserWallet.Contract.CanEdit(&_ExternalUserWallet.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "commitPending")
	return *ret0, err
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletSession) CommitPending() (bool, error) {
	return _ExternalUserWallet.Contract.CommitPending(&_ExternalUserWallet.CallOpts)
}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) CommitPending() (bool, error) {
	return _ExternalUserWallet.Contract.CommitPending(&_ExternalUserWallet.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletSession) ContentSpace() (common.Address, error) {
	return _ExternalUserWallet.Contract.ContentSpace(&_ExternalUserWallet.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) ContentSpace() (common.Address, error) {
	return _ExternalUserWallet.Contract.ContentSpace(&_ExternalUserWallet.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_ExternalUserWallet *ExternalUserWalletCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "countVersionHashes")
	return *ret0, err
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_ExternalUserWallet *ExternalUserWalletSession) CountVersionHashes() (*big.Int, error) {
	return _ExternalUserWallet.Contract.CountVersionHashes(&_ExternalUserWallet.CallOpts)
}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() constant returns(uint256)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) CountVersionHashes() (*big.Int, error) {
	return _ExternalUserWallet.Contract.CountVersionHashes(&_ExternalUserWallet.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletSession) Creator() (common.Address, error) {
	return _ExternalUserWallet.Contract.Creator(&_ExternalUserWallet.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) Creator() (common.Address, error) {
	return _ExternalUserWallet.Contract.Creator(&_ExternalUserWallet.CallOpts)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "hasAccess", candidate)
	return *ret0, err
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletSession) HasAccess(candidate common.Address) (bool, error) {
	return _ExternalUserWallet.Contract.HasAccess(&_ExternalUserWallet.CallOpts, candidate)
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) HasAccess(candidate common.Address) (bool, error) {
	return _ExternalUserWallet.Contract.HasAccess(&_ExternalUserWallet.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "hasEditorRight", candidate)
	return *ret0, err
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _ExternalUserWallet.Contract.HasEditorRight(&_ExternalUserWallet.CallOpts, candidate)
}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) constant returns(bool)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) HasEditorRight(candidate common.Address) (bool, error) {
	return _ExternalUserWallet.Contract.HasEditorRight(&_ExternalUserWallet.CallOpts, candidate)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "indexCategory")
	return *ret0, err
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletSession) IndexCategory() (uint8, error) {
	return _ExternalUserWallet.Contract.IndexCategory(&_ExternalUserWallet.CallOpts)
}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) IndexCategory() (uint8, error) {
	return _ExternalUserWallet.Contract.IndexCategory(&_ExternalUserWallet.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_ExternalUserWallet *ExternalUserWalletCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "objectHash")
	return *ret0, err
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_ExternalUserWallet *ExternalUserWalletSession) ObjectHash() (string, error) {
	return _ExternalUserWallet.Contract.ObjectHash(&_ExternalUserWallet.CallOpts)
}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() constant returns(string)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) ObjectHash() (string, error) {
	return _ExternalUserWallet.Contract.ObjectHash(&_ExternalUserWallet.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_ExternalUserWallet *ExternalUserWalletCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "objectTimestamp")
	return *ret0, err
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_ExternalUserWallet *ExternalUserWalletSession) ObjectTimestamp() (*big.Int, error) {
	return _ExternalUserWallet.Contract.ObjectTimestamp(&_ExternalUserWallet.CallOpts)
}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() constant returns(uint256)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) ObjectTimestamp() (*big.Int, error) {
	return _ExternalUserWallet.Contract.ObjectTimestamp(&_ExternalUserWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletSession) Owner() (common.Address, error) {
	return _ExternalUserWallet.Contract.Owner(&_ExternalUserWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) Owner() (common.Address, error) {
	return _ExternalUserWallet.Contract.Owner(&_ExternalUserWallet.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "parentAddress")
	return *ret0, err
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletSession) ParentAddress() (common.Address, error) {
	return _ExternalUserWallet.Contract.ParentAddress(&_ExternalUserWallet.CallOpts)
}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() constant returns(address)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) ParentAddress() (common.Address, error) {
	return _ExternalUserWallet.Contract.ParentAddress(&_ExternalUserWallet.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_ExternalUserWallet *ExternalUserWalletCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "pendingHash")
	return *ret0, err
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_ExternalUserWallet *ExternalUserWalletSession) PendingHash() (string, error) {
	return _ExternalUserWallet.Contract.PendingHash(&_ExternalUserWallet.CallOpts)
}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() constant returns(string)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) PendingHash() (string, error) {
	return _ExternalUserWallet.Contract.PendingHash(&_ExternalUserWallet.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_ExternalUserWallet *ExternalUserWalletCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_ExternalUserWallet *ExternalUserWalletSession) Version() ([32]byte, error) {
	return _ExternalUserWallet.Contract.Version(&_ExternalUserWallet.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) Version() ([32]byte, error) {
	return _ExternalUserWallet.Contract.Version(&_ExternalUserWallet.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_ExternalUserWallet *ExternalUserWalletCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_ExternalUserWallet *ExternalUserWalletSession) VersionAPI() ([32]byte, error) {
	return _ExternalUserWallet.Contract.VersionAPI(&_ExternalUserWallet.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) VersionAPI() ([32]byte, error) {
	return _ExternalUserWallet.Contract.VersionAPI(&_ExternalUserWallet.CallOpts)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_ExternalUserWallet *ExternalUserWalletCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "versionHashes", arg0)
	return *ret0, err
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_ExternalUserWallet *ExternalUserWalletSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _ExternalUserWallet.Contract.VersionHashes(&_ExternalUserWallet.CallOpts, arg0)
}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) constant returns(string)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) VersionHashes(arg0 *big.Int) (string, error) {
	return _ExternalUserWallet.Contract.VersionHashes(&_ExternalUserWallet.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_ExternalUserWallet *ExternalUserWalletCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "versionTimestamp", arg0)
	return *ret0, err
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_ExternalUserWallet *ExternalUserWalletSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _ExternalUserWallet.Contract.VersionTimestamp(&_ExternalUserWallet.CallOpts, arg0)
}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) constant returns(uint256)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) VersionTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _ExternalUserWallet.Contract.VersionTimestamp(&_ExternalUserWallet.CallOpts, arg0)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ExternalUserWallet.contract.Call(opts, out, "visibility")
	return *ret0, err
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletSession) Visibility() (uint8, error) {
	return _ExternalUserWallet.Contract.Visibility(&_ExternalUserWallet.CallOpts)
}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() constant returns(uint8)
func (_ExternalUserWallet *ExternalUserWalletCallerSession) Visibility() (uint8, error) {
	return _ExternalUserWallet.Contract.Visibility(&_ExternalUserWallet.CallOpts)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_ExternalUserWallet *ExternalUserWalletTransactor) AccessRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExternalUserWallet.contract.Transact(opts, "accessRequest")
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_ExternalUserWallet *ExternalUserWalletSession) AccessRequest() (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.AccessRequest(&_ExternalUserWallet.TransactOpts)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_ExternalUserWallet *ExternalUserWalletTransactorSession) AccessRequest() (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.AccessRequest(&_ExternalUserWallet.TransactOpts)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_ExternalUserWallet *ExternalUserWalletTransactor) AccessRequestV3(opts *bind.TransactOpts, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _ExternalUserWallet.contract.Transact(opts, "accessRequestV3", customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_ExternalUserWallet *ExternalUserWalletSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.AccessRequestV3(&_ExternalUserWallet.TransactOpts, customValues, stakeholders)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) returns(bool)
func (_ExternalUserWallet *ExternalUserWalletTransactorSession) AccessRequestV3(customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.AccessRequestV3(&_ExternalUserWallet.TransactOpts, customValues, stakeholders)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_ExternalUserWallet *ExternalUserWalletTransactor) ClaimOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExternalUserWallet.contract.Transact(opts, "claimOwnership")
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_ExternalUserWallet *ExternalUserWalletSession) ClaimOwnership() (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.ClaimOwnership(&_ExternalUserWallet.TransactOpts)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_ExternalUserWallet *ExternalUserWalletTransactorSession) ClaimOwnership() (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.ClaimOwnership(&_ExternalUserWallet.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_ExternalUserWallet *ExternalUserWalletTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExternalUserWallet.contract.Transact(opts, "clearPending")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_ExternalUserWallet *ExternalUserWalletSession) ClearPending() (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.ClearPending(&_ExternalUserWallet.TransactOpts)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_ExternalUserWallet *ExternalUserWalletTransactorSession) ClearPending() (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.ClearPending(&_ExternalUserWallet.TransactOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_ExternalUserWallet *ExternalUserWalletTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _ExternalUserWallet.contract.Transact(opts, "commit", _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_ExternalUserWallet *ExternalUserWalletSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.Commit(&_ExternalUserWallet.TransactOpts, _objectHash)
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_ExternalUserWallet *ExternalUserWalletTransactorSession) Commit(_objectHash string) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.Commit(&_ExternalUserWallet.TransactOpts, _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_ExternalUserWallet *ExternalUserWalletTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExternalUserWallet.contract.Transact(opts, "confirmCommit")
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_ExternalUserWallet *ExternalUserWalletSession) ConfirmCommit() (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.ConfirmCommit(&_ExternalUserWallet.TransactOpts)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() returns(bool)
func (_ExternalUserWallet *ExternalUserWalletTransactorSession) ConfirmCommit() (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.ConfirmCommit(&_ExternalUserWallet.TransactOpts)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_ExternalUserWallet *ExternalUserWalletTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _ExternalUserWallet.contract.Transact(opts, "deleteVersion", _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_ExternalUserWallet *ExternalUserWalletSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.DeleteVersion(&_ExternalUserWallet.TransactOpts, _versionHash)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_ExternalUserWallet *ExternalUserWalletTransactorSession) DeleteVersion(_versionHash string) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.DeleteVersion(&_ExternalUserWallet.TransactOpts, _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_ExternalUserWallet *ExternalUserWalletTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExternalUserWallet.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_ExternalUserWallet *ExternalUserWalletSession) Kill() (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.Kill(&_ExternalUserWallet.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_ExternalUserWallet *ExternalUserWalletTransactorSession) Kill() (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.Kill(&_ExternalUserWallet.TransactOpts)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_ExternalUserWallet *ExternalUserWalletTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _ExternalUserWallet.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_ExternalUserWallet *ExternalUserWalletSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.SetGroupRights(&_ExternalUserWallet.TransactOpts, group, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_ExternalUserWallet *ExternalUserWalletTransactorSession) SetGroupRights(group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.SetGroupRights(&_ExternalUserWallet.TransactOpts, group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_ExternalUserWallet *ExternalUserWalletTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _ExternalUserWallet.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_ExternalUserWallet *ExternalUserWalletSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.SetRights(&_ExternalUserWallet.TransactOpts, stakeholder, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_ExternalUserWallet *ExternalUserWalletTransactorSession) SetRights(stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.SetRights(&_ExternalUserWallet.TransactOpts, stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_ExternalUserWallet *ExternalUserWalletTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _ExternalUserWallet.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_ExternalUserWallet *ExternalUserWalletSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.SetVisibility(&_ExternalUserWallet.TransactOpts, _visibility_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_ExternalUserWallet *ExternalUserWalletTransactorSession) SetVisibility(_visibility_code uint8) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.SetVisibility(&_ExternalUserWallet.TransactOpts, _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_ExternalUserWallet *ExternalUserWalletTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _ExternalUserWallet.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_ExternalUserWallet *ExternalUserWalletSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.TransferCreatorship(&_ExternalUserWallet.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_ExternalUserWallet *ExternalUserWalletTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.TransferCreatorship(&_ExternalUserWallet.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ExternalUserWallet *ExternalUserWalletTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ExternalUserWallet.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ExternalUserWallet *ExternalUserWalletSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.TransferOwnership(&_ExternalUserWallet.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ExternalUserWallet *ExternalUserWalletTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.TransferOwnership(&_ExternalUserWallet.TransactOpts, newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_ExternalUserWallet *ExternalUserWalletTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ExternalUserWallet.contract.Transact(opts, "updateRequest")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_ExternalUserWallet *ExternalUserWalletSession) UpdateRequest() (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.UpdateRequest(&_ExternalUserWallet.TransactOpts)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_ExternalUserWallet *ExternalUserWalletTransactorSession) UpdateRequest() (*types.Transaction, error) {
	return _ExternalUserWallet.Contract.UpdateRequest(&_ExternalUserWallet.TransactOpts)
}

// ExternalUserWalletAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the ExternalUserWallet contract.
type ExternalUserWalletAccessRequestV3Iterator struct {
	Event *ExternalUserWalletAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExternalUserWalletAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExternalUserWalletAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExternalUserWalletAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExternalUserWalletAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExternalUserWalletAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExternalUserWalletAccessRequestV3 represents a AccessRequestV3 event raised by the ExternalUserWallet contract.
type ExternalUserWalletAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_ExternalUserWallet *ExternalUserWalletFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*ExternalUserWalletAccessRequestV3Iterator, error) {

	logs, sub, err := _ExternalUserWallet.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &ExternalUserWalletAccessRequestV3Iterator{contract: _ExternalUserWallet.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_ExternalUserWallet *ExternalUserWalletFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *ExternalUserWalletAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _ExternalUserWallet.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExternalUserWalletAccessRequestV3)
				if err := _ExternalUserWallet.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_ExternalUserWallet *ExternalUserWalletFilterer) ParseAccessRequestV3(log types.Log) (*ExternalUserWalletAccessRequestV3, error) {
	event := new(ExternalUserWalletAccessRequestV3)
	if err := _ExternalUserWallet.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExternalUserWalletCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the ExternalUserWallet contract.
type ExternalUserWalletCommitPendingIterator struct {
	Event *ExternalUserWalletCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExternalUserWalletCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExternalUserWalletCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExternalUserWalletCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExternalUserWalletCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExternalUserWalletCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExternalUserWalletCommitPending represents a CommitPending event raised by the ExternalUserWallet contract.
type ExternalUserWalletCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_ExternalUserWallet *ExternalUserWalletFilterer) FilterCommitPending(opts *bind.FilterOpts) (*ExternalUserWalletCommitPendingIterator, error) {

	logs, sub, err := _ExternalUserWallet.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &ExternalUserWalletCommitPendingIterator{contract: _ExternalUserWallet.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_ExternalUserWallet *ExternalUserWalletFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *ExternalUserWalletCommitPending) (event.Subscription, error) {

	logs, sub, err := _ExternalUserWallet.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExternalUserWalletCommitPending)
				if err := _ExternalUserWallet.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_ExternalUserWallet *ExternalUserWalletFilterer) ParseCommitPending(log types.Log) (*ExternalUserWalletCommitPending, error) {
	event := new(ExternalUserWalletCommitPending)
	if err := _ExternalUserWallet.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExternalUserWalletCreateExtUserWalletIterator is returned from FilterCreateExtUserWallet and is used to iterate over the raw logs and unpacked data for CreateExtUserWallet events raised by the ExternalUserWallet contract.
type ExternalUserWalletCreateExtUserWalletIterator struct {
	Event *ExternalUserWalletCreateExtUserWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExternalUserWalletCreateExtUserWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExternalUserWalletCreateExtUserWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExternalUserWalletCreateExtUserWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExternalUserWalletCreateExtUserWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExternalUserWalletCreateExtUserWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExternalUserWalletCreateExtUserWallet represents a CreateExtUserWallet event raised by the ExternalUserWallet contract.
type ExternalUserWalletCreateExtUserWallet struct {
	ContentSpace common.Address
	ExtUserAddr  common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCreateExtUserWallet is a free log retrieval operation binding the contract event 0x786a1cca426afc9bf7b81ff1382a573ebc21b93bddf4784c49f56a3ae8a691c8.
//
// Solidity: event CreateExtUserWallet(address contentSpace, address extUserAddr)
func (_ExternalUserWallet *ExternalUserWalletFilterer) FilterCreateExtUserWallet(opts *bind.FilterOpts) (*ExternalUserWalletCreateExtUserWalletIterator, error) {

	logs, sub, err := _ExternalUserWallet.contract.FilterLogs(opts, "CreateExtUserWallet")
	if err != nil {
		return nil, err
	}
	return &ExternalUserWalletCreateExtUserWalletIterator{contract: _ExternalUserWallet.contract, event: "CreateExtUserWallet", logs: logs, sub: sub}, nil
}

// WatchCreateExtUserWallet is a free log subscription operation binding the contract event 0x786a1cca426afc9bf7b81ff1382a573ebc21b93bddf4784c49f56a3ae8a691c8.
//
// Solidity: event CreateExtUserWallet(address contentSpace, address extUserAddr)
func (_ExternalUserWallet *ExternalUserWalletFilterer) WatchCreateExtUserWallet(opts *bind.WatchOpts, sink chan<- *ExternalUserWalletCreateExtUserWallet) (event.Subscription, error) {

	logs, sub, err := _ExternalUserWallet.contract.WatchLogs(opts, "CreateExtUserWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExternalUserWalletCreateExtUserWallet)
				if err := _ExternalUserWallet.contract.UnpackLog(event, "CreateExtUserWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateExtUserWallet is a log parse operation binding the contract event 0x786a1cca426afc9bf7b81ff1382a573ebc21b93bddf4784c49f56a3ae8a691c8.
//
// Solidity: event CreateExtUserWallet(address contentSpace, address extUserAddr)
func (_ExternalUserWallet *ExternalUserWalletFilterer) ParseCreateExtUserWallet(log types.Log) (*ExternalUserWalletCreateExtUserWallet, error) {
	event := new(ExternalUserWalletCreateExtUserWallet)
	if err := _ExternalUserWallet.contract.UnpackLog(event, "CreateExtUserWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExternalUserWalletUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the ExternalUserWallet contract.
type ExternalUserWalletUpdateRequestIterator struct {
	Event *ExternalUserWalletUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExternalUserWalletUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExternalUserWalletUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExternalUserWalletUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExternalUserWalletUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExternalUserWalletUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExternalUserWalletUpdateRequest represents a UpdateRequest event raised by the ExternalUserWallet contract.
type ExternalUserWalletUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_ExternalUserWallet *ExternalUserWalletFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*ExternalUserWalletUpdateRequestIterator, error) {

	logs, sub, err := _ExternalUserWallet.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &ExternalUserWalletUpdateRequestIterator{contract: _ExternalUserWallet.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_ExternalUserWallet *ExternalUserWalletFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *ExternalUserWalletUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _ExternalUserWallet.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExternalUserWalletUpdateRequest)
				if err := _ExternalUserWallet.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_ExternalUserWallet *ExternalUserWalletFilterer) ParseUpdateRequest(log types.Log) (*ExternalUserWalletUpdateRequest, error) {
	event := new(ExternalUserWalletUpdateRequest)
	if err := _ExternalUserWallet.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExternalUserWalletVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the ExternalUserWallet contract.
type ExternalUserWalletVersionConfirmIterator struct {
	Event *ExternalUserWalletVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExternalUserWalletVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExternalUserWalletVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExternalUserWalletVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExternalUserWalletVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExternalUserWalletVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExternalUserWalletVersionConfirm represents a VersionConfirm event raised by the ExternalUserWallet contract.
type ExternalUserWalletVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_ExternalUserWallet *ExternalUserWalletFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*ExternalUserWalletVersionConfirmIterator, error) {

	logs, sub, err := _ExternalUserWallet.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &ExternalUserWalletVersionConfirmIterator{contract: _ExternalUserWallet.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_ExternalUserWallet *ExternalUserWalletFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *ExternalUserWalletVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _ExternalUserWallet.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExternalUserWalletVersionConfirm)
				if err := _ExternalUserWallet.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_ExternalUserWallet *ExternalUserWalletFilterer) ParseVersionConfirm(log types.Log) (*ExternalUserWalletVersionConfirm, error) {
	event := new(ExternalUserWalletVersionConfirm)
	if err := _ExternalUserWallet.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExternalUserWalletVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the ExternalUserWallet contract.
type ExternalUserWalletVersionDeleteIterator struct {
	Event *ExternalUserWalletVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExternalUserWalletVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExternalUserWalletVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExternalUserWalletVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExternalUserWalletVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExternalUserWalletVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExternalUserWalletVersionDelete represents a VersionDelete event raised by the ExternalUserWallet contract.
type ExternalUserWalletVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_ExternalUserWallet *ExternalUserWalletFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*ExternalUserWalletVersionDeleteIterator, error) {

	logs, sub, err := _ExternalUserWallet.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &ExternalUserWalletVersionDeleteIterator{contract: _ExternalUserWallet.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_ExternalUserWallet *ExternalUserWalletFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *ExternalUserWalletVersionDelete) (event.Subscription, error) {

	logs, sub, err := _ExternalUserWallet.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExternalUserWalletVersionDelete)
				if err := _ExternalUserWallet.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_ExternalUserWallet *ExternalUserWalletFilterer) ParseVersionDelete(log types.Log) (*ExternalUserWalletVersionDelete, error) {
	event := new(ExternalUserWalletVersionDelete)
	if err := _ExternalUserWallet.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ExternalUserWalletVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the ExternalUserWallet contract.
type ExternalUserWalletVisibilityChangedIterator struct {
	Event *ExternalUserWalletVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExternalUserWalletVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExternalUserWalletVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExternalUserWalletVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExternalUserWalletVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExternalUserWalletVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExternalUserWalletVisibilityChanged represents a VisibilityChanged event raised by the ExternalUserWallet contract.
type ExternalUserWalletVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_ExternalUserWallet *ExternalUserWalletFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*ExternalUserWalletVisibilityChangedIterator, error) {

	logs, sub, err := _ExternalUserWallet.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &ExternalUserWalletVisibilityChangedIterator{contract: _ExternalUserWallet.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_ExternalUserWallet *ExternalUserWalletFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *ExternalUserWalletVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _ExternalUserWallet.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExternalUserWalletVisibilityChanged)
				if err := _ExternalUserWallet.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_ExternalUserWallet *ExternalUserWalletFilterer) ParseVisibilityChanged(log types.Log) (*ExternalUserWalletVisibilityChanged, error) {
	event := new(ExternalUserWalletVisibilityChanged)
	if err := _ExternalUserWallet.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IAdminABI is the input ABI used to generate the binding from.
const IAdminABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_adminAddr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IAdminFuncSigs maps the 4-byte function signature to its string representation.
var IAdminFuncSigs = map[string]string{
	"24d7806c": "isAdmin(address)",
}

// IAdmin is an auto generated Go binding around an Ethereum contract.
type IAdmin struct {
	IAdminCaller     // Read-only binding to the contract
	IAdminTransactor // Write-only binding to the contract
	IAdminFilterer   // Log filterer for contract events
}

// IAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type IAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IAdminSession struct {
	Contract     *IAdmin           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IAdminCallerSession struct {
	Contract *IAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IAdminTransactorSession struct {
	Contract     *IAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type IAdminRaw struct {
	Contract *IAdmin // Generic contract binding to access the raw methods on
}

// IAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IAdminCallerRaw struct {
	Contract *IAdminCaller // Generic read-only contract binding to access the raw methods on
}

// IAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IAdminTransactorRaw struct {
	Contract *IAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIAdmin creates a new instance of IAdmin, bound to a specific deployed contract.
func NewIAdmin(address common.Address, backend bind.ContractBackend) (*IAdmin, error) {
	contract, err := bindIAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IAdmin{IAdminCaller: IAdminCaller{contract: contract}, IAdminTransactor: IAdminTransactor{contract: contract}, IAdminFilterer: IAdminFilterer{contract: contract}}, nil
}

// NewIAdminCaller creates a new read-only instance of IAdmin, bound to a specific deployed contract.
func NewIAdminCaller(address common.Address, caller bind.ContractCaller) (*IAdminCaller, error) {
	contract, err := bindIAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IAdminCaller{contract: contract}, nil
}

// NewIAdminTransactor creates a new write-only instance of IAdmin, bound to a specific deployed contract.
func NewIAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*IAdminTransactor, error) {
	contract, err := bindIAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IAdminTransactor{contract: contract}, nil
}

// NewIAdminFilterer creates a new log filterer instance of IAdmin, bound to a specific deployed contract.
func NewIAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*IAdminFilterer, error) {
	contract, err := bindIAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IAdminFilterer{contract: contract}, nil
}

// bindIAdmin binds a generic wrapper to an already deployed contract.
func bindIAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IAdminABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAdmin *IAdminRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IAdmin.Contract.IAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAdmin *IAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAdmin.Contract.IAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAdmin *IAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAdmin.Contract.IAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAdmin *IAdminCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAdmin *IAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAdmin *IAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAdmin.Contract.contract.Transact(opts, method, params...)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _adminAddr) constant returns(bool)
func (_IAdmin *IAdminCaller) IsAdmin(opts *bind.CallOpts, _adminAddr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _IAdmin.contract.Call(opts, out, "isAdmin", _adminAddr)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _adminAddr) constant returns(bool)
func (_IAdmin *IAdminSession) IsAdmin(_adminAddr common.Address) (bool, error) {
	return _IAdmin.Contract.IsAdmin(&_IAdmin.CallOpts, _adminAddr)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _adminAddr) constant returns(bool)
func (_IAdmin *IAdminCallerSession) IsAdmin(_adminAddr common.Address) (bool, error) {
	return _IAdmin.Contract.IsAdmin(&_IAdmin.CallOpts, _adminAddr)
}

// IFactorySpaceABI is the input ABI used to generate the binding from.
const IFactorySpaceABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IFactorySpaceFuncSigs maps the 4-byte function signature to its string representation.
var IFactorySpaceFuncSigs = map[string]string{
	"bf4e088f": "createContent(address,address)",
	"b8cfaf05": "createContentType()",
	"575185ed": "createGroup()",
	"40b89f06": "createLibrary(address)",
}

// IFactorySpace is an auto generated Go binding around an Ethereum contract.
type IFactorySpace struct {
	IFactorySpaceCaller     // Read-only binding to the contract
	IFactorySpaceTransactor // Write-only binding to the contract
	IFactorySpaceFilterer   // Log filterer for contract events
}

// IFactorySpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type IFactorySpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFactorySpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IFactorySpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFactorySpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IFactorySpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFactorySpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IFactorySpaceSession struct {
	Contract     *IFactorySpace    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IFactorySpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IFactorySpaceCallerSession struct {
	Contract *IFactorySpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IFactorySpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IFactorySpaceTransactorSession struct {
	Contract     *IFactorySpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IFactorySpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type IFactorySpaceRaw struct {
	Contract *IFactorySpace // Generic contract binding to access the raw methods on
}

// IFactorySpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IFactorySpaceCallerRaw struct {
	Contract *IFactorySpaceCaller // Generic read-only contract binding to access the raw methods on
}

// IFactorySpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IFactorySpaceTransactorRaw struct {
	Contract *IFactorySpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIFactorySpace creates a new instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpace(address common.Address, backend bind.ContractBackend) (*IFactorySpace, error) {
	contract, err := bindIFactorySpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IFactorySpace{IFactorySpaceCaller: IFactorySpaceCaller{contract: contract}, IFactorySpaceTransactor: IFactorySpaceTransactor{contract: contract}, IFactorySpaceFilterer: IFactorySpaceFilterer{contract: contract}}, nil
}

// NewIFactorySpaceCaller creates a new read-only instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpaceCaller(address common.Address, caller bind.ContractCaller) (*IFactorySpaceCaller, error) {
	contract, err := bindIFactorySpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IFactorySpaceCaller{contract: contract}, nil
}

// NewIFactorySpaceTransactor creates a new write-only instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*IFactorySpaceTransactor, error) {
	contract, err := bindIFactorySpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IFactorySpaceTransactor{contract: contract}, nil
}

// NewIFactorySpaceFilterer creates a new log filterer instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*IFactorySpaceFilterer, error) {
	contract, err := bindIFactorySpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IFactorySpaceFilterer{contract: contract}, nil
}

// bindIFactorySpace binds a generic wrapper to an already deployed contract.
func bindIFactorySpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IFactorySpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFactorySpace *IFactorySpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IFactorySpace.Contract.IFactorySpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFactorySpace *IFactorySpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFactorySpace.Contract.IFactorySpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFactorySpace *IFactorySpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFactorySpace.Contract.IFactorySpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFactorySpace *IFactorySpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IFactorySpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFactorySpace *IFactorySpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFactorySpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFactorySpace *IFactorySpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFactorySpace.Contract.contract.Transact(opts, method, params...)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createContent", lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_IFactorySpace *IFactorySpaceSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateContent(&_IFactorySpace.TransactOpts, lib, content_type)
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_IFactorySpace *IFactorySpaceTransactorSession) CreateContent(lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateContent(&_IFactorySpace.TransactOpts, lib, content_type)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createContentType")
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_IFactorySpace *IFactorySpaceSession) CreateContentType() (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateContentType(&_IFactorySpace.TransactOpts)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_IFactorySpace *IFactorySpaceTransactorSession) CreateContentType() (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateContentType(&_IFactorySpace.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createGroup")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_IFactorySpace *IFactorySpaceSession) CreateGroup() (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateGroup(&_IFactorySpace.TransactOpts)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_IFactorySpace *IFactorySpaceTransactorSession) CreateGroup() (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateGroup(&_IFactorySpace.TransactOpts)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateLibrary(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createLibrary", address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_IFactorySpace *IFactorySpaceSession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateLibrary(&_IFactorySpace.TransactOpts, address_KMS)
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_IFactorySpace *IFactorySpaceTransactorSession) CreateLibrary(address_KMS common.Address) (*types.Transaction, error) {
	return _IFactorySpace.Contract.CreateLibrary(&_IFactorySpace.TransactOpts, address_KMS)
}

// IKmsSpaceABI is the input ABI used to generate the binding from.
const IKmsSpaceABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"getKMSID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"checkKMSAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IKmsSpaceFuncSigs maps the 4-byte function signature to its string representation.
var IKmsSpaceFuncSigs = map[string]string{
	"d6be0f49": "checkKMSAddr(address)",
	"589aafc1": "getKMSID(address)",
	"268bfac4": "getKMSInfo(string,bytes)",
}

// IKmsSpace is an auto generated Go binding around an Ethereum contract.
type IKmsSpace struct {
	IKmsSpaceCaller     // Read-only binding to the contract
	IKmsSpaceTransactor // Write-only binding to the contract
	IKmsSpaceFilterer   // Log filterer for contract events
}

// IKmsSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type IKmsSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IKmsSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IKmsSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IKmsSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IKmsSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IKmsSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IKmsSpaceSession struct {
	Contract     *IKmsSpace        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IKmsSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IKmsSpaceCallerSession struct {
	Contract *IKmsSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// IKmsSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IKmsSpaceTransactorSession struct {
	Contract     *IKmsSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IKmsSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type IKmsSpaceRaw struct {
	Contract *IKmsSpace // Generic contract binding to access the raw methods on
}

// IKmsSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IKmsSpaceCallerRaw struct {
	Contract *IKmsSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// IKmsSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IKmsSpaceTransactorRaw struct {
	Contract *IKmsSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIKmsSpace creates a new instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpace(address common.Address, backend bind.ContractBackend) (*IKmsSpace, error) {
	contract, err := bindIKmsSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IKmsSpace{IKmsSpaceCaller: IKmsSpaceCaller{contract: contract}, IKmsSpaceTransactor: IKmsSpaceTransactor{contract: contract}, IKmsSpaceFilterer: IKmsSpaceFilterer{contract: contract}}, nil
}

// NewIKmsSpaceCaller creates a new read-only instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpaceCaller(address common.Address, caller bind.ContractCaller) (*IKmsSpaceCaller, error) {
	contract, err := bindIKmsSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IKmsSpaceCaller{contract: contract}, nil
}

// NewIKmsSpaceTransactor creates a new write-only instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*IKmsSpaceTransactor, error) {
	contract, err := bindIKmsSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IKmsSpaceTransactor{contract: contract}, nil
}

// NewIKmsSpaceFilterer creates a new log filterer instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*IKmsSpaceFilterer, error) {
	contract, err := bindIKmsSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IKmsSpaceFilterer{contract: contract}, nil
}

// bindIKmsSpace binds a generic wrapper to an already deployed contract.
func bindIKmsSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IKmsSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IKmsSpace *IKmsSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IKmsSpace.Contract.IKmsSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IKmsSpace *IKmsSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IKmsSpace.Contract.IKmsSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IKmsSpace *IKmsSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IKmsSpace.Contract.IKmsSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IKmsSpace *IKmsSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IKmsSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IKmsSpace *IKmsSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IKmsSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IKmsSpace *IKmsSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IKmsSpace.Contract.contract.Transact(opts, method, params...)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_IKmsSpace *IKmsSpaceCaller) CheckKMSAddr(opts *bind.CallOpts, _kmsAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IKmsSpace.contract.Call(opts, out, "checkKMSAddr", _kmsAddr)
	return *ret0, err
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_IKmsSpace *IKmsSpaceSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _IKmsSpace.Contract.CheckKMSAddr(&_IKmsSpace.CallOpts, _kmsAddr)
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) constant returns(uint256)
func (_IKmsSpace *IKmsSpaceCallerSession) CheckKMSAddr(_kmsAddr common.Address) (*big.Int, error) {
	return _IKmsSpace.Contract.CheckKMSAddr(&_IKmsSpace.CallOpts, _kmsAddr)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_IKmsSpace *IKmsSpaceCaller) GetKMSID(opts *bind.CallOpts, _kmsAddr common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _IKmsSpace.contract.Call(opts, out, "getKMSID", _kmsAddr)
	return *ret0, err
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_IKmsSpace *IKmsSpaceSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _IKmsSpace.Contract.GetKMSID(&_IKmsSpace.CallOpts, _kmsAddr)
}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) constant returns(string)
func (_IKmsSpace *IKmsSpaceCallerSession) GetKMSID(_kmsAddr common.Address) (string, error) {
	return _IKmsSpace.Contract.GetKMSID(&_IKmsSpace.CallOpts, _kmsAddr)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_IKmsSpace *IKmsSpaceCaller) GetKMSInfo(opts *bind.CallOpts, _kmsID string, prefix []byte) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _IKmsSpace.contract.Call(opts, out, "getKMSInfo", _kmsID, prefix)
	return *ret0, *ret1, err
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_IKmsSpace *IKmsSpaceSession) GetKMSInfo(_kmsID string, prefix []byte) (string, string, error) {
	return _IKmsSpace.Contract.GetKMSInfo(&_IKmsSpace.CallOpts, _kmsID, prefix)
}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) constant returns(string, string)
func (_IKmsSpace *IKmsSpaceCallerSession) GetKMSInfo(_kmsID string, prefix []byte) (string, string, error) {
	return _IKmsSpace.Contract.GetKMSInfo(&_IKmsSpace.CallOpts, _kmsID, prefix)
}

// INodeSpaceABI is the input ABI used to generate the binding from.
const INodeSpaceABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// INodeSpaceFuncSigs maps the 4-byte function signature to its string representation.
var INodeSpaceFuncSigs = map[string]string{
	"26683e14": "canNodePublish(address)",
}

// INodeSpace is an auto generated Go binding around an Ethereum contract.
type INodeSpace struct {
	INodeSpaceCaller     // Read-only binding to the contract
	INodeSpaceTransactor // Write-only binding to the contract
	INodeSpaceFilterer   // Log filterer for contract events
}

// INodeSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type INodeSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INodeSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type INodeSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INodeSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type INodeSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INodeSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type INodeSpaceSession struct {
	Contract     *INodeSpace       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// INodeSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type INodeSpaceCallerSession struct {
	Contract *INodeSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// INodeSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type INodeSpaceTransactorSession struct {
	Contract     *INodeSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// INodeSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type INodeSpaceRaw struct {
	Contract *INodeSpace // Generic contract binding to access the raw methods on
}

// INodeSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type INodeSpaceCallerRaw struct {
	Contract *INodeSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// INodeSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type INodeSpaceTransactorRaw struct {
	Contract *INodeSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewINodeSpace creates a new instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpace(address common.Address, backend bind.ContractBackend) (*INodeSpace, error) {
	contract, err := bindINodeSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &INodeSpace{INodeSpaceCaller: INodeSpaceCaller{contract: contract}, INodeSpaceTransactor: INodeSpaceTransactor{contract: contract}, INodeSpaceFilterer: INodeSpaceFilterer{contract: contract}}, nil
}

// NewINodeSpaceCaller creates a new read-only instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpaceCaller(address common.Address, caller bind.ContractCaller) (*INodeSpaceCaller, error) {
	contract, err := bindINodeSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &INodeSpaceCaller{contract: contract}, nil
}

// NewINodeSpaceTransactor creates a new write-only instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*INodeSpaceTransactor, error) {
	contract, err := bindINodeSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &INodeSpaceTransactor{contract: contract}, nil
}

// NewINodeSpaceFilterer creates a new log filterer instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*INodeSpaceFilterer, error) {
	contract, err := bindINodeSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &INodeSpaceFilterer{contract: contract}, nil
}

// bindINodeSpace binds a generic wrapper to an already deployed contract.
func bindINodeSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(INodeSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_INodeSpace *INodeSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _INodeSpace.Contract.INodeSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_INodeSpace *INodeSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _INodeSpace.Contract.INodeSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_INodeSpace *INodeSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _INodeSpace.Contract.INodeSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_INodeSpace *INodeSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _INodeSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_INodeSpace *INodeSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _INodeSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_INodeSpace *INodeSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _INodeSpace.Contract.contract.Transact(opts, method, params...)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_INodeSpace *INodeSpaceCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _INodeSpace.contract.Call(opts, out, "canNodePublish", candidate)
	return *ret0, err
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_INodeSpace *INodeSpaceSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _INodeSpace.Contract.CanNodePublish(&_INodeSpace.CallOpts, candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_INodeSpace *INodeSpaceCallerSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _INodeSpace.Contract.CanNodePublish(&_INodeSpace.CallOpts, candidate)
}

// IUserSpaceABI is the input ABI used to generate the binding from.
const IUserSpaceABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"createUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IUserSpaceFuncSigs maps the 4-byte function signature to its string representation.
var IUserSpaceFuncSigs = map[string]string{
	"e7cf0c66": "createUserWallet(address)",
	"63e6ffdd": "userWallets(address)",
}

// IUserSpace is an auto generated Go binding around an Ethereum contract.
type IUserSpace struct {
	IUserSpaceCaller     // Read-only binding to the contract
	IUserSpaceTransactor // Write-only binding to the contract
	IUserSpaceFilterer   // Log filterer for contract events
}

// IUserSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type IUserSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUserSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IUserSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUserSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IUserSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUserSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IUserSpaceSession struct {
	Contract     *IUserSpace       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IUserSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IUserSpaceCallerSession struct {
	Contract *IUserSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// IUserSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IUserSpaceTransactorSession struct {
	Contract     *IUserSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IUserSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type IUserSpaceRaw struct {
	Contract *IUserSpace // Generic contract binding to access the raw methods on
}

// IUserSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IUserSpaceCallerRaw struct {
	Contract *IUserSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// IUserSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IUserSpaceTransactorRaw struct {
	Contract *IUserSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIUserSpace creates a new instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpace(address common.Address, backend bind.ContractBackend) (*IUserSpace, error) {
	contract, err := bindIUserSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IUserSpace{IUserSpaceCaller: IUserSpaceCaller{contract: contract}, IUserSpaceTransactor: IUserSpaceTransactor{contract: contract}, IUserSpaceFilterer: IUserSpaceFilterer{contract: contract}}, nil
}

// NewIUserSpaceCaller creates a new read-only instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpaceCaller(address common.Address, caller bind.ContractCaller) (*IUserSpaceCaller, error) {
	contract, err := bindIUserSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IUserSpaceCaller{contract: contract}, nil
}

// NewIUserSpaceTransactor creates a new write-only instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*IUserSpaceTransactor, error) {
	contract, err := bindIUserSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IUserSpaceTransactor{contract: contract}, nil
}

// NewIUserSpaceFilterer creates a new log filterer instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*IUserSpaceFilterer, error) {
	contract, err := bindIUserSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IUserSpaceFilterer{contract: contract}, nil
}

// bindIUserSpace binds a generic wrapper to an already deployed contract.
func bindIUserSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IUserSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IUserSpace *IUserSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IUserSpace.Contract.IUserSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IUserSpace *IUserSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IUserSpace.Contract.IUserSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IUserSpace *IUserSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IUserSpace.Contract.IUserSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IUserSpace *IUserSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IUserSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IUserSpace *IUserSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IUserSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IUserSpace *IUserSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IUserSpace.Contract.contract.Transact(opts, method, params...)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_IUserSpace *IUserSpaceCaller) UserWallets(opts *bind.CallOpts, _userAddr common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _IUserSpace.contract.Call(opts, out, "userWallets", _userAddr)
	return *ret0, err
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_IUserSpace *IUserSpaceSession) UserWallets(_userAddr common.Address) (common.Address, error) {
	return _IUserSpace.Contract.UserWallets(&_IUserSpace.CallOpts, _userAddr)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_IUserSpace *IUserSpaceCallerSession) UserWallets(_userAddr common.Address) (common.Address, error) {
	return _IUserSpace.Contract.UserWallets(&_IUserSpace.CallOpts, _userAddr)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_IUserSpace *IUserSpaceTransactor) CreateUserWallet(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _IUserSpace.contract.Transact(opts, "createUserWallet", _user)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_IUserSpace *IUserSpaceSession) CreateUserWallet(_user common.Address) (*types.Transaction, error) {
	return _IUserSpace.Contract.CreateUserWallet(&_IUserSpace.TransactOpts, _user)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_IUserSpace *IUserSpaceTransactorSession) CreateUserWallet(_user common.Address) (*types.Transaction, error) {
	return _IUserSpace.Contract.CreateUserWallet(&_IUserSpace.TransactOpts, _user)
}

// MetaObjectABI is the input ABI used to generate the binding from.
const MetaObjectABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// MetaObjectFuncSigs maps the 4-byte function signature to its string representation.
var MetaObjectFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"ac55c906": "getMeta(bytes)",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"e542b7cb": "putMeta(bytes,bytes)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// MetaObjectBin is the compiled bytecode used for deploying new contracts.
var MetaObjectBin = "0x60806040527f4f776e61626c6532303230303231303131303130304d4c0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060015560028054600160a060020a03199081163290811790925560038054909116909117905561095d8061007e6000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146100b057806324d7806c146100e157806341c0e1b51461011657806354fd4d501461012b5780635f4fcae1146101525780636d2e4b1b146101675780638da5cb5b14610188578063ac55c9061461019d578063af570c041461026b578063e542b7cb14610280578063f2fde38b14610317575b005b3480156100bc57600080fd5b506100c5610338565b60408051600160a060020a039092168252519081900360200190f35b3480156100ed57600080fd5b50610102600160a060020a0360043516610347565b604080519115158252519081900360200190f35b34801561012257600080fd5b506100ae610371565b34801561013757600080fd5b506101406103ad565b60408051918252519081900360200190f35b34801561015e57600080fd5b506101406103b3565b34801561017357600080fd5b506100ae600160a060020a03600435166103b9565b34801561019457600080fd5b506100c5610414565b3480156101a957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101f69436949293602493928401919081908401838280828437509497506104239650505050505050565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610230578181015183820152602001610218565b50505050905090810190601f16801561025d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027757600080fd5b506100c56105d2565b34801561028c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100ae94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506105e19650505050505050565b34801561032357600080fd5b506100ae600160a060020a03600435166107dd565b600254600160a060020a031681565b600354600090600160a060020a03838116911614156103685750600161036c565b5060005b919050565b600354600160a060020a03163214806103945750600354600160a060020a031633145b151561039f57600080fd5b600354600160a060020a0316ff5b60005481565b60015481565b600254600160a060020a031632146103d057600080fd5b600160a060020a03811615156103e557600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b6060600080602084511115156104dd57505081518083015160008181526005602090815260409182902080548351601f6002610100600185161502600019019093169290920491820184900484028101840190945280845293949390918301828280156104d15780601f106104a6576101008083540402835291602001916104d1565b820191906000526020600020905b8154815290600101906020018083116104b457829003601f168201915b505050505092506105cb565b6006846040518082805190602001908083835b6020831061050f5780518252601f1990920191602091820191016104f0565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156105c35780601f10610598576101008083540402835291602001916105c3565b820191906000526020600020905b8154815290600101906020018083116105a657829003601f168201915b505050505092505b5050919050565b600454600160a060020a031681565b6000806105ed33610347565b15156105f857600080fd5b835160201061065357505081518083015160008181526005602052604081209192916106239161084f565b60008351111561064e576000828152600560209081526040909120845161064c92860190610896565b505b61073e565b6006846040518082805190602001908083835b602083106106855780518252601f199092019160209182019101610666565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092206106be92509050600061084f565b60008351111561073e57826006856040518082805190602001908083835b602083106106fb5780518252601f1990920191602091820191016106dc565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161073c9591949190910192509050610896565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c846040518080602001828103825283818151815260200191508051906020019080838360005b8381101561079d578181015183820152602001610785565b50505050905090810190601f1680156107ca5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150505050565b600354600160a060020a03163214806108005750600354600160a060020a031633145b151561080b57600080fd5b600160a060020a038116151561082057600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b50805460018160011615610100020316600290046000825580601f106108755750610893565b601f0160209004906000526020600020908101906108939190610914565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106108d757805160ff1916838001178555610904565b82800160010185558215610904579182015b828111156109045782518255916020019190600101906108e9565b50610910929150610914565b5090565b61092e91905b80821115610910576000815560010161091a565b905600a165627a7a723058202f6b11f524b85f96a8cdcfddc9439d456707a349e846f9f2e854a1ebdcd3f4f90029"

// DeployMetaObject deploys a new Ethereum contract, binding an instance of MetaObject to it.
func DeployMetaObject(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MetaObject, error) {
	parsed, err := abi.JSON(strings.NewReader(MetaObjectABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MetaObjectBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MetaObject{MetaObjectCaller: MetaObjectCaller{contract: contract}, MetaObjectTransactor: MetaObjectTransactor{contract: contract}, MetaObjectFilterer: MetaObjectFilterer{contract: contract}}, nil
}

// MetaObject is an auto generated Go binding around an Ethereum contract.
type MetaObject struct {
	MetaObjectCaller     // Read-only binding to the contract
	MetaObjectTransactor // Write-only binding to the contract
	MetaObjectFilterer   // Log filterer for contract events
}

// MetaObjectCaller is an auto generated read-only Go binding around an Ethereum contract.
type MetaObjectCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaObjectTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MetaObjectTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaObjectFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MetaObjectFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaObjectSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MetaObjectSession struct {
	Contract     *MetaObject       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MetaObjectCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MetaObjectCallerSession struct {
	Contract *MetaObjectCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MetaObjectTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MetaObjectTransactorSession struct {
	Contract     *MetaObjectTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MetaObjectRaw is an auto generated low-level Go binding around an Ethereum contract.
type MetaObjectRaw struct {
	Contract *MetaObject // Generic contract binding to access the raw methods on
}

// MetaObjectCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MetaObjectCallerRaw struct {
	Contract *MetaObjectCaller // Generic read-only contract binding to access the raw methods on
}

// MetaObjectTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MetaObjectTransactorRaw struct {
	Contract *MetaObjectTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMetaObject creates a new instance of MetaObject, bound to a specific deployed contract.
func NewMetaObject(address common.Address, backend bind.ContractBackend) (*MetaObject, error) {
	contract, err := bindMetaObject(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MetaObject{MetaObjectCaller: MetaObjectCaller{contract: contract}, MetaObjectTransactor: MetaObjectTransactor{contract: contract}, MetaObjectFilterer: MetaObjectFilterer{contract: contract}}, nil
}

// NewMetaObjectCaller creates a new read-only instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectCaller(address common.Address, caller bind.ContractCaller) (*MetaObjectCaller, error) {
	contract, err := bindMetaObject(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MetaObjectCaller{contract: contract}, nil
}

// NewMetaObjectTransactor creates a new write-only instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectTransactor(address common.Address, transactor bind.ContractTransactor) (*MetaObjectTransactor, error) {
	contract, err := bindMetaObject(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MetaObjectTransactor{contract: contract}, nil
}

// NewMetaObjectFilterer creates a new log filterer instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectFilterer(address common.Address, filterer bind.ContractFilterer) (*MetaObjectFilterer, error) {
	contract, err := bindMetaObject(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MetaObjectFilterer{contract: contract}, nil
}

// bindMetaObject binds a generic wrapper to an already deployed contract.
func bindMetaObject(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MetaObjectABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MetaObject *MetaObjectRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MetaObject.Contract.MetaObjectCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MetaObject *MetaObjectRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetaObject.Contract.MetaObjectTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MetaObject *MetaObjectRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MetaObject.Contract.MetaObjectTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MetaObject *MetaObjectCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MetaObject.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MetaObject *MetaObjectTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetaObject.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MetaObject *MetaObjectTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MetaObject.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_MetaObject *MetaObjectCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_MetaObject *MetaObjectSession) ContentSpace() (common.Address, error) {
	return _MetaObject.Contract.ContentSpace(&_MetaObject.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_MetaObject *MetaObjectCallerSession) ContentSpace() (common.Address, error) {
	return _MetaObject.Contract.ContentSpace(&_MetaObject.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_MetaObject *MetaObjectCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_MetaObject *MetaObjectSession) Creator() (common.Address, error) {
	return _MetaObject.Contract.Creator(&_MetaObject.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_MetaObject *MetaObjectCallerSession) Creator() (common.Address, error) {
	return _MetaObject.Contract.Creator(&_MetaObject.CallOpts)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_MetaObject *MetaObjectCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_MetaObject *MetaObjectSession) GetMeta(key []byte) ([]byte, error) {
	return _MetaObject.Contract.GetMeta(&_MetaObject.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_MetaObject *MetaObjectCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _MetaObject.Contract.GetMeta(&_MetaObject.CallOpts, key)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_MetaObject *MetaObjectCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_MetaObject *MetaObjectSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _MetaObject.Contract.IsAdmin(&_MetaObject.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_MetaObject *MetaObjectCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _MetaObject.Contract.IsAdmin(&_MetaObject.CallOpts, _candidate)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_MetaObject *MetaObjectCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_MetaObject *MetaObjectSession) Owner() (common.Address, error) {
	return _MetaObject.Contract.Owner(&_MetaObject.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_MetaObject *MetaObjectCallerSession) Owner() (common.Address, error) {
	return _MetaObject.Contract.Owner(&_MetaObject.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_MetaObject *MetaObjectCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_MetaObject *MetaObjectSession) Version() ([32]byte, error) {
	return _MetaObject.Contract.Version(&_MetaObject.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_MetaObject *MetaObjectCallerSession) Version() ([32]byte, error) {
	return _MetaObject.Contract.Version(&_MetaObject.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_MetaObject *MetaObjectCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _MetaObject.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_MetaObject *MetaObjectSession) VersionAPI() ([32]byte, error) {
	return _MetaObject.Contract.VersionAPI(&_MetaObject.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_MetaObject *MetaObjectCallerSession) VersionAPI() ([32]byte, error) {
	return _MetaObject.Contract.VersionAPI(&_MetaObject.CallOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_MetaObject *MetaObjectTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_MetaObject *MetaObjectSession) Kill() (*types.Transaction, error) {
	return _MetaObject.Contract.Kill(&_MetaObject.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_MetaObject *MetaObjectTransactorSession) Kill() (*types.Transaction, error) {
	return _MetaObject.Contract.Kill(&_MetaObject.TransactOpts)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_MetaObject *MetaObjectTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_MetaObject *MetaObjectSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _MetaObject.Contract.PutMeta(&_MetaObject.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_MetaObject *MetaObjectTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _MetaObject.Contract.PutMeta(&_MetaObject.TransactOpts, key, value)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_MetaObject *MetaObjectTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_MetaObject *MetaObjectSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _MetaObject.Contract.TransferCreatorship(&_MetaObject.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_MetaObject *MetaObjectTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _MetaObject.Contract.TransferCreatorship(&_MetaObject.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MetaObject *MetaObjectTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MetaObject *MetaObjectSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MetaObject.Contract.TransferOwnership(&_MetaObject.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MetaObject *MetaObjectTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MetaObject.Contract.TransferOwnership(&_MetaObject.TransactOpts, newOwner)
}

// MetaObjectObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the MetaObject contract.
type MetaObjectObjectMetaChangedIterator struct {
	Event *MetaObjectObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MetaObjectObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MetaObjectObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MetaObjectObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MetaObjectObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MetaObjectObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MetaObjectObjectMetaChanged represents a ObjectMetaChanged event raised by the MetaObject contract.
type MetaObjectObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_MetaObject *MetaObjectFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*MetaObjectObjectMetaChangedIterator, error) {

	logs, sub, err := _MetaObject.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &MetaObjectObjectMetaChangedIterator{contract: _MetaObject.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_MetaObject *MetaObjectFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *MetaObjectObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _MetaObject.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MetaObjectObjectMetaChanged)
				if err := _MetaObject.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_MetaObject *MetaObjectFilterer) ParseObjectMetaChanged(log types.Log) (*MetaObjectObjectMetaChanged, error) {
	event := new(MetaObjectObjectMetaChanged)
	if err := _MetaObject.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeABI is the input ABI used to generate the binding from.
const NodeABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"label\",\"type\":\"string\"}],\"name\":\"log\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"}]"

// NodeFuncSigs maps the 4-byte function signature to its string representation.
var NodeFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"41304fac": "log(string)",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// NodeBin is the compiled bytecode used for deploying new contracts.
var NodeBin = "0x60806040527f4f776e61626c6532303230303231303131303130304d4c0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f4e6f646532303139303331353130353130304d4c00000000000000000000000060055560028054600160a060020a031990811632908117909255600380549091169091179055610419806100a26000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461009a57806341304fac146100cb57806341c0e1b51461012457806354fd4d50146101395780635f4fcae1146101605780636d2e4b1b146101755780638da5cb5b14610196578063af570c04146101ab578063f2fde38b146101c0575b005b3480156100a657600080fd5b506100af6101e1565b60408051600160a060020a039092168252519081900360200190f35b3480156100d757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100989436949293602493928401919081908401838280828437509497506101f09650505050505050565b34801561013057600080fd5b506100986102ba565b34801561014557600080fd5b5061014e6102f6565b60408051918252519081900360200190f35b34801561016c57600080fd5b5061014e6102fc565b34801561018157600080fd5b50610098600160a060020a0360043516610302565b3480156101a257600080fd5b506100af61035d565b3480156101b757600080fd5b506100af61036c565b3480156101cc57600080fd5b50610098600160a060020a036004351661037b565b600254600160a060020a031681565b600354600160a060020a03163214806102135750600354600160a060020a031633145b151561021e57600080fd5b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561027d578181015183820152602001610265565b50505050905090810190601f1680156102aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b600354600160a060020a03163214806102dd5750600354600160a060020a031633145b15156102e857600080fd5b600354600160a060020a0316ff5b60055481565b60015481565b600254600160a060020a0316321461031957600080fd5b600160a060020a038116151561032e57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a031632148061039e5750600354600160a060020a031633145b15156103a957600080fd5b600160a060020a03811615156103be57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058202239827ea399991686bdf1e0f3c2871fd43454d9706f5915fc84b10511a004b80029"

// DeployNode deploys a new Ethereum contract, binding an instance of Node to it.
func DeployNode(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Node, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(NodeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Node{NodeCaller: NodeCaller{contract: contract}, NodeTransactor: NodeTransactor{contract: contract}, NodeFilterer: NodeFilterer{contract: contract}}, nil
}

// Node is an auto generated Go binding around an Ethereum contract.
type Node struct {
	NodeCaller     // Read-only binding to the contract
	NodeTransactor // Write-only binding to the contract
	NodeFilterer   // Log filterer for contract events
}

// NodeCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodeSession struct {
	Contract     *Node             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodeCallerSession struct {
	Contract *NodeCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// NodeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodeTransactorSession struct {
	Contract     *NodeTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodeRaw struct {
	Contract *Node // Generic contract binding to access the raw methods on
}

// NodeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodeCallerRaw struct {
	Contract *NodeCaller // Generic read-only contract binding to access the raw methods on
}

// NodeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodeTransactorRaw struct {
	Contract *NodeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNode creates a new instance of Node, bound to a specific deployed contract.
func NewNode(address common.Address, backend bind.ContractBackend) (*Node, error) {
	contract, err := bindNode(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Node{NodeCaller: NodeCaller{contract: contract}, NodeTransactor: NodeTransactor{contract: contract}, NodeFilterer: NodeFilterer{contract: contract}}, nil
}

// NewNodeCaller creates a new read-only instance of Node, bound to a specific deployed contract.
func NewNodeCaller(address common.Address, caller bind.ContractCaller) (*NodeCaller, error) {
	contract, err := bindNode(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeCaller{contract: contract}, nil
}

// NewNodeTransactor creates a new write-only instance of Node, bound to a specific deployed contract.
func NewNodeTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeTransactor, error) {
	contract, err := bindNode(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeTransactor{contract: contract}, nil
}

// NewNodeFilterer creates a new log filterer instance of Node, bound to a specific deployed contract.
func NewNodeFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeFilterer, error) {
	contract, err := bindNode(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeFilterer{contract: contract}, nil
}

// bindNode binds a generic wrapper to an already deployed contract.
func bindNode(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Node *NodeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Node.Contract.NodeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Node *NodeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Node.Contract.NodeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Node *NodeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Node.Contract.NodeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Node *NodeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Node.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Node *NodeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Node.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Node *NodeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Node.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Node *NodeCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Node.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Node *NodeSession) ContentSpace() (common.Address, error) {
	return _Node.Contract.ContentSpace(&_Node.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Node *NodeCallerSession) ContentSpace() (common.Address, error) {
	return _Node.Contract.ContentSpace(&_Node.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Node *NodeCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Node.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Node *NodeSession) Creator() (common.Address, error) {
	return _Node.Contract.Creator(&_Node.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Node *NodeCallerSession) Creator() (common.Address, error) {
	return _Node.Contract.Creator(&_Node.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Node *NodeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Node.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Node *NodeSession) Owner() (common.Address, error) {
	return _Node.Contract.Owner(&_Node.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Node *NodeCallerSession) Owner() (common.Address, error) {
	return _Node.Contract.Owner(&_Node.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Node *NodeCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Node.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Node *NodeSession) Version() ([32]byte, error) {
	return _Node.Contract.Version(&_Node.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Node *NodeCallerSession) Version() ([32]byte, error) {
	return _Node.Contract.Version(&_Node.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Node *NodeCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Node.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Node *NodeSession) VersionAPI() ([32]byte, error) {
	return _Node.Contract.VersionAPI(&_Node.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Node *NodeCallerSession) VersionAPI() ([32]byte, error) {
	return _Node.Contract.VersionAPI(&_Node.CallOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Node *NodeTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Node *NodeSession) Kill() (*types.Transaction, error) {
	return _Node.Contract.Kill(&_Node.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Node *NodeTransactorSession) Kill() (*types.Transaction, error) {
	return _Node.Contract.Kill(&_Node.TransactOpts)
}

// Log is a paid mutator transaction binding the contract method 0x41304fac.
//
// Solidity: function log(string label) returns()
func (_Node *NodeTransactor) Log(opts *bind.TransactOpts, label string) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "log", label)
}

// Log is a paid mutator transaction binding the contract method 0x41304fac.
//
// Solidity: function log(string label) returns()
func (_Node *NodeSession) Log(label string) (*types.Transaction, error) {
	return _Node.Contract.Log(&_Node.TransactOpts, label)
}

// Log is a paid mutator transaction binding the contract method 0x41304fac.
//
// Solidity: function log(string label) returns()
func (_Node *NodeTransactorSession) Log(label string) (*types.Transaction, error) {
	return _Node.Contract.Log(&_Node.TransactOpts, label)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Node *NodeTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Node *NodeSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Node.Contract.TransferCreatorship(&_Node.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Node *NodeTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Node.Contract.TransferCreatorship(&_Node.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Node *NodeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Node *NodeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Node.Contract.TransferOwnership(&_Node.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Node *NodeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Node.Contract.TransferOwnership(&_Node.TransactOpts, newOwner)
}

// NodeLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the Node contract.
type NodeLogIterator struct {
	Event *NodeLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLog represents a Log event raised by the Node contract.
type NodeLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) FilterLog(opts *bind.FilterOpts) (*NodeLogIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &NodeLogIterator{contract: _Node.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *NodeLog) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLog)
				if err := _Node.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) ParseLog(log types.Log) (*NodeLog, error) {
	event := new(NodeLog)
	if err := _Node.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the Node contract.
type NodeLogAddressIterator struct {
	Event *NodeLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogAddress represents a LogAddress event raised by the Node contract.
type NodeLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) FilterLogAddress(opts *bind.FilterOpts) (*NodeLogAddressIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &NodeLogAddressIterator{contract: _Node.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *NodeLogAddress) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogAddress)
				if err := _Node.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) ParseLogAddress(log types.Log) (*NodeLogAddress, error) {
	event := new(NodeLogAddress)
	if err := _Node.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the Node contract.
type NodeLogBoolIterator struct {
	Event *NodeLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogBool represents a LogBool event raised by the Node contract.
type NodeLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) FilterLogBool(opts *bind.FilterOpts) (*NodeLogBoolIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &NodeLogBoolIterator{contract: _Node.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *NodeLogBool) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogBool)
				if err := _Node.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) ParseLogBool(log types.Log) (*NodeLogBool, error) {
	event := new(NodeLogBool)
	if err := _Node.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the Node contract.
type NodeLogBytes32Iterator struct {
	Event *NodeLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogBytes32 represents a LogBytes32 event raised by the Node contract.
type NodeLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*NodeLogBytes32Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &NodeLogBytes32Iterator{contract: _Node.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *NodeLogBytes32) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogBytes32)
				if err := _Node.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) ParseLogBytes32(log types.Log) (*NodeLogBytes32, error) {
	event := new(NodeLogBytes32)
	if err := _Node.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the Node contract.
type NodeLogInt256Iterator struct {
	Event *NodeLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogInt256 represents a LogInt256 event raised by the Node contract.
type NodeLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) FilterLogInt256(opts *bind.FilterOpts) (*NodeLogInt256Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &NodeLogInt256Iterator{contract: _Node.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *NodeLogInt256) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogInt256)
				if err := _Node.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) ParseLogInt256(log types.Log) (*NodeLogInt256, error) {
	event := new(NodeLogInt256)
	if err := _Node.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the Node contract.
type NodeLogUint256Iterator struct {
	Event *NodeLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogUint256 represents a LogUint256 event raised by the Node contract.
type NodeLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) FilterLogUint256(opts *bind.FilterOpts) (*NodeLogUint256Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &NodeLogUint256Iterator{contract: _Node.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *NodeLogUint256) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogUint256)
				if err := _Node.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) ParseLogUint256(log types.Log) (*NodeLogUint256, error) {
	event := new(NodeLogUint256)
	if err := _Node.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeSpaceABI is the input ABI used to generate the binding from.
const NodeSpaceABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"submitNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numActiveNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"removeNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"approveNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPendingNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"AddNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"RemoveNode\",\"type\":\"event\"}]"

// NodeSpaceFuncSigs maps the 4-byte function signature to its string representation.
var NodeSpaceFuncSigs = map[string]string{
	"52f82dd8": "activeNodeAddresses(uint256)",
	"5272ae17": "activeNodeLocators(uint256)",
	"64f0f050": "addNode(address,bytes)",
	"dd4c97a0": "approveNode(address)",
	"26683e14": "canNodePublish(address)",
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"43f59ec7": "numActiveNodes()",
	"f41a1587": "numPendingNodes()",
	"8da5cb5b": "owner()",
	"6be9514c": "pendingNodeAddresses(uint256)",
	"69e30ff8": "pendingNodeLocators(uint256)",
	"b2b99ec9": "removeNode(address)",
	"160eee74": "submitNode(bytes)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// NodeSpaceBin is the compiled bytecode used for deploying new contracts.
var NodeSpaceBin = ""

// DeployNodeSpace deploys a new Ethereum contract, binding an instance of NodeSpace to it.
func DeployNodeSpace(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodeSpace, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeSpaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(NodeSpaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodeSpace{NodeSpaceCaller: NodeSpaceCaller{contract: contract}, NodeSpaceTransactor: NodeSpaceTransactor{contract: contract}, NodeSpaceFilterer: NodeSpaceFilterer{contract: contract}}, nil
}

// NodeSpace is an auto generated Go binding around an Ethereum contract.
type NodeSpace struct {
	NodeSpaceCaller     // Read-only binding to the contract
	NodeSpaceTransactor // Write-only binding to the contract
	NodeSpaceFilterer   // Log filterer for contract events
}

// NodeSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodeSpaceSession struct {
	Contract     *NodeSpace        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodeSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodeSpaceCallerSession struct {
	Contract *NodeSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// NodeSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodeSpaceTransactorSession struct {
	Contract     *NodeSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// NodeSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodeSpaceRaw struct {
	Contract *NodeSpace // Generic contract binding to access the raw methods on
}

// NodeSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodeSpaceCallerRaw struct {
	Contract *NodeSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// NodeSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodeSpaceTransactorRaw struct {
	Contract *NodeSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNodeSpace creates a new instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpace(address common.Address, backend bind.ContractBackend) (*NodeSpace, error) {
	contract, err := bindNodeSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodeSpace{NodeSpaceCaller: NodeSpaceCaller{contract: contract}, NodeSpaceTransactor: NodeSpaceTransactor{contract: contract}, NodeSpaceFilterer: NodeSpaceFilterer{contract: contract}}, nil
}

// NewNodeSpaceCaller creates a new read-only instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceCaller(address common.Address, caller bind.ContractCaller) (*NodeSpaceCaller, error) {
	contract, err := bindNodeSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceCaller{contract: contract}, nil
}

// NewNodeSpaceTransactor creates a new write-only instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeSpaceTransactor, error) {
	contract, err := bindNodeSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceTransactor{contract: contract}, nil
}

// NewNodeSpaceFilterer creates a new log filterer instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeSpaceFilterer, error) {
	contract, err := bindNodeSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceFilterer{contract: contract}, nil
}

// bindNodeSpace binds a generic wrapper to an already deployed contract.
func bindNodeSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NodeSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeSpace *NodeSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _NodeSpace.Contract.NodeSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeSpace *NodeSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeSpace.Contract.NodeSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeSpace *NodeSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeSpace.Contract.NodeSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodeSpace *NodeSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _NodeSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodeSpace *NodeSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodeSpace *NodeSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodeSpace.Contract.contract.Transact(opts, method, params...)
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceCaller) ActiveNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "activeNodeAddresses", arg0)
	return *ret0, err
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceSession) ActiveNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _NodeSpace.Contract.ActiveNodeAddresses(&_NodeSpace.CallOpts, arg0)
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) ActiveNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _NodeSpace.Contract.ActiveNodeAddresses(&_NodeSpace.CallOpts, arg0)
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceCaller) ActiveNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "activeNodeLocators", arg0)
	return *ret0, err
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceSession) ActiveNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _NodeSpace.Contract.ActiveNodeLocators(&_NodeSpace.CallOpts, arg0)
}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceCallerSession) ActiveNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _NodeSpace.Contract.ActiveNodeLocators(&_NodeSpace.CallOpts, arg0)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_NodeSpace *NodeSpaceCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "canNodePublish", candidate)
	return *ret0, err
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_NodeSpace *NodeSpaceSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _NodeSpace.Contract.CanNodePublish(&_NodeSpace.CallOpts, candidate)
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) constant returns(bool)
func (_NodeSpace *NodeSpaceCallerSession) CanNodePublish(candidate common.Address) (bool, error) {
	return _NodeSpace.Contract.CanNodePublish(&_NodeSpace.CallOpts, candidate)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_NodeSpace *NodeSpaceCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_NodeSpace *NodeSpaceSession) ContentSpace() (common.Address, error) {
	return _NodeSpace.Contract.ContentSpace(&_NodeSpace.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) ContentSpace() (common.Address, error) {
	return _NodeSpace.Contract.ContentSpace(&_NodeSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_NodeSpace *NodeSpaceCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_NodeSpace *NodeSpaceSession) Creator() (common.Address, error) {
	return _NodeSpace.Contract.Creator(&_NodeSpace.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) Creator() (common.Address, error) {
	return _NodeSpace.Contract.Creator(&_NodeSpace.CallOpts)
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceCaller) NumActiveNodes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "numActiveNodes")
	return *ret0, err
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceSession) NumActiveNodes() (*big.Int, error) {
	return _NodeSpace.Contract.NumActiveNodes(&_NodeSpace.CallOpts)
}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceCallerSession) NumActiveNodes() (*big.Int, error) {
	return _NodeSpace.Contract.NumActiveNodes(&_NodeSpace.CallOpts)
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceCaller) NumPendingNodes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "numPendingNodes")
	return *ret0, err
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceSession) NumPendingNodes() (*big.Int, error) {
	return _NodeSpace.Contract.NumPendingNodes(&_NodeSpace.CallOpts)
}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() constant returns(uint256)
func (_NodeSpace *NodeSpaceCallerSession) NumPendingNodes() (*big.Int, error) {
	return _NodeSpace.Contract.NumPendingNodes(&_NodeSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_NodeSpace *NodeSpaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_NodeSpace *NodeSpaceSession) Owner() (common.Address, error) {
	return _NodeSpace.Contract.Owner(&_NodeSpace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) Owner() (common.Address, error) {
	return _NodeSpace.Contract.Owner(&_NodeSpace.CallOpts)
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceCaller) PendingNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "pendingNodeAddresses", arg0)
	return *ret0, err
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceSession) PendingNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _NodeSpace.Contract.PendingNodeAddresses(&_NodeSpace.CallOpts, arg0)
}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) constant returns(address)
func (_NodeSpace *NodeSpaceCallerSession) PendingNodeAddresses(arg0 *big.Int) (common.Address, error) {
	return _NodeSpace.Contract.PendingNodeAddresses(&_NodeSpace.CallOpts, arg0)
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceCaller) PendingNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "pendingNodeLocators", arg0)
	return *ret0, err
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceSession) PendingNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _NodeSpace.Contract.PendingNodeLocators(&_NodeSpace.CallOpts, arg0)
}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) constant returns(bytes)
func (_NodeSpace *NodeSpaceCallerSession) PendingNodeLocators(arg0 *big.Int) ([]byte, error) {
	return _NodeSpace.Contract.PendingNodeLocators(&_NodeSpace.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_NodeSpace *NodeSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_NodeSpace *NodeSpaceSession) Version() ([32]byte, error) {
	return _NodeSpace.Contract.Version(&_NodeSpace.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_NodeSpace *NodeSpaceCallerSession) Version() ([32]byte, error) {
	return _NodeSpace.Contract.Version(&_NodeSpace.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_NodeSpace *NodeSpaceCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _NodeSpace.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_NodeSpace *NodeSpaceSession) VersionAPI() ([32]byte, error) {
	return _NodeSpace.Contract.VersionAPI(&_NodeSpace.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_NodeSpace *NodeSpaceCallerSession) VersionAPI() ([32]byte, error) {
	return _NodeSpace.Contract.VersionAPI(&_NodeSpace.CallOpts)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactor) AddNode(opts *bind.TransactOpts, _nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "addNode", _nodeAddr, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_NodeSpace *NodeSpaceSession) AddNode(_nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.Contract.AddNode(&_NodeSpace.TransactOpts, _nodeAddr, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactorSession) AddNode(_nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.Contract.AddNode(&_NodeSpace.TransactOpts, _nodeAddr, _locator)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactor) ApproveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "approveNode", _nodeAddr)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceSession) ApproveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.ApproveNode(&_NodeSpace.TransactOpts, _nodeAddr)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactorSession) ApproveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.ApproveNode(&_NodeSpace.TransactOpts, _nodeAddr)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_NodeSpace *NodeSpaceTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_NodeSpace *NodeSpaceSession) Kill() (*types.Transaction, error) {
	return _NodeSpace.Contract.Kill(&_NodeSpace.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_NodeSpace *NodeSpaceTransactorSession) Kill() (*types.Transaction, error) {
	return _NodeSpace.Contract.Kill(&_NodeSpace.TransactOpts)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactor) RemoveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "removeNode", _nodeAddr)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceSession) RemoveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.RemoveNode(&_NodeSpace.TransactOpts, _nodeAddr)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactorSession) RemoveNode(_nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.RemoveNode(&_NodeSpace.TransactOpts, _nodeAddr)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactor) SubmitNode(opts *bind.TransactOpts, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "submitNode", _locator)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_NodeSpace *NodeSpaceSession) SubmitNode(_locator []byte) (*types.Transaction, error) {
	return _NodeSpace.Contract.SubmitNode(&_NodeSpace.TransactOpts, _locator)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactorSession) SubmitNode(_locator []byte) (*types.Transaction, error) {
	return _NodeSpace.Contract.SubmitNode(&_NodeSpace.TransactOpts, _locator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_NodeSpace *NodeSpaceTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_NodeSpace *NodeSpaceSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.TransferCreatorship(&_NodeSpace.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_NodeSpace *NodeSpaceTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.TransferCreatorship(&_NodeSpace.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeSpace *NodeSpaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeSpace *NodeSpaceSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.TransferOwnership(&_NodeSpace.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeSpace *NodeSpaceTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NodeSpace.Contract.TransferOwnership(&_NodeSpace.TransactOpts, newOwner)
}

// NodeSpaceAddNodeIterator is returned from FilterAddNode and is used to iterate over the raw logs and unpacked data for AddNode events raised by the NodeSpace contract.
type NodeSpaceAddNodeIterator struct {
	Event *NodeSpaceAddNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceAddNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceAddNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceAddNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceAddNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceAddNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceAddNode represents a AddNode event raised by the NodeSpace contract.
type NodeSpaceAddNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddNode is a free log retrieval operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) FilterAddNode(opts *bind.FilterOpts) (*NodeSpaceAddNodeIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceAddNodeIterator{contract: _NodeSpace.contract, event: "AddNode", logs: logs, sub: sub}, nil
}

// WatchAddNode is a free log subscription operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) WatchAddNode(opts *bind.WatchOpts, sink chan<- *NodeSpaceAddNode) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceAddNode)
				if err := _NodeSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddNode is a log parse operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) ParseAddNode(log types.Log) (*NodeSpaceAddNode, error) {
	event := new(NodeSpaceAddNode)
	if err := _NodeSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeSpaceNodeApprovedIterator is returned from FilterNodeApproved and is used to iterate over the raw logs and unpacked data for NodeApproved events raised by the NodeSpace contract.
type NodeSpaceNodeApprovedIterator struct {
	Event *NodeSpaceNodeApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceNodeApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceNodeApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceNodeApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceNodeApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceNodeApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceNodeApproved represents a NodeApproved event raised by the NodeSpace contract.
type NodeSpaceNodeApproved struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeApproved is a free log retrieval operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) FilterNodeApproved(opts *bind.FilterOpts) (*NodeSpaceNodeApprovedIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceNodeApprovedIterator{contract: _NodeSpace.contract, event: "NodeApproved", logs: logs, sub: sub}, nil
}

// WatchNodeApproved is a free log subscription operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) WatchNodeApproved(opts *bind.WatchOpts, sink chan<- *NodeSpaceNodeApproved) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceNodeApproved)
				if err := _NodeSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeApproved is a log parse operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) ParseNodeApproved(log types.Log) (*NodeSpaceNodeApproved, error) {
	event := new(NodeSpaceNodeApproved)
	if err := _NodeSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeSpaceNodeSubmittedIterator is returned from FilterNodeSubmitted and is used to iterate over the raw logs and unpacked data for NodeSubmitted events raised by the NodeSpace contract.
type NodeSpaceNodeSubmittedIterator struct {
	Event *NodeSpaceNodeSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceNodeSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceNodeSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceNodeSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceNodeSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceNodeSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceNodeSubmitted represents a NodeSubmitted event raised by the NodeSpace contract.
type NodeSpaceNodeSubmitted struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeSubmitted is a free log retrieval operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) FilterNodeSubmitted(opts *bind.FilterOpts) (*NodeSpaceNodeSubmittedIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceNodeSubmittedIterator{contract: _NodeSpace.contract, event: "NodeSubmitted", logs: logs, sub: sub}, nil
}

// WatchNodeSubmitted is a free log subscription operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) WatchNodeSubmitted(opts *bind.WatchOpts, sink chan<- *NodeSpaceNodeSubmitted) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceNodeSubmitted)
				if err := _NodeSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeSubmitted is a log parse operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) ParseNodeSubmitted(log types.Log) (*NodeSpaceNodeSubmitted, error) {
	event := new(NodeSpaceNodeSubmitted)
	if err := _NodeSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NodeSpaceRemoveNodeIterator is returned from FilterRemoveNode and is used to iterate over the raw logs and unpacked data for RemoveNode events raised by the NodeSpace contract.
type NodeSpaceRemoveNodeIterator struct {
	Event *NodeSpaceRemoveNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceRemoveNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceRemoveNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceRemoveNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceRemoveNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceRemoveNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceRemoveNode represents a RemoveNode event raised by the NodeSpace contract.
type NodeSpaceRemoveNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoveNode is a free log retrieval operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) FilterRemoveNode(opts *bind.FilterOpts) (*NodeSpaceRemoveNodeIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceRemoveNodeIterator{contract: _NodeSpace.contract, event: "RemoveNode", logs: logs, sub: sub}, nil
}

// WatchRemoveNode is a free log subscription operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) WatchRemoveNode(opts *bind.WatchOpts, sink chan<- *NodeSpaceRemoveNode) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceRemoveNode)
				if err := _NodeSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveNode is a log parse operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) ParseRemoveNode(log types.Log) (*NodeSpaceRemoveNode, error) {
	event := new(NodeSpaceRemoveNode)
	if err := _NodeSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OwnableABI is the input ABI used to generate the binding from.
const OwnableABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// OwnableFuncSigs maps the 4-byte function signature to its string representation.
var OwnableFuncSigs = map[string]string{
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// OwnableBin is the compiled bytecode used for deploying new contracts.
var OwnableBin = "0x60806040527f4f776e61626c6532303230303231303131303130304d4c0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060015560028054600160a060020a0319908116329081179092556003805490911690911790556102eb8061007e6000396000f30060806040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461008f57806341c0e1b5146100c057806354fd4d50146100d55780635f4fcae1146100fc5780636d2e4b1b146101115780638da5cb5b14610132578063af570c0414610147578063f2fde38b1461015c575b005b34801561009b57600080fd5b506100a461017d565b60408051600160a060020a039092168252519081900360200190f35b3480156100cc57600080fd5b5061008d61018c565b3480156100e157600080fd5b506100ea6101c8565b60408051918252519081900360200190f35b34801561010857600080fd5b506100ea6101ce565b34801561011d57600080fd5b5061008d600160a060020a03600435166101d4565b34801561013e57600080fd5b506100a461022f565b34801561015357600080fd5b506100a461023e565b34801561016857600080fd5b5061008d600160a060020a036004351661024d565b600254600160a060020a031681565b600354600160a060020a03163214806101af5750600354600160a060020a031633145b15156101ba57600080fd5b600354600160a060020a0316ff5b60005481565b60015481565b600254600160a060020a031632146101eb57600080fd5b600160a060020a038116151561020057600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a03163214806102705750600354600160a060020a031633145b151561027b57600080fd5b600160a060020a038116151561029057600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582021576c08bcb4004a861b52bb6bf459d5242f7a73c903ad106c2255623518336f0029"

// DeployOwnable deploys a new Ethereum contract, binding an instance of Ownable to it.
func DeployOwnable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Ownable, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OwnableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// Ownable is an auto generated Go binding around an Ethereum contract.
type Ownable struct {
	OwnableCaller     // Read-only binding to the contract
	OwnableTransactor // Write-only binding to the contract
	OwnableFilterer   // Log filterer for contract events
}

// OwnableCaller is an auto generated read-only Go binding around an Ethereum contract.
type OwnableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OwnableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OwnableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OwnableSession struct {
	Contract     *Ownable          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OwnableCallerSession struct {
	Contract *OwnableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OwnableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OwnableTransactorSession struct {
	Contract     *OwnableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OwnableRaw is an auto generated low-level Go binding around an Ethereum contract.
type OwnableRaw struct {
	Contract *Ownable // Generic contract binding to access the raw methods on
}

// OwnableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OwnableCallerRaw struct {
	Contract *OwnableCaller // Generic read-only contract binding to access the raw methods on
}

// OwnableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OwnableTransactorRaw struct {
	Contract *OwnableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOwnable creates a new instance of Ownable, bound to a specific deployed contract.
func NewOwnable(address common.Address, backend bind.ContractBackend) (*Ownable, error) {
	contract, err := bindOwnable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// NewOwnableCaller creates a new read-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableCaller(address common.Address, caller bind.ContractCaller) (*OwnableCaller, error) {
	contract, err := bindOwnable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableCaller{contract: contract}, nil
}

// NewOwnableTransactor creates a new write-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnableTransactor, error) {
	contract, err := bindOwnable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableTransactor{contract: contract}, nil
}

// NewOwnableFilterer creates a new log filterer instance of Ownable, bound to a specific deployed contract.
func NewOwnableFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnableFilterer, error) {
	contract, err := bindOwnable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnableFilterer{contract: contract}, nil
}

// bindOwnable binds a generic wrapper to an already deployed contract.
func bindOwnable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.OwnableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Ownable *OwnableCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Ownable *OwnableSession) ContentSpace() (common.Address, error) {
	return _Ownable.Contract.ContentSpace(&_Ownable.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_Ownable *OwnableCallerSession) ContentSpace() (common.Address, error) {
	return _Ownable.Contract.ContentSpace(&_Ownable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Ownable *OwnableCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Ownable *OwnableSession) Creator() (common.Address, error) {
	return _Ownable.Contract.Creator(&_Ownable.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_Ownable *OwnableCallerSession) Creator() (common.Address, error) {
	return _Ownable.Contract.Creator(&_Ownable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Ownable *OwnableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Ownable *OwnableSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Ownable *OwnableCallerSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Ownable *OwnableCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Ownable *OwnableSession) Version() ([32]byte, error) {
	return _Ownable.Contract.Version(&_Ownable.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_Ownable *OwnableCallerSession) Version() ([32]byte, error) {
	return _Ownable.Contract.Version(&_Ownable.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Ownable *OwnableCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Ownable *OwnableSession) VersionAPI() ([32]byte, error) {
	return _Ownable.Contract.VersionAPI(&_Ownable.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_Ownable *OwnableCallerSession) VersionAPI() ([32]byte, error) {
	return _Ownable.Contract.VersionAPI(&_Ownable.CallOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Ownable *OwnableTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Ownable *OwnableSession) Kill() (*types.Transaction, error) {
	return _Ownable.Contract.Kill(&_Ownable.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Ownable *OwnableTransactorSession) Kill() (*types.Transaction, error) {
	return _Ownable.Contract.Kill(&_Ownable.TransactOpts)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Ownable *OwnableTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Ownable *OwnableSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferCreatorship(&_Ownable.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Ownable *OwnableTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferCreatorship(&_Ownable.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// PrecompileABI is the input ABI used to generate the binding from.
const PrecompileABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"KMS\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEN\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// PrecompileFuncSigs maps the 4-byte function signature to its string representation.
var PrecompileFuncSigs = map[string]string{
	"a6ca541e": "KMS()",
	"ee2f3a05": "TEN()",
}

// PrecompileBin is the compiled bytecode used for deploying new contracts.
var PrecompileBin = "0x60b861002f600b82828239805160001a6073146000811461001f57610021565bfe5b5030600052607381538281f3007300000000000000000000000000000000000000003014608060405260043610605f5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a6ca541e81146064578063ee2f3a0514607c575b600080fd5b606a6082565b60408051918252519081900360200190f35b606a6087565b600b81565b600e815600a165627a7a7230582056908158c96243360b79f2325b78c2b5be699ede6724a0d1ce1e0bd46023d3fb0029"

// DeployPrecompile deploys a new Ethereum contract, binding an instance of Precompile to it.
func DeployPrecompile(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Precompile, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompileABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PrecompileBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Precompile{PrecompileCaller: PrecompileCaller{contract: contract}, PrecompileTransactor: PrecompileTransactor{contract: contract}, PrecompileFilterer: PrecompileFilterer{contract: contract}}, nil
}

// Precompile is an auto generated Go binding around an Ethereum contract.
type Precompile struct {
	PrecompileCaller     // Read-only binding to the contract
	PrecompileTransactor // Write-only binding to the contract
	PrecompileFilterer   // Log filterer for contract events
}

// PrecompileCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrecompileCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompileTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrecompileTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompileFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrecompileFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompileSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrecompileSession struct {
	Contract     *Precompile       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrecompileCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrecompileCallerSession struct {
	Contract *PrecompileCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// PrecompileTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrecompileTransactorSession struct {
	Contract     *PrecompileTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// PrecompileRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrecompileRaw struct {
	Contract *Precompile // Generic contract binding to access the raw methods on
}

// PrecompileCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrecompileCallerRaw struct {
	Contract *PrecompileCaller // Generic read-only contract binding to access the raw methods on
}

// PrecompileTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrecompileTransactorRaw struct {
	Contract *PrecompileTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrecompile creates a new instance of Precompile, bound to a specific deployed contract.
func NewPrecompile(address common.Address, backend bind.ContractBackend) (*Precompile, error) {
	contract, err := bindPrecompile(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Precompile{PrecompileCaller: PrecompileCaller{contract: contract}, PrecompileTransactor: PrecompileTransactor{contract: contract}, PrecompileFilterer: PrecompileFilterer{contract: contract}}, nil
}

// NewPrecompileCaller creates a new read-only instance of Precompile, bound to a specific deployed contract.
func NewPrecompileCaller(address common.Address, caller bind.ContractCaller) (*PrecompileCaller, error) {
	contract, err := bindPrecompile(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompileCaller{contract: contract}, nil
}

// NewPrecompileTransactor creates a new write-only instance of Precompile, bound to a specific deployed contract.
func NewPrecompileTransactor(address common.Address, transactor bind.ContractTransactor) (*PrecompileTransactor, error) {
	contract, err := bindPrecompile(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompileTransactor{contract: contract}, nil
}

// NewPrecompileFilterer creates a new log filterer instance of Precompile, bound to a specific deployed contract.
func NewPrecompileFilterer(address common.Address, filterer bind.ContractFilterer) (*PrecompileFilterer, error) {
	contract, err := bindPrecompile(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrecompileFilterer{contract: contract}, nil
}

// bindPrecompile binds a generic wrapper to an already deployed contract.
func bindPrecompile(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrecompileABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompile *PrecompileRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Precompile.Contract.PrecompileCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompile *PrecompileRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompile.Contract.PrecompileTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompile *PrecompileRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompile.Contract.PrecompileTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Precompile *PrecompileCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Precompile.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Precompile *PrecompileTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Precompile.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Precompile *PrecompileTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Precompile.Contract.contract.Transact(opts, method, params...)
}

// KMS is a free data retrieval call binding the contract method 0xa6ca541e.
//
// Solidity: function KMS() constant returns(int256)
func (_Precompile *PrecompileCaller) KMS(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Precompile.contract.Call(opts, out, "KMS")
	return *ret0, err
}

// KMS is a free data retrieval call binding the contract method 0xa6ca541e.
//
// Solidity: function KMS() constant returns(int256)
func (_Precompile *PrecompileSession) KMS() (*big.Int, error) {
	return _Precompile.Contract.KMS(&_Precompile.CallOpts)
}

// KMS is a free data retrieval call binding the contract method 0xa6ca541e.
//
// Solidity: function KMS() constant returns(int256)
func (_Precompile *PrecompileCallerSession) KMS() (*big.Int, error) {
	return _Precompile.Contract.KMS(&_Precompile.CallOpts)
}

// TEN is a free data retrieval call binding the contract method 0xee2f3a05.
//
// Solidity: function TEN() constant returns(int256)
func (_Precompile *PrecompileCaller) TEN(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Precompile.contract.Call(opts, out, "TEN")
	return *ret0, err
}

// TEN is a free data retrieval call binding the contract method 0xee2f3a05.
//
// Solidity: function TEN() constant returns(int256)
func (_Precompile *PrecompileSession) TEN() (*big.Int, error) {
	return _Precompile.Contract.TEN(&_Precompile.CallOpts)
}

// TEN is a free data retrieval call binding the contract method 0xee2f3a05.
//
// Solidity: function TEN() constant returns(int256)
func (_Precompile *PrecompileCallerSession) TEN() (*big.Int, error) {
	return _Precompile.Contract.TEN(&_Precompile.CallOpts)
}

// TenantFuncsBaseABI is the input ABI used to generate the binding from.
const TenantFuncsBaseABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBitInternal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_encToken\",\"type\":\"bytes\"}],\"name\":\"checkAndSet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_encAuthToken\",\"type\":\"bytes\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_encToken\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"applyGroups\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TenantTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numGroups\",\"type\":\"uint256\"}],\"name\":\"ApplyGroups\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint32\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ord\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"prev\",\"type\":\"bool\"}],\"name\":\"BitSetAndGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"}],\"name\":\"WordGroupDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]"

// TenantFuncsBaseFuncSigs maps the 4-byte function signature to its string representation.
var TenantFuncsBaseFuncSigs = map[string]string{
	"d2771dee": "applyGroups(bytes,uint256,address)",
	"92d4dd34": "checkAndSet(bytes)",
	"af570c04": "contentSpace()",
	"02d05d3f": "creator()",
	"e57097c9": "deleteGroup(bytes32)",
	"30f846a2": "getBit(bytes32,uint8)",
	"e1954b61": "getCounter(bytes32,uint8)",
	"ac55c906": "getMeta(bytes)",
	"7558cbf0": "incrementCounter(bytes32,uint8)",
	"24d7806c": "isAdmin(address)",
	"41c0e1b5": "kill()",
	"8da5cb5b": "owner()",
	"e542b7cb": "putMeta(bytes,bytes)",
	"24d7c18d": "setAndGetBit(bytes32,uint8)",
	"33f12cf4": "setAndGetBitInternal(bytes32,uint8)",
	"6d2e4b1b": "transferCreatorship(address)",
	"f2fde38b": "transferOwnership(address)",
	"c2153d2c": "transferToken(bytes,uint256,address)",
	"54fd4d50": "version()",
	"5f4fcae1": "versionAPI()",
}

// TenantFuncsBaseBin is the compiled bytecode used for deploying new contracts.
var TenantFuncsBaseBin = ""

// DeployTenantFuncsBase deploys a new Ethereum contract, binding an instance of TenantFuncsBase to it.
func DeployTenantFuncsBase(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TenantFuncsBase, error) {
	parsed, err := abi.JSON(strings.NewReader(TenantFuncsBaseABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TenantFuncsBaseBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TenantFuncsBase{TenantFuncsBaseCaller: TenantFuncsBaseCaller{contract: contract}, TenantFuncsBaseTransactor: TenantFuncsBaseTransactor{contract: contract}, TenantFuncsBaseFilterer: TenantFuncsBaseFilterer{contract: contract}}, nil
}

// TenantFuncsBase is an auto generated Go binding around an Ethereum contract.
type TenantFuncsBase struct {
	TenantFuncsBaseCaller     // Read-only binding to the contract
	TenantFuncsBaseTransactor // Write-only binding to the contract
	TenantFuncsBaseFilterer   // Log filterer for contract events
}

// TenantFuncsBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type TenantFuncsBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TenantFuncsBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TenantFuncsBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TenantFuncsBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TenantFuncsBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TenantFuncsBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TenantFuncsBaseSession struct {
	Contract     *TenantFuncsBase  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TenantFuncsBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TenantFuncsBaseCallerSession struct {
	Contract *TenantFuncsBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// TenantFuncsBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TenantFuncsBaseTransactorSession struct {
	Contract     *TenantFuncsBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// TenantFuncsBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type TenantFuncsBaseRaw struct {
	Contract *TenantFuncsBase // Generic contract binding to access the raw methods on
}

// TenantFuncsBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TenantFuncsBaseCallerRaw struct {
	Contract *TenantFuncsBaseCaller // Generic read-only contract binding to access the raw methods on
}

// TenantFuncsBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TenantFuncsBaseTransactorRaw struct {
	Contract *TenantFuncsBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTenantFuncsBase creates a new instance of TenantFuncsBase, bound to a specific deployed contract.
func NewTenantFuncsBase(address common.Address, backend bind.ContractBackend) (*TenantFuncsBase, error) {
	contract, err := bindTenantFuncsBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBase{TenantFuncsBaseCaller: TenantFuncsBaseCaller{contract: contract}, TenantFuncsBaseTransactor: TenantFuncsBaseTransactor{contract: contract}, TenantFuncsBaseFilterer: TenantFuncsBaseFilterer{contract: contract}}, nil
}

// NewTenantFuncsBaseCaller creates a new read-only instance of TenantFuncsBase, bound to a specific deployed contract.
func NewTenantFuncsBaseCaller(address common.Address, caller bind.ContractCaller) (*TenantFuncsBaseCaller, error) {
	contract, err := bindTenantFuncsBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseCaller{contract: contract}, nil
}

// NewTenantFuncsBaseTransactor creates a new write-only instance of TenantFuncsBase, bound to a specific deployed contract.
func NewTenantFuncsBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*TenantFuncsBaseTransactor, error) {
	contract, err := bindTenantFuncsBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseTransactor{contract: contract}, nil
}

// NewTenantFuncsBaseFilterer creates a new log filterer instance of TenantFuncsBase, bound to a specific deployed contract.
func NewTenantFuncsBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*TenantFuncsBaseFilterer, error) {
	contract, err := bindTenantFuncsBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseFilterer{contract: contract}, nil
}

// bindTenantFuncsBase binds a generic wrapper to an already deployed contract.
func bindTenantFuncsBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TenantFuncsBaseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TenantFuncsBase *TenantFuncsBaseRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TenantFuncsBase.Contract.TenantFuncsBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TenantFuncsBase *TenantFuncsBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TenantFuncsBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TenantFuncsBase *TenantFuncsBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TenantFuncsBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TenantFuncsBase *TenantFuncsBaseCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TenantFuncsBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TenantFuncsBase *TenantFuncsBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TenantFuncsBase *TenantFuncsBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.contract.Transact(opts, method, params...)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "contentSpace")
	return *ret0, err
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseSession) ContentSpace() (common.Address, error) {
	return _TenantFuncsBase.Contract.ContentSpace(&_TenantFuncsBase.CallOpts)
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) ContentSpace() (common.Address, error) {
	return _TenantFuncsBase.Contract.ContentSpace(&_TenantFuncsBase.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "creator")
	return *ret0, err
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseSession) Creator() (common.Address, error) {
	return _TenantFuncsBase.Contract.Creator(&_TenantFuncsBase.CallOpts)
}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) Creator() (common.Address, error) {
	return _TenantFuncsBase.Contract.Creator(&_TenantFuncsBase.CallOpts)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseCaller) GetBit(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "getBit", _ident, _ord)
	return *ret0, err
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _TenantFuncsBase.Contract.GetBit(&_TenantFuncsBase.CallOpts, _ident, _ord)
}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) constant returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) GetBit(_ident [32]byte, _ord uint8) (bool, error) {
	return _TenantFuncsBase.Contract.GetBit(&_TenantFuncsBase.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_TenantFuncsBase *TenantFuncsBaseCaller) GetCounter(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "getCounter", _ident, _ord)
	return *ret0, err
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_TenantFuncsBase *TenantFuncsBaseSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _TenantFuncsBase.Contract.GetCounter(&_TenantFuncsBase.CallOpts, _ident, _ord)
}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) constant returns(uint32)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) GetCounter(_ident [32]byte, _ord uint8) (uint32, error) {
	return _TenantFuncsBase.Contract.GetCounter(&_TenantFuncsBase.CallOpts, _ident, _ord)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_TenantFuncsBase *TenantFuncsBaseCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "getMeta", key)
	return *ret0, err
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_TenantFuncsBase *TenantFuncsBaseSession) GetMeta(key []byte) ([]byte, error) {
	return _TenantFuncsBase.Contract.GetMeta(&_TenantFuncsBase.CallOpts, key)
}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) constant returns(bytes)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) GetMeta(key []byte) ([]byte, error) {
	return _TenantFuncsBase.Contract.GetMeta(&_TenantFuncsBase.CallOpts, key)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "isAdmin", _candidate)
	return *ret0, err
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _TenantFuncsBase.Contract.IsAdmin(&_TenantFuncsBase.CallOpts, _candidate)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) constant returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) IsAdmin(_candidate common.Address) (bool, error) {
	return _TenantFuncsBase.Contract.IsAdmin(&_TenantFuncsBase.CallOpts, _candidate)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseSession) Owner() (common.Address, error) {
	return _TenantFuncsBase.Contract.Owner(&_TenantFuncsBase.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) Owner() (common.Address, error) {
	return _TenantFuncsBase.Contract.Owner(&_TenantFuncsBase.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_TenantFuncsBase *TenantFuncsBaseCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_TenantFuncsBase *TenantFuncsBaseSession) Version() ([32]byte, error) {
	return _TenantFuncsBase.Contract.Version(&_TenantFuncsBase.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) Version() ([32]byte, error) {
	return _TenantFuncsBase.Contract.Version(&_TenantFuncsBase.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_TenantFuncsBase *TenantFuncsBaseCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _TenantFuncsBase.contract.Call(opts, out, "versionAPI")
	return *ret0, err
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_TenantFuncsBase *TenantFuncsBaseSession) VersionAPI() ([32]byte, error) {
	return _TenantFuncsBase.Contract.VersionAPI(&_TenantFuncsBase.CallOpts)
}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() constant returns(bytes32)
func (_TenantFuncsBase *TenantFuncsBaseCallerSession) VersionAPI() ([32]byte, error) {
	return _TenantFuncsBase.Contract.VersionAPI(&_TenantFuncsBase.CallOpts)
}

// ApplyGroups is a paid mutator transaction binding the contract method 0xd2771dee.
//
// Solidity: function applyGroups(bytes _encToken, uint256 , address _to) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) ApplyGroups(opts *bind.TransactOpts, _encToken []byte, arg1 *big.Int, _to common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "applyGroups", _encToken, arg1, _to)
}

// ApplyGroups is a paid mutator transaction binding the contract method 0xd2771dee.
//
// Solidity: function applyGroups(bytes _encToken, uint256 , address _to) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) ApplyGroups(_encToken []byte, arg1 *big.Int, _to common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.ApplyGroups(&_TenantFuncsBase.TransactOpts, _encToken, arg1, _to)
}

// ApplyGroups is a paid mutator transaction binding the contract method 0xd2771dee.
//
// Solidity: function applyGroups(bytes _encToken, uint256 , address _to) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) ApplyGroups(_encToken []byte, arg1 *big.Int, _to common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.ApplyGroups(&_TenantFuncsBase.TransactOpts, _encToken, arg1, _to)
}

// CheckAndSet is a paid mutator transaction binding the contract method 0x92d4dd34.
//
// Solidity: function checkAndSet(bytes _encToken) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) CheckAndSet(opts *bind.TransactOpts, _encToken []byte) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "checkAndSet", _encToken)
}

// CheckAndSet is a paid mutator transaction binding the contract method 0x92d4dd34.
//
// Solidity: function checkAndSet(bytes _encToken) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) CheckAndSet(_encToken []byte) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.CheckAndSet(&_TenantFuncsBase.TransactOpts, _encToken)
}

// CheckAndSet is a paid mutator transaction binding the contract method 0x92d4dd34.
//
// Solidity: function checkAndSet(bytes _encToken) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) CheckAndSet(_encToken []byte) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.CheckAndSet(&_TenantFuncsBase.TransactOpts, _encToken)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) DeleteGroup(opts *bind.TransactOpts, _ident [32]byte) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "deleteGroup", _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.DeleteGroup(&_TenantFuncsBase.TransactOpts, _ident)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) DeleteGroup(_ident [32]byte) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.DeleteGroup(&_TenantFuncsBase.TransactOpts, _ident)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) IncrementCounter(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "incrementCounter", _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.IncrementCounter(&_TenantFuncsBase.TransactOpts, _ident, _ord)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) IncrementCounter(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.IncrementCounter(&_TenantFuncsBase.TransactOpts, _ident, _ord)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "kill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) Kill() (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.Kill(&_TenantFuncsBase.TransactOpts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) Kill() (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.Kill(&_TenantFuncsBase.TransactOpts)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "putMeta", key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.PutMeta(&_TenantFuncsBase.TransactOpts, key, value)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) PutMeta(key []byte, value []byte) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.PutMeta(&_TenantFuncsBase.TransactOpts, key, value)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseTransactor) SetAndGetBit(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "setAndGetBit", _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.SetAndGetBit(&_TenantFuncsBase.TransactOpts, _ident, _ord)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) SetAndGetBit(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.SetAndGetBit(&_TenantFuncsBase.TransactOpts, _ident, _ord)
}

// SetAndGetBitInternal is a paid mutator transaction binding the contract method 0x33f12cf4.
//
// Solidity: function setAndGetBitInternal(bytes32 _ident, uint8 _ord) returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseTransactor) SetAndGetBitInternal(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "setAndGetBitInternal", _ident, _ord)
}

// SetAndGetBitInternal is a paid mutator transaction binding the contract method 0x33f12cf4.
//
// Solidity: function setAndGetBitInternal(bytes32 _ident, uint8 _ord) returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseSession) SetAndGetBitInternal(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.SetAndGetBitInternal(&_TenantFuncsBase.TransactOpts, _ident, _ord)
}

// SetAndGetBitInternal is a paid mutator transaction binding the contract method 0x33f12cf4.
//
// Solidity: function setAndGetBitInternal(bytes32 _ident, uint8 _ord) returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) SetAndGetBitInternal(_ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.SetAndGetBitInternal(&_TenantFuncsBase.TransactOpts, _ident, _ord)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TransferCreatorship(&_TenantFuncsBase.TransactOpts, newCreator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) TransferCreatorship(newCreator common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TransferCreatorship(&_TenantFuncsBase.TransactOpts, newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TransferOwnership(&_TenantFuncsBase.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TransferOwnership(&_TenantFuncsBase.TransactOpts, newOwner)
}

// TransferToken is a paid mutator transaction binding the contract method 0xc2153d2c.
//
// Solidity: function transferToken(bytes _encAuthToken, uint256 _amount, address _to) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) TransferToken(opts *bind.TransactOpts, _encAuthToken []byte, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "transferToken", _encAuthToken, _amount, _to)
}

// TransferToken is a paid mutator transaction binding the contract method 0xc2153d2c.
//
// Solidity: function transferToken(bytes _encAuthToken, uint256 _amount, address _to) returns()
func (_TenantFuncsBase *TenantFuncsBaseSession) TransferToken(_encAuthToken []byte, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TransferToken(&_TenantFuncsBase.TransactOpts, _encAuthToken, _amount, _to)
}

// TransferToken is a paid mutator transaction binding the contract method 0xc2153d2c.
//
// Solidity: function transferToken(bytes _encAuthToken, uint256 _amount, address _to) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactorSession) TransferToken(_encAuthToken []byte, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.Contract.TransferToken(&_TenantFuncsBase.TransactOpts, _encAuthToken, _amount, _to)
}

// TenantFuncsBaseApplyGroupsIterator is returned from FilterApplyGroups and is used to iterate over the raw logs and unpacked data for ApplyGroups events raised by the TenantFuncsBase contract.
type TenantFuncsBaseApplyGroupsIterator struct {
	Event *TenantFuncsBaseApplyGroups // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseApplyGroupsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseApplyGroups)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseApplyGroups)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseApplyGroupsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseApplyGroupsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseApplyGroups represents a ApplyGroups event raised by the TenantFuncsBase contract.
type TenantFuncsBaseApplyGroups struct {
	To        common.Address
	NumGroups *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterApplyGroups is a free log retrieval operation binding the contract event 0xaf51ac2c635b218e7e5205267ea152c8c9f51fc74f818c332dcf630e82a3dc3f.
//
// Solidity: event ApplyGroups(address to, uint256 numGroups)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterApplyGroups(opts *bind.FilterOpts) (*TenantFuncsBaseApplyGroupsIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "ApplyGroups")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseApplyGroupsIterator{contract: _TenantFuncsBase.contract, event: "ApplyGroups", logs: logs, sub: sub}, nil
}

// WatchApplyGroups is a free log subscription operation binding the contract event 0xaf51ac2c635b218e7e5205267ea152c8c9f51fc74f818c332dcf630e82a3dc3f.
//
// Solidity: event ApplyGroups(address to, uint256 numGroups)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchApplyGroups(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseApplyGroups) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "ApplyGroups")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseApplyGroups)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "ApplyGroups", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApplyGroups is a log parse operation binding the contract event 0xaf51ac2c635b218e7e5205267ea152c8c9f51fc74f818c332dcf630e82a3dc3f.
//
// Solidity: event ApplyGroups(address to, uint256 numGroups)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseApplyGroups(log types.Log) (*TenantFuncsBaseApplyGroups, error) {
	event := new(TenantFuncsBaseApplyGroups)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "ApplyGroups", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TenantFuncsBaseBitSetAndGetIterator is returned from FilterBitSetAndGet and is used to iterate over the raw logs and unpacked data for BitSetAndGet events raised by the TenantFuncsBase contract.
type TenantFuncsBaseBitSetAndGetIterator struct {
	Event *TenantFuncsBaseBitSetAndGet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseBitSetAndGetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseBitSetAndGet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseBitSetAndGet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseBitSetAndGetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseBitSetAndGetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseBitSetAndGet represents a BitSetAndGet event raised by the TenantFuncsBase contract.
type TenantFuncsBaseBitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBitSetAndGet is a free log retrieval operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterBitSetAndGet(opts *bind.FilterOpts) (*TenantFuncsBaseBitSetAndGetIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseBitSetAndGetIterator{contract: _TenantFuncsBase.contract, event: "BitSetAndGet", logs: logs, sub: sub}, nil
}

// WatchBitSetAndGet is a free log subscription operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchBitSetAndGet(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseBitSetAndGet) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseBitSetAndGet)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitSetAndGet is a log parse operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseBitSetAndGet(log types.Log) (*TenantFuncsBaseBitSetAndGet, error) {
	event := new(TenantFuncsBaseBitSetAndGet)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TenantFuncsBaseCounterIncrementedIterator is returned from FilterCounterIncremented and is used to iterate over the raw logs and unpacked data for CounterIncremented events raised by the TenantFuncsBase contract.
type TenantFuncsBaseCounterIncrementedIterator struct {
	Event *TenantFuncsBaseCounterIncremented // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseCounterIncrementedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseCounterIncremented)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseCounterIncremented)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseCounterIncrementedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseCounterIncrementedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseCounterIncremented represents a CounterIncremented event raised by the TenantFuncsBase contract.
type TenantFuncsBaseCounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterIncremented is a free log retrieval operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterCounterIncremented(opts *bind.FilterOpts) (*TenantFuncsBaseCounterIncrementedIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseCounterIncrementedIterator{contract: _TenantFuncsBase.contract, event: "CounterIncremented", logs: logs, sub: sub}, nil
}

// WatchCounterIncremented is a free log subscription operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchCounterIncremented(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseCounterIncremented) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseCounterIncremented)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterIncremented is a log parse operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseCounterIncremented(log types.Log) (*TenantFuncsBaseCounterIncremented, error) {
	event := new(TenantFuncsBaseCounterIncremented)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TenantFuncsBaseObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the TenantFuncsBase contract.
type TenantFuncsBaseObjectMetaChangedIterator struct {
	Event *TenantFuncsBaseObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseObjectMetaChanged represents a ObjectMetaChanged event raised by the TenantFuncsBase contract.
type TenantFuncsBaseObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*TenantFuncsBaseObjectMetaChangedIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseObjectMetaChangedIterator{contract: _TenantFuncsBase.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseObjectMetaChanged)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseObjectMetaChanged(log types.Log) (*TenantFuncsBaseObjectMetaChanged, error) {
	event := new(TenantFuncsBaseObjectMetaChanged)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TenantFuncsBaseTenantTransferIterator is returned from FilterTenantTransfer and is used to iterate over the raw logs and unpacked data for TenantTransfer events raised by the TenantFuncsBase contract.
type TenantFuncsBaseTenantTransferIterator struct {
	Event *TenantFuncsBaseTenantTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseTenantTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseTenantTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseTenantTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseTenantTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseTenantTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseTenantTransfer represents a TenantTransfer event raised by the TenantFuncsBase contract.
type TenantFuncsBaseTenantTransfer struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTenantTransfer is a free log retrieval operation binding the contract event 0x59d13df91c02dfa098820027bd861986b2712e8fa2e7e431fea189243656aebd.
//
// Solidity: event TenantTransfer(address to, uint256 amount)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterTenantTransfer(opts *bind.FilterOpts) (*TenantFuncsBaseTenantTransferIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "TenantTransfer")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseTenantTransferIterator{contract: _TenantFuncsBase.contract, event: "TenantTransfer", logs: logs, sub: sub}, nil
}

// WatchTenantTransfer is a free log subscription operation binding the contract event 0x59d13df91c02dfa098820027bd861986b2712e8fa2e7e431fea189243656aebd.
//
// Solidity: event TenantTransfer(address to, uint256 amount)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchTenantTransfer(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseTenantTransfer) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "TenantTransfer")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseTenantTransfer)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "TenantTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTenantTransfer is a log parse operation binding the contract event 0x59d13df91c02dfa098820027bd861986b2712e8fa2e7e431fea189243656aebd.
//
// Solidity: event TenantTransfer(address to, uint256 amount)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseTenantTransfer(log types.Log) (*TenantFuncsBaseTenantTransfer, error) {
	event := new(TenantFuncsBaseTenantTransfer)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "TenantTransfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TenantFuncsBaseWordGroupDeletedIterator is returned from FilterWordGroupDeleted and is used to iterate over the raw logs and unpacked data for WordGroupDeleted events raised by the TenantFuncsBase contract.
type TenantFuncsBaseWordGroupDeletedIterator struct {
	Event *TenantFuncsBaseWordGroupDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseWordGroupDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseWordGroupDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseWordGroupDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseWordGroupDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseWordGroupDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseWordGroupDeleted represents a WordGroupDeleted event raised by the TenantFuncsBase contract.
type TenantFuncsBaseWordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWordGroupDeleted is a free log retrieval operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterWordGroupDeleted(opts *bind.FilterOpts) (*TenantFuncsBaseWordGroupDeletedIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseWordGroupDeletedIterator{contract: _TenantFuncsBase.contract, event: "WordGroupDeleted", logs: logs, sub: sub}, nil
}

// WatchWordGroupDeleted is a free log subscription operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchWordGroupDeleted(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseWordGroupDeleted) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseWordGroupDeleted)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWordGroupDeleted is a log parse operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseWordGroupDeleted(log types.Log) (*TenantFuncsBaseWordGroupDeleted, error) {
	event := new(TenantFuncsBaseWordGroupDeleted)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TransactableABI is the input ABI used to generate the binding from.
const TransactableABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_guarantor\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// TransactableFuncSigs maps the 4-byte function signature to its string representation.
var TransactableFuncSigs = map[string]string{
	"508ad278": "execute(address,uint8,bytes32,bytes32,address,uint256,uint256)",
	"f50b2efe": "validateTimestamp(uint256)",
	"763d5ee6": "validateTransaction(uint8,bytes32,bytes32,address,uint256,uint256)",
}

// Transactable is an auto generated Go binding around an Ethereum contract.
type Transactable struct {
	TransactableCaller     // Read-only binding to the contract
	TransactableTransactor // Write-only binding to the contract
	TransactableFilterer   // Log filterer for contract events
}

// TransactableCaller is an auto generated read-only Go binding around an Ethereum contract.
type TransactableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransactableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TransactableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransactableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TransactableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransactableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TransactableSession struct {
	Contract     *Transactable     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TransactableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TransactableCallerSession struct {
	Contract *TransactableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// TransactableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TransactableTransactorSession struct {
	Contract     *TransactableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TransactableRaw is an auto generated low-level Go binding around an Ethereum contract.
type TransactableRaw struct {
	Contract *Transactable // Generic contract binding to access the raw methods on
}

// TransactableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TransactableCallerRaw struct {
	Contract *TransactableCaller // Generic read-only contract binding to access the raw methods on
}

// TransactableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TransactableTransactorRaw struct {
	Contract *TransactableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTransactable creates a new instance of Transactable, bound to a specific deployed contract.
func NewTransactable(address common.Address, backend bind.ContractBackend) (*Transactable, error) {
	contract, err := bindTransactable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Transactable{TransactableCaller: TransactableCaller{contract: contract}, TransactableTransactor: TransactableTransactor{contract: contract}, TransactableFilterer: TransactableFilterer{contract: contract}}, nil
}

// NewTransactableCaller creates a new read-only instance of Transactable, bound to a specific deployed contract.
func NewTransactableCaller(address common.Address, caller bind.ContractCaller) (*TransactableCaller, error) {
	contract, err := bindTransactable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TransactableCaller{contract: contract}, nil
}

// NewTransactableTransactor creates a new write-only instance of Transactable, bound to a specific deployed contract.
func NewTransactableTransactor(address common.Address, transactor bind.ContractTransactor) (*TransactableTransactor, error) {
	contract, err := bindTransactable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TransactableTransactor{contract: contract}, nil
}

// NewTransactableFilterer creates a new log filterer instance of Transactable, bound to a specific deployed contract.
func NewTransactableFilterer(address common.Address, filterer bind.ContractFilterer) (*TransactableFilterer, error) {
	contract, err := bindTransactable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TransactableFilterer{contract: contract}, nil
}

// bindTransactable binds a generic wrapper to an already deployed contract.
func bindTransactable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TransactableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transactable *TransactableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Transactable.Contract.TransactableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transactable *TransactableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transactable.Contract.TransactableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transactable *TransactableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transactable.Contract.TransactableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transactable *TransactableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Transactable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transactable *TransactableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transactable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transactable *TransactableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transactable.Contract.contract.Transact(opts, method, params...)
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool, uint256)
func (_Transactable *TransactableCaller) ValidateTimestamp(opts *bind.CallOpts, _ts *big.Int) (bool, *big.Int, error) {
	var (
		ret0 = new(bool)
		ret1 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _Transactable.contract.Call(opts, out, "validateTimestamp", _ts)
	return *ret0, *ret1, err
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool, uint256)
func (_Transactable *TransactableSession) ValidateTimestamp(_ts *big.Int) (bool, *big.Int, error) {
	return _Transactable.Contract.ValidateTimestamp(&_Transactable.CallOpts, _ts)
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) constant returns(bool, uint256)
func (_Transactable *TransactableCallerSession) ValidateTimestamp(_ts *big.Int) (bool, *big.Int, error) {
	return _Transactable.Contract.ValidateTimestamp(&_Transactable.CallOpts, _ts)
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_Transactable *TransactableCaller) ValidateTransaction(opts *bind.CallOpts, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Transactable.contract.Call(opts, out, "validateTransaction", _v, _r, _s, _dest, _value, _ts)
	return *ret0, err
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_Transactable *TransactableSession) ValidateTransaction(_v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	return _Transactable.Contract.ValidateTransaction(&_Transactable.CallOpts, _v, _r, _s, _dest, _value, _ts)
}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) constant returns(bool)
func (_Transactable *TransactableCallerSession) ValidateTransaction(_v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	return _Transactable.Contract.ValidateTransaction(&_Transactable.CallOpts, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_Transactable *TransactableTransactor) Execute(opts *bind.TransactOpts, _guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _Transactable.contract.Transact(opts, "execute", _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_Transactable *TransactableSession) Execute(_guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _Transactable.Contract.Execute(&_Transactable.TransactOpts, _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_Transactable *TransactableTransactorSession) Execute(_guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _Transactable.Contract.Execute(&_Transactable.TransactOpts, _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// UserSpaceABI is the input ABI used to generate the binding from.
const UserSpaceABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"createUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// UserSpaceFuncSigs maps the 4-byte function signature to its string representation.
var UserSpaceFuncSigs = map[string]string{
	"e7cf0c66": "createUserWallet(address)",
	"63e6ffdd": "userWallets(address)",
	"54fd4d50": "version()",
}

// UserSpaceBin is the compiled bytecode used for deploying new contracts.
var UserSpaceBin = "0x60806040527f55736572537061636532303139303530363135353330304d4c0000000000000060005534801561003457600080fd5b5061016a806100446000396000f3006080604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166354fd4d50811461005b57806363e6ffdd14610082578063e7cf0c66146100d9575b600080fd5b34801561006757600080fd5b50610070610107565b60408051918252519081900360200190f35b34801561008e57600080fd5b506100b073ffffffffffffffffffffffffffffffffffffffff6004351661010d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156100e557600080fd5b506100b073ffffffffffffffffffffffffffffffffffffffff60043516610138565b60005481565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152600160205260409020541690565b60008080fd00a165627a7a72305820019370c49915b9381804f72fec048a3f9915b3c11f048b0508233decb5ef9a2e0029"

// DeployUserSpace deploys a new Ethereum contract, binding an instance of UserSpace to it.
func DeployUserSpace(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UserSpace, error) {
	parsed, err := abi.JSON(strings.NewReader(UserSpaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(UserSpaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UserSpace{UserSpaceCaller: UserSpaceCaller{contract: contract}, UserSpaceTransactor: UserSpaceTransactor{contract: contract}, UserSpaceFilterer: UserSpaceFilterer{contract: contract}}, nil
}

// UserSpace is an auto generated Go binding around an Ethereum contract.
type UserSpace struct {
	UserSpaceCaller     // Read-only binding to the contract
	UserSpaceTransactor // Write-only binding to the contract
	UserSpaceFilterer   // Log filterer for contract events
}

// UserSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type UserSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UserSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UserSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserSpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UserSpaceSession struct {
	Contract     *UserSpace        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UserSpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UserSpaceCallerSession struct {
	Contract *UserSpaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// UserSpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UserSpaceTransactorSession struct {
	Contract     *UserSpaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// UserSpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type UserSpaceRaw struct {
	Contract *UserSpace // Generic contract binding to access the raw methods on
}

// UserSpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UserSpaceCallerRaw struct {
	Contract *UserSpaceCaller // Generic read-only contract binding to access the raw methods on
}

// UserSpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UserSpaceTransactorRaw struct {
	Contract *UserSpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUserSpace creates a new instance of UserSpace, bound to a specific deployed contract.
func NewUserSpace(address common.Address, backend bind.ContractBackend) (*UserSpace, error) {
	contract, err := bindUserSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UserSpace{UserSpaceCaller: UserSpaceCaller{contract: contract}, UserSpaceTransactor: UserSpaceTransactor{contract: contract}, UserSpaceFilterer: UserSpaceFilterer{contract: contract}}, nil
}

// NewUserSpaceCaller creates a new read-only instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceCaller(address common.Address, caller bind.ContractCaller) (*UserSpaceCaller, error) {
	contract, err := bindUserSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UserSpaceCaller{contract: contract}, nil
}

// NewUserSpaceTransactor creates a new write-only instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*UserSpaceTransactor, error) {
	contract, err := bindUserSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UserSpaceTransactor{contract: contract}, nil
}

// NewUserSpaceFilterer creates a new log filterer instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*UserSpaceFilterer, error) {
	contract, err := bindUserSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UserSpaceFilterer{contract: contract}, nil
}

// bindUserSpace binds a generic wrapper to an already deployed contract.
func bindUserSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UserSpaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserSpace *UserSpaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UserSpace.Contract.UserSpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserSpace *UserSpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserSpace.Contract.UserSpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserSpace *UserSpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserSpace.Contract.UserSpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserSpace *UserSpaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UserSpace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserSpace *UserSpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserSpace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserSpace *UserSpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserSpace.Contract.contract.Transact(opts, method, params...)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_UserSpace *UserSpaceCaller) UserWallets(opts *bind.CallOpts, _userAddr common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _UserSpace.contract.Call(opts, out, "userWallets", _userAddr)
	return *ret0, err
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_UserSpace *UserSpaceSession) UserWallets(_userAddr common.Address) (common.Address, error) {
	return _UserSpace.Contract.UserWallets(&_UserSpace.CallOpts, _userAddr)
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) constant returns(address)
func (_UserSpace *UserSpaceCallerSession) UserWallets(_userAddr common.Address) (common.Address, error) {
	return _UserSpace.Contract.UserWallets(&_UserSpace.CallOpts, _userAddr)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_UserSpace *UserSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _UserSpace.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_UserSpace *UserSpaceSession) Version() ([32]byte, error) {
	return _UserSpace.Contract.Version(&_UserSpace.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(bytes32)
func (_UserSpace *UserSpaceCallerSession) Version() ([32]byte, error) {
	return _UserSpace.Contract.Version(&_UserSpace.CallOpts)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_UserSpace *UserSpaceTransactor) CreateUserWallet(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _UserSpace.contract.Transact(opts, "createUserWallet", _user)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_UserSpace *UserSpaceSession) CreateUserWallet(_user common.Address) (*types.Transaction, error) {
	return _UserSpace.Contract.CreateUserWallet(&_UserSpace.TransactOpts, _user)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_UserSpace *UserSpaceTransactorSession) CreateUserWallet(_user common.Address) (*types.Transaction, error) {
	return _UserSpace.Contract.CreateUserWallet(&_UserSpace.TransactOpts, _user)
}

// StringsABI is the input ABI used to generate the binding from.
const StringsABI = "[]"

// StringsBin is the compiled bytecode used for deploying new contracts.
var StringsBin = "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820a124002dee821167d91b087f345e2812b06a01d368a68fdc0e47a572268faf530029"

// DeployStrings deploys a new Ethereum contract, binding an instance of Strings to it.
func DeployStrings(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Strings, error) {
	parsed, err := abi.JSON(strings.NewReader(StringsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StringsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Strings{StringsCaller: StringsCaller{contract: contract}, StringsTransactor: StringsTransactor{contract: contract}, StringsFilterer: StringsFilterer{contract: contract}}, nil
}

// Strings is an auto generated Go binding around an Ethereum contract.
type Strings struct {
	StringsCaller     // Read-only binding to the contract
	StringsTransactor // Write-only binding to the contract
	StringsFilterer   // Log filterer for contract events
}

// StringsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StringsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StringsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StringsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StringsSession struct {
	Contract     *Strings          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StringsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StringsCallerSession struct {
	Contract *StringsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StringsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StringsTransactorSession struct {
	Contract     *StringsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StringsRaw is an auto generated low-level Go binding around an Ethereum contract.
type StringsRaw struct {
	Contract *Strings // Generic contract binding to access the raw methods on
}

// StringsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StringsCallerRaw struct {
	Contract *StringsCaller // Generic read-only contract binding to access the raw methods on
}

// StringsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StringsTransactorRaw struct {
	Contract *StringsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStrings creates a new instance of Strings, bound to a specific deployed contract.
func NewStrings(address common.Address, backend bind.ContractBackend) (*Strings, error) {
	contract, err := bindStrings(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Strings{StringsCaller: StringsCaller{contract: contract}, StringsTransactor: StringsTransactor{contract: contract}, StringsFilterer: StringsFilterer{contract: contract}}, nil
}

// NewStringsCaller creates a new read-only instance of Strings, bound to a specific deployed contract.
func NewStringsCaller(address common.Address, caller bind.ContractCaller) (*StringsCaller, error) {
	contract, err := bindStrings(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StringsCaller{contract: contract}, nil
}

// NewStringsTransactor creates a new write-only instance of Strings, bound to a specific deployed contract.
func NewStringsTransactor(address common.Address, transactor bind.ContractTransactor) (*StringsTransactor, error) {
	contract, err := bindStrings(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StringsTransactor{contract: contract}, nil
}

// NewStringsFilterer creates a new log filterer instance of Strings, bound to a specific deployed contract.
func NewStringsFilterer(address common.Address, filterer bind.ContractFilterer) (*StringsFilterer, error) {
	contract, err := bindStrings(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StringsFilterer{contract: contract}, nil
}

// bindStrings binds a generic wrapper to an already deployed contract.
func bindStrings(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StringsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Strings *StringsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Strings.Contract.StringsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Strings *StringsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Strings.Contract.StringsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Strings *StringsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Strings.Contract.StringsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Strings *StringsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Strings.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Strings *StringsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Strings.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Strings *StringsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Strings.Contract.contract.Transact(opts, method, params...)
}
